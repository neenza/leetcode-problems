{
  "title": "Find Subsequence of Length K With the Largest Sum",
  "problem_id": "2204",
  "frontend_id": "2099",
  "difficulty": "Easy",
  "problem_slug": "find-subsequence-of-length-k-with-the-largest-sum",
  "topics": [
    "Array",
    "Hash Table",
    "Sorting",
    "Heap (Priority Queue)"
  ],
  "description": "You are given an integer array nums and an integer k. You want to find a subsequence of nums of length k that has the largest sum.\nReturn any such subsequence as an integer array of length k.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [2,1,3,3], k = 2\nOutput: [3,3]\nExplanation:\nThe subsequence has the largest sum of 3 + 3 = 6.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [-1,-2,3,4], k = 3\nOutput: [-1,3,4]\nExplanation: \nThe subsequence has the largest sum of -1 + 3 + 4 = 6.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [3,4,3,3], k = 2\nOutput: [3,4]\nExplanation:\nThe subsequence has the largest sum of 3 + 4 = 7. \nAnother possible subsequence is [4, 3].",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 1000",
    "-105Â <= nums[i] <= 105",
    "1 <= k <= nums.length"
  ],
  "follow_ups": [],
  "hints": [
    "From a greedy perspective, what k elements should you pick?",
    "Could you sort the array while maintaining the index?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> maxSubsequence(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] maxSubsequence(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxSubsequence(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxSubsequence(self, nums: List[int], k: int) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* maxSubsequence(int* nums, int numsSize, int k, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] MaxSubsequence(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar maxSubsequence = function(nums, k) {\n    \n};",
    "typescript": "function maxSubsequence(nums: number[], k: number): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function maxSubsequence($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxSubsequence(_ nums: [Int], _ k: Int) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxSubsequence(nums: IntArray, k: Int): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> maxSubsequence(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func maxSubsequence(nums []int, k int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer[]}\ndef max_subsequence(nums, k)\n    \nend",
    "scala": "object Solution {\n    def maxSubsequence(nums: Array[Int], k: Int): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_subsequence(nums: Vec<i32>, k: i32) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (max-subsequence nums k)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )",
    "erlang": "-spec max_subsequence(Nums :: [integer()], K :: integer()) -> [integer()].\nmax_subsequence(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_subsequence(nums :: [integer], k :: integer) :: [integer]\n  def max_subsequence(nums, k) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n\n---\n\n### Approach: Sorting\n\n#### Intuition\n\nThe subsequence of maximum length $K$ in the array $\\textit{nums}$ must consist of the largest $K$ numbers in $\\textit{nums}$. To ensure that we can still form the desired subsequence in the original order after identifying these values through sorting, we create an auxiliary array $\\textit{vals}$, where each element is a pair $(i, \\textit{nums}[i])$ containing the index $i$ and the corresponding value $\\textit{nums}[i]$.\n\nFirst, we sort the auxiliary array in descending order based on the values $\\textit{nums}[i]$. The first $K$ elements after sorting represent the largest $K$ numbers in $\\textit{nums}$, along with their original indices. Then, we sort these $K$ elements in ascending order based on their indices $i$. This ensures that their relative order in the original array is preserved.\n\nFinally, we extract the values from these sorted pairs to form the resulting array i.e., the subsequence of length $K$ with the maximum possible sum, maintaining the original order. We return this array as the answer.\n\n#### Implementation#### Complexity Analysis\n\nLet $n$ be the length of the array $\\textit{nums}$.\n\n- Time complexity: $O(n \\log n)$.\n  \n  This is the time complexity for sorting the auxiliary array.\n\n- Space complexity: $O(n)$.\n\n  This is the space overhead of the auxiliary array."
}
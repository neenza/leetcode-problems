{
  "title": "Maximum Units on a Truck",
  "problem_id": "1829",
  "frontend_id": "1710",
  "difficulty": "Easy",
  "problem_slug": "maximum-units-on-a-truck",
  "topics": [
    "Array",
    "Greedy",
    "Sorting"
  ],
  "description": "You are assigned to put some amount of boxes onto one truck. You are given a 2D array boxTypes, where boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]:\nYou are also given an integer truckSize, which is the maximum number of boxes that can be put on the truck. You can choose any boxes to put on the truck as long as the numberÂ of boxes does not exceed truckSize.\nReturn the maximum total number of units that can be put on the truck.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4\nOutput: 8\nExplanation: There are:\n- 1 box of the first type that contains 3 units.\n- 2 boxes of the second type that contain 2 units each.\n- 3 boxes of the third type that contain 1 unit each.\nYou can take all the boxes of the first and second types, and one box of the third type.\nThe total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10\nOutput: 91",
      "images": []
    }
  ],
  "constraints": [
    "1 <= boxTypes.length <= 1000",
    "1 <= numberOfBoxesi, numberOfUnitsPerBoxi <= 1000",
    "1 <= truckSize <= 106"
  ],
  "follow_ups": [],
  "hints": [
    "If we have space for at least one box, it's always optimal to put the box with the most units.",
    "Sort the box types with the number of units per box non-increasingly.",
    "Iterate on the box types and take from each type as many as you can."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maximumUnits(vector<vector<int>>& boxTypes, int truckSize) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maximumUnits(int[][] boxTypes, int truckSize) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maximumUnits(self, boxTypes, truckSize):\n        \"\"\"\n        :type boxTypes: List[List[int]]\n        :type truckSize: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maximumUnits(self, boxTypes: List[List[int]], truckSize: int) -> int:\n        ",
    "c": "int maximumUnits(int** boxTypes, int boxTypesSize, int* boxTypesColSize, int truckSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaximumUnits(int[][] boxTypes, int truckSize) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} boxTypes\n * @param {number} truckSize\n * @return {number}\n */\nvar maximumUnits = function(boxTypes, truckSize) {\n    \n};",
    "typescript": "function maximumUnits(boxTypes: number[][], truckSize: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $boxTypes\n     * @param Integer $truckSize\n     * @return Integer\n     */\n    function maximumUnits($boxTypes, $truckSize) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maximumUnits(_ boxTypes: [[Int]], _ truckSize: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maximumUnits(boxTypes: Array<IntArray>, truckSize: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maximumUnits(List<List<int>> boxTypes, int truckSize) {\n    \n  }\n}",
    "golang": "func maximumUnits(boxTypes [][]int, truckSize int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} box_types\n# @param {Integer} truck_size\n# @return {Integer}\ndef maximum_units(box_types, truck_size)\n    \nend",
    "scala": "object Solution {\n    def maximumUnits(boxTypes: Array[Array[Int]], truckSize: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn maximum_units(box_types: Vec<Vec<i32>>, truck_size: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (maximum-units boxTypes truckSize)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec maximum_units(BoxTypes :: [[integer()]], TruckSize :: integer()) -> integer().\nmaximum_units(BoxTypes, TruckSize) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec maximum_units(box_types :: [[integer]], truck_size :: integer) :: integer\n  def maximum_units(box_types, truck_size) do\n    \n  end\nend"
  }
}
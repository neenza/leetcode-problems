{
  "title": "Longest Substring Without Repeating Characters",
  "problem_id": "3",
  "frontend_id": "3",
  "difficulty": "Medium",
  "problem_slug": "longest-substring-without-repeating-characters",
  "topics": [
    "Hash Table",
    "String",
    "Sliding Window"
  ],
  "description": "Given a string s, find the length of the longest substring without duplicate characters.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.",
      "images": []
    }
  ],
  "constraints": [
    "0 <= s.length <= 5 * 104",
    "s consists of English letters, digits, symbols and spaces."
  ],
  "follow_ups": [],
  "hints": [
    "Generate all possible substrings & check for each substring if it's valid and keep updating maxLen accordingly."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        ",
    "c": "int lengthOfLongestSubstring(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public int LengthOfLongestSubstring(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    \n};",
    "typescript": "function lengthOfLongestSubstring(s: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function lengthOfLongestSubstring($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func lengthOfLongestSubstring(_ s: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun lengthOfLongestSubstring(s: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int lengthOfLongestSubstring(String s) {\n    \n  }\n}",
    "golang": "func lengthOfLongestSubstring(s string) int {\n    \n}",
    "ruby": "# @param {String} s\n# @return {Integer}\ndef length_of_longest_substring(s)\n    \nend",
    "scala": "object Solution {\n    def lengthOfLongestSubstring(s: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn length_of_longest_substring(s: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (length-of-longest-substring s)\n  (-> string? exact-integer?)\n  )",
    "erlang": "-spec length_of_longest_substring(S :: unicode:unicode_binary()) -> integer().\nlength_of_longest_substring(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec length_of_longest_substring(s :: String.t) :: integer\n  def length_of_longest_substring(s) do\n    \n  end\nend"
  }
}
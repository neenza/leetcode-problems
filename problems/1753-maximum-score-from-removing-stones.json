{
  "title": "Maximum Score From Removing Stones",
  "problem_id": "1879",
  "frontend_id": "1753",
  "difficulty": "Medium",
  "problem_slug": "maximum-score-from-removing-stones",
  "topics": [
    "Math",
    "Greedy",
    "Heap (Priority Queue)"
  ],
  "description": "You are playing a solitaire game with three piles of stones of sizes a​​​​​​, b,​​​​​​ and c​​​​​​ respectively. Each turn you choose two different non-empty piles, take one stone from each, and add 1 point to your score. The game stops when there are fewer than two non-empty piles (meaning there are no more available moves).\nGiven three integers a​​​​​, b,​​​​​ and c​​​​​, return the maximum score you can get.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: a = 2, b = 4, c = 6\nOutput: 6\nExplanation: The starting state is (2, 4, 6). One optimal set of moves is:\n- Take from 1st and 3rd piles, state is now (1, 4, 5)\n- Take from 1st and 3rd piles, state is now (0, 4, 4)\n- Take from 2nd and 3rd piles, state is now (0, 3, 3)\n- Take from 2nd and 3rd piles, state is now (0, 2, 2)\n- Take from 2nd and 3rd piles, state is now (0, 1, 1)\n- Take from 2nd and 3rd piles, state is now (0, 0, 0)\nThere are fewer than two non-empty piles, so the game ends. Total: 6 points.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: a = 4, b = 4, c = 6\nOutput: 7\nExplanation: The starting state is (4, 4, 6). One optimal set of moves is:\n- Take from 1st and 2nd piles, state is now (3, 3, 6)\n- Take from 1st and 3rd piles, state is now (2, 3, 5)\n- Take from 1st and 3rd piles, state is now (1, 3, 4)\n- Take from 1st and 3rd piles, state is now (0, 3, 3)\n- Take from 2nd and 3rd piles, state is now (0, 2, 2)\n- Take from 2nd and 3rd piles, state is now (0, 1, 1)\n- Take from 2nd and 3rd piles, state is now (0, 0, 0)\nThere are fewer than two non-empty piles, so the game ends. Total: 7 points.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: a = 1, b = 8, c = 8\nOutput: 8\nExplanation: One optimal set of moves is to take from the 2nd and 3rd piles for 8 turns until they are empty.\nAfter that, there are fewer than two non-empty piles, so the game ends.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= a, b, c <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "It's optimal to always remove one stone from the biggest 2 piles",
    "Note that the limits are small enough for simulation"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maximumScore(int a, int b, int c) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maximumScore(int a, int b, int c) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maximumScore(self, a, b, c):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :type c: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maximumScore(self, a: int, b: int, c: int) -> int:\n        ",
    "c": "int maximumScore(int a, int b, int c) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaximumScore(int a, int b, int c) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @return {number}\n */\nvar maximumScore = function(a, b, c) {\n    \n};",
    "typescript": "function maximumScore(a: number, b: number, c: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $a\n     * @param Integer $b\n     * @param Integer $c\n     * @return Integer\n     */\n    function maximumScore($a, $b, $c) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maximumScore(_ a: Int, _ b: Int, _ c: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maximumScore(a: Int, b: Int, c: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maximumScore(int a, int b, int c) {\n    \n  }\n}",
    "golang": "func maximumScore(a int, b int, c int) int {\n    \n}",
    "ruby": "# @param {Integer} a\n# @param {Integer} b\n# @param {Integer} c\n# @return {Integer}\ndef maximum_score(a, b, c)\n    \nend",
    "scala": "object Solution {\n    def maximumScore(a: Int, b: Int, c: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn maximum_score(a: i32, b: i32, c: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (maximum-score a b c)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec maximum_score(A :: integer(), B :: integer(), C :: integer()) -> integer().\nmaximum_score(A, B, C) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec maximum_score(a :: integer, b :: integer, c :: integer) :: integer\n  def maximum_score(a, b, c) do\n    \n  end\nend"
  }
}
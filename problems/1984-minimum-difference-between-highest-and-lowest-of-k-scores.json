{
  "title": "Minimum Difference Between Highest and Lowest of K Scores",
  "problem_id": "2112",
  "frontend_id": "1984",
  "difficulty": "Easy",
  "problem_slug": "minimum-difference-between-highest-and-lowest-of-k-scores",
  "topics": [
    "Array",
    "Sliding Window",
    "Sorting"
  ],
  "description": "You are given a 0-indexed integer array nums, where nums[i] represents the score of the ith student. You are also given an integer k.\nPick the scores of any k students from the array so that the difference between the highest and the lowest of the k scores is minimized.\nReturn the minimum possible difference.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [90], k = 1\nOutput: 0\nExplanation: There is one way to pick score(s) of one student:\n- [90]. The difference between the highest and lowest score is 90 - 90 = 0.\nThe minimum possible difference is 0.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [9,4,1,7], k = 2\nOutput: 2\nExplanation: There are six ways to pick score(s) of two students:\n- [9,4,1,7]. The difference between the highest and lowest score is 9 - 4 = 5.\n- [9,4,1,7]. The difference between the highest and lowest score is 9 - 1 = 8.\n- [9,4,1,7]. The difference between the highest and lowest score is 9 - 7 = 2.\n- [9,4,1,7]. The difference between the highest and lowest score is 4 - 1 = 3.\n- [9,4,1,7]. The difference between the highest and lowest score is 7 - 4 = 3.\n- [9,4,1,7]. The difference between the highest and lowest score is 7 - 1 = 6.\nThe minimum possible difference is 2.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= k <= nums.length <= 1000",
    "0 <= nums[i] <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "For the difference between the highest and lowest element to be minimized, the k chosen scores need to be as close to each other as possible.",
    "What if the array was sorted?",
    "After sorting the scores, any contiguous k scores are as close to each other as possible.",
    "Apply a sliding window solution to iterate over each contiguous k scores, and find the minimum of the differences of all windows."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimumDifference(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumDifference(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        ",
    "c": "int minimumDifference(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimumDifference(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minimumDifference = function(nums, k) {\n    \n};",
    "typescript": "function minimumDifference(nums: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumDifference($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumDifference(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumDifference(nums: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumDifference(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func minimumDifference(nums []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef minimum_difference(nums, k)\n    \nend",
    "scala": "object Solution {\n    def minimumDifference(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_difference(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-difference nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec minimum_difference(Nums :: [integer()], K :: integer()) -> integer().\nminimum_difference(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_difference(nums :: [integer], k :: integer) :: integer\n  def minimum_difference(nums, k) do\n    \n  end\nend"
  }
}
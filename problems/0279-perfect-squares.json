{
  "title": "Perfect Squares",
  "problem_id": "279",
  "frontend_id": "279",
  "difficulty": "Medium",
  "problem_slug": "perfect-squares",
  "topics": [
    "Math",
    "Dynamic Programming",
    "Breadth-First Search"
  ],
  "description": "Given an integer n, return the least number of perfect square numbers that sum to n.\nA perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 12\nOutput: 3\nExplanation: 12 = 4 + 4 + 4.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 13\nOutput: 2\nExplanation: 13 = 4 + 9.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 104"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int numSquares(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int numSquares(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numSquares(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numSquares(self, n: int) -> int:\n        ",
    "c": "int numSquares(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int NumSquares(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar numSquares = function(n) {\n    \n};",
    "typescript": "function numSquares(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function numSquares($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numSquares(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numSquares(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int numSquares(int n) {\n    \n  }\n}",
    "golang": "func numSquares(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef num_squares(n)\n    \nend",
    "scala": "object Solution {\n    def numSquares(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn num_squares(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (num-squares n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec num_squares(N :: integer()) -> integer().\nnum_squares(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec num_squares(n :: integer) :: integer\n  def num_squares(n) do\n    \n  end\nend"
  }
}
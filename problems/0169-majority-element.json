{
  "title": "Majority Element",
  "problem_id": "169",
  "frontend_id": "169",
  "difficulty": "Easy",
  "problem_slug": "majority-element",
  "topics": [
    "Array",
    "Hash Table",
    "Divide and Conquer",
    "Sorting",
    "Counting"
  ],
  "description": "Given an array nums of size n, return the majority element.\nThe majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [3,2,3]\nOutput: 3",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [2,2,1,1,1,2,2]\nOutput: 2",
      "images": []
    }
  ],
  "constraints": [
    "n == nums.length",
    "1 <= n <= 5 * 104",
    "-109 <= nums[i] <= 109"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int majorityElement(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int majorityElement(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        ",
    "c": "int majorityElement(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MajorityElement(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar majorityElement = function(nums) {\n    \n};",
    "typescript": "function majorityElement(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function majorityElement($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func majorityElement(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun majorityElement(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int majorityElement(List<int> nums) {\n    \n  }\n}",
    "golang": "func majorityElement(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef majority_element(nums)\n    \nend",
    "scala": "object Solution {\n    def majorityElement(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn majority_element(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (majority-element nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec majority_element(Nums :: [integer()]) -> integer().\nmajority_element(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec majority_element(nums :: [integer]) :: integer\n  def majority_element(nums) do\n    \n  end\nend"
  }
}
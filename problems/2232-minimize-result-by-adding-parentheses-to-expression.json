{
  "title": "Minimize Result by Adding Parentheses to Expression",
  "problem_id": "2328",
  "frontend_id": "2232",
  "difficulty": "Medium",
  "problem_slug": "minimize-result-by-adding-parentheses-to-expression",
  "topics": [
    "String",
    "Enumeration"
  ],
  "description": "You are given a 0-indexed string expression of the form \"<num1>+<num2>\" where <num1> and <num2> represent positive integers.\nAdd a pair of parentheses to expression such that after the addition of parentheses, expression is a valid mathematical expression and evaluates to the smallest possible value. The left parenthesis must be added to the left of '+' and the right parenthesis must be added to the right of '+'.\nReturn expression after adding a pair of parentheses such that expression evaluates to the smallest possible value. If there are multiple answers that yield the same result, return any of them.\nThe input has been generated such that the original value of expression, and the value of expression after adding any pair of parentheses that meets the requirements fits within a signed 32-bit integer.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: expression = \"247+38\"\nOutput: \"2(47+38)\"\nExplanation: The expression evaluates to 2 * (47 + 38) = 2 * 85 = 170.\nNote that \"2(4)7+38\" is invalid because the right parenthesis must be to the right of the '+'.\nIt can be shown that 170 is the smallest possible value.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: expression = \"12+34\"\nOutput: \"1(2+3)4\"\nExplanation: The expression evaluates to 1 * (2 + 3) * 4 = 1 * 5 * 4 = 20.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: expression = \"999+999\"\nOutput: \"(999+999)\"\nExplanation: The expression evaluates to 999 + 999 = 1998.",
      "images": []
    }
  ],
  "constraints": [
    "3 <= expression.length <= 10",
    "expression consists of digits from '1' to '9' and '+'.",
    "expression starts and ends with digits.",
    "expression contains exactly one '+'.",
    "The original value of expression, and the value of expression after adding any pair of parentheses that meets the requirements fits within a signed 32-bit integer."
  ],
  "follow_ups": [],
  "hints": [
    "The maximum length of expression is very low. We can try every possible spot to place the parentheses.",
    "Every possibility of expression is of the form a * (b + c) * d where a, b, c, d represent integers. Note the edge cases where a and/or d do not exist, in which case use 1 instead of them."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string minimizeResult(string expression) {\n        \n    }\n};",
    "java": "class Solution {\n    public String minimizeResult(String expression) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimizeResult(self, expression):\n        \"\"\"\n        :type expression: str\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimizeResult(self, expression: str) -> str:\n        ",
    "c": "char* minimizeResult(char* expression) {\n    \n}",
    "csharp": "public class Solution {\n    public string MinimizeResult(string expression) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} expression\n * @return {string}\n */\nvar minimizeResult = function(expression) {\n    \n};",
    "typescript": "function minimizeResult(expression: string): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $expression\n     * @return String\n     */\n    function minimizeResult($expression) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimizeResult(_ expression: String) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimizeResult(expression: String): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String minimizeResult(String expression) {\n    \n  }\n}",
    "golang": "func minimizeResult(expression string) string {\n    \n}",
    "ruby": "# @param {String} expression\n# @return {String}\ndef minimize_result(expression)\n    \nend",
    "scala": "object Solution {\n    def minimizeResult(expression: String): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimize_result(expression: String) -> String {\n        \n    }\n}",
    "racket": "(define/contract (minimize-result expression)\n  (-> string? string?)\n  )",
    "erlang": "-spec minimize_result(Expression :: unicode:unicode_binary()) -> unicode:unicode_binary().\nminimize_result(Expression) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimize_result(expression :: String.t) :: String.t\n  def minimize_result(expression) do\n    \n  end\nend"
  }
}
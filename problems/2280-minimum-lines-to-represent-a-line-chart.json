{
  "title": "Minimum Lines to Represent a Line Chart",
  "problem_id": "2367",
  "frontend_id": "2280",
  "difficulty": "Medium",
  "problem_slug": "minimum-lines-to-represent-a-line-chart",
  "topics": [
    "Array",
    "Math",
    "Geometry",
    "Sorting",
    "Number Theory"
  ],
  "description": "You are given a 2D integer array stockPrices where stockPrices[i] = [dayi, pricei] indicates the price of the stock on day dayi is pricei. A line chart is created from the array by plotting the points on an XY plane with the X-axis representing the day and the Y-axis representing the price and connecting adjacent points. One such example is shown below:\nReturn the minimum number of lines needed to represent the line chart.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: stockPrices = [[1,7],[2,6],[3,5],[4,4],[5,4],[6,3],[7,2],[8,1]]\nOutput: 3\nExplanation:\nThe diagram above represents the input, with the X-axis representing the day and Y-axis representing the price.\nThe following 3 lines can be drawn to represent the line chart:\n- Line 1 (in red) from (1,7) to (4,4) passing through (1,7), (2,6), (3,5), and (4,4).\n- Line 2 (in blue) from (4,4) to (5,4).\n- Line 3 (in green) from (5,4) to (8,1) passing through (5,4), (6,3), (7,2), and (8,1).\nIt can be shown that it is not possible to represent the line chart using less than 3 lines.",
      "images": [
        "https://assets.leetcode.com/uploads/2022/03/30/ex0.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: stockPrices = [[3,4],[1,2],[7,8],[2,3]]\nOutput: 1\nExplanation:\nAs shown in the diagram above, the line chart can be represented with a single line.",
      "images": [
        "https://assets.leetcode.com/uploads/2022/03/30/ex1.png"
      ]
    }
  ],
  "constraints": [
    "1 <= stockPrices.length <= 105",
    "stockPrices[i].length == 2",
    "1 <= dayi, pricei <= 109",
    "All dayi are distinct."
  ],
  "follow_ups": [],
  "hints": [
    "When will three adjacent points lie on the same line? How can we generalize this for all points?",
    "Will calculating the slope of lines connecting adjacent points help us find the answer?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimumLines(vector<vector<int>>& stockPrices) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimumLines(int[][] stockPrices) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumLines(self, stockPrices):\n        \"\"\"\n        :type stockPrices: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumLines(self, stockPrices: List[List[int]]) -> int:\n        ",
    "c": "int minimumLines(int** stockPrices, int stockPricesSize, int* stockPricesColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimumLines(int[][] stockPrices) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} stockPrices\n * @return {number}\n */\nvar minimumLines = function(stockPrices) {\n    \n};",
    "typescript": "function minimumLines(stockPrices: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $stockPrices\n     * @return Integer\n     */\n    function minimumLines($stockPrices) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumLines(_ stockPrices: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumLines(stockPrices: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumLines(List<List<int>> stockPrices) {\n    \n  }\n}",
    "golang": "func minimumLines(stockPrices [][]int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} stock_prices\n# @return {Integer}\ndef minimum_lines(stock_prices)\n    \nend",
    "scala": "object Solution {\n    def minimumLines(stockPrices: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_lines(stock_prices: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-lines stockPrices)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec minimum_lines(StockPrices :: [[integer()]]) -> integer().\nminimum_lines(StockPrices) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_lines(stock_prices :: [[integer]]) :: integer\n  def minimum_lines(stock_prices) do\n    \n  end\nend"
  }
}
{
  "title": "Convert the Temperature",
  "problem_id": "2556",
  "frontend_id": "2469",
  "difficulty": "Easy",
  "problem_slug": "convert-the-temperature",
  "topics": [
    "Math"
  ],
  "description": "You are given a non-negative floating point number rounded to two decimal places celsius, that denotes the temperature in Celsius.\nYou should convert Celsius into Kelvin and Fahrenheit and return it as an array ans = [kelvin, fahrenheit].\nReturn the array ans. Answers within 10-5 of the actual answer will be accepted.\nNote that:\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: celsius = 36.50\nOutput: [309.65000,97.70000]\nExplanation: Temperature at 36.50 Celsius converted in Kelvin is 309.65 and converted in Fahrenheit is 97.70.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: celsius = 122.11\nOutput: [395.26000,251.79800]\nExplanation: Temperature at 122.11 Celsius converted in Kelvin is 395.26 and converted in Fahrenheit is 251.798.",
      "images": []
    }
  ],
  "constraints": [
    "0 <= celsius <= 1000"
  ],
  "follow_ups": [],
  "hints": [
    "Implement formulas that are given in the statement."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<double> convertTemperature(double celsius) {\n        \n    }\n};",
    "java": "class Solution {\n    public double[] convertTemperature(double celsius) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def convertTemperature(self, celsius):\n        \"\"\"\n        :type celsius: float\n        :rtype: List[float]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def convertTemperature(self, celsius: float) -> List[float]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\ndouble* convertTemperature(double celsius, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public double[] ConvertTemperature(double celsius) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} celsius\n * @return {number[]}\n */\nvar convertTemperature = function(celsius) {\n    \n};",
    "typescript": "function convertTemperature(celsius: number): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Float $celsius\n     * @return Float[]\n     */\n    function convertTemperature($celsius) {\n        \n    }\n}",
    "swift": "class Solution {\n    func convertTemperature(_ celsius: Double) -> [Double] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun convertTemperature(celsius: Double): DoubleArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<double> convertTemperature(double celsius) {\n    \n  }\n}",
    "golang": "func convertTemperature(celsius float64) []float64 {\n    \n}",
    "ruby": "# @param {Float} celsius\n# @return {Float[]}\ndef convert_temperature(celsius)\n    \nend",
    "scala": "object Solution {\n    def convertTemperature(celsius: Double): Array[Double] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn convert_temperature(celsius: f64) -> Vec<f64> {\n        \n    }\n}",
    "racket": "(define/contract (convert-temperature celsius)\n  (-> flonum? (listof flonum?))\n  )",
    "erlang": "-spec convert_temperature(Celsius :: float()) -> [float()].\nconvert_temperature(Celsius) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec convert_temperature(celsius :: float) :: [float]\n  def convert_temperature(celsius) do\n    \n  end\nend"
  }
}
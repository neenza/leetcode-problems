{
  "title": "Find a Peak Element II",
  "problem_id": "2047",
  "frontend_id": "1901",
  "difficulty": "Medium",
  "problem_slug": "find-a-peak-element-ii",
  "topics": [
    "Array",
    "Binary Search",
    "Matrix"
  ],
  "description": "A peak element in a 2D grid is an element that is strictly greater than all of its adjacent neighbors to the left, right, top, and bottom.\nGiven a 0-indexed m x n matrix mat where no two adjacent cells are equal, find any peak element mat[i][j] and return the length 2 array [i,j].\nYou may assume that the entire matrix is surrounded by an outer perimeter with the value -1 in each cell.\nYou must write an algorithm that runs in O(m log(n)) or O(n log(m)) time.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: mat = [[1,4],[3,2]]\nOutput: [0,1]\nExplanation: Both 3 and 4 are peak elements so [1,0] and [0,1] are both acceptable answers.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/06/08/1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: mat = [[10,20,15],[21,30,14],[7,16,32]]\nOutput: [1,1]\nExplanation: Both 30 and 32 are peak elements so [1,1] and [2,2] are both acceptable answers.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/06/07/3.png"
      ]
    }
  ],
  "constraints": [
    "m == mat.length",
    "n == mat[i].length",
    "1 <= m, n <= 500",
    "1 <= mat[i][j] <= 105",
    "No two adjacent cells are equal."
  ],
  "follow_ups": [],
  "hints": [
    "Let's assume that the width of the array is bigger than the height, otherwise, we will split in another direction.",
    "Split the array into three parts: central column left side and right side.",
    "Go through the central column and two neighbor columns and look for maximum.",
    "If it's in the central column - this is our peak.",
    "If it's on the left side, run this algorithm on subarray left_side + central_column.",
    "If it's on the right side, run this algorithm on subarray right_side + central_column"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> findPeakGrid(vector<vector<int>>& mat) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] findPeakGrid(int[][] mat) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findPeakGrid(self, mat):\n        \"\"\"\n        :type mat: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findPeakGrid(self, mat: List[List[int]]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findPeakGrid(int** mat, int matSize, int* matColSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] FindPeakGrid(int[][] mat) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} mat\n * @return {number[]}\n */\nvar findPeakGrid = function(mat) {\n    \n};",
    "typescript": "function findPeakGrid(mat: number[][]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $mat\n     * @return Integer[]\n     */\n    function findPeakGrid($mat) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findPeakGrid(_ mat: [[Int]]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findPeakGrid(mat: Array<IntArray>): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> findPeakGrid(List<List<int>> mat) {\n    \n  }\n}",
    "golang": "func findPeakGrid(mat [][]int) []int {\n    \n}",
    "ruby": "# @param {Integer[][]} mat\n# @return {Integer[]}\ndef find_peak_grid(mat)\n    \nend",
    "scala": "object Solution {\n    def findPeakGrid(mat: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_peak_grid(mat: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (find-peak-grid mat)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n  )",
    "erlang": "-spec find_peak_grid(Mat :: [[integer()]]) -> [integer()].\nfind_peak_grid(Mat) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_peak_grid(mat :: [[integer]]) :: [integer]\n  def find_peak_grid(mat) do\n    \n  end\nend"
  }
}
{
  "title": "Check If a String Can Break Another String",
  "problem_id": "1530",
  "frontend_id": "1433",
  "difficulty": "Medium",
  "problem_slug": "check-if-a-string-can-break-another-string",
  "topics": [
    "String",
    "Greedy",
    "Sorting"
  ],
  "description": "Given two strings: s1 and s2 with the same size, check if some permutation of string s1 can break some permutation of string s2 or vice-versa. In other words s2 can break s1 or vice-versa.\nA string x can break string y (both of size n) if x[i] >= y[i] (in alphabetical order) for all i between 0 and n-1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s1 = \"abc\", s2 = \"xya\"\nOutput: true\nExplanation: \"ayx\" is a permutation of s2=\"xya\" which can break to string \"abc\" which is a permutation of s1=\"abc\".",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s1 = \"abe\", s2 = \"acd\"\nOutput: false \nExplanation: All permutations for s1=\"abe\" are: \"abe\", \"aeb\", \"bae\", \"bea\", \"eab\" and \"eba\" and all permutation for s2=\"acd\" are: \"acd\", \"adc\", \"cad\", \"cda\", \"dac\" and \"dca\". However, there is not any permutation from s1 which can break some permutation from s2 and vice-versa.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s1 = \"leetcodee\", s2 = \"interview\"\nOutput: true",
      "images": []
    }
  ],
  "constraints": [
    "s1.length == n",
    "s2.length == n",
    "1 <= n <= 10^5",
    "All strings consist of lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [
    "Sort both strings and then check if one of them can break the other."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool checkIfCanBreak(string s1, string s2) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean checkIfCanBreak(String s1, String s2) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def checkIfCanBreak(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def checkIfCanBreak(self, s1: str, s2: str) -> bool:\n        ",
    "c": "bool checkIfCanBreak(char* s1, char* s2) {\n    \n}",
    "csharp": "public class Solution {\n    public bool CheckIfCanBreak(string s1, string s2) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s1\n * @param {string} s2\n * @return {boolean}\n */\nvar checkIfCanBreak = function(s1, s2) {\n    \n};",
    "typescript": "function checkIfCanBreak(s1: string, s2: string): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @return Boolean\n     */\n    function checkIfCanBreak($s1, $s2) {\n        \n    }\n}",
    "swift": "class Solution {\n    func checkIfCanBreak(_ s1: String, _ s2: String) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun checkIfCanBreak(s1: String, s2: String): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool checkIfCanBreak(String s1, String s2) {\n    \n  }\n}",
    "golang": "func checkIfCanBreak(s1 string, s2 string) bool {\n    \n}",
    "ruby": "# @param {String} s1\n# @param {String} s2\n# @return {Boolean}\ndef check_if_can_break(s1, s2)\n    \nend",
    "scala": "object Solution {\n    def checkIfCanBreak(s1: String, s2: String): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn check_if_can_break(s1: String, s2: String) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (check-if-can-break s1 s2)\n  (-> string? string? boolean?)\n  )",
    "erlang": "-spec check_if_can_break(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary()) -> boolean().\ncheck_if_can_break(S1, S2) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec check_if_can_break(s1 :: String.t, s2 :: String.t) :: boolean\n  def check_if_can_break(s1, s2) do\n    \n  end\nend"
  }
}
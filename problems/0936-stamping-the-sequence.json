{
  "title": "Stamping The Sequence",
  "problem_id": "973",
  "frontend_id": "936",
  "difficulty": "Hard",
  "problem_slug": "stamping-the-sequence",
  "topics": [
    "String",
    "Stack",
    "Greedy",
    "Queue"
  ],
  "description": "You are given two strings stamp and target. Initially, there is a string s of length target.length with all s[i] == '?'.\nIn one turn, you can place stamp over s and replace every letter in the s with the corresponding letter from stamp.\nWe want to convert s to target using at most 10 * target.length turns.\nReturn an array of the index of the left-most letter being stamped at each turn. If we cannot obtain target from s within 10 * target.length turns, return an empty array.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: stamp = \"abc\", target = \"ababc\"\nOutput: [0,2]\nExplanation: Initially s = \"?????\".\n- Place stamp at index 0 to get \"abc??\".\n- Place stamp at index 2 to get \"ababc\".\n[1,0,2] would also be accepted as an answer, as well as some other answers.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: stamp = \"abca\", target = \"aabcaca\"\nOutput: [3,0,1]\nExplanation: Initially s = \"???????\".\n- Place stamp at index 3 to get \"???abca\".\n- Place stamp at index 0 to get \"abcabca\".\n- Place stamp at index 1 to get \"aabcaca\".",
      "images": []
    }
  ],
  "constraints": [
    "1 <= stamp.length <= target.length <= 1000",
    "stamp and target consist of lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> movesToStamp(string stamp, string target) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] movesToStamp(String stamp, String target) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def movesToStamp(self, stamp, target):\n        \"\"\"\n        :type stamp: str\n        :type target: str\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def movesToStamp(self, stamp: str, target: str) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* movesToStamp(char* stamp, char* target, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] MovesToStamp(string stamp, string target) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} stamp\n * @param {string} target\n * @return {number[]}\n */\nvar movesToStamp = function(stamp, target) {\n    \n};",
    "typescript": "function movesToStamp(stamp: string, target: string): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $stamp\n     * @param String $target\n     * @return Integer[]\n     */\n    function movesToStamp($stamp, $target) {\n        \n    }\n}",
    "swift": "class Solution {\n    func movesToStamp(_ stamp: String, _ target: String) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun movesToStamp(stamp: String, target: String): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> movesToStamp(String stamp, String target) {\n    \n  }\n}",
    "golang": "func movesToStamp(stamp string, target string) []int {\n    \n}",
    "ruby": "# @param {String} stamp\n# @param {String} target\n# @return {Integer[]}\ndef moves_to_stamp(stamp, target)\n    \nend",
    "scala": "object Solution {\n    def movesToStamp(stamp: String, target: String): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn moves_to_stamp(stamp: String, target: String) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (moves-to-stamp stamp target)\n  (-> string? string? (listof exact-integer?))\n  )",
    "erlang": "-spec moves_to_stamp(Stamp :: unicode:unicode_binary(), Target :: unicode:unicode_binary()) -> [integer()].\nmoves_to_stamp(Stamp, Target) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec moves_to_stamp(stamp :: String.t, target :: String.t) :: [integer]\n  def moves_to_stamp(stamp, target) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n---\n### Approach 1: Work Backwards\n\n**Intuition**\n\nImagine we stamped the sequence with moves $$m_1, m_2, \\cdots$$.  Now, from the final position `target`, we will make those moves in reverse order.  \n\nLet's call the `i`th *window*, a subarray of `target` of length `stamp.length` that starts at `i`.  Each move at position `i` is possible if the `i`th window matches the stamp.  After, every character in the window becomes a wildcard that can match any character in the stamp.\n\nFor example, say we have `stamp = \"abca\"` and `target = \"aabcaca\"`.  Working backwards, we will reverse stamp at window `1` to get `\"a????ca\"`, then reverse stamp at window `3` to get `\"a??????\"`, and finally reverse stamp at position `0` to get `\"???????\"`.\n\n**Algorithm**\n\nLet's keep track of every window.  We want to know how many cells initially match the stamp (our \"`made`\" list), and which ones don't (our `\"todo\"` list).  Any windows that are ready (ie. have no todo list), get enqueued.\n\nSpecifically, we enqueue the positions of each character.  (To save time, we enqueue by character, not by window.)  This represents that the character is ready to turn into a `\"?\"` in our working `target` string.\n\nNow, how to process characters in our queue?  For each character, let's look at all the windows that intersect it, and update their todo lists.  If any todo lists become empty in this manner `(window.todo is empty)`, then we enqueue the characters in `window.made` that we haven't processed yet.**Complexity Analysis**\n\n* Time Complexity:  $$O(N(N-M))$$, where $$M, N$$ are the lengths of `stamp`, `target`.\n\n* Space Complexity:  $$O(N(N-M))$$."
}
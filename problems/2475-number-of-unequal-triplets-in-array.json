{
  "title": "Number of Unequal Triplets in Array",
  "problem_id": "2566",
  "frontend_id": "2475",
  "difficulty": "Easy",
  "problem_slug": "number-of-unequal-triplets-in-array",
  "topics": [
    "Array",
    "Hash Table",
    "Sorting"
  ],
  "description": "You are given a 0-indexed array of positive integers nums. Find the number of triplets (i, j, k) that meet the following conditions:\nReturn the number of triplets that meet the conditions.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [4,4,2,4,3]\nOutput: 3\nExplanation: The following triplets meet the conditions:\n- (0, 2, 4) because 4 != 2 != 3\n- (1, 2, 4) because 4 != 2 != 3\n- (2, 3, 4) because 2 != 4 != 3\nSince there are 3 triplets, we return 3.\nNote that (2, 0, 4) is not a valid triplet because 2 > 0.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,1,1,1,1]\nOutput: 0\nExplanation: No triplets meet the conditions so we return 0.",
      "images": []
    }
  ],
  "constraints": [
    "3 <= nums.length <= 100",
    "1 <= nums[i] <= 1000"
  ],
  "follow_ups": [],
  "hints": [
    "The constraints are very small. Can we try every triplet?",
    "Yes, we can. Use three loops to iterate through all the possible triplets, ensuring the condition i < j < k holds."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int unequalTriplets(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int unequalTriplets(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def unequalTriplets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def unequalTriplets(self, nums: List[int]) -> int:\n        ",
    "c": "int unequalTriplets(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int UnequalTriplets(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar unequalTriplets = function(nums) {\n    \n};",
    "typescript": "function unequalTriplets(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function unequalTriplets($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func unequalTriplets(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun unequalTriplets(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int unequalTriplets(List<int> nums) {\n    \n  }\n}",
    "golang": "func unequalTriplets(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef unequal_triplets(nums)\n    \nend",
    "scala": "object Solution {\n    def unequalTriplets(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn unequal_triplets(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (unequal-triplets nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec unequal_triplets(Nums :: [integer()]) -> integer().\nunequal_triplets(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec unequal_triplets(nums :: [integer]) :: integer\n  def unequal_triplets(nums) do\n    \n  end\nend"
  }
}
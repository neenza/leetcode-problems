{
  "title": "Count Paths That Can Form a Palindrome in a Tree",
  "problem_id": "2905",
  "frontend_id": "2791",
  "difficulty": "Hard",
  "problem_slug": "count-paths-that-can-form-a-palindrome-in-a-tree",
  "topics": [
    "Dynamic Programming",
    "Bit Manipulation",
    "Tree",
    "Depth-First Search",
    "Bitmask"
  ],
  "description": "You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.\nYou are also given a string s of length n, where s[i] is the character assigned to the edge between i and parent[i]. s[0] can be ignored.\nReturn the number of pairs of nodes (u, v) such that u < v and the characters assigned to edges on the path from u to v can be rearranged to form a palindrome.\nA string is a palindrome when it reads the same backwards as forwards.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: parent = [-1,0,0,1,1,2], s = \"acaabc\"\nOutput: 8\nExplanation: The valid pairs are:\n- All the pairs (0,1), (0,2), (1,3), (1,4) and (2,5) result in one character which is always a palindrome.\n- The pair (2,3) result in the string \"aca\" which is a palindrome.\n- The pair (1,5) result in the string \"cac\" which is a palindrome.\n- The pair (3,5) result in the string \"acac\" which can be rearranged into the palindrome \"acca\".",
      "images": [
        "https://assets.leetcode.com/uploads/2023/07/15/treedrawio-8drawio.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: parent = [-1,0,0,0,0], s = \"aaaaa\"\nOutput: 10\nExplanation: Any pair of nodes (u,v) where u < v is valid.",
      "images": [
        "https://assets.leetcode.com/uploads/2023/07/15/treedrawio-8drawio.png"
      ]
    }
  ],
  "constraints": [
    "n == parent.length == s.length",
    "1 <= n <= 105",
    "0 <= parent[i] <= n - 1 for all i >= 1",
    "parent[0] == -1",
    "parent represents a valid tree.",
    "s consists of only lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [
    "A string is a palindrome if the number of characters with an odd frequency is either 0 or 1.",
    "Let mask[v] be a mask of 26 bits that represent the parity of each character in the alphabet on the path from node 0 to v. How can you use this array to solve the problem?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long countPalindromePaths(vector<int>& parent, string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public long countPalindromePaths(List<Integer> parent, String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countPalindromePaths(self, parent, s):\n        \"\"\"\n        :type parent: List[int]\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countPalindromePaths(self, parent: List[int], s: str) -> int:\n        ",
    "c": "long long countPalindromePaths(int* parent, int parentSize, char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public long CountPalindromePaths(IList<int> parent, string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} parent\n * @param {string} s\n * @return {number}\n */\nvar countPalindromePaths = function(parent, s) {\n    \n};",
    "typescript": "function countPalindromePaths(parent: number[], s: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $parent\n     * @param String $s\n     * @return Integer\n     */\n    function countPalindromePaths($parent, $s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countPalindromePaths(_ parent: [Int], _ s: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countPalindromePaths(parent: List<Int>, s: String): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int countPalindromePaths(List<int> parent, String s) {\n    \n  }\n}",
    "golang": "func countPalindromePaths(parent []int, s string) int64 {\n    \n}",
    "ruby": "# @param {Integer[]} parent\n# @param {String} s\n# @return {Integer}\ndef count_palindrome_paths(parent, s)\n    \nend",
    "scala": "object Solution {\n    def countPalindromePaths(parent: List[Int], s: String): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_palindrome_paths(parent: Vec<i32>, s: String) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (count-palindrome-paths parent s)\n  (-> (listof exact-integer?) string? exact-integer?)\n  )",
    "erlang": "-spec count_palindrome_paths(Parent :: [integer()], S :: unicode:unicode_binary()) -> integer().\ncount_palindrome_paths(Parent, S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_palindrome_paths(parent :: [integer], s :: String.t) :: integer\n  def count_palindrome_paths(parent, s) do\n    \n  end\nend"
  }
}
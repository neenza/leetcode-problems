{
  "title": "Fancy Sequence",
  "problem_id": "1728",
  "frontend_id": "1622",
  "difficulty": "Hard",
  "problem_slug": "fancy-sequence",
  "topics": [
    "Math",
    "Design",
    "Segment Tree"
  ],
  "description": "Write an API that generates fancy sequences using the append, addAll, and multAll operations.\nImplement the Fancy class:\nExample 1:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input\n[\"Fancy\", \"append\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"getIndex\", \"getIndex\"]\n[[], [2], [3], [7], [2], [0], [3], [10], [2], [0], [1], [2]]\nOutput\n[null, null, null, null, null, 10, null, null, null, 26, 34, 20]\n\nExplanation\nFancy fancy = new Fancy();\nfancy.append(2);   // fancy sequence: [2]\nfancy.addAll(3);   // fancy sequence: [2+3] -> [5]\nfancy.append(7);   // fancy sequence: [5, 7]\nfancy.multAll(2);  // fancy sequence: [5*2, 7*2] -> [10, 14]\nfancy.getIndex(0); // return 10\nfancy.addAll(3);   // fancy sequence: [10+3, 14+3] -> [13, 17]\nfancy.append(10);  // fancy sequence: [13, 17, 10]\nfancy.multAll(2);  // fancy sequence: [13*2, 17*2, 10*2] -> [26, 34, 20]\nfancy.getIndex(0); // return 26\nfancy.getIndex(1); // return 34\nfancy.getIndex(2); // return 20",
      "images": []
    }
  ],
  "constraints": [
    "1 <= val, inc, m <= 100",
    "0 <= idx <= 105",
    "At most 105 calls total will be made to append, addAll, multAll, and getIndex."
  ],
  "follow_ups": [],
  "hints": [
    "Use two arrays to save the cumulative multipliers at each time point and cumulative sums adjusted by the current multiplier.",
    "The function getIndex(idx) ask to the current value modulo 10^9+7. Use modular inverse and both arrays to calculate this value."
  ],
  "code_snippets": {
    "cpp": "class Fancy {\npublic:\n    Fancy() {\n        \n    }\n    \n    void append(int val) {\n        \n    }\n    \n    void addAll(int inc) {\n        \n    }\n    \n    void multAll(int m) {\n        \n    }\n    \n    int getIndex(int idx) {\n        \n    }\n};\n\n/**\n * Your Fancy object will be instantiated and called as such:\n * Fancy* obj = new Fancy();\n * obj->append(val);\n * obj->addAll(inc);\n * obj->multAll(m);\n * int param_4 = obj->getIndex(idx);\n */",
    "java": "class Fancy {\n\n    public Fancy() {\n        \n    }\n    \n    public void append(int val) {\n        \n    }\n    \n    public void addAll(int inc) {\n        \n    }\n    \n    public void multAll(int m) {\n        \n    }\n    \n    public int getIndex(int idx) {\n        \n    }\n}\n\n/**\n * Your Fancy object will be instantiated and called as such:\n * Fancy obj = new Fancy();\n * obj.append(val);\n * obj.addAll(inc);\n * obj.multAll(m);\n * int param_4 = obj.getIndex(idx);\n */",
    "python": "class Fancy(object):\n\n    def __init__(self):\n        \n\n    def append(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n    def addAll(self, inc):\n        \"\"\"\n        :type inc: int\n        :rtype: None\n        \"\"\"\n        \n\n    def multAll(self, m):\n        \"\"\"\n        :type m: int\n        :rtype: None\n        \"\"\"\n        \n\n    def getIndex(self, idx):\n        \"\"\"\n        :type idx: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your Fancy object will be instantiated and called as such:\n# obj = Fancy()\n# obj.append(val)\n# obj.addAll(inc)\n# obj.multAll(m)\n# param_4 = obj.getIndex(idx)",
    "python3": "class Fancy:\n\n    def __init__(self):\n        \n\n    def append(self, val: int) -> None:\n        \n\n    def addAll(self, inc: int) -> None:\n        \n\n    def multAll(self, m: int) -> None:\n        \n\n    def getIndex(self, idx: int) -> int:\n        \n\n\n# Your Fancy object will be instantiated and called as such:\n# obj = Fancy()\n# obj.append(val)\n# obj.addAll(inc)\n# obj.multAll(m)\n# param_4 = obj.getIndex(idx)",
    "c": "\n\n\ntypedef struct {\n    \n} Fancy;\n\n\nFancy* fancyCreate() {\n    \n}\n\nvoid fancyAppend(Fancy* obj, int val) {\n    \n}\n\nvoid fancyAddAll(Fancy* obj, int inc) {\n    \n}\n\nvoid fancyMultAll(Fancy* obj, int m) {\n    \n}\n\nint fancyGetIndex(Fancy* obj, int idx) {\n    \n}\n\nvoid fancyFree(Fancy* obj) {\n    \n}\n\n/**\n * Your Fancy struct will be instantiated and called as such:\n * Fancy* obj = fancyCreate();\n * fancyAppend(obj, val);\n \n * fancyAddAll(obj, inc);\n \n * fancyMultAll(obj, m);\n \n * int param_4 = fancyGetIndex(obj, idx);\n \n * fancyFree(obj);\n*/",
    "csharp": "public class Fancy {\n\n    public Fancy() {\n        \n    }\n    \n    public void Append(int val) {\n        \n    }\n    \n    public void AddAll(int inc) {\n        \n    }\n    \n    public void MultAll(int m) {\n        \n    }\n    \n    public int GetIndex(int idx) {\n        \n    }\n}\n\n/**\n * Your Fancy object will be instantiated and called as such:\n * Fancy obj = new Fancy();\n * obj.Append(val);\n * obj.AddAll(inc);\n * obj.MultAll(m);\n * int param_4 = obj.GetIndex(idx);\n */",
    "javascript": "\nvar Fancy = function() {\n    \n};\n\n/** \n * @param {number} val\n * @return {void}\n */\nFancy.prototype.append = function(val) {\n    \n};\n\n/** \n * @param {number} inc\n * @return {void}\n */\nFancy.prototype.addAll = function(inc) {\n    \n};\n\n/** \n * @param {number} m\n * @return {void}\n */\nFancy.prototype.multAll = function(m) {\n    \n};\n\n/** \n * @param {number} idx\n * @return {number}\n */\nFancy.prototype.getIndex = function(idx) {\n    \n};\n\n/** \n * Your Fancy object will be instantiated and called as such:\n * var obj = new Fancy()\n * obj.append(val)\n * obj.addAll(inc)\n * obj.multAll(m)\n * var param_4 = obj.getIndex(idx)\n */",
    "typescript": "class Fancy {\n    constructor() {\n        \n    }\n\n    append(val: number): void {\n        \n    }\n\n    addAll(inc: number): void {\n        \n    }\n\n    multAll(m: number): void {\n        \n    }\n\n    getIndex(idx: number): number {\n        \n    }\n}\n\n/**\n * Your Fancy object will be instantiated and called as such:\n * var obj = new Fancy()\n * obj.append(val)\n * obj.addAll(inc)\n * obj.multAll(m)\n * var param_4 = obj.getIndex(idx)\n */",
    "php": "class Fancy {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $val\n     * @return NULL\n     */\n    function append($val) {\n        \n    }\n  \n    /**\n     * @param Integer $inc\n     * @return NULL\n     */\n    function addAll($inc) {\n        \n    }\n  \n    /**\n     * @param Integer $m\n     * @return NULL\n     */\n    function multAll($m) {\n        \n    }\n  \n    /**\n     * @param Integer $idx\n     * @return Integer\n     */\n    function getIndex($idx) {\n        \n    }\n}\n\n/**\n * Your Fancy object will be instantiated and called as such:\n * $obj = Fancy();\n * $obj->append($val);\n * $obj->addAll($inc);\n * $obj->multAll($m);\n * $ret_4 = $obj->getIndex($idx);\n */",
    "swift": "\nclass Fancy {\n\n    init() {\n        \n    }\n    \n    func append(_ val: Int) {\n        \n    }\n    \n    func addAll(_ inc: Int) {\n        \n    }\n    \n    func multAll(_ m: Int) {\n        \n    }\n    \n    func getIndex(_ idx: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your Fancy object will be instantiated and called as such:\n * let obj = Fancy()\n * obj.append(val)\n * obj.addAll(inc)\n * obj.multAll(m)\n * let ret_4: Int = obj.getIndex(idx)\n */",
    "kotlin": "class Fancy() {\n\n    fun append(`val`: Int) {\n        \n    }\n\n    fun addAll(inc: Int) {\n        \n    }\n\n    fun multAll(m: Int) {\n        \n    }\n\n    fun getIndex(idx: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your Fancy object will be instantiated and called as such:\n * var obj = Fancy()\n * obj.append(`val`)\n * obj.addAll(inc)\n * obj.multAll(m)\n * var param_4 = obj.getIndex(idx)\n */",
    "dart": "class Fancy {\n\n  Fancy() {\n    \n  }\n  \n  void append(int val) {\n    \n  }\n  \n  void addAll(int inc) {\n    \n  }\n  \n  void multAll(int m) {\n    \n  }\n  \n  int getIndex(int idx) {\n    \n  }\n}\n\n/**\n * Your Fancy object will be instantiated and called as such:\n * Fancy obj = Fancy();\n * obj.append(val);\n * obj.addAll(inc);\n * obj.multAll(m);\n * int param4 = obj.getIndex(idx);\n */",
    "golang": "type Fancy struct {\n    \n}\n\n\nfunc Constructor() Fancy {\n    \n}\n\n\nfunc (this *Fancy) Append(val int)  {\n    \n}\n\n\nfunc (this *Fancy) AddAll(inc int)  {\n    \n}\n\n\nfunc (this *Fancy) MultAll(m int)  {\n    \n}\n\n\nfunc (this *Fancy) GetIndex(idx int) int {\n    \n}\n\n\n/**\n * Your Fancy object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Append(val);\n * obj.AddAll(inc);\n * obj.MultAll(m);\n * param_4 := obj.GetIndex(idx);\n */",
    "ruby": "class Fancy\n    def initialize()\n        \n    end\n\n\n=begin\n    :type val: Integer\n    :rtype: Void\n=end\n    def append(val)\n        \n    end\n\n\n=begin\n    :type inc: Integer\n    :rtype: Void\n=end\n    def add_all(inc)\n        \n    end\n\n\n=begin\n    :type m: Integer\n    :rtype: Void\n=end\n    def mult_all(m)\n        \n    end\n\n\n=begin\n    :type idx: Integer\n    :rtype: Integer\n=end\n    def get_index(idx)\n        \n    end\n\n\nend\n\n# Your Fancy object will be instantiated and called as such:\n# obj = Fancy.new()\n# obj.append(val)\n# obj.add_all(inc)\n# obj.mult_all(m)\n# param_4 = obj.get_index(idx)",
    "scala": "class Fancy() {\n\n    def append(`val`: Int): Unit = {\n        \n    }\n\n    def addAll(inc: Int): Unit = {\n        \n    }\n\n    def multAll(m: Int): Unit = {\n        \n    }\n\n    def getIndex(idx: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your Fancy object will be instantiated and called as such:\n * val obj = new Fancy()\n * obj.append(`val`)\n * obj.addAll(inc)\n * obj.multAll(m)\n * val param_4 = obj.getIndex(idx)\n */",
    "rust": "struct Fancy {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Fancy {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn append(&self, val: i32) {\n        \n    }\n    \n    fn add_all(&self, inc: i32) {\n        \n    }\n    \n    fn mult_all(&self, m: i32) {\n        \n    }\n    \n    fn get_index(&self, idx: i32) -> i32 {\n        \n    }\n}\n\n/**\n * Your Fancy object will be instantiated and called as such:\n * let obj = Fancy::new();\n * obj.append(val);\n * obj.add_all(inc);\n * obj.mult_all(m);\n * let ret_4: i32 = obj.get_index(idx);\n */",
    "racket": "(define fancy%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; append : exact-integer? -> void?\n    (define/public (append val)\n      )\n    ; add-all : exact-integer? -> void?\n    (define/public (add-all inc)\n      )\n    ; mult-all : exact-integer? -> void?\n    (define/public (mult-all m)\n      )\n    ; get-index : exact-integer? -> exact-integer?\n    (define/public (get-index idx)\n      )))\n\n;; Your fancy% object will be instantiated and called as such:\n;; (define obj (new fancy%))\n;; (send obj append val)\n;; (send obj add-all inc)\n;; (send obj mult-all m)\n;; (define param_4 (send obj get-index idx))",
    "erlang": "-spec fancy_init_() -> any().\nfancy_init_() ->\n  .\n\n-spec fancy_append(Val :: integer()) -> any().\nfancy_append(Val) ->\n  .\n\n-spec fancy_add_all(Inc :: integer()) -> any().\nfancy_add_all(Inc) ->\n  .\n\n-spec fancy_mult_all(M :: integer()) -> any().\nfancy_mult_all(M) ->\n  .\n\n-spec fancy_get_index(Idx :: integer()) -> integer().\nfancy_get_index(Idx) ->\n  .\n\n\n%% Your functions will be called as such:\n%% fancy_init_(),\n%% fancy_append(Val),\n%% fancy_add_all(Inc),\n%% fancy_mult_all(M),\n%% Param_4 = fancy_get_index(Idx),\n\n%% fancy_init_ will be called before every test case, in which you can do some necessary initializations.",
    "elixir": "defmodule Fancy do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec append(val :: integer) :: any\n  def append(val) do\n    \n  end\n\n  @spec add_all(inc :: integer) :: any\n  def add_all(inc) do\n    \n  end\n\n  @spec mult_all(m :: integer) :: any\n  def mult_all(m) do\n    \n  end\n\n  @spec get_index(idx :: integer) :: integer\n  def get_index(idx) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# Fancy.init_()\n# Fancy.append(val)\n# Fancy.add_all(inc)\n# Fancy.mult_all(m)\n# param_4 = Fancy.get_index(idx)\n\n# Fancy.init_ will be called before every test case, in which you can do some necessary initializations."
  }
}
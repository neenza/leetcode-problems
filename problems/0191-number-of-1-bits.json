{
  "title": "Number of 1 Bits",
  "problem_id": "191",
  "frontend_id": "191",
  "difficulty": "Easy",
  "problem_slug": "number-of-1-bits",
  "topics": [
    "Divide and Conquer",
    "Bit Manipulation"
  ],
  "description": "Given a positive integer n, write a function that returns the number of set bits in its binary representation (also known as the Hamming weight).\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 11\nOutput: 3\nExplanation:\nThe input binary string 1011 has a total of three set bits.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 128\nOutput: 1\nExplanation:\nThe input binary string 10000000 has a total of one set bit.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 2147483645\nOutput: 30\nExplanation:\nThe input binary string 1111111111111111111111111111101 has a total of thirty set bits.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 231 - 1"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int hammingWeight(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int hammingWeight(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def hammingWeight(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def hammingWeight(self, n: int) -> int:\n        ",
    "c": "int hammingWeight(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int HammingWeight(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar hammingWeight = function(n) {\n    \n};",
    "typescript": "function hammingWeight(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function hammingWeight($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func hammingWeight(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun hammingWeight(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int hammingWeight(int n) {\n    \n  }\n}",
    "golang": "func hammingWeight(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef hamming_weight(n)\n    \nend",
    "scala": "object Solution {\n    def hammingWeight(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn hamming_weight(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (hamming-weight n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec hamming_weight(N :: integer()) -> integer().\nhamming_weight(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec hamming_weight(n :: integer) :: integer\n  def hamming_weight(n) do\n    \n  end\nend"
  }
}
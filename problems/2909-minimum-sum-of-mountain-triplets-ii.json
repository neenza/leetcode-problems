{
  "title": "Minimum Sum of Mountain Triplets II",
  "problem_id": "3186",
  "frontend_id": "2909",
  "difficulty": "Medium",
  "problem_slug": "minimum-sum-of-mountain-triplets-ii",
  "topics": [
    "Array"
  ],
  "description": "You are given a 0-indexed array nums of integers.\nA triplet of indices (i, j, k) is a mountain if:\nReturn the minimum possible sum of a mountain triplet of nums. If no such triplet exists, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [8,6,1,5,3]\nOutput: 9\nExplanation: Triplet (2, 3, 4) is a mountain triplet of sum 9 since: \n- 2 < 3 < 4\n- nums[2] < nums[3] and nums[4] < nums[3]\nAnd the sum of this triplet is nums[2] + nums[3] + nums[4] = 9. It can be shown that there are no mountain triplets with a sum of less than 9.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [5,4,8,7,10,2]\nOutput: 13\nExplanation: Triplet (1, 3, 5) is a mountain triplet of sum 13 since: \n- 1 < 3 < 5\n- nums[1] < nums[3] and nums[5] < nums[3]\nAnd the sum of this triplet is nums[1] + nums[3] + nums[5] = 13. It can be shown that there are no mountain triplets with a sum of less than 13.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [6,5,4,3,4,5]\nOutput: -1\nExplanation: It can be shown that there are no mountain triplets in nums.",
      "images": []
    }
  ],
  "constraints": [
    "3 <= nums.length <= 105",
    "1 <= nums[i] <= 108"
  ],
  "follow_ups": [],
  "hints": [
    "If you fix index <code>j</code>, <code>i</code> will be the smallest integer to the left of <code>j</code>, and <code>k</code> the largest integer to the right of <code>j</code>.",
    "To find <code>i</code> and <code>k</code>, preprocess the prefix minimum array <code>prefix_min[i] = min(nums[0], nums[1], ..., nums[i])</code>, and the suffix minimum array <code>suffix_min[i] = min(nums[i], nums[i + 1], ..., nums[i - 1])</code>."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimumSum(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimumSum(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumSum(self, nums: List[int]) -> int:\n        ",
    "c": "int minimumSum(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimumSum(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minimumSum = function(nums) {\n    \n};",
    "typescript": "function minimumSum(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minimumSum($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumSum(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumSum(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumSum(List<int> nums) {\n    \n  }\n}",
    "golang": "func minimumSum(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef minimum_sum(nums)\n    \nend",
    "scala": "object Solution {\n    def minimumSum(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_sum(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-sum nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec minimum_sum(Nums :: [integer()]) -> integer().\nminimum_sum(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_sum(nums :: [integer]) :: integer\n  def minimum_sum(nums) do\n    \n  end\nend"
  }
}
{
  "title": "Maximum Sum of Edge Values in a Graph",
  "problem_id": "3845",
  "frontend_id": "3547",
  "difficulty": "Hard",
  "problem_slug": "maximum-sum-of-edge-values-in-a-graph",
  "topics": [
    "Greedy",
    "Depth-First Search",
    "Graph",
    "Sorting"
  ],
  "description": "You are given an undirected connected graph of n nodes, numbered from 0 to n - 1. Each node is connected to at most 2 other nodes.\nThe graph consists of m edges, represented by a 2D array edges, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi.\nYou have to assign a unique value from 1 to n to each node. The value of an edge will be the product of the values assigned to the two nodes it connects.\nYour score is the sum of the values of all edges in the graph.\nReturn the maximum score you can achieve.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 4, edges = [[0,1],[1,2],[2,3]]\nOutput: 23\nExplanation:\nThe diagram above illustrates an optimal assignment of values to nodes. The sum of the values of the edges is: (1 * 3) + (3 * 4) + (4 * 2) = 23 .",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 6, edges = [[0,3],[4,5],[2,0],[1,3],[2,4],[1,5]]\nOutput: 82\nExplanation:\nThe diagram above illustrates an optimal assignment of values to nodes. The sum of the values of the edges is: (1 * 2) + (2 * 4) + (4 * 6) + (6 * 5) + (5 * 3) + (3 * 1) = 82 .",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 5 * 104",
    "m == edges.length",
    "1 <= m <= n",
    "edges[i].length == 2",
    "0 <= ai, bi < n",
    "ai != bi",
    "There are no repeated edges.",
    "The graph is connected.",
    "Each node is connected to at most 2 other nodes."
  ],
  "follow_ups": [],
  "hints": [
    "The graph is either a simple path or a cycle.",
    "Greedily assign values to the nodes."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long maxScore(int n, vector<vector<int>>& edges) {\n        \n    }\n};",
    "java": "class Solution {\n    public long maxScore(int n, int[][] edges) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxScore(self, n, edges):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxScore(self, n: int, edges: List[List[int]]) -> int:\n        ",
    "c": "long long maxScore(int n, int** edges, int edgesSize, int* edgesColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public long MaxScore(int n, int[][] edges) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {number}\n */\nvar maxScore = function(n, edges) {\n    \n};",
    "typescript": "function maxScore(n: number, edges: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @return Integer\n     */\n    function maxScore($n, $edges) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxScore(_ n: Int, _ edges: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxScore(n: Int, edges: Array<IntArray>): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxScore(int n, List<List<int>> edges) {\n    \n  }\n}",
    "golang": "func maxScore(n int, edges [][]int) int64 {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @return {Integer}\ndef max_score(n, edges)\n    \nend",
    "scala": "object Solution {\n    def maxScore(n: Int, edges: Array[Array[Int]]): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_score(n: i32, edges: Vec<Vec<i32>>) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (max-score n edges)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec max_score(N :: integer(), Edges :: [[integer()]]) -> integer().\nmax_score(N, Edges) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_score(n :: integer, edges :: [[integer]]) :: integer\n  def max_score(n, edges) do\n    \n  end\nend"
  }
}
{
  "title": "Intervals Between Identical Elements",
  "problem_id": "2240",
  "frontend_id": "2121",
  "difficulty": "Medium",
  "problem_slug": "intervals-between-identical-elements",
  "topics": [
    "Array",
    "Hash Table",
    "Prefix Sum"
  ],
  "description": "You are given a 0-indexed array of n integers arr.\nThe interval between two elements in arr is defined as the absolute difference between their indices. More formally, the interval between arr[i] and arr[j] is |i - j|.\nReturn an array intervals of length n where intervals[i] is the sum of intervals between arr[i] and each element in arr with the same value as arr[i].\nNote: |x| is the absolute value of x.\nExample 1:\nExample 2:\nConstraints:\nNote: This question is the same as  2615: Sum of Distances.",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: arr = [2,1,3,1,2,3,3]\nOutput: [4,2,7,2,4,4,5]\nExplanation:\n- Index 0: Another 2 is found at index 4. |0 - 4| = 4\n- Index 1: Another 1 is found at index 3. |1 - 3| = 2\n- Index 2: Two more 3s are found at indices 5 and 6. |2 - 5| + |2 - 6| = 7\n- Index 3: Another 1 is found at index 1. |3 - 1| = 2\n- Index 4: Another 2 is found at index 0. |4 - 0| = 4\n- Index 5: Two more 3s are found at indices 2 and 6. |5 - 2| + |5 - 6| = 4\n- Index 6: Two more 3s are found at indices 2 and 5. |6 - 2| + |6 - 5| = 5",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: arr = [10,5,10,10]\nOutput: [5,0,3,4]\nExplanation:\n- Index 0: Two more 10s are found at indices 2 and 3. |0 - 2| + |0 - 3| = 5\n- Index 1: There is only one 5 in the array, so its sum of intervals to identical elements is 0.\n- Index 2: Two more 10s are found at indices 0 and 3. |2 - 0| + |2 - 3| = 3\n- Index 3: Two more 10s are found at indices 0 and 2. |3 - 0| + |3 - 2| = 4",
      "images": []
    }
  ],
  "constraints": [
    "n == arr.length",
    "1 <= n <= 105",
    "1 <= arr[i] <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "For each unique value found in the array, store a sorted list of indices of elements that have this value in the array.",
    "One way of doing this is to use a HashMap that maps the values to their list of indices. Update this mapping as you iterate through the array.",
    "Process each list of indices separately and get the sum of intervals for the elements of that value by utilizing prefix sums.",
    "For each element, keep track of the sum of indices of the identical elements that have come before and that will come after respectively. Use this to calculate the sum of intervals for that element to the rest of the elements with identical values."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<long long> getDistances(vector<int>& arr) {\n        \n    }\n};",
    "java": "class Solution {\n    public long[] getDistances(int[] arr) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def getDistances(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def getDistances(self, arr: List[int]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nlong long* getDistances(int* arr, int arrSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public long[] GetDistances(int[] arr) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} arr\n * @return {number[]}\n */\nvar getDistances = function(arr) {\n    \n};",
    "typescript": "function getDistances(arr: number[]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer[]\n     */\n    function getDistances($arr) {\n        \n    }\n}",
    "swift": "class Solution {\n    func getDistances(_ arr: [Int]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun getDistances(arr: IntArray): LongArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> getDistances(List<int> arr) {\n    \n  }\n}",
    "golang": "func getDistances(arr []int) []int64 {\n    \n}",
    "ruby": "# @param {Integer[]} arr\n# @return {Integer[]}\ndef get_distances(arr)\n    \nend",
    "scala": "object Solution {\n    def getDistances(arr: Array[Int]): Array[Long] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn get_distances(arr: Vec<i32>) -> Vec<i64> {\n        \n    }\n}",
    "racket": "(define/contract (get-distances arr)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )",
    "erlang": "-spec get_distances(Arr :: [integer()]) -> [integer()].\nget_distances(Arr) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec get_distances(arr :: [integer]) :: [integer]\n  def get_distances(arr) do\n    \n  end\nend"
  }
}
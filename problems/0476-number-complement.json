{
  "title": "Number Complement",
  "problem_id": "476",
  "frontend_id": "476",
  "difficulty": "Easy",
  "problem_slug": "number-complement",
  "topics": [
    "Bit Manipulation"
  ],
  "description": "The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.\nGiven an integer num, return its complement.\nExample 1:\nExample 2:\nConstraints:\nNote: This question is the same as 1009: https://leetcode.com/problems/complement-of-base-10-integer/",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: num = 5\nOutput: 2\nExplanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: num = 1\nOutput: 0\nExplanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= num < 231"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int findComplement(int num) {\n        \n    }\n};",
    "java": "class Solution {\n    public int findComplement(int num) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findComplement(self, num: int) -> int:\n        ",
    "c": "int findComplement(int num) {\n    \n}",
    "csharp": "public class Solution {\n    public int FindComplement(int num) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} num\n * @return {number}\n */\nvar findComplement = function(num) {\n    \n};",
    "typescript": "function findComplement(num: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer\n     */\n    function findComplement($num) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findComplement(_ num: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findComplement(num: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int findComplement(int num) {\n    \n  }\n}",
    "golang": "func findComplement(num int) int {\n    \n}",
    "ruby": "# @param {Integer} num\n# @return {Integer}\ndef find_complement(num)\n    \nend",
    "scala": "object Solution {\n    def findComplement(num: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_complement(num: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (find-complement num)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec find_complement(Num :: integer()) -> integer().\nfind_complement(Num) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_complement(num :: integer) :: integer\n  def find_complement(num) do\n    \n  end\nend"
  }
}
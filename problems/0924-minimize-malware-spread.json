{
  "title": "Minimize Malware Spread",
  "problem_id": "960",
  "frontend_id": "924",
  "difficulty": "Hard",
  "problem_slug": "minimize-malware-spread",
  "topics": [
    "Array",
    "Hash Table",
    "Depth-First Search",
    "Breadth-First Search",
    "Union Find",
    "Graph"
  ],
  "description": "You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.\nSome nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.\nSuppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from initial.\nReturn the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.\nNote that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\nOutput: 0",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]\nOutput: 0",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]\nOutput: 1",
      "images": []
    }
  ],
  "constraints": [
    "n == graph.length",
    "n == graph[i].length",
    "2 <= n <= 300",
    "graph[i][j] is 0 or 1.",
    "graph[i][j] == graph[j][i]",
    "graph[i][i] == 1",
    "1 <= initial.length <= n",
    "0 <= initial[i] <= n - 1",
    "All the integers in initial are unique."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minMalwareSpread(int[][] graph, int[] initial) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minMalwareSpread(self, graph, initial):\n        \"\"\"\n        :type graph: List[List[int]]\n        :type initial: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:\n        ",
    "c": "int minMalwareSpread(int** graph, int graphSize, int* graphColSize, int* initial, int initialSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinMalwareSpread(int[][] graph, int[] initial) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} graph\n * @param {number[]} initial\n * @return {number}\n */\nvar minMalwareSpread = function(graph, initial) {\n    \n};",
    "typescript": "function minMalwareSpread(graph: number[][], initial: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $graph\n     * @param Integer[] $initial\n     * @return Integer\n     */\n    function minMalwareSpread($graph, $initial) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minMalwareSpread(_ graph: [[Int]], _ initial: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minMalwareSpread(graph: Array<IntArray>, initial: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minMalwareSpread(List<List<int>> graph, List<int> initial) {\n    \n  }\n}",
    "golang": "func minMalwareSpread(graph [][]int, initial []int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} graph\n# @param {Integer[]} initial\n# @return {Integer}\ndef min_malware_spread(graph, initial)\n    \nend",
    "scala": "object Solution {\n    def minMalwareSpread(graph: Array[Array[Int]], initial: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_malware_spread(graph: Vec<Vec<i32>>, initial: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-malware-spread graph initial)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec min_malware_spread(Graph :: [[integer()]], Initial :: [integer()]) -> integer().\nmin_malware_spread(Graph, Initial) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_malware_spread(graph :: [[integer]], initial :: [integer]) :: integer\n  def min_malware_spread(graph, initial) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n---\n### Approach 1: Depth First Search\n\n**Intuition**\n\nFirst, let's color (the nodes of) each component of the graph.  We can do this using a depth first search.\n\nAfterwards, notice that if two nodes in `initial` have the same color (ie., belong to the same component), then removing them from `initial` won't decrease `M(initial)`.  This is because the malware will spread to reach every node in this component no matter what.\n\nSo, among nodes with a unique color in `initial`, we will remove the node with the largest component size.  (If there's a tie, we return the smallest index.  Also, if there aren't any nodes with a unique color, we'll just return the smallest index node.)\n\n**Algorithm**\n\nThis algorithm has a few parts:\n\n* **Coloring each component:**  For each node, if it isn't yet colored, use a depth-first search to traverse its component, coloring that component with a new color.\n\n* **Size of each color:**  Count the number of occurrences of each color.\n\n* **Find unique colors:**  Look at the colors of nodes in `initial` to see which nodes have unique colors.\n\n* **Choose answer:**  For each node with a unique color, find the size of that color.  The largest size is selected, with ties broken by lowest node number.\n\n    * If there is no node with a unique color, the answer is `min(initial)`.**Complexity Analysis**\n\n* Time Complexity:  $$O(N^2)$$, where $$N$$ is the length of `graph`, as the graph is given in adjacent matrix form.\n\n* Space Complexity:  $$O(N)$$.---\n### Approach 2: Union-Find\n\n**Intuition and Algorithm**\n\nAs in *Approach 1*, it is clear that we will need to consider components of the graph.  A \"Disjoint Set Union\" (DSU) data structure is ideal for this.\n\nWe will skip the explanation of how a DSU structure is implemented.  Please refer to [https://leetcode.com/problems/redundant-connection/solution/](https://leetcode.com/problems/redundant-connection/solution/) for a tutorial on DSU.\n\nTo our DSU, we can keep a side count of the size of each component.  Whenever we union two components together, the size of those components are added.\n\nWith these details neatly handled by our DSU structure, we can continue in a similar manner to *Approach 1*: for each node in `initial` with a unique color, we will consider it as a candidate answer.  If no node in `initial` have a unique color, then we will take `min(initial)` as the answer.\n\nNote that for brevity, our `DSU` implementation does not use union-by-rank.  This makes the asymptotic time complexity larger.**Complexity Analysis**\n\n* Time Complexity:  $$O(N^2)$$, where $$N$$ is the length of `graph`, as the graph is given in adjacent matrix form.\n\n* Space Complexity:  $$O(N)$$."
}
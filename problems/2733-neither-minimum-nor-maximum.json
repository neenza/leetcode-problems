{
  "title": "Neither Minimum nor Maximum",
  "problem_id": "2836",
  "frontend_id": "2733",
  "difficulty": "Easy",
  "problem_slug": "neither-minimum-nor-maximum",
  "topics": [
    "Array",
    "Sorting"
  ],
  "description": "Given an integer array nums containing distinct positive integers, find and return any number from the array that is neither the minimum nor the maximum value in the array, or -1 if there is no such number.\nReturn the selected integer.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [3,2,1,4]\nOutput: 2\nExplanation: In this example, the minimum value is 1 and the maximum value is 4. Therefore, either 2 or 3 can be valid answers.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,2]\nOutput: -1\nExplanation: Since there is no number in nums that is neither the maximum nor the minimum, we cannot select a number that satisfies the given condition. Therefore, there is no answer.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [2,1,3]\nOutput: 2\nExplanation: Since 2 is neither the maximum nor the minimum value in nums, it is the only valid answer.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 100",
    "1 <= nums[i] <= 100",
    "All values in nums are distinct"
  ],
  "follow_ups": [],
  "hints": [
    "Find any value in the array that is not the minimum or the maximum value."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int findNonMinOrMax(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int findNonMinOrMax(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findNonMinOrMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findNonMinOrMax(self, nums: List[int]) -> int:\n        ",
    "c": "int findNonMinOrMax(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int FindNonMinOrMax(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findNonMinOrMax = function(nums) {\n    \n};",
    "typescript": "function findNonMinOrMax(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findNonMinOrMax($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findNonMinOrMax(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findNonMinOrMax(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int findNonMinOrMax(List<int> nums) {\n    \n  }\n}",
    "golang": "func findNonMinOrMax(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef find_non_min_or_max(nums)\n    \nend",
    "scala": "object Solution {\n    def findNonMinOrMax(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_non_min_or_max(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (find-non-min-or-max nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec find_non_min_or_max(Nums :: [integer()]) -> integer().\nfind_non_min_or_max(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_non_min_or_max(nums :: [integer]) :: integer\n  def find_non_min_or_max(nums) do\n    \n  end\nend"
  }
}
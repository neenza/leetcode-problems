{
  "title": "Minimum Number of Flips to Make Binary Grid Palindromic II",
  "problem_id": "3524",
  "frontend_id": "3240",
  "difficulty": "Medium",
  "problem_slug": "minimum-number-of-flips-to-make-binary-grid-palindromic-ii",
  "topics": [
    "Array",
    "Two Pointers",
    "Matrix"
  ],
  "description": "You are given an m x n binary matrix grid.\nA row or column is considered palindromic if its values read the same forward and backward.\nYou can flip any number of cells in grid from 0 to 1, or from 1 to 0.\nReturn the minimum number of cells that need to be flipped to make all rows and columns palindromic, and the total number of 1's in grid divisible by 4.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: grid = [[1,0,0],[0,1,0],[0,0,1]]\nOutput: 3\nExplanation:\n",
      "images": [
        "https://assets.leetcode.com/uploads/2024/08/01/image.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: grid = [[0,1],[0,1],[0,0]]\nOutput: 2\nExplanation:\n",
      "images": [
        "https://assets.leetcode.com/uploads/2024/07/08/screenshot-from-2024-07-09-01-37-48.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: grid = [[1],[1]]\nOutput: 2\nExplanation:\n",
      "images": [
        "https://assets.leetcode.com/uploads/2024/08/01/screenshot-from-2024-08-01-23-05-26.png"
      ]
    }
  ],
  "constraints": [
    "m == grid.length",
    "n == grid[i].length",
    "1 <= m * n <= 2 * 105",
    "0 <= grid[i][j] <= 1"
  ],
  "follow_ups": [],
  "hints": [
    "For each <code>(x, y)</code>, find <code>(m - 1 - x, y)</code>, <code>(m - 1 - x, n - 1 - y)</code>, and <code>(x, n - 1 - y)</code>; they should be the same.",
    "Note that we need to specially handle the middle row (column) if the number of rows (columns) is odd."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minFlips(int[][] grid) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minFlips(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n        ",
    "c": "int minFlips(int** grid, int gridSize, int* gridColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinFlips(int[][] grid) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minFlips = function(grid) {\n    \n};",
    "typescript": "function minFlips(grid: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function minFlips($grid) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minFlips(_ grid: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minFlips(grid: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minFlips(List<List<int>> grid) {\n    \n  }\n}",
    "golang": "func minFlips(grid [][]int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} grid\n# @return {Integer}\ndef min_flips(grid)\n    \nend",
    "scala": "object Solution {\n    def minFlips(grid: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_flips(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-flips grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec min_flips(Grid :: [[integer()]]) -> integer().\nmin_flips(Grid) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_flips(grid :: [[integer]]) :: integer\n  def min_flips(grid) do\n    \n  end\nend"
  }
}
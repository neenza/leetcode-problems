{
  "title": "Minimum Falling Path Sum II",
  "problem_id": "1224",
  "frontend_id": "1289",
  "difficulty": "Hard",
  "problem_slug": "minimum-falling-path-sum-ii",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Matrix"
  ],
  "description": "Given an n x n integer matrix grid, return the minimum sum of a falling path with non-zero shifts.\nA falling path with non-zero shifts is a choice of exactly one element from each row of grid such that no two elements chosen in adjacent rows are in the same column.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: grid = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: 13\nExplanation: \nThe possible falling paths are:\n[1,5,9], [1,5,7], [1,6,7], [1,6,8],\n[2,4,8], [2,4,9], [2,6,7], [2,6,8],\n[3,4,8], [3,4,9], [3,5,7], [3,5,9]\nThe falling path with the smallest sum is [1,5,7], so the answer is 13.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/08/10/falling-grid.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: grid = [[7]]\nOutput: 7",
      "images": [
        "https://assets.leetcode.com/uploads/2021/08/10/falling-grid.jpg"
      ]
    }
  ],
  "constraints": [
    "n == grid.length == grid[i].length",
    "1 <= n <= 200",
    "-99 <= grid[i][j] <= 99"
  ],
  "follow_ups": [],
  "hints": [
    "Use dynamic programming.",
    "Let dp[i][j] be the answer for the first i rows such that column j is chosen from row i.",
    "Use the concept of cumulative array to optimize the complexity of the solution."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minFallingPathSum(vector<vector<int>>& grid) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minFallingPathSum(int[][] grid) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minFallingPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minFallingPathSum(self, grid: List[List[int]]) -> int:\n        ",
    "c": "int minFallingPathSum(int** grid, int gridSize, int* gridColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinFallingPathSum(int[][] grid) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minFallingPathSum = function(grid) {\n    \n};",
    "typescript": "function minFallingPathSum(grid: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function minFallingPathSum($grid) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minFallingPathSum(_ grid: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minFallingPathSum(grid: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minFallingPathSum(List<List<int>> grid) {\n    \n  }\n}",
    "golang": "func minFallingPathSum(grid [][]int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} grid\n# @return {Integer}\ndef min_falling_path_sum(grid)\n    \nend",
    "scala": "object Solution {\n    def minFallingPathSum(grid: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_falling_path_sum(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-falling-path-sum grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec min_falling_path_sum(Grid :: [[integer()]]) -> integer().\nmin_falling_path_sum(Grid) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_falling_path_sum(grid :: [[integer]]) :: integer\n  def min_falling_path_sum(grid) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n\n--- \n\n### Overview\n\nGiven an `n x n` integer matrix `grid`, we have to find the minimum sum of a **falling path with non-zero shifts**.\n\n> A **falling path with non-zero shifts** is a choice of exactly one element from each row of the `grid` such that no two elements chosen in adjacent rows are in the same column.\n\nWhen choosing elements for the **falling path with non-zero shifts**, we must meet the following conditions:\n- Choose one element from each row\n- No two elements chosen in adjacent rows should be in the same column\n\nIn other words, if `grid[row][col]` is chosen, then `grid[row + 1][col]` and `grid[row - 1][col]` cannot be chosen.\n\nThe editorial systematically solves the problem by developing an approach and refining it.\n\n---\n\n### Approach 1: Top-Down Dynamic Programming\n\n#### Intuition\n\nLet's try solving the problem in a brute-force manner. It is a straightforward way to solve problems. \n\n> Though the brute force approach is considered to be the most naïve approach, it is a good starting point to understand the problem.\n>\n> Brute force is exhaustive, and often not efficient. However, it gives a deeper understanding of the basis of the problem, which can further help to shape a better-optimized solution.\n\nWe can try all possible combinations of elements from each row and find the minimum sum.\n\nLet's select the element from every row, starting from the first row.\n\n- We can select any element from the first row. There are `n` such possibilities. We don't know which element will lead to the minimum sum. Hence, we try all of them.\n    \n    > **Word of Caution:** The very assumption that we should start with the minimum element in the first row is wrong.\n    > \n    > ![image](../Figures/1289/1289_slide_images_used/Slide2_1.PNG)\n    >\n    > If we choose `50` in the first row, then in the second row we only have the possibility of selecting `100`. Thus, we will end up with `151`.\n    > However, selecting `100` in the first row will permit us to choose `1` in the second row. Thus, we will end up with `102`, which is the optimal minimum sum.\n\n- After selecting an element from the first row, we have to select an element from the second row. We can select any element from the second row, except the element in the same column as the element selected from the first row. There are `n - 1` such possibilities. We don't know which element will lead to the minimum sum. Hence, we try all of them.\n\n- After selecting an element from the second row, we have to select an element from the third row. We can select any element from the third row, except the element in the same column as the element selected from the second row. There are `n - 1` such possibilities. We don't know which element will lead to the minimum sum. Hence, we try all of them.\n\n- We will do this until we reach the last row. After selecting an element from the last row, we will have a path. The minimum sum of all these paths will be the answer.\n\nTo formulate this, let's define a function `optimal(row, col)` which returns the minimum sum of a falling path with non-zero shifts, starting from row `row` and column `col`.\n\n- If `row == n - 1`, then it means that we have reached the last row. Thus, the only path from this point is the value of the cell itself. Thus, we return `grid[row][col]`. \n\n- Otherwise, we have to select `grid[row][col]`. Now from this point, we have `n - 1` choices for selecting an element from the next row. \n\n    We will choose from the next row the cell which leads to the minimum sum. \n    \n    Which function returns the minimum sum of a falling path with non-zero shifts, starting from a given row and column?   \n    Our very own `optimal` function.\n\n    > The paradigm of solving a problem using a function that solves the same problem is called **recursion**.\n    >\n    > For solving `optimal` in a particular row `row`, we are calling `optimal` in the next row `row + 1`. Thus, `optimal` is calling itself. This is called **recursion**.\n    >\n    > We are sure that `optimal` will terminate because there exists a row whose next row is not present. \n\n    Thus, `optimal(row, col)` will return `grid[row][col] + min(optimal(row + 1, next_row_col))` where `0 <= next_row_col < n` and `next_row_col != col`.\n\nThus, using these observations, we can formulate the recursive solution. We are trying all the possible combinations by performing a depth-first search on the `grid`.\n\n> The **depth-first search** is a systematic way of exploring all the possible combinations of a problem. It is called **depth-first** because we are exploring the depth of the problem first, and then moving to the next branch.\n>\n> It is an exhaustive search process wherein we will traverse all the cells in a path. On reaching the end of the path, we must undo our last step in the current path and try a different possible next step to extend the path.\n\nIt's worth noting that we need to call `optimal` from every element of the first row because any element can be the starting point of the falling path. We will return the minimum sum of all these calls.\n\n```Algorithm []\n1. Save the size of the square `grid` in a variable `n`.\n\n2. Define a recursive function `optimal`. It takes the row number `row` \n   and column number `col` as input of the cell from which we have to\n   start the falling path. It returns the minimum sum of a falling path \n   with non-zero shifts, starting from cell `grid[row][col]`.\n\n    Apart from `row` and `col`, make sure to pass the necessary \n    parameters that need to be accessed in the function.\n\n    a. If `row == n - 1`, then there is no row left to select. \n       Thus, we return `grid[row][col]`.\n\n    b. Otherwise, initialize a variable `next_minimum` with `INT_MAX`. \n       This variable will store the minimum sum of a falling path with \n       non-zero shifts, starting from the next row. \n\n    c. From this cell, we have `n - 1` possibilities of selecting an \n       element from the next row. \n\n       Thus traverse linearly in the `row + 1` using the variable \n       `next_row_col`. If `next_row_col != col`, then we can select \n       `grid[row + 1][next_row_col]`. \n        \n        We need to select `next_row_col` for which `next_minimum` is the \n        minimum. Thus, `next_minimum` will be \n        `min(optimal(row + 1, next_row_col))` where \n        `0 <= next_row_col < n` and `next_row_col != col`.\n    \n    d. From this cell, the minimum sum of a falling path with non-zero \n       shifts is `grid[row][col] + next_minimum`. Return this value.\n\n3. We can select any element from the first row. We will select the \n   element which leads to the minimum sum. Thus, initialize a variable \n   `answer` with `INT_MAX`.\n\n    Traverse linearly in the first row using variable `col`. For every \n    cell, call `optimal(0, col)`. Variable `answer` will be \n    `min(optimal(0, col))` where `0 <= col < n`.\n\n4. Return `answer`.\n```\n```python3 []\nclass Solution:\n    def minFallingPathSum(self, grid: List[List[int]]) -> int:\n        # Save the size of the square grid\n        n = len(grid)\n\n        # The optimal(row, col) function returns the minimum sum of a \n        # falling path with non-zero shifts, starting from grid[row][col]\n        def optimal(row, col):\n            # If the last row, then return the value of the cell itself\n            if row == n - 1:\n                return grid[row][col]\n\n            # Select grid[row][col], and move on to next row. For next\n            # row, choose the cell that leads to the minimum sum\n            next_minimum = inf\n            for next_row_col in range(n):\n                if next_row_col != col:\n                    next_minimum = min(next_minimum, optimal(row + 1, next_row_col))\n\n            # Minimum cost from this cell\n            return grid[row][col] + next_minimum\n        \n        # We can select any element from the first row. We will select\n        # the element which leads to minimum sum.\n        answer = inf\n        for col in range(n):\n            answer = min(answer, optimal(0, col))\n        \n        # Return the minimum sum\n        return answer\n```\n```java []\nclass Solution {\n    public int minFallingPathSum(int[][] grid) {\n        // We can select any element from the first row. We will select\n        // the element which leads to minimum sum.\n        int answer = Integer.MAX_VALUE;\n        for (int col = 0; col < grid.length; col++) {\n            answer = Math.min(answer, optimal(0, col, grid));\n        }\n\n        // Return the minimum sum\n        return answer;\n    }\n\n    // The optimal(row, col) function returns the minimum sum of a\n    // falling path with non-zero shifts, starting from grid[row][col]\n    int optimal(int row, int col, int[][] grid) {\n        // If the last row, then return the value of the cell itself\n        if (row == grid.length - 1) {\n            return grid[row][col];\n        }\n\n        // Select grid[row][col], and move on to next row. For next\n        // row, choose the cell that leads to the minimum sum\n        int nextMinimum = Integer.MAX_VALUE;\n        for (int nextRowCol = 0; nextRowCol < grid.length; nextRowCol++) {\n            if (nextRowCol != col) {\n                nextMinimum = Math.min(nextMinimum, optimal(row + 1, nextRowCol, grid));\n            }\n        }\n\n        // Minimum cost from this cell\n        return grid[row][col] + nextMinimum;\n    }\n}\n```\n```cpp []\nclass Solution {\npublic:\n    int minFallingPathSum(vector>& grid) {\n        // We can select any element from the first row. We will select\n        // the element which leads to minimum sum.\n        int answer = INT_MAX;\n        for (int col = 0; col < grid.size(); col++) {\n            answer = min(answer, optimal(0, col, grid));\n        }\n\n        // Return the minimum sum\n        return answer;\n    }\n\n    // The optimal(row, col) function returns the minimum sum of a\n    // falling path with non-zero shifts, starting from grid[row][col]\n    int optimal(int row, int col, vector>& grid) {\n        // If the last row, then return the value of the cell itself\n        if (row == grid.size() - 1) {\n            return grid[row][col];\n        }\n\n        // Select grid[row][col], and move on to next row. For next\n        // row, choose the cell that leads to the minimum sum\n        int nextMinimum = INT_MAX;\n        for (int nextRowCol = 0; nextRowCol < grid.size(); nextRowCol++) {\n            if (nextRowCol != col) {\n                nextMinimum = min(nextMinimum, optimal(row + 1, nextRowCol, grid));\n            }\n        }\n\n        // Minimum cost from this cell\n        return grid[row][col] + nextMinimum;\n    }\n};\n```\n\nThe algorithm is inefficient. It has exponential time complexity and is not feasible for large inputs.For detailed complexity analysis, click here!Let $N$ be the number of rows of the square `grid`. Every row has $N$ columns.\n\n* Time complexity: $O(N \\cdot (N - 1)^N)$\n\n    In the main function, we are calling `optimal` from every element of the first row. \n\n    Now let's fix our focus on one such call to one cell.\n\n    - In `optimal`, we are recursively calling `optimal` for every column of the next row, except for one column. \n    - Thus, there will be $N - 1$ such calls from a particular row.\n    - There are $N$ such rows from which recursive calls are made.\n\n    Thus, the time complexity from one cell of the first row is $O((N - 1)^N)$.\n\n    There are $N$ such cells in the first row. Thus, time complexity will be $O(N \\cdot (N - 1)^N)$.\n    \n* Space complexity: $O(N)$\n\n    - The space complexity of a recursive function depends on the maximum number of recursive calls on the stack. \n\n        At any point in time, there will be at most $N$ recursive calls on the stack, as each recursive call is made from a different row. In each recursive call, we have constant space complexity independent of input size. Therefore, space complexity because of the recursive call stack will be $O(N)$.\n\n    - All other variables use constant space independent of input size.\n\n    Hence, the overall space complexity will be $O(N + 1)$, which is $O(N)$. \n\n$\\downarrow_{\\text{Section after Complexity Analysis}}$For optimization, let's examine the recursion tree for `optimal(0, 0)`, when `n = 4`.\n\n> A recursion tree is a tree where every node is a recursive call. The root node is the first call to the function. The leaf nodes are the base cases. The intermediate nodes are the recursive calls.\n\n![Recursion Tree](../Figures/1289/1289_slide_images_used/Slide1.PNG)\n\nAs visible in the recursion tree, there are many same-colored overlapping sub-problems. **Is there any point in calculating the same sub-problem again and again?** No, right?\n\n**What if we store the result of each sub-problem and use it when required?** This is the foundation of dynamic programming. We store the result of each sub-problem and use it when required.\n\n> Dynamic programming is a programming paradigm in which we break a problem into sub-problems, store the result of each sub-problem, and use it when required. To dive deep into dynamic programming, readers can visit [Dynamic Programming Explore Card](https://leetcode.com/explore/featured/card/dynamic-programming/).\n\nSince there are two state variables `row` and `col`, we can use a two-dimensional array to store the result of each sub-problem.\n\n> If there are $T$ state variables, then we need an array of at most $T$ dimensions to store the result of each sub-problem.\n\nWe also need to decide how and using which data structure we will store the result of each sub-problem. We have the following options.\n\n- Use a hash map `memo` to cache the result. The key of the hash map will be a pair of integer indices `(row, col)`, and the value will be the result of `optimal(row, col)`. \n\n- Use a two-dimensional array `memo` to cache the result. `memo[row][col]` will store the result of `optimal(row, col)`.\n\nIn this approach, we will use the hash map `memo` to cache the result. Readers are encouraged to implement the solution using a two-dimensional array as well.\n\n#### Algorithm\n\n1. Save the size of the square `grid` in a variable `n`.\n\n2. Initialize a hash map `memo` to cache the minimum sum of a falling path with non-zero shifts, starting from a particular cell. The key will be a pair of integer indices `(row, col)`, and a value as an integer.\n\n3. Define a recursive function `optimal`. It takes as input the row number `row` and column number `col` of the cell from which we start the falling path. It returns the minimum sum of a falling path with non-zero shifts, starting from cell `grid[row][col]`.\n\n    In addition to `row` and `col`, make sure to pass any parameters to the function that need to be accessed in the function.\n\n    - If `row == n - 1`, then there is no row left to select. Thus, we return `grid[row][col]`.\n\n    - If the result of this sub-problem is already cached, then return the cached result. In other words, if `(row, col)` is present in `memo`, then return `memo[(row, col)]`.\n\n    - Otherwise, initialize a variable `next_minimum` with `INT_MAX`. This variable will store the minimum sum of a falling path with non-zero shifts, starting from the next row. \n\n    - From this cell, we have `n - 1` possibilities of selecting an element from the next row. \n\n        Traverse linearly in the next row `row + 1` using variable `next_row_col`. If `next_row_col != col`, then we can select `grid[row + 1][next_row_col]`. \n        \n        We need to select `next_row_col` for which `next_minimum` is the minimum. Thus, `next_minimum` will be `min(optimal(row + 1, next_row_col))` where `0 <= next_row_col < n` and `next_row_col != col`.\n    \n    - Thus, from this cell, the minimum sum of a falling path with non-zero shifts is `grid[row][col] + next_minimum`. Cache this value in `memo` with the key as `(row, col)` and return this value.\n\n4. We can select any element from the first row. We will select the element which leads to the minimum sum. Thus, initialize a variable `answer` with `INT_MAX`.\n\n    Traverse linearly in the first row using variable `col`. For every cell, call `optimal(0, col)`. Variable `answer` will be `min(optimal(0, col))` where `0 <= col < n`.\n\n5. Return `answer`.\n\n#### Implementation**Note:** It *may* give Time Limit Exceeded/Memory Limit Exceeded because of\n- large constant factor associated with the asymptotic complexity of the algorithm\n- large auxiliary stack space required for recursion\n- slow internal functions\n\nIt's worth mentioning that if readers are using an array instead of a hash map, then they must make sure NOT to initialize the array with `-1` because `-1` could be an answer, and we will never be able to distinguish between the case when the state is not computed, and the case when the state is computed and the answer is `-1`.\n\n#### Complexity Analysis\n\nLet $N$ be the number of rows of the square `grid`. Every row has $N$ columns.\n\n* Time complexity: $O(N^3)$\n\n    In the main function, we are calling `optimal` from every element of the first row. Let's analyze every element separately.\n\n    - **Calling `optimal(0, 0)`**. Readers can appreciate that due to the recursive nature of the function, all yellow-highlighted sub-problems will be called, and their results will be saved in `memo` after the first call. \n\n        ![opt_0_0](../Figures/1289/1289_slide_images_used/Slide2_2.PNG)\n\n        This is because every cell calls `optimal` for every column of the next row, except for one in the same column. \n\n        Thus, $1 + \\bigg( (N -1) \\cdot N \\bigg) - 1$ sub-problems will be called, which is $O(N^2)$.\n\n        In each sub-problem call, we are traversing linearly in the next row. Thus, the time complexity of each sub-problem call is $O(N)$.\n\n        Hence, the time complexity of `optimal(0, 0)` is $O( N^2 \\cdot N)$, which is $O(N^3)$.\n    \n    - **Calling `optimal(0, 1)`**. It will directly call all the cells having red dots on them.\n\n        ![opt_0_1](../Figures/1289/1289_slide_images_used/Slide2_3.PNG)\n\n        - The value of the yellow-highlighted cell will be fetched from `memo`. Thus, there will be no recursive call from that cell. There are $N - 2$ such cells, and they will have constant time complexity.\n\n        - The value of the cell that is not yellow-highlighted will be calculated by calling `optimal` for $N - 1$ columns of the third row. \n            \n            There is $1$ such cell, and it will have linear time complexity.\n        \n        Hence, time complexity of `optimal(0, 1)` is $O((N - 2) \\cdot 1 + 1 \\cdot N)$, which is $O(N)$.\n\n        After the end of this call, the optimal value of all yellow-highlighted cells will be cached in `memo`. \n\n        ![after_opt_0_1](../Figures/1289/1289_slide_images_used/Slide3_1.PNG)\n    \n    - We have $N - 2$ cells remaining in first row. They will pick the minimum result of $N - 1$ valid cells from the second row. \n\n        Thus, for remaining cells, time complexity will be $O((N - 2) \\cdot (N - 1))$, which is $O(N^2)$.\n    \n    Hence, the time complexity of the main function is $O(N^3 + N + N^2)$, which is $O(N^3)$.\n\n* Space complexity: $O(N^2)$\n\n    - The space complexity of a recursive function depends on the maximum number of recursive calls on the stack. \n\n        At any point in time, there will be at most $N$ recursive calls on the stack, as each recursive call is made from a different row. In each recursive call, we have constant space complexity independent of input size. Therefore, space complexity because of the recursive call stack will be $O(N)$.\n\n    - We are using a hash map `memo` to cache the result of each sub-problem. There are $N^2$ such sub-problems. Therefore, space complexity because of caching will be $O(N^2)$.\n\n    - All other variables use constant space independent of input size.\n    \n    Hence, the overall space complexity will be $O(N + N^2 + 1)$, which is $O(N^2)$.\n        \n---\n\n### Approach 2: Bottom-Up Dynamic Programming\n\n#### Intuition\n\nThe [top-down dynamic programming](#approach-1-top-down-dynamic-programming) approach is a recursive solution, which has overhead due to recursive calls and maintaining the call stack. We can eliminate this overhead by using an iterative approach. Thus, let's transform the recursive solution into an iterative solution.\n\nFor this let's write the mathematical recurrence for the problem. \n\n$\\text{optimal}(row, col)$ represents the minimum sum of a falling path with non-zero shifts, starting from cell `grid[row][col]`. The equation for the recurrence (which is often called the Bellman equation) is\n\n$$\\text{optimal}(row, col) = \\begin{cases} \\text{grid}[row][col] & \\text{if } row = n - 1 \\\\ \\text{grid}[row][col] + \\min_{\\substack{0 \\leq next\\_row\\_col < n \\\\ next\\_row\\_col \\neq col}} \\text{optimal}(row + 1, next\\_row\\_col) & \\text{otherwise} \\end{cases}$$\n\nSince there are two state variables $row$ and $col$, we will use a two-dimensional array to store the result of each sub-problem. Let's call this array `memo`. \n\n> The size of the `memo` array will depend on the range of the state variables. \n> - `row` can take values from `0` to `n - 1`.\n> - `col` can take values from `0` to `n - 1`.\n>\n> Hence, the size of the `memo` array will be `n x n`, the same as the size of the `grid`.\n\nOur goal is to fill the array in a bottom-up manner. This means that we will fill the array first for base case(s), and then for subsequent recursive cases.\n\nIn this problem, the base case is when `row = n - 1`. Hence, we will fill the array in a bottom-up manner starting from the last row and moving upwards. We traverse the array row-wise from the last row to the first row, and within each row, we traverse from left to right.\n\nThe answer will be the minimum value in the first row of the `memo` array.\n\n> It's worth noting that it is bottom-up because we are **moving from the solved base case to the unsolved sub-problems**. \n>\n> The order of traversal from bottom-row to up has **nothing to do** with the term bottom-up dynamic programming. Many problems require traversal in a diagonal manner. Thus, critically analyze the Bellman Equation to conclude the order of filling the array.\n\nReaders are encouraged to implement the solution on their own.\n\n#### Algorithm\n\n1. Save the size of the square `grid` in a variable `n`.\n\n2. Declare a two-dimensional array `memo` to cache the minimum sum of a falling path with non-zero shifts, starting from a particular cell. It will have size `n x n`.\n\n3. Fill the base case. For every cell in last row, `memo[n - 1][col]` will be `grid[n - 1][col]`.\n\n4. Fill the recursive cases. For every row from `n - 2` to `0`, and for every column from `0` to `n - 1`, do the following\n\n    - Initialize a variable `next_minimum` with `INT_MAX`. This variable will store the minimum sum of a falling path with non-zero shifts, starting from the next row. \n\n    - From this cell, we have `n - 1` possibilities of selecting an element from the next row. \n\n        Thus traverse linearly in the next row `row + 1` using variable `next_row_col`. If `next_row_col != col`, then we can select `memo[row + 1][next_row_col]`. \n        \n        We need to select `next_row_col` for which `next_minimum` is the minimum. Thus, `next_minimum` will be `min(memo[row + 1][next_row_col])` where `0 <= next_row_col < n` and `next_row_col != col`.\n    \n    - Thus, from this cell, the minimum sum of a falling path with non-zero shifts is `grid[row][col] + next_minimum`. Cache this value in `memo[row][col]`.\n\n5. Find the minimum from the first row of `memo`. Return this value.\n\n#### Implementation#### Complexity Analysis\n\nLet $N$ be the number of rows of the square `grid`. Every row has $N$ columns.\n\n* Time complexity: $O(N^3)$\n\n    We are traversing in every cell of the `memo` array once.\n\n    - For the last row, we do a constant time operation of assigning `grid[row][col]` to `memo[row][col]`. There are $N$ such cells, and each cell will take constant time. Thus, the time complexity will be $O(N)$.\n\n    - For the remaining rows, we find a minimum from valid elements of the next row. There are $(N - 1) \\cdot N$ such cells, and each cell will take linear time. Thus, the time complexity will be $O((N - 1) \\cdot N \\cdot N)$, which is $O(N^3)$.\n\n    At the end, we find the minimum from the first row. It will take $O(N)$ time.\n\n    Thus, overall time complexity will be $O(N + N^3 + N)$, which is $O(N^3)$.\n\n* Space complexity: $O(N^2)$\n\n    We used a two-dimensional array `memo` of size $N \\times N$. Thus, space complexity will be $O(N^2)$. All other variables use constant space independent of input size. \n        \n---\n\n### Approach 3: Bottom-Up Dynamic Programming. Save Minimum and Second Minimum\n\n#### Intuition\n\nIn [bottom-up dynamic programming](#approach-2-bottom-up-dynamic-programming), we visited every cell of the `memo` array.\n\nHowever, computing `memo[row][col]` requires traversal in the `memo[row + 1]` array. The purpose of this traversal was to find the *minimum* from **valid elements** of the next row. \n\nAssume this *minimum* is represented by the red cell in the following figure.\n\n![minimum](../Figures/1289/1289_slide_images_used/Slide3_2.PNG)\n\nThis red-cell *minimum* is **valid** for all green elements since it is not in the same column as the green elements. \n\nHowever, it is **invalid** for the blue element since it is in the same column as the red element. Thus, for the blue element, we need to find the *minimum* excluding the red cell, which will be the *second minimum* of the next row.\n\nThus, for computing any element in `memo`, what ultimately matters is the *minimum* and *second minimum* of the next row. Hence while traversing and filling `memo`, we can store the *minimum* and *second minimum* of the current row, which will help the previous row in computing `memo[row][col]`.\n\nHere is the visualization of the algorithm for the input `[[99,1,60,4,3], [49, 1, 10, 42, 56], [87, 28, 78, 60, 5], [23, 12, 53, 69, 6], [3, 5, 15, 6, 7]]`\n\n!?!../Documents/1289/1289_slideshow.json:960,540!?!**In what condition we will be prompted to use *second minimum*?**   \nWhen the column of *minimum* is the same as the column of the current element. Hence, instead of saving **values** of *minimum* and *second minimum*, we can save the **column** of *minimum* and *second minimum*. From **column**, we can fetch the **value**.\n\n#### Algorithm\n\n1. Save the size of the square `grid` in a variable `n`.\n\n2. Declare a two-dimensional array `memo` to cache the minimum sum of a falling path with non-zero shifts, starting from a particular cell. It will have size `n x n`.\n\n3. Declare two variables `next_min1_c` and `next_min2_c` to store the column of *minimum* and *second minimum* respectively. Initialize them with `None`.\n\n4. Fill Base Case in `memo`, and in the same traversal, update the values of `next_min1_c` and `next_min2_c`.\n\n    - For every cell in last row, `memo[n - 1][col]` will be `grid[n - 1][col]`.\n\n    - If `next_min1_c` is `None` or `memo[n - 1][col]` is less than or equal to `memo[n - 1][next_min1_c]`, then\n      \n        - Update `next_min2_c` with `next_min1_c`\n       \n        - Update `next_min1_c` with `col`  \n\n    - Otherwise, if `next_min2_c` is `None` or `memo[n - 1][col]` is less than or equal to `memo[n - 1][next_min2_c]`, then update `next_min2_c` with `col`.\n\n    > The updates done in the above two points are the standard approach of finding the minimum and second minimum from an array. For more details, read [this editorial](https://leetcode.com/problems/buy-two-chocolates/editorial/#approach-5-one-pass)\n\n    They are *minimum* and *second minimum* of the current row, and will act as *minimum* and *second minimum* of the next row for the previous row elements.\n\n5. Fill the recursive cases. For every row from `n - 2` to `0`.\n\n    - Declare two variables `min1_c` and `min2_c` to store the column of *minimum* and *second minimum*, respectively, for `memo[row]`. The `memo[row]` is not computed yet. Initialize them with `None`.\n\n    - Traverse from column `0` to `n - 1` using variable `col`. For every column, do the following\n\n        - If `col != next_min1_c`, then we can select minimum element from `memo[row + 1]` array. Thus, `memo[row][col]` will be `grid[row][col] + memo[row + 1][next_min1_c]`.\n\n           Otherwise, `memo[row][col]` will be `grid[row][col] + memo[row + 1][next_min2_c]`. \n\n        - If `min1_c` is `None` or `memo[row][col]` is less than or equal to `memo[row][min1_c]`, then \n            - Update `min2_c` with `min1_c`\n             \n            - Update `min1_c` with `col`  \n\n        - Otherwise, if `min2_c` is `None` or `memo[row][col]` is less than or equal to `memo[row][min2_c]`, then update `min2_c` with `col`.\n\n        > The updates done in the above two points are the standard approach of finding the minimum and second minimum from an array. For more details, read [this editorial](https://leetcode.com/problems/buy-two-chocolates/editorial/#approach-5-one-pass)\n    \n    - Update `next_min1_c` and `next_min2_c` with `min1_c` and `min2_c` respectively. The current row is the next row for the previous row elements.\n\n6. Return the minimum from the first row of `memo`. It will be the `memo[0][next_min1_c]`.` \n\n#### Implementation#### Complexity Analysis\n\nLet $N$ be the number of rows of the square `grid`. Every row has $N$ columns.\n\n* Time complexity: $O(N^2)$\n\n    We are traversing in every cell of the `memo` array once.\n\n    For all the cells, we do two main operations\n    - Computing `memo[row][col]`. In the base case, and even in recursive cases, the operation is constant time.\n      \n    - Ensuring loop invariant of `next_min1_c` and `next_min2_c`. \n    \n    Both of these are constant time operations.\n\n    Thus, $N^2$ cells take $O(1)$ time. Hence, the overall time complexity will be $O(N^2)$.\n\n* Space complexity: $O(N^2)$ \n\n    We are using a two-dimensional array `memo` of size $N \\cdot N$. Thus, space complexity will be $O(N^2)$. All other variables use constant space independent of input size.\n        \n---\n\n### Approach 4: Space-Optimized Bottom-Up Dynamic Programming\n\n#### Intuition\n\nThe rule of thumb is:\n\n> If there are $T$ state variables, then we need an array of **at most** $T$ dimensions to store the result of each sub-problem.\n\nThe term **at most** is a good signal. We might be able to reduce the number of dimensions of the array by carefully analyzing the recurrence relation. \n\n$$\\text{optimal}(row, col) = \\begin{cases} \\text{grid}[row][col] & \\text{if } row = n - 1 \\\\ \\text{grid}[row][col] + \\min_{\\substack{0 \\leq next\\_row\\_col < n \\\\ next\\_row\\_col \\neq col}} \\text{optimal}(row + 1, next\\_row\\_col) & \\text{otherwise} \\end{cases}$$\n\nWe can observe the fact that the value of $\\text{optimal}(row, \\_)$ depends only on the values of $\\text{optimal}(row + 1, \\_)$.\n\nIn other words, instead of saving the entire `memo` array, we can save only the recently processed row of the `memo` array. This will reduce space complexity from $O(N^2)$ to $O(N)$. Readers are encouraged to implement this approach.\n\n$\\downarrow$\n\n**However, do we even need to save one row of the `memo` array?**  \nFrom [previous approach](#approach-3-bottom-up-dynamic-programming-save-minimum-and-second-minimum), we realize the fact that only **column** of *minimum* and *second minimum* of the next row is required.  \nFrom these **columns**, we fetched the **values**. These columns ensured that we were not selecting the same column as the current element.\n\n**What if we saved values as well?**   \nThis will help us develop an approach with no `memo` array. \n\n$\\downarrow$\n\nHence, as we process the row, we will save four variables\n- `next_min1_c` and `next_min2_c` to store the column of *minimum* and *second minimum*, respectively, of (non-existent) next row of the `memo` array.\n- `next_min1` and `next_min2` to store the value of *minimum* and *second minimum*, respectively, of (non-existent) next row of the `memo` array.\n\n\n#### Algorithm\n\n1. Save the size of the square `grid` in a variable `n`.\n\n2. Declare and Initialize four variables\n\n   - `next_min1_c` to store the column of *minimum* of (non-existent) next row of the `memo` array. Initialize it with `None`. \n\n    - `next_min2_c` to store the column of *second minimum* of (non-existent) next row of the `memo` array. Initialize it with `None`.\n\n    - `next_min1` to store the value of *minimum* of (non-existent) next row of the `memo` array. Initialize it with `None`.\n\n    - `next_min2` to store the value of *second minimum* of (non-existent) next row of the `memo` array. Initialize it with `None`.\n\n3. Traverse in the last row of `grid` using variable `col`. For every column, do the following\n\n    - If `next_min1` is `None` or `grid[n - 1][col]` is less than or equal to `next_min1`, then\n\n        - Update `next_min2` with `next_min1`\n       \n        - Update `next_min1` with `grid[n - 1][col]`  \n\n        - Update `next_min2_c` with `next_min1_c`\n\n        - Update `next_min1_c` with `col` \n\n    - Otherwise, if `next_min2` is `None` or `grid[n - 1][col]` is less than or equal to `next_min2`, then \n\n        - Update `next_min2` with `grid[n - 1][col]`\n\n        - Update `next_min2_c` with `col`\n\n    > The updates done are the standard approach of finding the minimum and second minimum from an array. For more details, read [this editorial](https://leetcode.com/problems/buy-two-chocolates/editorial/#approach-5-one-pass)\n \n4. Traverse in the remaining rows of `grid` from `n - 2` to `0` using variable `row`. For every row, do the following\n\n    - Declare and initialize four variables\n\n        - `min1_c` to store the column of *minimum* of (non-existent) current row of the `memo` array. Initialize it with `None`.\n\n        - `min2_c` to store the column of *second minimum* of the (non-existent) current row of the `memo` array. Initialize it with `None`.\n\n        - `min1` to store the value of *minimum* of (non-existent) current row of the `memo` array. Initialize it with `None`.\n\n        - `min2` to store the value of *second minimum* of the (non-existent) current row of the `memo` array. Initialize it with `None`.\n\n    - Traverse in the current row of `grid` using variable `col`. For every column, do the following\n\n        - If `col != next_min1_c`, then we can select the minimum element from the (non-existent) next row of the `memo` array. Thus, the optimal `value` from this cell will be `grid[row][col] + next_min1`.\n\n           Otherwise, the optimal `value` from this cell will be `grid[row][col] + next_min2`.\n        \n        - If `min1` is `None` or `value` is less than or equal to `min1`, then \n            - Update `min2` with `min1`\n              \n            - Update `min1` with `value`  \n\n            - Update `min2_c` with `min1_c`\n             \n            - Update `min1_c` with `col`\n\n        - Otherwise, if `min2` is `None` or `value` is less than or equal to `min2`, then               \n            - Update `min2` with `value`\n             \n            - Update `min2_c` with `col`  \n    \n    - Update `next_min1_c`, `next_min2_c`, `next_min1`, and `next_min2` with `min1_c`, `min2_c`, `min1`, and `min2` respectively. The current row is the next row for the previous row elements.\n\n5. Return the minimum from the first row of the `grid`. It will be `next_min1`. \n \n#### Implementation#### Complexity Analysis\n\nLet $N$ be the number of rows of the square `grid`. Every row has $N$ columns.\n\n* Time complexity: $O(N^2)$\n\n    We are traversing in every cell of the `grid` array once.\n\n    For all the cells, we are doing two main operations\n    - Computing `value`. It will take constant time.\n     \n    - Ensuring loop invariant of `next_min1_c`, `next_min2_c`, `next_min1`, and `next_min2`.\n\n    All these operations are constant time operations.\n\n    Thus, $N^2$ cells take $O(1)$ time. Hence, the overall time complexity will be $O(N^2)$. \n\n* Space complexity: $O(1)$\n\n    We are using only a handful of variables, which are independent of input size. Thus, space complexity will be $O(1)$.\n        \n---\n\n**Follow-up**: What if we were asked to print the path as well? Readers are encouraged to take this as an exercise and comment with their solution below.\n\n---"
}
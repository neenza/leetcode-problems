{
  "title": "Maximum Length of Subarray With Positive Product",
  "problem_id": "1690",
  "frontend_id": "1567",
  "difficulty": "Medium",
  "problem_slug": "maximum-length-of-subarray-with-positive-product",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Greedy"
  ],
  "description": "Given an array of integers nums, find the maximum length of a subarray where the product of all its elements is positive.\nA subarray of an array is a consecutive sequence of zero or more values taken out of that array.\nReturn the maximum length of a subarray with positive product.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,-2,-3,4]\nOutput: 4\nExplanation: The array nums already has a positive product of 24.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [0,1,-2,-3,-4]\nOutput: 3\nExplanation: The longest subarray with positive product is [1,-2,-3] which has a product of 6.\nNotice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [-1,-2,-3,0,1]\nOutput: 2\nExplanation: The longest subarray with positive product is [-1,-2] or [-2,-3].",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "-109 <= nums[i] <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "Split the whole array into subarrays by zeroes since a subarray with positive product cannot contain any zero.",
    "If the subarray has even number of negative numbers, the whole subarray has positive product.",
    "Otherwise, we have two choices, either - remove the prefix till the first negative element in this subarray, or remove the suffix starting from the last negative element in this subarray."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int getMaxLen(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int getMaxLen(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def getMaxLen(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def getMaxLen(self, nums: List[int]) -> int:\n        ",
    "c": "int getMaxLen(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int GetMaxLen(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar getMaxLen = function(nums) {\n    \n};",
    "typescript": "function getMaxLen(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function getMaxLen($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func getMaxLen(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun getMaxLen(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int getMaxLen(List<int> nums) {\n    \n  }\n}",
    "golang": "func getMaxLen(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef get_max_len(nums)\n    \nend",
    "scala": "object Solution {\n    def getMaxLen(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn get_max_len(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (get-max-len nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec get_max_len(Nums :: [integer()]) -> integer().\nget_max_len(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec get_max_len(nums :: [integer]) :: integer\n  def get_max_len(nums) do\n    \n  end\nend"
  }
}
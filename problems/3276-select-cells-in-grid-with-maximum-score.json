{
  "title": "Select Cells in Grid With Maximum Score",
  "problem_id": "3563",
  "frontend_id": "3276",
  "difficulty": "Hard",
  "problem_slug": "select-cells-in-grid-with-maximum-score",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Bit Manipulation",
    "Matrix",
    "Bitmask"
  ],
  "description": "You are given a 2D matrix grid consisting of positive integers.\nYou have to select one or more cells from the matrix such that the following conditions are satisfied:\nYour score will be the sum of the values of the selected cells.\nReturn the maximum score you can achieve.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: grid = [[1,2,3],[4,3,2],[1,1,1]]\nOutput: 8\nExplanation:\n\nWe can select the cells with values 1, 3, and 4 that are colored above.",
      "images": [
        "https://assets.leetcode.com/uploads/2024/07/29/grid1drawio.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: grid = [[8,7,6],[8,3,2]]\nOutput: 15\nExplanation:\n\nWe can select the cells with values 7 and 8 that are colored above.",
      "images": [
        "https://assets.leetcode.com/uploads/2024/07/29/grid8_8drawio.png"
      ]
    }
  ],
  "constraints": [
    "1 <= grid.length, grid[i].length <= 10",
    "1 <= grid[i][j] <= 100"
  ],
  "follow_ups": [],
  "hints": [
    "Sort all the cells in the grid by their values and keep track of their original positions.",
    "Try dynamic programming with the following states: the current cell that we might select and a bitmask representing all the rows from which we have already selected a cell so far."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxScore(vector<vector<int>>& grid) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxScore(List<List<Integer>> grid) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxScore(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxScore(self, grid: List[List[int]]) -> int:\n        ",
    "c": "int maxScore(int** grid, int gridSize, int* gridColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxScore(IList<IList<int>> grid) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxScore = function(grid) {\n    \n};",
    "typescript": "function maxScore(grid: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function maxScore($grid) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxScore(_ grid: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxScore(grid: List<List<Int>>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxScore(List<List<int>> grid) {\n    \n  }\n}",
    "golang": "func maxScore(grid [][]int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} grid\n# @return {Integer}\ndef max_score(grid)\n    \nend",
    "scala": "object Solution {\n    def maxScore(grid: List[List[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_score(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-score grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec max_score(Grid :: [[integer()]]) -> integer().\nmax_score(Grid) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_score(grid :: [[integer]]) :: integer\n  def max_score(grid) do\n    \n  end\nend"
  }
}
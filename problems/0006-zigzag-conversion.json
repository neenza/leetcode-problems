{
  "title": "Zigzag Conversion",
  "problem_id": "6",
  "frontend_id": "6",
  "difficulty": "Medium",
  "problem_slug": "zigzag-conversion",
  "topics": [
    "String"
  ],
  "description": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\nAnd then read line by line: \"PAHNAPLSIIGYIR\"\nWrite the code that will take a string and make this conversion given a number of rows:\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "P   A   H   N\nA P L S I I G\nY   I   R",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "string convert(string s, int numRows);",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"PAYPALISHIRING\", numRows = 3\nOutput: \"PAHNAPLSIIGYIR\"",
      "images": []
    },
    {
      "example_num": 4,
      "example_text": "Input: s = \"PAYPALISHIRING\", numRows = 4\nOutput: \"PINALSIGYAHRPI\"\nExplanation:\nP     I    N\nA   L S  I G\nY A   H R\nP     I",
      "images": []
    },
    {
      "example_num": 5,
      "example_text": "Input: s = \"A\", numRows = 1\nOutput: \"A\"",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 1000",
    "s consists of English letters (lower-case and upper-case), ',' and '.'.",
    "1 <= numRows <= 1000"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string convert(string s, int numRows) {\n        \n    }\n};",
    "java": "class Solution {\n    public String convert(String s, int numRows) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        ",
    "c": "char* convert(char* s, int numRows) {\n    \n}",
    "csharp": "public class Solution {\n    public string Convert(string s, int numRows) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @param {number} numRows\n * @return {string}\n */\nvar convert = function(s, numRows) {\n    \n};",
    "typescript": "function convert(s: string, numRows: number): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $numRows\n     * @return String\n     */\n    function convert($s, $numRows) {\n        \n    }\n}",
    "swift": "class Solution {\n    func convert(_ s: String, _ numRows: Int) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun convert(s: String, numRows: Int): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String convert(String s, int numRows) {\n    \n  }\n}",
    "golang": "func convert(s string, numRows int) string {\n    \n}",
    "ruby": "# @param {String} s\n# @param {Integer} num_rows\n# @return {String}\ndef convert(s, num_rows)\n    \nend",
    "scala": "object Solution {\n    def convert(s: String, numRows: Int): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn convert(s: String, num_rows: i32) -> String {\n        \n    }\n}",
    "racket": "(define/contract (convert s numRows)\n  (-> string? exact-integer? string?)\n  )",
    "erlang": "-spec convert(S :: unicode:unicode_binary(), NumRows :: integer()) -> unicode:unicode_binary().\nconvert(S, NumRows) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec convert(s :: String.t, num_rows :: integer) :: String.t\n  def convert(s, num_rows) do\n    \n  end\nend"
  }
}
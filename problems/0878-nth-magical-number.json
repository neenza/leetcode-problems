{
  "title": "Nth Magical Number",
  "problem_id": "910",
  "frontend_id": "878",
  "difficulty": "Hard",
  "problem_slug": "nth-magical-number",
  "topics": [
    "Math",
    "Binary Search"
  ],
  "description": "A positive integer is magical if it is divisible by either a or b.\nGiven the three integers n, a, and b, return the nth magical number. Since the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 1, a = 2, b = 3\nOutput: 2",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 4, a = 2, b = 3\nOutput: 6",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 109",
    "2 <= a, b <= 4 * 104"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int nthMagicalNumber(int n, int a, int b) {\n        \n    }\n};",
    "java": "class Solution {\n    public int nthMagicalNumber(int n, int a, int b) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def nthMagicalNumber(self, n, a, b):\n        \"\"\"\n        :type n: int\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def nthMagicalNumber(self, n: int, a: int, b: int) -> int:\n        ",
    "c": "int nthMagicalNumber(int n, int a, int b) {\n    \n}",
    "csharp": "public class Solution {\n    public int NthMagicalNumber(int n, int a, int b) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nvar nthMagicalNumber = function(n, a, b) {\n    \n};",
    "typescript": "function nthMagicalNumber(n: number, a: number, b: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $a\n     * @param Integer $b\n     * @return Integer\n     */\n    function nthMagicalNumber($n, $a, $b) {\n        \n    }\n}",
    "swift": "class Solution {\n    func nthMagicalNumber(_ n: Int, _ a: Int, _ b: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun nthMagicalNumber(n: Int, a: Int, b: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int nthMagicalNumber(int n, int a, int b) {\n    \n  }\n}",
    "golang": "func nthMagicalNumber(n int, a int, b int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer} a\n# @param {Integer} b\n# @return {Integer}\ndef nth_magical_number(n, a, b)\n    \nend",
    "scala": "object Solution {\n    def nthMagicalNumber(n: Int, a: Int, b: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn nth_magical_number(n: i32, a: i32, b: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (nth-magical-number n a b)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec nth_magical_number(N :: integer(), A :: integer(), B :: integer()) -> integer().\nnth_magical_number(N, A, B) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec nth_magical_number(n :: integer, a :: integer, b :: integer) :: integer\n  def nth_magical_number(n, a, b) do\n    \n  end\nend"
  }
}
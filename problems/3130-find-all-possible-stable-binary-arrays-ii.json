{
  "title": "Find All Possible Stable Binary Arrays II",
  "problem_id": "3407",
  "frontend_id": "3130",
  "difficulty": "Hard",
  "problem_slug": "find-all-possible-stable-binary-arrays-ii",
  "topics": [
    "Dynamic Programming",
    "Prefix Sum"
  ],
  "description": "You are given 3 positive integers zero, one, and limit.\nA binary array arr is called stable if:\nReturn the total number of stable binary arrays.\nSince the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: zero = 1, one = 1, limit = 2\nOutput: 2\nExplanation:\nThe two possible stable binary arrays are [1,0] and [0,1] .",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: zero = 1, one = 2, limit = 1\nOutput: 1\nExplanation:\nThe only possible stable binary array is [1,0,1] .",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: zero = 3, one = 3, limit = 2\nOutput: 14\nExplanation:\nAll the possible stable binary arrays are [0,0,1,0,1,1] , [0,0,1,1,0,1] , [0,1,0,0,1,1] , [0,1,0,1,0,1] , [0,1,0,1,1,0] , [0,1,1,0,0,1] , [0,1,1,0,1,0] , [1,0,0,1,0,1] , [1,0,0,1,1,0] , [1,0,1,0,0,1] , [1,0,1,0,1,0] , [1,0,1,1,0,0] , [1,1,0,0,1,0] , and [1,1,0,1,0,0] .",
      "images": []
    }
  ],
  "constraints": [
    "1 <= zero, one, limit <= 1000"
  ],
  "follow_ups": [],
  "hints": [
    "Let <code>dp[x][y][z = 0/1]</code> be the number of stable arrays with exactly <code>x</code> zeros, <code>y</code> ones, and the last element is <code>z</code>. (0 or 1).\r\n<code>dp[x][y][0] + dp[x][y][1]</code> is the answer for given <code>(x, y)</code>.",
    "If we have already placed <code>x</code> 1 and <code>y</code> 0, if we place a group of <code>k</code> 0, the number of ways is <code>dp[x-k][y][1]</code>. We can place a group with size <code>i</code>, where <code>i</code> varies from 1 to <code>min(limit, zero - x)</code>.\r\nSimilarly, we can solve by placing a group of ones.",
    "Speed up the calculation using prefix arrays to store the sum of <code>dp</code> states."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int numberOfStableArrays(int zero, int one, int limit) {\n        \n    }\n};",
    "java": "class Solution {\n    public int numberOfStableArrays(int zero, int one, int limit) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numberOfStableArrays(self, zero, one, limit):\n        \"\"\"\n        :type zero: int\n        :type one: int\n        :type limit: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numberOfStableArrays(self, zero: int, one: int, limit: int) -> int:\n        ",
    "c": "int numberOfStableArrays(int zero, int one, int limit) {\n    \n}",
    "csharp": "public class Solution {\n    public int NumberOfStableArrays(int zero, int one, int limit) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} zero\n * @param {number} one\n * @param {number} limit\n * @return {number}\n */\nvar numberOfStableArrays = function(zero, one, limit) {\n    \n};",
    "typescript": "function numberOfStableArrays(zero: number, one: number, limit: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $zero\n     * @param Integer $one\n     * @param Integer $limit\n     * @return Integer\n     */\n    function numberOfStableArrays($zero, $one, $limit) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numberOfStableArrays(_ zero: Int, _ one: Int, _ limit: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numberOfStableArrays(zero: Int, one: Int, limit: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int numberOfStableArrays(int zero, int one, int limit) {\n    \n  }\n}",
    "golang": "func numberOfStableArrays(zero int, one int, limit int) int {\n    \n}",
    "ruby": "# @param {Integer} zero\n# @param {Integer} one\n# @param {Integer} limit\n# @return {Integer}\ndef number_of_stable_arrays(zero, one, limit)\n    \nend",
    "scala": "object Solution {\n    def numberOfStableArrays(zero: Int, one: Int, limit: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn number_of_stable_arrays(zero: i32, one: i32, limit: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (number-of-stable-arrays zero one limit)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec number_of_stable_arrays(Zero :: integer(), One :: integer(), Limit :: integer()) -> integer().\nnumber_of_stable_arrays(Zero, One, Limit) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec number_of_stable_arrays(zero :: integer, one :: integer, limit :: integer) :: integer\n  def number_of_stable_arrays(zero, one, limit) do\n    \n  end\nend"
  }
}
{
  "title": "Maximum Number of Operations With the Same Score I",
  "problem_id": "3320",
  "frontend_id": "3038",
  "difficulty": "Easy",
  "problem_slug": "maximum-number-of-operations-with-the-same-score-i",
  "topics": [
    "Array",
    "Simulation"
  ],
  "description": "You are given an array of integers nums. Consider the following operation:\nYou can perform this operation until nums contains fewer than two elements. Additionally, the same score must be achieved in all operations.\nReturn the maximum number of operations you can perform.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [3,2,1,4,5]\nOutput: 2\nExplanation:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,5,3,3,4,1,3,2,2,3]\nOutput: 2\nExplanation:",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [5,3]\nOutput: 1",
      "images": []
    }
  ],
  "constraints": [
    "2 <= nums.length <= 100",
    "1 <= nums[i] <= 1000"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxOperations(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxOperations(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxOperations(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxOperations(self, nums: List[int]) -> int:\n        ",
    "c": "int maxOperations(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxOperations(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxOperations = function(nums) {\n    \n};",
    "typescript": "function maxOperations(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxOperations($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxOperations(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxOperations(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxOperations(List<int> nums) {\n    \n  }\n}",
    "golang": "func maxOperations(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_operations(nums)\n    \nend",
    "scala": "object Solution {\n    def maxOperations(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_operations(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-operations nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec max_operations(Nums :: [integer()]) -> integer().\nmax_operations(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_operations(nums :: [integer]) :: integer\n  def max_operations(nums) do\n    \n  end\nend"
  }
}
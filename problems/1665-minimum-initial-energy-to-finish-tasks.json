{
  "title": "Minimum Initial Energy to Finish Tasks",
  "problem_id": "1784",
  "frontend_id": "1665",
  "difficulty": "Hard",
  "problem_slug": "minimum-initial-energy-to-finish-tasks",
  "topics": [
    "Array",
    "Greedy",
    "Sorting"
  ],
  "description": "You are given an array tasks where tasks[i] = [actuali, minimumi]:\nFor example, if the task is [10, 12] and your current energy is 11, you cannot start this task. However, if your current energy is 13, you can complete this task, and your energy will be 3 after finishing it.\nYou can finish the tasks in any order you like.\nReturn the minimum initial amount of energy you will need to finish all the tasks.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: tasks = [[1,2],[2,4],[4,8]]\nOutput: 8\nExplanation:\nStarting with 8 energy, we finish the tasks in the following order:\n    - 3rd task. Now energy = 8 - 4 = 4.\n    - 2nd task. Now energy = 4 - 2 = 2.\n    - 1st task. Now energy = 2 - 1 = 1.\nNotice that even though we have leftover energy, starting with 7 energy does not work because we cannot do the 3rd task.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: tasks = [[1,3],[2,4],[10,11],[10,12],[8,9]]\nOutput: 32\nExplanation:\nStarting with 32 energy, we finish the tasks in the following order:\n    - 1st task. Now energy = 32 - 1 = 31.\n    - 2nd task. Now energy = 31 - 2 = 29.\n    - 3rd task. Now energy = 29 - 10 = 19.\n    - 4th task. Now energy = 19 - 10 = 9.\n    - 5th task. Now energy = 9 - 8 = 1.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: tasks = [[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]]\nOutput: 27\nExplanation:\nStarting with 27 energy, we finish the tasks in the following order:\n    - 5th task. Now energy = 27 - 5 = 22.\n    - 2nd task. Now energy = 22 - 2 = 20.\n    - 3rd task. Now energy = 20 - 3 = 17.\n    - 1st task. Now energy = 17 - 1 = 16.\n    - 4th task. Now energy = 16 - 4 = 12.\n    - 6th task. Now energy = 12 - 6 = 6.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= tasks.length <= 105",
    "1 <= actual​i <= minimumi <= 104"
  ],
  "follow_ups": [],
  "hints": [
    "We can easily figure that the f(x) : does x solve this array is monotonic so binary Search is doable",
    "Figure a sorting pattern"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimumEffort(vector<vector<int>>& tasks) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimumEffort(int[][] tasks) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumEffort(self, tasks):\n        \"\"\"\n        :type tasks: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumEffort(self, tasks: List[List[int]]) -> int:\n        ",
    "c": "int minimumEffort(int** tasks, int tasksSize, int* tasksColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimumEffort(int[][] tasks) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} tasks\n * @return {number}\n */\nvar minimumEffort = function(tasks) {\n    \n};",
    "typescript": "function minimumEffort(tasks: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $tasks\n     * @return Integer\n     */\n    function minimumEffort($tasks) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumEffort(_ tasks: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumEffort(tasks: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumEffort(List<List<int>> tasks) {\n    \n  }\n}",
    "golang": "func minimumEffort(tasks [][]int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} tasks\n# @return {Integer}\ndef minimum_effort(tasks)\n    \nend",
    "scala": "object Solution {\n    def minimumEffort(tasks: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_effort(tasks: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-effort tasks)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec minimum_effort(Tasks :: [[integer()]]) -> integer().\nminimum_effort(Tasks) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_effort(tasks :: [[integer]]) :: integer\n  def minimum_effort(tasks) do\n    \n  end\nend"
  }
}
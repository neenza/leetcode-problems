{
  "title": "Count Equal and Divisible Pairs in an Array",
  "problem_id": "2277",
  "frontend_id": "2176",
  "difficulty": "Easy",
  "problem_slug": "count-equal-and-divisible-pairs-in-an-array",
  "topics": [
    "Array"
  ],
  "description": "Example 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [3,1,2,2,2,1,3], k = 2\nOutput: 4\nExplanation:\nThere are 4 pairs that meet all the requirements:\n- nums[0] == nums[6], and 0 * 6 == 0, which is divisible by 2.\n- nums[2] == nums[3], and 2 * 3 == 6, which is divisible by 2.\n- nums[2] == nums[4], and 2 * 4 == 8, which is divisible by 2.\n- nums[3] == nums[4], and 3 * 4 == 12, which is divisible by 2.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,2,3,4], k = 1\nOutput: 0\nExplanation: Since no value in nums is repeated, there are no pairs (i,j) that meet all the requirements.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 100",
    "1 <= nums[i], k <= 100"
  ],
  "follow_ups": [],
  "hints": [
    "For every possible pair of indices (i, j) where i < j, check if it satisfies the given conditions."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int countPairs(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int countPairs(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countPairs(self, nums: List[int], k: int) -> int:\n        ",
    "c": "int countPairs(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int CountPairs(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar countPairs = function(nums, k) {\n    \n};",
    "typescript": "function countPairs(nums: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function countPairs($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countPairs(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countPairs(nums: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int countPairs(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func countPairs(nums []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef count_pairs(nums, k)\n    \nend",
    "scala": "object Solution {\n    def countPairs(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_pairs(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (count-pairs nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec count_pairs(Nums :: [integer()], K :: integer()) -> integer().\ncount_pairs(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_pairs(nums :: [integer], k :: integer) :: integer\n  def count_pairs(nums, k) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n\n--- \n\n### Approach 1: Traverse number pairs\n\n#### Intuition\n\nWe use $n$ to represent the length of the array $\\textit{nums}$. To count the number of pairs that meet the requirements, we can use two nested loops to traverse all pairs (i, j) that satisfy $0 \\leq i < j < n$, and check individually whether $i \\times j \\bmod k$ is equal to $0$ and whether $\\textit{nums}[i]$ is equal to $\\textit{nums}[j]$.\n\nAt the same time, we use $\\textit{res}$ to count the number of pairs of numbers that meet the requirements. If a pair of numbers $(i, j)$ meets the requirements, we add $1$ to $\\textit{res}$. Finally, we return $\\textit{res}$ as the number of pairs of numbers that meet the requirements.\n\n#### Implementation#### Complexity Analysis\n\nLet $n$ be the length of the array $\\textit{nums}$.\n\n- Time complexity: $O(n^2)$.\n\nThis is the time complexity for traversing number pairs and counting the number of pairs that meet the requirements.\n\n- Space complexity: $O(1)$.\n\nOnly a few additional variables are needed."
}
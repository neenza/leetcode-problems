{
  "title": "Transformed Array",
  "problem_id": "3651",
  "frontend_id": "3379",
  "difficulty": "Easy",
  "problem_slug": "transformed-array",
  "topics": [
    "Array",
    "Simulation"
  ],
  "description": "You are given an integer array nums that represents a circular array. Your task is to create a new array result of the same size, following these rules:\nReturn the new array result.\nNote: Since nums is circular, moving past the last element wraps around to the beginning, and moving before the first element wraps back to the end.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [3,-2,1,1]\nOutput: [1,1,1,3]\nExplanation:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [-1,4,-1]\nOutput: [-1,-1,4]\nExplanation:",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 100",
    "-100 <= nums[i] <= 100"
  ],
  "follow_ups": [],
  "hints": [
    "Simulate the operations as described in the statement"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> constructTransformedArray(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] constructTransformedArray(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def constructTransformedArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def constructTransformedArray(self, nums: List[int]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* constructTransformedArray(int* nums, int numsSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] ConstructTransformedArray(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar constructTransformedArray = function(nums) {\n    \n};",
    "typescript": "function constructTransformedArray(nums: number[]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function constructTransformedArray($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func constructTransformedArray(_ nums: [Int]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun constructTransformedArray(nums: IntArray): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> constructTransformedArray(List<int> nums) {\n    \n  }\n}",
    "golang": "func constructTransformedArray(nums []int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef construct_transformed_array(nums)\n    \nend",
    "scala": "object Solution {\n    def constructTransformedArray(nums: Array[Int]): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn construct_transformed_array(nums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (construct-transformed-array nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )",
    "erlang": "-spec construct_transformed_array(Nums :: [integer()]) -> [integer()].\nconstruct_transformed_array(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec construct_transformed_array(nums :: [integer]) :: [integer]\n  def construct_transformed_array(nums) do\n    \n  end\nend"
  }
}
{
  "title": "Count Sorted Vowel Strings",
  "problem_id": "1761",
  "frontend_id": "1641",
  "difficulty": "Medium",
  "problem_slug": "count-sorted-vowel-strings",
  "topics": [
    "Math",
    "Dynamic Programming",
    "Combinatorics"
  ],
  "description": "Given an integer n, return the number of strings of length n that consist only of vowels (a, e, i, o, u) and are lexicographically sorted.\nA string s is lexicographically sorted if for all valid i, s[i] is the same as or comes before s[i+1] in the alphabet.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 1\nOutput: 5\nExplanation: The 5 sorted strings that consist of vowels only are [\"a\",\"e\",\"i\",\"o\",\"u\"].",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 2\nOutput: 15\nExplanation: The 15 sorted strings that consist of vowels only are\n[\"aa\",\"ae\",\"ai\",\"ao\",\"au\",\"ee\",\"ei\",\"eo\",\"eu\",\"ii\",\"io\",\"iu\",\"oo\",\"ou\",\"uu\"].\nNote that \"ea\" is not a valid string since 'e' comes after 'a' in the alphabet.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 33\nOutput: 66045",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 50"
  ],
  "follow_ups": [],
  "hints": [
    "For each character, its possible values will depend on the value of its previous character, because it needs to be not smaller than it.",
    "Think backtracking. Build a recursive function count(n, last_character) that counts the number of valid strings of length n and whose first characters are not less than last_character.",
    "In this recursive function, iterate on the possible characters for the first character, which will be all the vowels not less than last_character, and for each possible value c, increase the answer by count(n-1, c)."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int countVowelStrings(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int countVowelStrings(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countVowelStrings(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countVowelStrings(self, n: int) -> int:\n        ",
    "c": "int countVowelStrings(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int CountVowelStrings(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar countVowelStrings = function(n) {\n    \n};",
    "typescript": "function countVowelStrings(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function countVowelStrings($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countVowelStrings(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countVowelStrings(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int countVowelStrings(int n) {\n    \n  }\n}",
    "golang": "func countVowelStrings(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef count_vowel_strings(n)\n    \nend",
    "scala": "object Solution {\n    def countVowelStrings(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_vowel_strings(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (count-vowel-strings n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec count_vowel_strings(N :: integer()) -> integer().\ncount_vowel_strings(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_vowel_strings(n :: integer) :: integer\n  def count_vowel_strings(n) do\n    \n  end\nend"
  }
}
{
  "title": "Smallest Divisible Digit Product I",
  "problem_id": "3626",
  "frontend_id": "3345",
  "difficulty": "Easy",
  "problem_slug": "smallest-divisible-digit-product-i",
  "topics": [
    "Math",
    "Enumeration"
  ],
  "description": "You are given two integers n and t. Return the smallest number greater than or equal to n such that the product of its digits is divisible by t.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 10, t = 2\nOutput: 10\nExplanation:\nThe digit product of 10 is 0, which is divisible by 2, making it the smallest number greater than or equal to 10 that satisfies the condition.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 15, t = 3\nOutput: 16\nExplanation:\nThe digit product of 16 is 6, which is divisible by 3, making it the smallest number greater than or equal to 15 that satisfies the condition.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 100",
    "1 <= t <= 10"
  ],
  "follow_ups": [],
  "hints": [
    "You have to check at most 10 numbers.",
    "Apply a brute-force approach by checking each possible number."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int smallestNumber(int n, int t) {\n        \n    }\n};",
    "java": "class Solution {\n    public int smallestNumber(int n, int t) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def smallestNumber(self, n, t):\n        \"\"\"\n        :type n: int\n        :type t: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def smallestNumber(self, n: int, t: int) -> int:\n        ",
    "c": "int smallestNumber(int n, int t) {\n    \n}",
    "csharp": "public class Solution {\n    public int SmallestNumber(int n, int t) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number} t\n * @return {number}\n */\nvar smallestNumber = function(n, t) {\n    \n};",
    "typescript": "function smallestNumber(n: number, t: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $t\n     * @return Integer\n     */\n    function smallestNumber($n, $t) {\n        \n    }\n}",
    "swift": "class Solution {\n    func smallestNumber(_ n: Int, _ t: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun smallestNumber(n: Int, t: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int smallestNumber(int n, int t) {\n    \n  }\n}",
    "golang": "func smallestNumber(n int, t int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer} t\n# @return {Integer}\ndef smallest_number(n, t)\n    \nend",
    "scala": "object Solution {\n    def smallestNumber(n: Int, t: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn smallest_number(n: i32, t: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (smallest-number n t)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec smallest_number(N :: integer(), T :: integer()) -> integer().\nsmallest_number(N, T) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec smallest_number(n :: integer, t :: integer) :: integer\n  def smallest_number(n, t) do\n    \n  end\nend"
  }
}
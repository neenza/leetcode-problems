{
  "title": "Min Max Game",
  "problem_id": "2386",
  "frontend_id": "2293",
  "difficulty": "Easy",
  "problem_slug": "min-max-game",
  "topics": [
    "Array",
    "Simulation"
  ],
  "description": "You are given a 0-indexed integer array nums whose length is a power of 2.\nApply the following algorithm on nums:\nReturn the last number that remains in nums after applying the algorithm.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,3,5,2,4,8,2,2]\nOutput: 1\nExplanation: The following arrays are the results of applying the algorithm repeatedly.\nFirst: nums = [1,5,4,2]\nSecond: nums = [1,4]\nThird: nums = [1]\n1 is the last remaining number, so we return 1.",
      "images": [
        "https://assets.leetcode.com/uploads/2022/04/13/example1drawio-1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [3]\nOutput: 3\nExplanation: 3 is already the last remaining number, so we return 3.",
      "images": [
        "https://assets.leetcode.com/uploads/2022/04/13/example1drawio-1.png"
      ]
    }
  ],
  "constraints": [
    "1 <= nums.length <= 1024",
    "1 <= nums[i] <= 109",
    "nums.length is a power of 2."
  ],
  "follow_ups": [],
  "hints": [
    "Simply simulate the algorithm.",
    "Note that the size of the array decreases exponentially, so the process will terminate after just O(log n) steps."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minMaxGame(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minMaxGame(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minMaxGame(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minMaxGame(self, nums: List[int]) -> int:\n        ",
    "c": "int minMaxGame(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinMaxGame(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minMaxGame = function(nums) {\n    \n};",
    "typescript": "function minMaxGame(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minMaxGame($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minMaxGame(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minMaxGame(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minMaxGame(List<int> nums) {\n    \n  }\n}",
    "golang": "func minMaxGame(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef min_max_game(nums)\n    \nend",
    "scala": "object Solution {\n    def minMaxGame(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_max_game(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-max-game nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec min_max_game(Nums :: [integer()]) -> integer().\nmin_max_game(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_max_game(nums :: [integer]) :: integer\n  def min_max_game(nums) do\n    \n  end\nend"
  }
}
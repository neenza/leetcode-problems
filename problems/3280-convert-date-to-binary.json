{
  "title": "Convert Date to Binary",
  "problem_id": "3567",
  "frontend_id": "3280",
  "difficulty": "Easy",
  "problem_slug": "convert-date-to-binary",
  "topics": [
    "Math",
    "String"
  ],
  "description": "You are given a string date representing a Gregorian calendar date in the yyyy-mm-dd format.\ndate can be written in its binary representation obtained by converting year, month, and day to their binary representations without any leading zeroes and writing them down in year-month-day format.\nReturn the binary representation of date.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: date = \"2080-02-29\"\nOutput: \"100000100000-10-11101\"\nExplanation:\n100000100000, 10, and 11101 are the binary representations of 2080, 02, and 29 respectively.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: date = \"1900-01-01\"\nOutput: \"11101101100-1-1\"\nExplanation:\n11101101100, 1, and 1 are the binary representations of 1900, 1, and 1 respectively.",
      "images": []
    }
  ],
  "constraints": [
    "date.length == 10",
    "date[4] == date[7] == '-', and all other date[i]'s are digits.",
    "The input is generated such that date represents a valid Gregorian calendar date between Jan 1st, 1900 and Dec 31st, 2100 (both inclusive)."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string convertDateToBinary(string date) {\n        \n    }\n};",
    "java": "class Solution {\n    public String convertDateToBinary(String date) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def convertDateToBinary(self, date):\n        \"\"\"\n        :type date: str\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def convertDateToBinary(self, date: str) -> str:\n        ",
    "c": "char* convertDateToBinary(char* date) {\n    \n}",
    "csharp": "public class Solution {\n    public string ConvertDateToBinary(string date) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} date\n * @return {string}\n */\nvar convertDateToBinary = function(date) {\n    \n};",
    "typescript": "function convertDateToBinary(date: string): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $date\n     * @return String\n     */\n    function convertDateToBinary($date) {\n        \n    }\n}",
    "swift": "class Solution {\n    func convertDateToBinary(_ date: String) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun convertDateToBinary(date: String): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String convertDateToBinary(String date) {\n    \n  }\n}",
    "golang": "func convertDateToBinary(date string) string {\n    \n}",
    "ruby": "# @param {String} date\n# @return {String}\ndef convert_date_to_binary(date)\n    \nend",
    "scala": "object Solution {\n    def convertDateToBinary(date: String): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn convert_date_to_binary(date: String) -> String {\n        \n    }\n}",
    "racket": "(define/contract (convert-date-to-binary date)\n  (-> string? string?)\n  )",
    "erlang": "-spec convert_date_to_binary(Date :: unicode:unicode_binary()) -> unicode:unicode_binary().\nconvert_date_to_binary(Date) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec convert_date_to_binary(date :: String.t) :: String.t\n  def convert_date_to_binary(date) do\n    \n  end\nend"
  }
}
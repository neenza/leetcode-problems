{
  "title": "Find a Value of a Mysterious Function Closest to Target",
  "problem_id": "1645",
  "frontend_id": "1521",
  "difficulty": "Hard",
  "problem_slug": "find-a-value-of-a-mysterious-function-closest-to-target",
  "topics": [
    "Array",
    "Binary Search",
    "Bit Manipulation",
    "Segment Tree"
  ],
  "description": "Winston was given the above mysterious function func. He has an integer array arr and an integer target and he wants to find the values l and r that make the value |func(arr, l, r) - target| minimum possible.\nReturn the minimum possible value of |func(arr, l, r) - target|.\nNotice that func should be called with the values l and r where 0 <= l, r < arr.length.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: arr = [9,12,3,7,15], target = 5\nOutput: 2\nExplanation: Calling func with all the pairs of [l,r] = [[0,0],[1,1],[2,2],[3,3],[4,4],[0,1],[1,2],[2,3],[3,4],[0,2],[1,3],[2,4],[0,3],[1,4],[0,4]], Winston got the following results [9,12,3,7,15,8,0,3,7,0,0,3,0,0,0]. The value closest to 5 is 7 and 3, thus the minimum difference is 2.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/07/09/change.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: arr = [1000000,1000000,1000000], target = 1\nOutput: 999999\nExplanation: Winston called the func with all possible values of [l,r] and he always got 1000000, thus the min difference is 999999.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/07/09/change.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: arr = [1,2,4,8,16], target = 0\nOutput: 0",
      "images": [
        "https://assets.leetcode.com/uploads/2020/07/09/change.png"
      ]
    }
  ],
  "constraints": [
    "1 <= arr.length <= 105",
    "1 <= arr[i] <= 106",
    "0 <= target <= 107"
  ],
  "follow_ups": [],
  "hints": [
    "If the and value of sub-array arr[i...j] is â‰¥ the and value of the sub-array arr[i...j+1].",
    "For each index i using binary search or ternary search find the index j where |target - AND(arr[i...j])| is minimum, minimize this value with the global answer."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int closestToTarget(vector<int>& arr, int target) {\n        \n    }\n};",
    "java": "class Solution {\n    public int closestToTarget(int[] arr, int target) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def closestToTarget(self, arr, target):\n        \"\"\"\n        :type arr: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def closestToTarget(self, arr: List[int], target: int) -> int:\n        ",
    "c": "int closestToTarget(int* arr, int arrSize, int target) {\n    \n}",
    "csharp": "public class Solution {\n    public int ClosestToTarget(int[] arr, int target) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} arr\n * @param {number} target\n * @return {number}\n */\nvar closestToTarget = function(arr, target) {\n    \n};",
    "typescript": "function closestToTarget(arr: number[], target: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @param Integer $target\n     * @return Integer\n     */\n    function closestToTarget($arr, $target) {\n        \n    }\n}",
    "swift": "class Solution {\n    func closestToTarget(_ arr: [Int], _ target: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun closestToTarget(arr: IntArray, target: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int closestToTarget(List<int> arr, int target) {\n    \n  }\n}",
    "golang": "func closestToTarget(arr []int, target int) int {\n    \n}",
    "ruby": "# @param {Integer[]} arr\n# @param {Integer} target\n# @return {Integer}\ndef closest_to_target(arr, target)\n    \nend",
    "scala": "object Solution {\n    def closestToTarget(arr: Array[Int], target: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn closest_to_target(arr: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (closest-to-target arr target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec closest_to_target(Arr :: [integer()], Target :: integer()) -> integer().\nclosest_to_target(Arr, Target) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec closest_to_target(arr :: [integer], target :: integer) :: integer\n  def closest_to_target(arr, target) do\n    \n  end\nend"
  }
}
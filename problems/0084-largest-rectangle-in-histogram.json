{
  "title": "Largest Rectangle in Histogram",
  "problem_id": "84",
  "frontend_id": "84",
  "difficulty": "Hard",
  "problem_slug": "largest-rectangle-in-histogram",
  "topics": [
    "Array",
    "Stack",
    "Monotonic Stack"
  ],
  "description": "Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: heights = [2,1,5,6,2,3]\nOutput: 10\nExplanation: The above is a histogram where width of each bar is 1.\nThe largest rectangle is shown in the red area, which has an area = 10 units.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: heights = [2,4]\nOutput: 4",
      "images": [
        "https://assets.leetcode.com/uploads/2021/01/04/histogram-1.jpg"
      ]
    }
  ],
  "constraints": [
    "1 <= heights.length <= 105",
    "0 <= heights[i] <= 104"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int largestRectangleArea(vector<int>& heights) {\n        \n    }\n};",
    "java": "class Solution {\n    public int largestRectangleArea(int[] heights) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        ",
    "c": "int largestRectangleArea(int* heights, int heightsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int LargestRectangleArea(int[] heights) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} heights\n * @return {number}\n */\nvar largestRectangleArea = function(heights) {\n    \n};",
    "typescript": "function largestRectangleArea(heights: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $heights\n     * @return Integer\n     */\n    function largestRectangleArea($heights) {\n        \n    }\n}",
    "swift": "class Solution {\n    func largestRectangleArea(_ heights: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun largestRectangleArea(heights: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int largestRectangleArea(List<int> heights) {\n    \n  }\n}",
    "golang": "func largestRectangleArea(heights []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} heights\n# @return {Integer}\ndef largest_rectangle_area(heights)\n    \nend",
    "scala": "object Solution {\n    def largestRectangleArea(heights: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn largest_rectangle_area(heights: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (largest-rectangle-area heights)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec largest_rectangle_area(Heights :: [integer()]) -> integer().\nlargest_rectangle_area(Heights) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec largest_rectangle_area(heights :: [integer]) :: integer\n  def largest_rectangle_area(heights) do\n    \n  end\nend"
  }
}
{
  "title": "Split a String in Balanced Strings",
  "problem_id": "1341",
  "frontend_id": "1221",
  "difficulty": "Easy",
  "problem_slug": "split-a-string-in-balanced-strings",
  "topics": [
    "String",
    "Greedy",
    "Counting"
  ],
  "description": "Balanced strings are those that have an equal quantity of 'L' and 'R' characters.\nGiven a balanced string s, split it into some number of substrings such that:\nReturn the maximum number of balanced strings you can obtain.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"RLRRLLRLRL\"\nOutput: 4\nExplanation: s can be split into \"RL\", \"RRLL\", \"RL\", \"RL\", each substring contains same number of 'L' and 'R'.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"RLRRRLLRLL\"\nOutput: 2\nExplanation: s can be split into \"RL\", \"RRRLLRLL\", each substring contains same number of 'L' and 'R'.\nNote that s cannot be split into \"RL\", \"RR\", \"RL\", \"LR\", \"LL\", because the 2nd and 5th substrings are not balanced.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"LLLLRRRR\"\nOutput: 1\nExplanation: s can be split into \"LLLLRRRR\".",
      "images": []
    }
  ],
  "constraints": [
    "2 <= s.length <= 1000",
    "s[i] is either 'L' or 'R'.",
    "s is a balanced string."
  ],
  "follow_ups": [],
  "hints": [
    "Loop from left to right maintaining a balance variable when it gets an L increase it by one otherwise decrease it by one.",
    "Whenever the balance variable reaches zero then we increase the answer by one."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int balancedStringSplit(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public int balancedStringSplit(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def balancedStringSplit(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def balancedStringSplit(self, s: str) -> int:\n        ",
    "c": "int balancedStringSplit(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public int BalancedStringSplit(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {number}\n */\nvar balancedStringSplit = function(s) {\n    \n};",
    "typescript": "function balancedStringSplit(s: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function balancedStringSplit($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func balancedStringSplit(_ s: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun balancedStringSplit(s: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int balancedStringSplit(String s) {\n    \n  }\n}",
    "golang": "func balancedStringSplit(s string) int {\n    \n}",
    "ruby": "# @param {String} s\n# @return {Integer}\ndef balanced_string_split(s)\n    \nend",
    "scala": "object Solution {\n    def balancedStringSplit(s: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn balanced_string_split(s: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (balanced-string-split s)\n  (-> string? exact-integer?)\n  )",
    "erlang": "-spec balanced_string_split(S :: unicode:unicode_binary()) -> integer().\nbalanced_string_split(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec balanced_string_split(s :: String.t) :: integer\n  def balanced_string_split(s) do\n    \n  end\nend"
  }
}
{
  "title": "Check if an Original String Exists Given Two Encoded Strings",
  "problem_id": "2184",
  "frontend_id": "2060",
  "difficulty": "Hard",
  "problem_slug": "check-if-an-original-string-exists-given-two-encoded-strings",
  "topics": [
    "String",
    "Dynamic Programming"
  ],
  "description": "An original string, consisting of lowercase English letters, can be encoded by the following steps:\nFor example, one way to encode an original string \"abcdefghijklmnop\" might be:\nGiven two encoded strings s1 and s2, consisting of lowercase English letters and digits 1-9 (inclusive), return true if there exists an original string that could be encoded as both s1 and s2. Otherwise, return false.\nNote: The test cases are generated such that the number of consecutive digits in s1 and s2 does not exceed 3.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s1 = \"internationalization\", s2 = \"i18n\"\nOutput: true\nExplanation: It is possible that \"internationalization\" was the original string.\n- \"internationalization\" \n  -> Split:       [\"internationalization\"]\n  -> Do not replace any element\n  -> Concatenate:  \"internationalization\", which is s1.\n- \"internationalization\"\n  -> Split:       [\"i\", \"nternationalizatio\", \"n\"]\n  -> Replace:     [\"i\", \"18\",                 \"n\"]\n  -> Concatenate:  \"i18n\", which is s2",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s1 = \"l123e\", s2 = \"44\"\nOutput: true\nExplanation: It is possible that \"leetcode\" was the original string.\n- \"leetcode\" \n  -> Split:      [\"l\", \"e\", \"et\", \"cod\", \"e\"]\n  -> Replace:    [\"l\", \"1\", \"2\",  \"3\",   \"e\"]\n  -> Concatenate: \"l123e\", which is s1.\n- \"leetcode\" \n  -> Split:      [\"leet\", \"code\"]\n  -> Replace:    [\"4\",    \"4\"]\n  -> Concatenate: \"44\", which is s2.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s1 = \"a5b\", s2 = \"c5b\"\nOutput: false\nExplanation: It is impossible.\n- The original string encoded as s1 must start with the letter 'a'.\n- The original string encoded as s2 must start with the letter 'c'.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s1.length, s2.length <= 40",
    "s1 and s2 consist of digits 1-9 (inclusive), and lowercase English letters only.",
    "The number of consecutive digits in s1 and s2 does not exceed 3."
  ],
  "follow_ups": [],
  "hints": [
    "For s1 and s2, divide each into a sequence of single alphabet strings and digital strings. The problem now becomes comparing if two sequences are equal.",
    "A single alphabet string has no variation, but a digital string has variations. For example: \"124\" can be interpreted as 1+2+4, 12+4, 1+24, and 124 wildcard characters.",
    "There are four kinds of comparisons: a single alphabet vs another; a single alphabet vs a number, a number vs a single alphabet, and a number vs another number. In the case of a number vs another (a single alphabet or a number), can you decrease the number by the min length of both?",
    "There is a recurrence relation in the search which ends when either a single alphabet != another, or one sequence ran out, or both sequences ran out."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool possiblyEquals(string s1, string s2) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean possiblyEquals(String s1, String s2) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def possiblyEquals(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def possiblyEquals(self, s1: str, s2: str) -> bool:\n        ",
    "c": "bool possiblyEquals(char* s1, char* s2) {\n    \n}",
    "csharp": "public class Solution {\n    public bool PossiblyEquals(string s1, string s2) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s1\n * @param {string} s2\n * @return {boolean}\n */\nvar possiblyEquals = function(s1, s2) {\n    \n};",
    "typescript": "function possiblyEquals(s1: string, s2: string): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @return Boolean\n     */\n    function possiblyEquals($s1, $s2) {\n        \n    }\n}",
    "swift": "class Solution {\n    func possiblyEquals(_ s1: String, _ s2: String) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun possiblyEquals(s1: String, s2: String): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool possiblyEquals(String s1, String s2) {\n    \n  }\n}",
    "golang": "func possiblyEquals(s1 string, s2 string) bool {\n    \n}",
    "ruby": "# @param {String} s1\n# @param {String} s2\n# @return {Boolean}\ndef possibly_equals(s1, s2)\n    \nend",
    "scala": "object Solution {\n    def possiblyEquals(s1: String, s2: String): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn possibly_equals(s1: String, s2: String) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (possibly-equals s1 s2)\n  (-> string? string? boolean?)\n  )",
    "erlang": "-spec possibly_equals(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary()) -> boolean().\npossibly_equals(S1, S2) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec possibly_equals(s1 :: String.t, s2 :: String.t) :: boolean\n  def possibly_equals(s1, s2) do\n    \n  end\nend"
  }
}
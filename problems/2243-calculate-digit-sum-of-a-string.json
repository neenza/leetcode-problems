{
  "title": "Calculate Digit Sum of a String",
  "problem_id": "2361",
  "frontend_id": "2243",
  "difficulty": "Easy",
  "problem_slug": "calculate-digit-sum-of-a-string",
  "topics": [
    "String",
    "Simulation"
  ],
  "description": "You are given a string s consisting of digits and an integer k.\nA round can be completed if the length of s is greater than k. In one round, do the following:\nReturn s after all rounds have been completed.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"11111222223\", k = 3\nOutput: \"135\"\nExplanation: \n- For the first round, we divide s into groups of size 3: \"111\", \"112\", \"222\", and \"23\".\n  ​​​​​Then we calculate the digit sum of each group: 1 + 1 + 1 = 3, 1 + 1 + 2 = 4, 2 + 2 + 2 = 6, and 2 + 3 = 5. \n  So, s becomes \"3\" + \"4\" + \"6\" + \"5\" = \"3465\" after the first round.\n- For the second round, we divide s into \"346\" and \"5\".\n  Then we calculate the digit sum of each group: 3 + 4 + 6 = 13, 5 = 5. \n  So, s becomes \"13\" + \"5\" = \"135\" after second round. \nNow, s.length <= k, so we return \"135\" as the answer.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"00000000\", k = 3\nOutput: \"000\"\nExplanation: \nWe divide s into \"000\", \"000\", and \"00\".\nThen we calculate the digit sum of each group: 0 + 0 + 0 = 0, 0 + 0 + 0 = 0, and 0 + 0 = 0. \ns becomes \"0\" + \"0\" + \"0\" = \"000\", whose length is equal to k, so we return \"000\".",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 100",
    "2 <= k <= 100",
    "s consists of digits only."
  ],
  "follow_ups": [],
  "hints": [
    "Try simulating the entire process to find the final answer."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string digitSum(string s, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public String digitSum(String s, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def digitSum(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def digitSum(self, s: str, k: int) -> str:\n        ",
    "c": "char* digitSum(char* s, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public string DigitSum(string s, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @param {number} k\n * @return {string}\n */\nvar digitSum = function(s, k) {\n    \n};",
    "typescript": "function digitSum(s: string, k: number): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return String\n     */\n    function digitSum($s, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func digitSum(_ s: String, _ k: Int) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun digitSum(s: String, k: Int): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String digitSum(String s, int k) {\n    \n  }\n}",
    "golang": "func digitSum(s string, k int) string {\n    \n}",
    "ruby": "# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef digit_sum(s, k)\n    \nend",
    "scala": "object Solution {\n    def digitSum(s: String, k: Int): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn digit_sum(s: String, k: i32) -> String {\n        \n    }\n}",
    "racket": "(define/contract (digit-sum s k)\n  (-> string? exact-integer? string?)\n  )",
    "erlang": "-spec digit_sum(S :: unicode:unicode_binary(), K :: integer()) -> unicode:unicode_binary().\ndigit_sum(S, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec digit_sum(s :: String.t, k :: integer) :: String.t\n  def digit_sum(s, k) do\n    \n  end\nend"
  }
}
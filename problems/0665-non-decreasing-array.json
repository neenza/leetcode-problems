{
  "title": "Non-decreasing Array",
  "problem_id": "665",
  "frontend_id": "665",
  "difficulty": "Medium",
  "problem_slug": "non-decreasing-array",
  "topics": [
    "Array"
  ],
  "description": "Given an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most one element.\nWe define an array is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) such that (0 <= i <= n - 2).\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [4,2,3]\nOutput: true\nExplanation: You could modify the first 4 to 1 to get a non-decreasing array.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [4,2,1]\nOutput: false\nExplanation: You cannot get a non-decreasing array by modifying at most one element.",
      "images": []
    }
  ],
  "constraints": [
    "n == nums.length",
    "1 <= n <= 104",
    "-105 <= nums[i] <= 105"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool checkPossibility(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean checkPossibility(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def checkPossibility(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def checkPossibility(self, nums: List[int]) -> bool:\n        ",
    "c": "bool checkPossibility(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public bool CheckPossibility(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar checkPossibility = function(nums) {\n    \n};",
    "typescript": "function checkPossibility(nums: number[]): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function checkPossibility($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func checkPossibility(_ nums: [Int]) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun checkPossibility(nums: IntArray): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool checkPossibility(List<int> nums) {\n    \n  }\n}",
    "golang": "func checkPossibility(nums []int) bool {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Boolean}\ndef check_possibility(nums)\n    \nend",
    "scala": "object Solution {\n    def checkPossibility(nums: Array[Int]): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn check_possibility(nums: Vec<i32>) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (check-possibility nums)\n  (-> (listof exact-integer?) boolean?)\n  )",
    "erlang": "-spec check_possibility(Nums :: [integer()]) -> boolean().\ncheck_possibility(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec check_possibility(nums :: [integer]) :: boolean\n  def check_possibility(nums) do\n    \n  end\nend"
  }
}
{
  "title": "Most Frequent Even Element",
  "problem_id": "2486",
  "frontend_id": "2404",
  "difficulty": "Easy",
  "problem_slug": "most-frequent-even-element",
  "topics": [
    "Array",
    "Hash Table",
    "Counting"
  ],
  "description": "Given an integer array nums, return the most frequent even element.\nIf there is a tie, return the smallest one. If there is no such element, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [0,1,2,2,4,4,1]\nOutput: 2\nExplanation:\nThe even elements are 0, 2, and 4. Of these, 2 and 4 appear the most.\nWe return the smallest one, which is 2.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [4,4,4,9,2,4]\nOutput: 4\nExplanation: 4 is the even element appears the most.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [29,47,21,41,13,37,25,7]\nOutput: -1\nExplanation: There is no even element.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 2000",
    "0 <= nums[i] <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "Could you count the frequency of each even element in the array?",
    "Would a hashmap help?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int mostFrequentEven(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int mostFrequentEven(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def mostFrequentEven(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def mostFrequentEven(self, nums: List[int]) -> int:\n        ",
    "c": "int mostFrequentEven(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MostFrequentEven(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar mostFrequentEven = function(nums) {\n    \n};",
    "typescript": "function mostFrequentEven(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function mostFrequentEven($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func mostFrequentEven(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun mostFrequentEven(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int mostFrequentEven(List<int> nums) {\n    \n  }\n}",
    "golang": "func mostFrequentEven(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef most_frequent_even(nums)\n    \nend",
    "scala": "object Solution {\n    def mostFrequentEven(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn most_frequent_even(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (most-frequent-even nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec most_frequent_even(Nums :: [integer()]) -> integer().\nmost_frequent_even(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec most_frequent_even(nums :: [integer]) :: integer\n  def most_frequent_even(nums) do\n    \n  end\nend"
  }
}
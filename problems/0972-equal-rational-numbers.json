{
  "title": "Equal Rational Numbers",
  "problem_id": "1012",
  "frontend_id": "972",
  "difficulty": "Hard",
  "problem_slug": "equal-rational-numbers",
  "topics": [
    "Math",
    "String"
  ],
  "description": "Given two strings s and t, each of which represents a non-negative rational number, return true if and only if they represent the same number. The strings may use parentheses to denote the repeating part of the rational number.\nA rational number can be represented using up to three parts: <IntegerPart>, <NonRepeatingPart>, and a <RepeatingPart>. The number will be represented in one of the following three ways:\nThe repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets. For example:\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"0.(52)\", t = \"0.5(25)\"\nOutput: true\nExplanation: Because \"0.(52)\" represents 0.52525252..., and \"0.5(25)\" represents 0.52525252525..... , the strings represent the same number.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"0.1666(6)\", t = \"0.166(66)\"\nOutput: true",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"0.9(9)\", t = \"1.\"\nOutput: true\nExplanation: \"0.9(9)\" represents 0.999999999... repeated forever, which equals 1.  [See this link for an explanation.]\n\"1.\" represents the number 1, which is formed correctly: (IntegerPart) = \"1\" and (NonRepeatingPart) = \"\".",
      "images": []
    }
  ],
  "constraints": [
    "Each part consists only of digits.",
    "The <IntegerPart> does not have leading zeros (except for the zero itself).",
    "1 <= <IntegerPart>.length <= 4",
    "0 <= <NonRepeatingPart>.length <= 4",
    "1 <= <RepeatingPart>.length <= 4"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool isRationalEqual(string s, string t) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean isRationalEqual(String s, String t) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def isRationalEqual(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def isRationalEqual(self, s: str, t: str) -> bool:\n        ",
    "c": "bool isRationalEqual(char* s, char* t) {\n    \n}",
    "csharp": "public class Solution {\n    public bool IsRationalEqual(string s, string t) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isRationalEqual = function(s, t) {\n    \n};",
    "typescript": "function isRationalEqual(s: string, t: string): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return Boolean\n     */\n    function isRationalEqual($s, $t) {\n        \n    }\n}",
    "swift": "class Solution {\n    func isRationalEqual(_ s: String, _ t: String) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun isRationalEqual(s: String, t: String): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool isRationalEqual(String s, String t) {\n    \n  }\n}",
    "golang": "func isRationalEqual(s string, t string) bool {\n    \n}",
    "ruby": "# @param {String} s\n# @param {String} t\n# @return {Boolean}\ndef is_rational_equal(s, t)\n    \nend",
    "scala": "object Solution {\n    def isRationalEqual(s: String, t: String): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn is_rational_equal(s: String, t: String) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (is-rational-equal s t)\n  (-> string? string? boolean?)\n  )",
    "erlang": "-spec is_rational_equal(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> boolean().\nis_rational_equal(S, T) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec is_rational_equal(s :: String.t, t :: String.t) :: boolean\n  def is_rational_equal(s, t) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n---\n### Approach 1: Fraction Class\n\n**Intuition**\n\nAs both numbers represent a fraction, we need a fraction class to handle fractions.  It should help us add two fractions together, keeping the answer in lowest terms.\n\n**Algorithm**\n\nWe need to make sense of the fraction we are given.  The hard part is the repeating part.\n\nSay we have a string like `S = \"0.(12)\"`.  It represents (for $$r = \\frac{1}{100}$$):\n\n$$\nS = \\frac{12}{100} + \\frac{12}{10000} + \\frac{12}{10^6} + \\frac{12}{10^8} + \\frac{12}{10^{10}} + \\cdots\n$$\n\n$$\nS = 12 * (r + r^2 + r^3 + \\cdots)\n$$\n\n$$\nS = 12 * \\frac{r}{1-r}\n$$\n\nas the sum $$(r + r^2 + r^3 + \\cdots)$$ is a geometric sum.\n\nIn general, for a repeating part $$x$$ with length $$k$$, we have $$r = 10^{-k}$$ and the contribution is $$\\frac{xr}{1-r}$$.\n\nThe other two parts are easier, as it is just a literal interpretation of the value.**Complexity Analysis**\n\n* Time Complexity:  $$O(1)$$, if we take the length of $$S, T$$ as $$O(1)$$.\n\n* Space Complexity:  $$O(1)$$."
}
{
  "title": "Sum of Two Integers",
  "problem_id": "371",
  "frontend_id": "371",
  "difficulty": "Medium",
  "problem_slug": "sum-of-two-integers",
  "topics": [
    "Math",
    "Bit Manipulation"
  ],
  "description": "Given two integers a and b, return the sum of the two integers without using the operators + and -.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: a = 1, b = 2\nOutput: 3",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: a = 2, b = 3\nOutput: 5",
      "images": []
    }
  ],
  "constraints": [
    "-1000 <= a, b <= 1000"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int getSum(int a, int b) {\n        \n    }\n};",
    "java": "class Solution {\n    public int getSum(int a, int b) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def getSum(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def getSum(self, a: int, b: int) -> int:\n        ",
    "c": "int getSum(int a, int b) {\n    \n}",
    "csharp": "public class Solution {\n    public int GetSum(int a, int b) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nvar getSum = function(a, b) {\n    \n};",
    "typescript": "function getSum(a: number, b: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $a\n     * @param Integer $b\n     * @return Integer\n     */\n    function getSum($a, $b) {\n        \n    }\n}",
    "swift": "class Solution {\n    func getSum(_ a: Int, _ b: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun getSum(a: Int, b: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int getSum(int a, int b) {\n    \n  }\n}",
    "golang": "func getSum(a int, b int) int {\n    \n}",
    "ruby": "# @param {Integer} a\n# @param {Integer} b\n# @return {Integer}\ndef get_sum(a, b)\n    \nend",
    "scala": "object Solution {\n    def getSum(a: Int, b: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn get_sum(a: i32, b: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (get-sum a b)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec get_sum(A :: integer(), B :: integer()) -> integer().\nget_sum(A, B) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec get_sum(a :: integer, b :: integer) :: integer\n  def get_sum(a, b) do\n    \n  end\nend"
  }
}
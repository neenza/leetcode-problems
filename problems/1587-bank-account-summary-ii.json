{
  "title": "Bank Account Summary II",
  "problem_id": "1734",
  "frontend_id": "1587",
  "difficulty": "Easy",
  "problem_slug": "bank-account-summary-ii",
  "topics": [
    "Database"
  ],
  "description": "Table: Users\nTable: Transactions\nWrite a solution to report the name and balance of users with a balance higher than 10000. The balance of an account is equal to the sum of the amounts of all transactions involving that account.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| account      | int     |\n| name         | varchar |\n+--------------+---------+\naccount is the primary key (column with unique values) for this table.\nEach row of this table contains the account number of each user in the bank.\nThere will be no two users having the same name in the table.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| trans_id      | int     |\n| account       | int     |\n| amount        | int     |\n| transacted_on | date    |\n+---------------+---------+\ntrans_id is the primary key (column with unique values) for this table.\nEach row of this table contains all changes made to all accounts.\namount is positive if the user received money and negative if they transferred money.\nAll accounts start with a balance of 0.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: \nUsers table:\n+------------+--------------+\n| account    | name         |\n+------------+--------------+\n| 900001     | Alice        |\n| 900002     | Bob          |\n| 900003     | Charlie      |\n+------------+--------------+\nTransactions table:\n+------------+------------+------------+---------------+\n| trans_id   | account    | amount     | transacted_on |\n+------------+------------+------------+---------------+\n| 1          | 900001     | 7000       |  2020-08-01   |\n| 2          | 900001     | 7000       |  2020-09-01   |\n| 3          | 900001     | -3000      |  2020-09-02   |\n| 4          | 900002     | 1000       |  2020-09-12   |\n| 5          | 900003     | 6000       |  2020-08-07   |\n| 6          | 900003     | 6000       |  2020-09-07   |\n| 7          | 900003     | -4000      |  2020-09-11   |\n+------------+------------+------------+---------------+\nOutput: \n+------------+------------+\n| name       | balance    |\n+------------+------------+\n| Alice      | 11000      |\n+------------+------------+\nExplanation: \nAlice's balance is (7000 + 7000 - 3000) = 11000.\nBob's balance is 1000.\nCharlie's balance is (6000 + 6000 - 4000) = 8000.",
      "images": []
    }
  ],
  "constraints": [],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "mysql": "# Write your MySQL query statement below\n",
    "mssql": "/* Write your T-SQL query statement below */\n",
    "oraclesql": "/* Write your PL/SQL query statement below */\n",
    "pythondata": "import pandas as pd\n\ndef account_summary(users: pd.DataFrame, transactions: pd.DataFrame) -> pd.DataFrame:\n    ",
    "postgresql": "-- Write your PostgreSQL query statement below\n"
  },
  "solution": "[TOC]\n\n## Solution\n\n--- \n\n### Overview\n\nSince each user has only one name but multiple transactions (`amount`), it's easier to calculate the balance for each `account` to identify the qualified accounts (with a balance higher than 10000), and then join the other table to get the user name. \n\n---\n\n### Approach 1: First Calculate Then JOIN\n\n#### Algorithm\n\n1. Use `SUM()` to get the total balance for each account\n2. Use `HAVING` to filter the aggregated results (total balance for each account) and return only the qualified accounts\n3. Join the User table to get the user name for these accounts\n\n##### MySQL\n\nStep 1 and 2\n\n```sql\nSELECT \n    account, SUM(amount) as balance\nFROM \n    Transactions\nGROUP BY 1\nHAVING \n    balance>10000\n```\nStep 3 - Join the subquery created in the previous steps to the other table\n\n```sql\nSELECT \n    DISTINCT a.name, b.balance\nFROM \n    Users a\nJOIN (\n    SELECT \n        account, SUM(amount) as balance\n    FROM \n        Transactions\n    GROUP BY 1\n    HAVING balance>10000) b\nON \n    a.account = b.account \n```\n\n---\n\n### Approach 2: Use JOIN and Calculate At Same Time\n\n#### Algorithm\n\n1. Select the two columns needed for the final output: `name` of the user, and the `balance` (SUM of the column `amount`)\n2. `JOIN` the two tables\n3. `GROUP` the results by each account, so the query will return only one result for each user\n4. Use `HAVING` to filter the aggregated results and return only the qualified accounts\n\n##### MySQL\n```sql\nSELECT \n    u.name, SUM(t.amount) AS balance\nFROM \n    Users u\nJOIN \n    Transactions t\nON \n    u.account = t.account\nGROUP BY u.account\nHAVING \n    balance > 10000\n```\n\n-----"
}
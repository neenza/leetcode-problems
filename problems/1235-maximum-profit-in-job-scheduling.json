{
  "title": "Maximum Profit in Job Scheduling",
  "problem_id": "1352",
  "frontend_id": "1235",
  "difficulty": "Hard",
  "problem_slug": "maximum-profit-in-job-scheduling",
  "topics": [
    "Array",
    "Binary Search",
    "Dynamic Programming",
    "Sorting"
  ],
  "description": "We have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].\nYou're given the startTime, endTime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.\nIf you choose a job that ends at time X you will be able to start another job that starts at time X.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]\nOutput: 120\nExplanation: The subset chosen is the first and fourth job. \nTime range [1-3]+[3-6] , we get profit of 120 = 50 + 70.",
      "images": [
        "https://assets.leetcode.com/uploads/2019/10/10/sample1_1584.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]\nOutput: 150\nExplanation: The subset chosen is the first, fourth and fifth job. \nProfit obtained 150 = 20 + 70 + 60.",
      "images": [
        "https://assets.leetcode.com/uploads/2019/10/10/sample22_1584.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]\nOutput: 6",
      "images": [
        "https://assets.leetcode.com/uploads/2019/10/10/sample3_1584.png"
      ]
    }
  ],
  "constraints": [
    "1 <= startTime.length == endTime.length == profit.length <= 5 * 104",
    "1 <= startTime[i] < endTime[i] <= 109",
    "1 <= profit[i] <= 104"
  ],
  "follow_ups": [],
  "hints": [
    "Think on DP.",
    "Sort the elements by starting time, then define the dp[i] as the maximum profit taking elements from the suffix starting at i.",
    "Use binarySearch (lower_bound/upper_bound on C++) to get the next index for the DP transition."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {\n        \n    }\n};",
    "java": "class Solution {\n    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def jobScheduling(self, startTime, endTime, profit):\n        \"\"\"\n        :type startTime: List[int]\n        :type endTime: List[int]\n        :type profit: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def jobScheduling(self, startTime: List[int], endTime: List[int], profit: List[int]) -> int:\n        ",
    "c": "int jobScheduling(int* startTime, int startTimeSize, int* endTime, int endTimeSize, int* profit, int profitSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int JobScheduling(int[] startTime, int[] endTime, int[] profit) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} startTime\n * @param {number[]} endTime\n * @param {number[]} profit\n * @return {number}\n */\nvar jobScheduling = function(startTime, endTime, profit) {\n    \n};",
    "typescript": "function jobScheduling(startTime: number[], endTime: number[], profit: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $startTime\n     * @param Integer[] $endTime\n     * @param Integer[] $profit\n     * @return Integer\n     */\n    function jobScheduling($startTime, $endTime, $profit) {\n        \n    }\n}",
    "swift": "class Solution {\n    func jobScheduling(_ startTime: [Int], _ endTime: [Int], _ profit: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun jobScheduling(startTime: IntArray, endTime: IntArray, profit: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int jobScheduling(List<int> startTime, List<int> endTime, List<int> profit) {\n    \n  }\n}",
    "golang": "func jobScheduling(startTime []int, endTime []int, profit []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} start_time\n# @param {Integer[]} end_time\n# @param {Integer[]} profit\n# @return {Integer}\ndef job_scheduling(start_time, end_time, profit)\n    \nend",
    "scala": "object Solution {\n    def jobScheduling(startTime: Array[Int], endTime: Array[Int], profit: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn job_scheduling(start_time: Vec<i32>, end_time: Vec<i32>, profit: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (job-scheduling startTime endTime profit)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec job_scheduling(StartTime :: [integer()], EndTime :: [integer()], Profit :: [integer()]) -> integer().\njob_scheduling(StartTime, EndTime, Profit) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec job_scheduling(start_time :: [integer], end_time :: [integer], profit :: [integer]) :: integer\n  def job_scheduling(start_time, end_time, profit) do\n    \n  end\nend"
  }
}
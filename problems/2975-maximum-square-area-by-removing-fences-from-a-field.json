{
  "title": "Maximum Square Area by Removing Fences From a Field",
  "problem_id": "3250",
  "frontend_id": "2975",
  "difficulty": "Medium",
  "problem_slug": "maximum-square-area-by-removing-fences-from-a-field",
  "topics": [
    "Array",
    "Hash Table",
    "Enumeration"
  ],
  "description": "There is a large (m - 1) x (n - 1) rectangular field with corners at (1, 1) and (m, n) containing some horizontal and vertical fences given in arrays hFences and vFences respectively.\nHorizontal fences are from the coordinates (hFences[i], 1) to (hFences[i], n) and vertical fences are from the coordinates (1, vFences[i]) to (m, vFences[i]).\nReturn the maximum area of a square field that can be formed by removing some fences (possibly none) or -1 if it is impossible to make a square field.\nSince the answer may be large, return it modulo 109 + 7.\nNote: The field is surrounded by two horizontal fences from the coordinates (1, 1) to (1, n) and (m, 1) to (m, n) and two vertical fences from the coordinates (1, 1) to (m, 1) and (1, n) to (m, n). These fences cannot be removed.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: m = 4, n = 3, hFences = [2,3], vFences = [2]\nOutput: 4\nExplanation: Removing the horizontal fence at 2 and the vertical fence at 2 will give a square field of area 4.",
      "images": [
        "https://assets.leetcode.com/uploads/2023/11/05/screenshot-from-2023-11-05-22-40-25.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: m = 6, n = 7, hFences = [2], vFences = [4]\nOutput: -1\nExplanation: It can be proved that there is no way to create a square field by removing fences.",
      "images": [
        "https://assets.leetcode.com/uploads/2023/11/22/maxsquareareaexample1.png"
      ]
    }
  ],
  "constraints": [
    "3 <= m, n <= 109",
    "1 <= hFences.length, vFences.length <= 600",
    "1 < hFences[i] < m",
    "1 < vFences[i] < n",
    "hFences and vFences are unique."
  ],
  "follow_ups": [],
  "hints": [
    "Put <code>1</code> and <code>m</code> into <code>hFences</code>. The differences of any two values in the new <code>hFences</code> can be a horizontal edge of a rectangle.",
    "Similarly put <code>1</code> and <code>n</code> into <code>vFences</code>. The differences of any two values in the new <code>vFences</code> can be a vertical edge of a rectangle.",
    "Our goal is to find the maximum common value in both parts."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maximizeSquareArea(int m, int n, vector<int>& hFences, vector<int>& vFences) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maximizeSquareArea(int m, int n, int[] hFences, int[] vFences) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maximizeSquareArea(self, m, n, hFences, vFences):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type hFences: List[int]\n        :type vFences: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maximizeSquareArea(self, m: int, n: int, hFences: List[int], vFences: List[int]) -> int:\n        ",
    "c": "int maximizeSquareArea(int m, int n, int* hFences, int hFencesSize, int* vFences, int vFencesSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaximizeSquareArea(int m, int n, int[] hFences, int[] vFences) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} m\n * @param {number} n\n * @param {number[]} hFences\n * @param {number[]} vFences\n * @return {number}\n */\nvar maximizeSquareArea = function(m, n, hFences, vFences) {\n    \n};",
    "typescript": "function maximizeSquareArea(m: number, n: number, hFences: number[], vFences: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @param Integer[] $hFences\n     * @param Integer[] $vFences\n     * @return Integer\n     */\n    function maximizeSquareArea($m, $n, $hFences, $vFences) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maximizeSquareArea(_ m: Int, _ n: Int, _ hFences: [Int], _ vFences: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maximizeSquareArea(m: Int, n: Int, hFences: IntArray, vFences: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maximizeSquareArea(int m, int n, List<int> hFences, List<int> vFences) {\n    \n  }\n}",
    "golang": "func maximizeSquareArea(m int, n int, hFences []int, vFences []int) int {\n    \n}",
    "ruby": "# @param {Integer} m\n# @param {Integer} n\n# @param {Integer[]} h_fences\n# @param {Integer[]} v_fences\n# @return {Integer}\ndef maximize_square_area(m, n, h_fences, v_fences)\n    \nend",
    "scala": "object Solution {\n    def maximizeSquareArea(m: Int, n: Int, hFences: Array[Int], vFences: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn maximize_square_area(m: i32, n: i32, h_fences: Vec<i32>, v_fences: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (maximize-square-area m n hFences vFences)\n  (-> exact-integer? exact-integer? (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec maximize_square_area(M :: integer(), N :: integer(), HFences :: [integer()], VFences :: [integer()]) -> integer().\nmaximize_square_area(M, N, HFences, VFences) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec maximize_square_area(m :: integer, n :: integer, h_fences :: [integer], v_fences :: [integer]) :: integer\n  def maximize_square_area(m, n, h_fences, v_fences) do\n    \n  end\nend"
  }
}
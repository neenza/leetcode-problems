{
  "title": "Maximum Total Importance of Roads",
  "problem_id": "2379",
  "frontend_id": "2285",
  "difficulty": "Medium",
  "problem_slug": "maximum-total-importance-of-roads",
  "topics": [
    "Greedy",
    "Graph",
    "Sorting",
    "Heap (Priority Queue)"
  ],
  "description": "You are given an integer n denoting the number of cities in a country. The cities are numbered from 0 to n - 1.\nYou are also given a 2D integer array roads where roads[i] = [ai, bi] denotes that there exists a bidirectional road connecting cities ai and bi.\nYou need to assign each city with an integer value from 1 to n, where each value can only be used once. The importance of a road is then defined as the sum of the values of the two cities it connects.\nReturn the maximum total importance of all roads possible after assigning the values optimally.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 5, roads = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]\nOutput: 43\nExplanation: The figure above shows the country and the assigned values of [2,4,5,3,1].\n- The road (0,1) has an importance of 2 + 4 = 6.\n- The road (1,2) has an importance of 4 + 5 = 9.\n- The road (2,3) has an importance of 5 + 3 = 8.\n- The road (0,2) has an importance of 2 + 5 = 7.\n- The road (1,3) has an importance of 4 + 3 = 7.\n- The road (2,4) has an importance of 5 + 1 = 6.\nThe total importance of all roads is 6 + 9 + 8 + 7 + 7 + 6 = 43.\nIt can be shown that we cannot obtain a greater total importance than 43.",
      "images": [
        "https://assets.leetcode.com/uploads/2022/04/07/ex1drawio.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 5, roads = [[0,3],[2,4],[1,3]]\nOutput: 20\nExplanation: The figure above shows the country and the assigned values of [4,3,2,5,1].\n- The road (0,3) has an importance of 4 + 5 = 9.\n- The road (2,4) has an importance of 2 + 1 = 3.\n- The road (1,3) has an importance of 3 + 5 = 8.\nThe total importance of all roads is 9 + 3 + 8 = 20.\nIt can be shown that we cannot obtain a greater total importance than 20.",
      "images": [
        "https://assets.leetcode.com/uploads/2022/04/07/ex2drawio.png"
      ]
    }
  ],
  "constraints": [
    "2 <= n <= 5 * 104",
    "1 <= roads.length <= 5 * 104",
    "roads[i].length == 2",
    "0 <= ai, bi <= n - 1",
    "ai != bi",
    "There are no duplicate roads."
  ],
  "follow_ups": [],
  "hints": [
    "Consider what each city contributes to the total importance of all roads.",
    "Based on that, how can you sort the cities such that assigning them values in that order will yield the maximum total importance?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long maximumImportance(int n, vector<vector<int>>& roads) {\n        \n    }\n};",
    "java": "class Solution {\n    public long maximumImportance(int n, int[][] roads) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maximumImportance(self, n, roads):\n        \"\"\"\n        :type n: int\n        :type roads: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maximumImportance(self, n: int, roads: List[List[int]]) -> int:\n        ",
    "c": "long long maximumImportance(int n, int** roads, int roadsSize, int* roadsColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public long MaximumImportance(int n, int[][] roads) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number[][]} roads\n * @return {number}\n */\nvar maximumImportance = function(n, roads) {\n    \n};",
    "typescript": "function maximumImportance(n: number, roads: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $roads\n     * @return Integer\n     */\n    function maximumImportance($n, $roads) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maximumImportance(_ n: Int, _ roads: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maximumImportance(n: Int, roads: Array<IntArray>): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int maximumImportance(int n, List<List<int>> roads) {\n    \n  }\n}",
    "golang": "func maximumImportance(n int, roads [][]int) int64 {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer[][]} roads\n# @return {Integer}\ndef maximum_importance(n, roads)\n    \nend",
    "scala": "object Solution {\n    def maximumImportance(n: Int, roads: Array[Array[Int]]): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn maximum_importance(n: i32, roads: Vec<Vec<i32>>) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (maximum-importance n roads)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec maximum_importance(N :: integer(), Roads :: [[integer()]]) -> integer().\nmaximum_importance(N, Roads) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec maximum_importance(n :: integer, roads :: [[integer]]) :: integer\n  def maximum_importance(n, roads) do\n    \n  end\nend"
  },
  "solution": "## Solution\n\n---\n\n### Approach: Sorting\n\n#### Intuition\n\nWe have `N` cities (nodes) numbered `0` to `N-1`, connected by bidirectional roads (edges). Our task is to assign unique values from `1` to `N` to each node, maximizing the total importance of all edges.\n\nEdge importance is defined as the sum of the values of the nodes it connects.\n\nKey observation: A node's value contributes to importance once for each connected edge. This means that nodes with more connections (higher degree) should be assigned higher values.\n\nWe can solve the problem in three steps:\n1. Calculate the degree of each node (number of connected edges).\n2. Sort nodes by degree in ascending order.\n3. Assign values `1` to `N` to nodes, starting with the lowest degree.\n\nNote that there might be a case where two or more nodes have the same degree; in such cases, the values assigned to the nodes can be swapped. This is because the importance sum of all the edges will remain the same, as shown in the figure below:\n\n![fig](../Figures/2285/2285A.png)\n\nIf we notice now the entire approach we just translated the graph structure into a numerical assignment problem, leveraging the relationship between node connectivity and edge importance.\n\n![fig](../Figures/2285/2285A.png)\n\n#### Algorithm\n\n1. Initialize an array `degree` of size `N` to store the degree of each node. Initially, all values are `0`.\n2. Iterate over the list of edges `roads` and increment the degree for each of the nodes the road connects, i.e. `edge[0]` and `edge[1]`.\n3. Sort the array `degree` in the ascending order.\n4. Initialize the variable `value` to `1`, this will be the value we assign to the nodes.\n5. Initialize the variable `totalImportance` to `0` to store the maximum importance of all edges.\n6. Iterate over the array `degree` and keep adding the importance as `node degree * assigned value` to the variable `totalImportance`. Also, increment the value `value` to assign it to the next node.\n7. Return `totalImportance`.\n\n#### Implementation#### Complexity Analysis\n\nHere, $N$ is the number of nodes in the graph.\n\n* Time complexity: $O(N^2)$.\n\n  We iterate over the edges list `roads` to find the degree of each node. In the worst case, the number of edges in the graph could reach $N^2$, assuming an edge exists between every pair of nodes. Assigning degrees thus requires $O(N^2)$ operations.\n  Next, sorting the degrees in ascending order takes $O(N \\log N)$. Iterating through the degree array to calculate the total importance is an $O(N)$ operation. Therefore, the overall time complexity remains $O(N^2)$.\n\n* Space complexity: $O(N)$\n\n  We need an array of size $N$, `degree`, to keep the edge count of each node. \n  \n   Some additional space is required for sorting. The space complexity of the sorting algorithm depends on the programming language.\n   - In Python, the `sort` method sorts a list using the Tim Sort algorithm which is a combination of Merge Sort and Insertion Sort and has $O(n)$ additional space. Additionally, Tim Sort is designed to be a stable algorithm.\n   - In Java, `Arrays.sort()` is implemented using a variant of the Quick Sort algorithm which has a space complexity of $O( \\log n)$ for sorting an array.\n   - In C++, the `sort()` function is implemented as a hybrid of Quick Sort, Heap Sort, and Insertion Sort, with a worse-case space complexity of $O( \\log n)$.\n\n   Thus, the inbuilt `sort()` function might add up to $O(\\log⁡⁡ N)$ or $O(N)$ to the space complexity.\n---"
}
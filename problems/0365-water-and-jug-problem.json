{
  "title": "Water and Jug Problem",
  "problem_id": "365",
  "frontend_id": "365",
  "difficulty": "Medium",
  "problem_slug": "water-and-jug-problem",
  "topics": [
    "Math",
    "Depth-First Search",
    "Breadth-First Search"
  ],
  "description": "You are given two jugs with capacities x liters and y liters. You have an infinite water supply. Return whether the total amount of water in both jugs may reach target using the following operations:\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: x = 3, y = 5, target = 4\nOutput: true\nExplanation:\nFollow these steps to reach a total of 4 liters:\nReference: The Die Hard example.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: x = 2, y = 6, target = 5\nOutput: false",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: x = 1, y = 2, target = 3\nOutput: true\nExplanation: Fill both jugs. The total amount of water in both jugs is equal to 3 now.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= x, y, targetÂ <= 103"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool canMeasureWater(int x, int y, int target) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean canMeasureWater(int x, int y, int target) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def canMeasureWater(self, x, y, target):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def canMeasureWater(self, x: int, y: int, target: int) -> bool:\n        ",
    "c": "bool canMeasureWater(int x, int y, int target) {\n    \n}",
    "csharp": "public class Solution {\n    public bool CanMeasureWater(int x, int y, int target) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} x\n * @param {number} y\n * @param {number} target\n * @return {boolean}\n */\nvar canMeasureWater = function(x, y, target) {\n    \n};",
    "typescript": "function canMeasureWater(x: number, y: number, target: number): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @param Integer $y\n     * @param Integer $target\n     * @return Boolean\n     */\n    function canMeasureWater($x, $y, $target) {\n        \n    }\n}",
    "swift": "class Solution {\n    func canMeasureWater(_ x: Int, _ y: Int, _ target: Int) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun canMeasureWater(x: Int, y: Int, target: Int): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool canMeasureWater(int x, int y, int target) {\n    \n  }\n}",
    "golang": "func canMeasureWater(x int, y int, target int) bool {\n    \n}",
    "ruby": "# @param {Integer} x\n# @param {Integer} y\n# @param {Integer} target\n# @return {Boolean}\ndef can_measure_water(x, y, target)\n    \nend",
    "scala": "object Solution {\n    def canMeasureWater(x: Int, y: Int, target: Int): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn can_measure_water(x: i32, y: i32, target: i32) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (can-measure-water x y target)\n  (-> exact-integer? exact-integer? exact-integer? boolean?)\n  )",
    "erlang": "-spec can_measure_water(X :: integer(), Y :: integer(), Target :: integer()) -> boolean().\ncan_measure_water(X, Y, Target) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec can_measure_water(x :: integer, y :: integer, target :: integer) :: boolean\n  def can_measure_water(x, y, target) do\n    \n  end\nend"
  }
}
{
  "title": "Groups of Special-Equivalent Strings",
  "problem_id": "929",
  "frontend_id": "893",
  "difficulty": "Medium",
  "problem_slug": "groups-of-special-equivalent-strings",
  "topics": [
    "Array",
    "Hash Table",
    "String",
    "Sorting"
  ],
  "description": "You are given an array of strings of the same length words.\nIn one move, you can swap any two even indexed characters or any two odd indexed characters of a string words[i].\nTwo strings words[i] and words[j] are special-equivalent if after any number of moves, words[i] == words[j].\nA group of special-equivalent strings from words is a non-empty subset of words such that:\nReturn the number of groups of special-equivalent strings from words.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: words = [\"abcd\",\"cdab\",\"cbad\",\"xyzz\",\"zzxy\",\"zzyx\"]\nOutput: 3\nExplanation: \nOne group is [\"abcd\", \"cdab\", \"cbad\"], since they are all pairwise special equivalent, and none of the other strings is all pairwise special equivalent to these.\nThe other two groups are [\"xyzz\", \"zzxy\"] and [\"zzyx\"].\nNote that in particular, \"zzxy\" is not special equivalent to \"zzyx\".",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: words = [\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"]\nOutput: 3",
      "images": []
    }
  ],
  "constraints": [
    "1 <= words.length <= 1000",
    "1 <= words[i].length <= 20",
    "words[i] consist of lowercase English letters.",
    "All the strings are of the same length."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int numSpecialEquivGroups(vector<string>& words) {\n        \n    }\n};",
    "java": "class Solution {\n    public int numSpecialEquivGroups(String[] words) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numSpecialEquivGroups(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numSpecialEquivGroups(self, words: List[str]) -> int:\n        ",
    "c": "int numSpecialEquivGroups(char** words, int wordsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int NumSpecialEquivGroups(string[] words) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string[]} words\n * @return {number}\n */\nvar numSpecialEquivGroups = function(words) {\n    \n};",
    "typescript": "function numSpecialEquivGroups(words: string[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return Integer\n     */\n    function numSpecialEquivGroups($words) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numSpecialEquivGroups(_ words: [String]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numSpecialEquivGroups(words: Array<String>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int numSpecialEquivGroups(List<String> words) {\n    \n  }\n}",
    "golang": "func numSpecialEquivGroups(words []string) int {\n    \n}",
    "ruby": "# @param {String[]} words\n# @return {Integer}\ndef num_special_equiv_groups(words)\n    \nend",
    "scala": "object Solution {\n    def numSpecialEquivGroups(words: Array[String]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn num_special_equiv_groups(words: Vec<String>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (num-special-equiv-groups words)\n  (-> (listof string?) exact-integer?)\n  )",
    "erlang": "-spec num_special_equiv_groups(Words :: [unicode:unicode_binary()]) -> integer().\nnum_special_equiv_groups(Words) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec num_special_equiv_groups(words :: [String.t]) :: integer\n  def num_special_equiv_groups(words) do\n    \n  end\nend"
  }
}
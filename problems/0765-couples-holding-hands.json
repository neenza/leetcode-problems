{
  "title": "Couples Holding Hands",
  "problem_id": "770",
  "frontend_id": "765",
  "difficulty": "Hard",
  "problem_slug": "couples-holding-hands",
  "topics": [
    "Greedy",
    "Depth-First Search",
    "Breadth-First Search",
    "Union Find",
    "Graph"
  ],
  "description": "There are n couples sitting in 2n seats arranged in a row and want to hold hands.\nThe people and seats are represented by an integer array row where row[i] is the ID of the person sitting in the ith seat. The couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2n - 2, 2n - 1).\nReturn the minimum number of swaps so that every couple is sitting side by side. A swap consists of choosing any two people, then they stand up and switch seats.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: row = [0,2,1,3]\nOutput: 1\nExplanation: We only need to swap the second (row[1]) and third (row[2]) person.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: row = [3,2,0,1]\nOutput: 0\nExplanation: All couples are already seated side by side.",
      "images": []
    }
  ],
  "constraints": [
    "2n == row.length",
    "2 <= n <= 30",
    "n is even.",
    "0 <= row[i] < 2n",
    "All the elements of row are unique."
  ],
  "follow_ups": [],
  "hints": [
    "Say there are N two-seat couches.  For each couple, draw an edge from the couch of one partner to the couch of the other partner."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minSwapsCouples(vector<int>& row) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minSwapsCouples(int[] row) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minSwapsCouples(self, row: List[int]) -> int:\n        ",
    "c": "int minSwapsCouples(int* row, int rowSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinSwapsCouples(int[] row) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} row\n * @return {number}\n */\nvar minSwapsCouples = function(row) {\n    \n};",
    "typescript": "function minSwapsCouples(row: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $row\n     * @return Integer\n     */\n    function minSwapsCouples($row) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minSwapsCouples(_ row: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minSwapsCouples(row: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minSwapsCouples(List<int> row) {\n    \n  }\n}",
    "golang": "func minSwapsCouples(row []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} row\n# @return {Integer}\ndef min_swaps_couples(row)\n    \nend",
    "scala": "object Solution {\n    def minSwapsCouples(row: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_swaps_couples(row: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-swaps-couples row)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec min_swaps_couples(Row :: [integer()]) -> integer().\nmin_swaps_couples(Row) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_swaps_couples(row :: [integer]) :: integer\n  def min_swaps_couples(row) do\n    \n  end\nend"
  }
}
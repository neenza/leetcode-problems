{
  "title": "Stone Removal Game",
  "problem_id": "3625",
  "frontend_id": "3360",
  "difficulty": "Easy",
  "problem_slug": "stone-removal-game",
  "topics": [
    "Math",
    "Simulation"
  ],
  "description": "Alice and Bob are playing a game where they take turns removing stones from a pile, with Alice going first.\nThe player who cannot make a move loses the game.\nGiven a positive integer n, return true if Alice wins the game and false otherwise.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 12\nOutput: true\nExplanation:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 1\nOutput: false\nExplanation:",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 50"
  ],
  "follow_ups": [],
  "hints": [
    "The constraints are small enough that a brute-force solution is feasible."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool canAliceWin(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean canAliceWin(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def canAliceWin(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def canAliceWin(self, n: int) -> bool:\n        ",
    "c": "bool canAliceWin(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public bool CanAliceWin(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {boolean}\n */\nvar canAliceWin = function(n) {\n    \n};",
    "typescript": "function canAliceWin(n: number): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Boolean\n     */\n    function canAliceWin($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func canAliceWin(_ n: Int) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun canAliceWin(n: Int): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool canAliceWin(int n) {\n    \n  }\n}",
    "golang": "func canAliceWin(n int) bool {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Boolean}\ndef can_alice_win(n)\n    \nend",
    "scala": "object Solution {\n    def canAliceWin(n: Int): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn can_alice_win(n: i32) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (can-alice-win n)\n  (-> exact-integer? boolean?)\n  )",
    "erlang": "-spec can_alice_win(N :: integer()) -> boolean().\ncan_alice_win(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec can_alice_win(n :: integer) :: boolean\n  def can_alice_win(n) do\n    \n  end\nend"
  }
}
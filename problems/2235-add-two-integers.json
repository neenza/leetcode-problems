{
  "title": "Add Two Integers",
  "problem_id": "2383",
  "frontend_id": "2235",
  "difficulty": "Easy",
  "problem_slug": "add-two-integers",
  "topics": [
    "Math"
  ],
  "description": "Example 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: num1 = 12, num2 = 5\nOutput: 17\nExplanation: num1 is 12, num2 is 5, and their sum is 12 + 5 = 17, so 17 is returned.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: num1 = -10, num2 = 4\nOutput: -6\nExplanation: num1 + num2 = -6, so -6 is returned.",
      "images": []
    }
  ],
  "constraints": [
    "-100 <= num1, num2 <= 100"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int sum(int num1, int num2) {\n        \n    }\n};",
    "java": "class Solution {\n    public int sum(int num1, int num2) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def sum(self, num1, num2):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def sum(self, num1: int, num2: int) -> int:\n        ",
    "c": "int sum(int num1, int num2) {\n    \n}",
    "csharp": "public class Solution {\n    public int Sum(int num1, int num2) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} num1\n * @param {number} num2\n * @return {number}\n */\nvar sum = function(num1, num2) {\n    \n};",
    "typescript": "function sum(num1: number, num2: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $num1\n     * @param Integer $num2\n     * @return Integer\n     */\n    function sum($num1, $num2) {\n        \n    }\n}",
    "swift": "class Solution {\n    func sum(_ num1: Int, _ num2: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun sum(num1: Int, num2: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int sum(int num1, int num2) {\n    \n  }\n}",
    "golang": "func sum(num1 int, num2 int) int {\n    \n}",
    "ruby": "# @param {Integer} num1\n# @param {Integer} num2\n# @return {Integer}\ndef sum(num1, num2)\n    \nend",
    "scala": "object Solution {\n    def sum(num1: Int, num2: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn sum(num1: i32, num2: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (sum num1 num2)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec sum(Num1 :: integer(), Num2 :: integer()) -> integer().\nsum(Num1, Num2) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec sum(num1 :: integer, num2 :: integer) :: integer\n  def sum(num1, num2) do\n    \n  end\nend"
  }
}
{
  "title": "Sum of Even Numbers After Queries",
  "problem_id": "1027",
  "frontend_id": "985",
  "difficulty": "Medium",
  "problem_slug": "sum-of-even-numbers-after-queries",
  "topics": [
    "Array",
    "Simulation"
  ],
  "description": "You are given an integer array nums and an array queries where queries[i] = [vali, indexi].\nFor each query i, first, apply nums[indexi] = nums[indexi] + vali, then print the sum of the even values of nums.\nReturn an integer array answer where answer[i] is the answer to the ith query.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]\nOutput: [8,6,2,4]\nExplanation: At the beginning, the array is [1,2,3,4].\nAfter adding 1 to nums[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.\nAfter adding -3 to nums[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.\nAfter adding -4 to nums[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.\nAfter adding 2 to nums[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1], queries = [[4,0]]\nOutput: [0]",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 104",
    "-104 <= nums[i] <= 104",
    "1 <= queries.length <= 104",
    "-104 <= vali <= 104",
    "0 <= indexi < nums.length"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> sumEvenAfterQueries(vector<int>& nums, vector<vector<int>>& queries) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] sumEvenAfterQueries(int[] nums, int[][] queries) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def sumEvenAfterQueries(self, nums, queries):\n        \"\"\"\n        :type nums: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def sumEvenAfterQueries(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* sumEvenAfterQueries(int* nums, int numsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] SumEvenAfterQueries(int[] nums, int[][] queries) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar sumEvenAfterQueries = function(nums, queries) {\n    \n};",
    "typescript": "function sumEvenAfterQueries(nums: number[], queries: number[][]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function sumEvenAfterQueries($nums, $queries) {\n        \n    }\n}",
    "swift": "class Solution {\n    func sumEvenAfterQueries(_ nums: [Int], _ queries: [[Int]]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun sumEvenAfterQueries(nums: IntArray, queries: Array<IntArray>): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> sumEvenAfterQueries(List<int> nums, List<List<int>> queries) {\n    \n  }\n}",
    "golang": "func sumEvenAfterQueries(nums []int, queries [][]int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef sum_even_after_queries(nums, queries)\n    \nend",
    "scala": "object Solution {\n    def sumEvenAfterQueries(nums: Array[Int], queries: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn sum_even_after_queries(nums: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (sum-even-after-queries nums queries)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) (listof exact-integer?))\n  )",
    "erlang": "-spec sum_even_after_queries(Nums :: [integer()], Queries :: [[integer()]]) -> [integer()].\nsum_even_after_queries(Nums, Queries) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec sum_even_after_queries(nums :: [integer], queries :: [[integer]]) :: [integer]\n  def sum_even_after_queries(nums, queries) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n---\n### Approach 1: Maintain Array Sum\n\n**Intuition and Algorithm**\n\nLet's try to maintain `S`, the sum of the array throughout one query operation.\n\nWhen acting on an array element `A[index]`, the rest of the values of `A` remain the same.  Let's remove `A[index]` from `S` if it is even, then add `A[index] + val` back (if it is even.)\n\nHere are some examples:\n\n* If we have `A = [2,2,2,2,2]`, `S = 10`, and we do `A[0] += 4`: we will update `S -= 2`, then `S += 6`.  At the end, we will have `A = [6,2,2,2,2]` and `S = 14`.\n\n* If we have `A = [1,2,2,2,2]`, `S = 8`, and we do `A[0] += 3`: we will skip updating `S` (since `A[0]` is odd), then `S += 4`.  At the end, we will have `A = [4,2,2,2,2]` and `S = 12`.\n\n* If we have `A = [2,2,2,2,2]`, `S = 10` and we do `A[0] += 1`: we will update `S -= 2`, then skip updating `S` (since `A[0] + 1` is odd.)  At the end, we will have `A = [3,2,2,2,2]` and `S = 8`.\n\n* If we have `A = [1,2,2,2,2]`, `S = 8` and we do `A[0] += 2`: we will skip updating `S` (since `A[0]` is odd), then skip updating `S` again (since `A[0] + 2` is odd.)  At the end, we will have `A = [3,2,2,2,2]` and `S = 8`.\n\nThese examples help illustrate that our algorithm actually maintains the value of `S` throughout each query operation.**Complexity Analysis**\n\n* Time Complexity:  $$O(N+Q)$$, where $$N$$ is the length of `A` and $$Q$$ is the number of `queries`.\n\n* Space Complexity:  $$O(Q)$$, though we only allocate $$O(1)$$ additional space."
}
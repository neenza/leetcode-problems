{
  "title": "Number of Ways of Cutting a Pizza",
  "problem_id": "1555",
  "frontend_id": "1444",
  "difficulty": "Hard",
  "problem_slug": "number-of-ways-of-cutting-a-pizza",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Memoization",
    "Matrix",
    "Prefix Sum"
  ],
  "description": "Given a rectangular pizza represented as a rows x cols matrix containing the following characters: 'A' (an apple) and '.' (empty cell) and given the integer k. You have to cut the pizza into k pieces using k-1 cuts.\nFor each cut you choose the direction: vertical or horizontal, then you choose a cut position at the cell boundary and cut the pizza into two pieces. If you cut the pizza vertically, give the left part of the pizza to a person. If you cut the pizza horizontally, give the upper part of the pizza to a person. Give the last piece of pizza to the last person.\nReturn the number of ways of cutting the pizza such that each piece contains at least one apple. Since the answer can be a huge number, return this modulo 10^9 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: pizza = [\"A..\",\"AAA\",\"...\"], k = 3\nOutput: 3 \nExplanation: The figure above shows the three ways to cut the pizza. Note that pieces must contain at least one apple.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/04/23/ways_to_cut_apple_1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: pizza = [\"A..\",\"AA.\",\"...\"], k = 3\nOutput: 1",
      "images": [
        "https://assets.leetcode.com/uploads/2020/04/23/ways_to_cut_apple_1.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: pizza = [\"A..\",\"A..\",\"...\"], k = 1\nOutput: 1",
      "images": [
        "https://assets.leetcode.com/uploads/2020/04/23/ways_to_cut_apple_1.png"
      ]
    }
  ],
  "constraints": [
    "1 <= rows, cols <= 50",
    "rows == pizza.length",
    "cols == pizza[i].length",
    "1 <= k <= 10",
    "pizza consists of characters 'A' and '.' only."
  ],
  "follow_ups": [],
  "hints": [
    "Note that after each cut the remaining piece of pizza always has the lower right coordinate at (rows-1,cols-1).",
    "Use dynamic programming approach with states (row1, col1, c) which computes the number of ways of cutting the pizza using \"c\" cuts where the current piece of pizza has upper left coordinate at (row1,col1) and lower right coordinate at (rows-1,cols-1).",
    "For the transitions try all vertical and horizontal cuts such that the piece of pizza you have to give a person must contain at least one apple. The base case is when c=k-1.",
    "Additionally use a 2D dynamic programming to respond in O(1) if a piece of pizza contains at least one apple."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int ways(vector<string>& pizza, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int ways(String[] pizza, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def ways(self, pizza, k):\n        \"\"\"\n        :type pizza: List[str]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def ways(self, pizza: List[str], k: int) -> int:\n        ",
    "c": "int ways(char** pizza, int pizzaSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int Ways(string[] pizza, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string[]} pizza\n * @param {number} k\n * @return {number}\n */\nvar ways = function(pizza, k) {\n    \n};",
    "typescript": "function ways(pizza: string[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String[] $pizza\n     * @param Integer $k\n     * @return Integer\n     */\n    function ways($pizza, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func ways(_ pizza: [String], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun ways(pizza: Array<String>, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int ways(List<String> pizza, int k) {\n    \n  }\n}",
    "golang": "func ways(pizza []string, k int) int {\n    \n}",
    "ruby": "# @param {String[]} pizza\n# @param {Integer} k\n# @return {Integer}\ndef ways(pizza, k)\n    \nend",
    "scala": "object Solution {\n    def ways(pizza: Array[String], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn ways(pizza: Vec<String>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (ways pizza k)\n  (-> (listof string?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec ways(Pizza :: [unicode:unicode_binary()], K :: integer()) -> integer().\nways(Pizza, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec ways(pizza :: [String.t], k :: integer) :: integer\n  def ways(pizza, k) do\n    \n  end\nend"
  }
}
{
  "title": "Count Nice Pairs in an Array",
  "problem_id": "1925",
  "frontend_id": "1814",
  "difficulty": "Medium",
  "problem_slug": "count-nice-pairs-in-an-array",
  "topics": [
    "Array",
    "Hash Table",
    "Math",
    "Counting"
  ],
  "description": "You are given an array nums that consists of non-negative integers. Let us define rev(x) as the reverse of the non-negative integer x. For example, rev(123) = 321, and rev(120) = 21. A pair of indices (i, j) is nice if it satisfies all of the following conditions:\nReturn the number of nice pairs of indices. Since that number can be too large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [42,11,1,97]\nOutput: 2\nExplanation: The two pairs are:\n - (0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121.\n - (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [13,10,35,24,76]\nOutput: 4",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "0 <= nums[i] <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "The condition can be rearranged to (nums[i] - rev(nums[i])) == (nums[j] - rev(nums[j])).",
    "Transform each nums[i] into (nums[i] - rev(nums[i])). Then, count the number of (i, j) pairs that have equal values.",
    "Keep a map storing the frequencies of values that you have seen so far. For each i, check if nums[i] is in the map. If it is, then add that count to the overall count. Then, increment the frequency of nums[i]."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int countNicePairs(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int countNicePairs(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countNicePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countNicePairs(self, nums: List[int]) -> int:\n        ",
    "c": "int countNicePairs(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int CountNicePairs(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countNicePairs = function(nums) {\n    \n};",
    "typescript": "function countNicePairs(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function countNicePairs($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countNicePairs(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countNicePairs(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int countNicePairs(List<int> nums) {\n    \n  }\n}",
    "golang": "func countNicePairs(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef count_nice_pairs(nums)\n    \nend",
    "scala": "object Solution {\n    def countNicePairs(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_nice_pairs(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (count-nice-pairs nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec count_nice_pairs(Nums :: [integer()]) -> integer().\ncount_nice_pairs(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_nice_pairs(nums :: [integer]) :: integer\n  def count_nice_pairs(nums) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n\n---\n\n### Approach: Counting With Hash Map\n\n**Intuition**\n\nIn this problem, we are presented with the following formula:\n\n`nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])`\n\nLet's denote `x = nums[i]` and `y = nums[j]` and rewrite the formula:\n\n`x + rev(y) == y + rev(x)`\n\nNow, let's rearrange the formula so that all terms involving `x` are on one side and all terms involving `y` are on the other:\n\n`x - rev(x) == y - rev(y)`\n\nWe have simplified the problem. As you can see, for a given `num`, we are interested in `num - rev(num)`. Let's define a new array `arr` with the same length as `nums` where:\n\n`arr[i] = nums[i] - rev(nums[i])`\n\n![example](../Figures/1814/1.png)To reverse the digits of a given integer `num` as described by the problem, we can initialize an integer `result = 0` as the reversed number. We then continuously take the last digit of `num` using the modulo operator `%` and append it to `result` as the least significant digit, this could be done by multiplying `result` by 10 and adding the last digit. Then we remove the last digit from `num` by dividing it by 10. \n\nThe process above continues until `num` becomes 0, at which point, `result` contains the reversed integer.\n\nNow, the problem becomes \"how many pairs in `arr` are equal?\". This can be solved using a counting trick with a hash map. We will iterate over `arr` and keep a hash map `dic` (short for dictionary) that keeps track of how many times we have seen a number. For each `num` we iterate over, we check how many times we have already seen `num`. Each `num` we had already seen earlier can be paired with the current `num` to form a pair. Thus, we would add `dic[num]` to the answer, and finally increment `dic[num]` by 1, keeping track of the current `num`.\n\nThe following animation demonstrates this counting process using an arbitrary `arr`:\n\n!?!../Documents/1814.json:960,540!?!**Algorithm**\n\nNote: to avoid overflow, calculating the answer should be done MOD $$10^9 + 7$$.\n\n1. Implement the function `rev` as described by the problem description.\n2. Create `arr`, where `arr[i] = nums[i] - rev(nums[i])`.\n3. Initialize an empty hash map `dic` and the answer variable, `ans`.\n4. Iterate over each `num` in `arr`:\n    - Add `dic[num]` to `ans`.\n    - Increment `dic[num]`.\n5. Return `ans`.\n\n**Implementation****Complexity Analysis**\n\nGiven $$n$$ as the length of `nums`,\n\n* Time complexity: $$O(n)$$\n\n    First, we create `arr` which costs $$O(n)$$.\n\n    Next, we iterate over `arr` which has a length of `n`. At each iteration, we perform $$O(1)$$ work, so this costs $$O(n)$$ as well.\n\n    Note that `rev(num)` has a cost that is logarithmic with `num`. However, it is standard on LeetCode to treat the size of integers and mathematical operations performed on them as $$O(1)$$.\n\n* Space complexity: $$O(n)$$\n\n    `arr` uses $$O(n)$$ space. In the scenario where all `num - rev(num)` is unique, then `dic` will also grow to a size of $$O(n)$$.---"
}
{
  "title": "Construct Quad Tree",
  "problem_id": "772",
  "frontend_id": "427",
  "difficulty": "Medium",
  "problem_slug": "construct-quad-tree",
  "topics": [
    "Array",
    "Divide and Conquer",
    "Tree",
    "Matrix"
  ],
  "description": "Given a n * n matrix grid of 0's and 1's only. We want to represent grid with a Quad-Tree.\nReturn the root of the Quad-Tree representing grid.\nA Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\nWe can construct a Quad-Tree from a two-dimensional area using the following steps:\nIf you want to know more about the Quad-Tree, you can refer to the wiki.\nQuad-Tree format:\nYou don't need to read this section for solving the problem. This is only if you want to understand the output format here. The output represents the serialized format of a Quad-Tree using level order traversal, where null signifies a path terminator where no node exists below.\nIt is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list [isLeaf, val].\nIf the value of isLeaf or val is True we represent it as 1 in the list [isLeaf, val] and if the value of isLeaf or val is False we represent it as 0.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "class Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n}",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: grid = [[0,1],[1,0]]\nOutput: [[0,1],[1,0],[1,1],[1,1],[1,0]]\nExplanation: The explanation of this example is shown below:\nNotice that 0 represents False and 1 represents True in the photo representing the Quad-Tree.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/02/11/grid1.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]\nOutput: [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\nExplanation: All values in the grid are not the same. We divide the grid into four sub-grids.\nThe topLeft, bottomLeft and bottomRight each has the same value.\nThe topRight have different values so we divide it into 4 sub-grids where each has the same value.\nExplanation is shown in the photo below:",
      "images": [
        "https://assets.leetcode.com/uploads/2020/02/12/e2mat.png"
      ]
    }
  ],
  "constraints": [
    "n == grid.length == grid[i].length",
    "n == 2x where 0 <= x <= 6"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "/*\n// Definition for a QuadTree node.\nclass Node {\npublic:\n    bool val;\n    bool isLeaf;\n    Node* topLeft;\n    Node* topRight;\n    Node* bottomLeft;\n    Node* bottomRight;\n    \n    Node() {\n        val = false;\n        isLeaf = false;\n        topLeft = NULL;\n        topRight = NULL;\n        bottomLeft = NULL;\n        bottomRight = NULL;\n    }\n    \n    Node(bool _val, bool _isLeaf) {\n        val = _val;\n        isLeaf = _isLeaf;\n        topLeft = NULL;\n        topRight = NULL;\n        bottomLeft = NULL;\n        bottomRight = NULL;\n    }\n    \n    Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* _bottomLeft, Node* _bottomRight) {\n        val = _val;\n        isLeaf = _isLeaf;\n        topLeft = _topLeft;\n        topRight = _topRight;\n        bottomLeft = _bottomLeft;\n        bottomRight = _bottomRight;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    Node* construct(vector<vector<int>>& grid) {\n        \n    }\n};",
    "java": "/*\n// Definition for a QuadTree node.\nclass Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n\n    \n    public Node() {\n        this.val = false;\n        this.isLeaf = false;\n        this.topLeft = null;\n        this.topRight = null;\n        this.bottomLeft = null;\n        this.bottomRight = null;\n    }\n    \n    public Node(boolean val, boolean isLeaf) {\n        this.val = val;\n        this.isLeaf = isLeaf;\n        this.topLeft = null;\n        this.topRight = null;\n        this.bottomLeft = null;\n        this.bottomRight = null;\n    }\n    \n    public Node(boolean val, boolean isLeaf, Node topLeft, Node topRight, Node bottomLeft, Node bottomRight) {\n        this.val = val;\n        this.isLeaf = isLeaf;\n        this.topLeft = topLeft;\n        this.topRight = topRight;\n        this.bottomLeft = bottomLeft;\n        this.bottomRight = bottomRight;\n    }\n}\n*/\n\nclass Solution {\n    public Node construct(int[][] grid) {\n        \n    }\n}",
    "python": "\"\"\"\n# Definition for a QuadTree node.\nclass Node(object):\n    def __init__(self, val=False, isLeaf=False, topLeft=None, topRight=None, bottomLeft=None, bottomRight=None):\n        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n\"\"\"\n\nclass Solution(object):\n    def construct(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: Node\n        \"\"\"\n        ",
    "python3": "\"\"\"\n# Definition for a QuadTree node.\nclass Node:\n    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n\"\"\"\n\nclass Solution:\n    def construct(self, grid: List[List[int]]) -> 'Node':\n        ",
    "csharp": "/*\n// Definition for a QuadTree node.\npublic class Node {\n    public bool val;\n    public bool isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n\n    public Node() {\n        val = false;\n        isLeaf = false;\n        topLeft = null;\n        topRight = null;\n        bottomLeft = null;\n        bottomRight = null;\n    }\n    \n    public Node(bool _val, bool _isLeaf) {\n        val = _val;\n        isLeaf = _isLeaf;\n        topLeft = null;\n        topRight = null;\n        bottomLeft = null;\n        bottomRight = null;\n    }\n    \n    public Node(bool _val,bool _isLeaf,Node _topLeft,Node _topRight,Node _bottomLeft,Node _bottomRight) {\n        val = _val;\n        isLeaf = _isLeaf;\n        topLeft = _topLeft;\n        topRight = _topRight;\n        bottomLeft = _bottomLeft;\n        bottomRight = _bottomRight;\n    }\n}\n*/\n\npublic class Solution {\n    public Node Construct(int[][] grid) {\n        \n    }\n}",
    "javascript": "/**\n * // Definition for a QuadTree node.\n * function _Node(val,isLeaf,topLeft,topRight,bottomLeft,bottomRight) {\n *    this.val = val;\n *    this.isLeaf = isLeaf;\n *    this.topLeft = topLeft;\n *    this.topRight = topRight;\n *    this.bottomLeft = bottomLeft;\n *    this.bottomRight = bottomRight;\n * };\n */\n\n/**\n * @param {number[][]} grid\n * @return {_Node}\n */\nvar construct = function(grid) {\n    \n};",
    "typescript": "/**\n * Definition for _Node.\n * class _Node {\n *     val: boolean\n *     isLeaf: boolean\n *     topLeft: _Node | null\n * \ttopRight: _Node | null\n * \tbottomLeft: _Node | null\n * \tbottomRight: _Node | null\n * \tconstructor(val?: boolean, isLeaf?: boolean, topLeft?: _Node, topRight?: _Node, bottomLeft?: _Node, bottomRight?: _Node) {\n *         this.val = (val===undefined ? false : val)\n *         this.isLeaf = (isLeaf===undefined ? false : isLeaf)\n *         this.topLeft = (topLeft===undefined ? null : topLeft)\n *         this.topRight = (topRight===undefined ? null : topRight)\n *         this.bottomLeft = (bottomLeft===undefined ? null : bottomLeft)\n *         this.bottomRight = (bottomRight===undefined ? null : bottomRight)\n *   }\n * }\n */\n\n\nfunction construct(grid: number[][]): _Node | null {\n\n};",
    "php": "/**\n * Definition for a QuadTree node.\n * class Node {\n *     public $val = null;\n *     public $isLeaf = null;\n *     public $topLeft = null;\n *     public $topRight = null;\n *     public $bottomLeft = null;\n *     public $bottomRight = null;\n *     function __construct($val, $isLeaf) {\n *         $this->val = $val;\n *         $this->isLeaf = $isLeaf;\n *         $this->topLeft = null;\n *         $this->topRight = null;\n *         $this->bottomLeft = null;\n *         $this->bottomRight = null;\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Integer[][] $grid\n     * @return Node\n     */\n    function construct($grid) {\n        \n    }\n}",
    "swift": "/**\n * Definition for a QuadTree node.\n * public class Node {\n *     public var val: Bool\n *     public var isLeaf: Bool\n *     public var topLeft: Node?\n *     public var topRight: Node?\n *     public var bottomLeft: Node?\n *     public var bottomRight: Node?\n *     public init(_ val: Bool, _ isLeaf: Bool) {\n *         self.val = val\n *         self.isLeaf = isLeaf\n *         self.topLeft = nil\n *         self.topRight = nil\n *         self.bottomLeft = nil\n *         self.bottomRight = nil\n *     }\n * }\n */\n\nclass Solution {\n    func construct(_ grid: [[Int]]) -> Node? {\n        \n    }\n}",
    "kotlin": "/**\n * Definition for a QuadTree node.\n * class Node(var `val`: Boolean, var isLeaf: Boolean) {\n *     var topLeft: Node? = null\n *     var topRight: Node? = null\n *     var bottomLeft: Node? = null\n *     var bottomRight: Node? = null\n * }\n */\n\nclass Solution {\n    fun construct(grid: Array<IntArray>): Node? {\n        \n    }\n}",
    "golang": "/**\n * Definition for a QuadTree node.\n * type Node struct {\n *     Val bool\n *     IsLeaf bool\n *     TopLeft *Node\n *     TopRight *Node\n *     BottomLeft *Node\n *     BottomRight *Node\n * }\n */\n\nfunc construct(grid [][]int) *Node {\n    \n}",
    "ruby": "# Definition for a QuadTree node.\n# class Node\n#     attr_accessor :val, :isLeaf, :topLeft, :topRight, :bottomLeft, :bottomRight\n#     def initialize(val=false, isLeaf=false, topLeft=nil, topRight=nil, bottomLeft=nil, bottomRight=nil)\n#         @val = val\n#         @isLeaf = isLeaf\n#         @topLeft = topLeft\n#         @topRight = topRight\n#         @bottomLeft = bottomLeft\n#         @bottomRight = bottomRight\n#     end\n# end\n\n# @param {Integer[][]} grid\n# @return {Node}\ndef construct(grid)\n\t\nend",
    "scala": "/**\n * Definition for a QuadTree node.\n * class Node(var _value: Boolean, var _isLeaf: Boolean) {\n *   var value: Int = _value\n *   var isLeaf: Boolean = _isLeaf\n *   var topLeft: Node = null\n *   var topRight: Node = null\n *   var bottomLeft: Node = null\n *   var bottomRight: Node = null\n * }\n */\n\nobject Solution {\n    def construct(grid: Array[Array[Int]]): Node = {\n        \n    }\n}"
  }
}
{
  "title": "Cache With Time Limit",
  "problem_id": "2762",
  "frontend_id": "2622",
  "difficulty": "Medium",
  "problem_slug": "cache-with-time-limit",
  "topics": [],
  "description": "Write a class that allows getting and setting key-value pairs, however a time until expiration is associated with each key.\nThe class has three public methods:\nset(key, value, duration): accepts an integer key, an integer value, and a duration in milliseconds. Once the duration has elapsed, the key should be inaccessible. The method should return true if the same un-expired key already exists and false otherwise. Both the value and duration should be overwritten if the key already exists.\nget(key): if an un-expired key exists, it should return the associated value. Otherwise it should return -1.\ncount(): returns the count of un-expired keys.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: \nactions = [\"TimeLimitedCache\", \"set\", \"get\", \"count\", \"get\"]\nvalues = [[], [1, 42, 100], [1], [], [1]]\ntimeDelays = [0, 0, 50, 50, 150]\nOutput: [null, false, 42, 1, -1]\nExplanation:\nAt t=0, the cache is constructed.\nAt t=0, a key-value pair (1: 42) is added with a time limit of 100ms. The value doesn't exist so false is returned.\nAt t=50, key=1 is requested and the value of 42 is returned.\nAt t=50, count() is called and there is one active key in the cache.\nAt t=100, key=1 expires.\nAt t=150, get(1) is called but -1 is returned because the cache is empty.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: \nactions = [\"TimeLimitedCache\", \"set\", \"set\", \"get\", \"get\", \"get\", \"count\"]\nvalues = [[], [1, 42, 50], [1, 50, 100], [1], [1], [1], []]\ntimeDelays = [0, 0, 40, 50, 120, 200, 250]\nOutput: [null, false, true, 50, 50, -1, 0]\nExplanation:\nAt t=0, the cache is constructed.\nAt t=0, a key-value pair (1: 42) is added with a time limit of 50ms. The value doesn't exist so false is returned.\nAt t=40, a key-value pair (1: 50) is added with a time limit of 100ms. A non-expired value already existed so true is returned and the old value was overwritten.\nAt t=50, get(1) is called which returned 50.\nAt t=120, get(1) is called which returned 50.\nAt t=140, key=1 expires.\nAt t=200, get(1) is called but the cache is empty so -1 is returned.\nAt t=250, count() returns 0 because the cache is empty.",
      "images": []
    }
  ],
  "constraints": [
    "0 <= key, value <= 109",
    "0 <= duration <= 1000",
    "1 <= actions.length <= 100",
    "actions.length === values.length",
    "actions.length === timeDelays.length",
    "0 <= timeDelays[i] <= 1450",
    "actions[i] is one of \"TimeLimitedCache\", \"set\", \"get\" and \"count\"",
    "First action is always \"TimeLimitedCache\" and must be executed immediately, with a 0-millisecond delay"
  ],
  "follow_ups": [],
  "hints": [
    "You can delay execution of code with \"ref = setTimeout(fn, delay)\". You can abort the execution with \"clearTimeout(ref)\"",
    "When storing the values in the cache, also store a reference to the timeout. The timeout should clear the key from the cache after the expiration has elapsed.",
    "When you set a key that already exists, clear the existing timeout."
  ],
  "code_snippets": {
    "javascript": "var TimeLimitedCache = function() {\n    \n};\n\n/** \n * @param {number} key\n * @param {number} value\n * @param {number} duration time until expiration in ms\n * @return {boolean} if un-expired key already existed\n */\nTimeLimitedCache.prototype.set = function(key, value, duration) {\n    \n};\n\n/** \n * @param {number} key\n * @return {number} value associated with key\n */\nTimeLimitedCache.prototype.get = function(key) {\n    \n};\n\n/** \n * @return {number} count of non-expired keys\n */\nTimeLimitedCache.prototype.count = function() {\n    \n};\n\n/**\n * const timeLimitedCache = new TimeLimitedCache()\n * timeLimitedCache.set(1, 42, 1000); // false\n * timeLimitedCache.get(1) // 42\n * timeLimitedCache.count() // 1\n */",
    "typescript": "class TimeLimitedCache {\n    \n    constructor() {\n        \n    }\n    \n    set(key: number, value: number, duration: number): boolean {\n        \n    }\n    \n    get(key: number): number {\n        \n    }\n    \n    count(): number {\n        \n    }\n}\n\n/**\n * const timeLimitedCache = new TimeLimitedCache()\n * timeLimitedCache.set(1, 42, 1000); // false\n * timeLimitedCache.get(1) // 42\n * timeLimitedCache.count() // 1\n */"
  }
}
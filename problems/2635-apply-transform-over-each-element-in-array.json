{
  "title": "Apply Transform Over Each Element in Array",
  "problem_id": "2747",
  "frontend_id": "2635",
  "difficulty": "Easy",
  "problem_slug": "apply-transform-over-each-element-in-array",
  "topics": [],
  "description": "Given an integer array arr and a mapping function fn, return a new array with a transformation applied to each element.\nThe returned array should be created such that returnedArray[i] = fn(arr[i], i).\nPlease solve it without the built-in Array.map method.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: arr = [1,2,3], fn = function plusone(n) { return n + 1; }\nOutput: [2,3,4]\nExplanation:\nconst newArray = map(arr, plusone); // [2,3,4]\nThe function increases each value in the array by one.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: arr = [1,2,3], fn = function plusI(n, i) { return n + i; }\nOutput: [1,3,5]\nExplanation: The function increases each value by the index it resides in.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: arr = [10,20,30], fn = function constant() { return 42; }\nOutput: [42,42,42]\nExplanation: The function always returns 42.",
      "images": []
    }
  ],
  "constraints": [
    "0 <= arr.length <= 1000",
    "-109 <= arr[i] <= 109",
    "fn returns an integer."
  ],
  "follow_ups": [],
  "hints": [
    "Start by creating an array that will eventually be returned.",
    "Loop over each element in the passed array. Push fn(arr[i]) to the returned array."
  ],
  "code_snippets": {
    "javascript": "/**\n * @param {number[]} arr\n * @param {Function} fn\n * @return {number[]}\n */\nvar map = function(arr, fn) {\n    \n};",
    "typescript": "function map(arr: number[], fn: (n: number, i: number) => number): number[] {\n    \n};"
  }
}
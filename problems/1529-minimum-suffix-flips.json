{
  "title": "Minimum Suffix Flips",
  "problem_id": "1652",
  "frontend_id": "1529",
  "difficulty": "Medium",
  "problem_slug": "minimum-suffix-flips",
  "topics": [
    "String",
    "Greedy"
  ],
  "description": "You are given a 0-indexed binary string target of length n. You have another binary string s of length n that is initially set to all zeros. You want to make s equal to target.\nIn one operation, you can pick an index i where 0 <= i < n and flip all bits in the inclusive range [i, n - 1]. Flip means changing '0' to '1' and '1' to '0'.\nReturn the minimum number of operations needed to make s equal to target.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: target = \"10111\"\nOutput: 3\nExplanation: Initially, s = \"00000\".\nChoose index i = 2: \"00000\" -> \"00111\"\nChoose index i = 0: \"00111\" -> \"11000\"\nChoose index i = 1: \"11000\" -> \"10111\"\nWe need at least 3 flip operations to form target.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: target = \"101\"\nOutput: 3\nExplanation: Initially, s = \"000\".\nChoose index i = 0: \"000\" -> \"111\"\nChoose index i = 1: \"111\" -> \"100\"\nChoose index i = 2: \"100\" -> \"101\"\nWe need at least 3 flip operations to form target.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: target = \"00000\"\nOutput: 0\nExplanation: We do not need any operations since the initial s already equals target.",
      "images": []
    }
  ],
  "constraints": [
    "n == target.length",
    "1 <= n <= 105",
    "target[i] is either '0' or '1'."
  ],
  "follow_ups": [],
  "hints": [
    "Consider a strategy where the choice of bulb with number i is increasing. In such a strategy, you no longer need to worry about bulbs that have been set to the left."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minFlips(string target) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minFlips(String target) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minFlips(self, target):\n        \"\"\"\n        :type target: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minFlips(self, target: str) -> int:\n        ",
    "c": "int minFlips(char* target) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinFlips(string target) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} target\n * @return {number}\n */\nvar minFlips = function(target) {\n    \n};",
    "typescript": "function minFlips(target: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $target\n     * @return Integer\n     */\n    function minFlips($target) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minFlips(_ target: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minFlips(target: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minFlips(String target) {\n    \n  }\n}",
    "golang": "func minFlips(target string) int {\n    \n}",
    "ruby": "# @param {String} target\n# @return {Integer}\ndef min_flips(target)\n    \nend",
    "scala": "object Solution {\n    def minFlips(target: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_flips(target: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-flips target)\n  (-> string? exact-integer?)\n  )",
    "erlang": "-spec min_flips(Target :: unicode:unicode_binary()) -> integer().\nmin_flips(Target) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_flips(target :: String.t) :: integer\n  def min_flips(target) do\n    \n  end\nend"
  }
}
{
  "title": "Longest Palindromic Subsequence",
  "problem_id": "516",
  "frontend_id": "516",
  "difficulty": "Medium",
  "problem_slug": "longest-palindromic-subsequence",
  "topics": [
    "String",
    "Dynamic Programming"
  ],
  "description": "Given a string s, find the longest palindromic subsequence's length in s.\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"bbbab\"\nOutput: 4\nExplanation: One possible longest palindromic subsequence is \"bbbb\".",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"cbbd\"\nOutput: 2\nExplanation: One possible longest palindromic subsequence is \"bb\".",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 1000",
    "s consists only of lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int longestPalindromeSubseq(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public int longestPalindromeSubseq(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def longestPalindromeSubseq(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        ",
    "c": "int longestPalindromeSubseq(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public int LongestPalindromeSubseq(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {number}\n */\nvar longestPalindromeSubseq = function(s) {\n    \n};",
    "typescript": "function longestPalindromeSubseq(s: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function longestPalindromeSubseq($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func longestPalindromeSubseq(_ s: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun longestPalindromeSubseq(s: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int longestPalindromeSubseq(String s) {\n    \n  }\n}",
    "golang": "func longestPalindromeSubseq(s string) int {\n    \n}",
    "ruby": "# @param {String} s\n# @return {Integer}\ndef longest_palindrome_subseq(s)\n    \nend",
    "scala": "object Solution {\n    def longestPalindromeSubseq(s: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn longest_palindrome_subseq(s: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (longest-palindrome-subseq s)\n  (-> string? exact-integer?)\n  )",
    "erlang": "-spec longest_palindrome_subseq(S :: unicode:unicode_binary()) -> integer().\nlongest_palindrome_subseq(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec longest_palindrome_subseq(s :: String.t) :: integer\n  def longest_palindrome_subseq(s) do\n    \n  end\nend"
  }
}
{
  "title": "Minimum Operations to Make Elements Within K Subarrays Equal",
  "problem_id": "3717",
  "frontend_id": "3505",
  "difficulty": "Hard",
  "problem_slug": "minimum-operations-to-make-elements-within-k-subarrays-equal",
  "topics": [
    "Array",
    "Hash Table",
    "Math",
    "Dynamic Programming",
    "Sliding Window",
    "Heap (Priority Queue)"
  ],
  "description": "You are given an integer array nums and two integers, x and k. You can perform the following operation any number of times (including zero):\nReturn the minimum number of operations needed to have at least k non-overlapping subarrays of size exactly x in nums, where all elements within each subarray are equal.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [5,-2,1,3,7,3,6,4,-1], x = 3, k = 2\nOutput: 8\nExplanation:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [9,-2,-2,-2,1,5], x = 2, k = 2\nOutput: 3\nExplanation:",
      "images": []
    }
  ],
  "constraints": [
    "2 <= nums.length <= 105",
    "-106 <= nums[i] <= 106",
    "2 <= x <= nums.length",
    "1 <= k <= 15",
    "2 <= k * x <= nums.length"
  ],
  "follow_ups": [],
  "hints": [
    "Making every element of an x-sized window equal to its median is optimal.",
    "Precalculate this for each window."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long minOperations(vector<int>& nums, int x, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public long minOperations(int[] nums, int x, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minOperations(self, nums, x, k):\n        \"\"\"\n        :type nums: List[int]\n        :type x: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minOperations(self, nums: List[int], x: int, k: int) -> int:\n        ",
    "c": "long long minOperations(int* nums, int numsSize, int x, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public long MinOperations(int[] nums, int x, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} x\n * @param {number} k\n * @return {number}\n */\nvar minOperations = function(nums, x, k) {\n    \n};",
    "typescript": "function minOperations(nums: number[], x: number, k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $x\n     * @param Integer $k\n     * @return Integer\n     */\n    function minOperations($nums, $x, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minOperations(_ nums: [Int], _ x: Int, _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minOperations(nums: IntArray, x: Int, k: Int): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int minOperations(List<int> nums, int x, int k) {\n    \n  }\n}",
    "golang": "func minOperations(nums []int, x int, k int) int64 {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} x\n# @param {Integer} k\n# @return {Integer}\ndef min_operations(nums, x, k)\n    \nend",
    "scala": "object Solution {\n    def minOperations(nums: Array[Int], x: Int, k: Int): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_operations(nums: Vec<i32>, x: i32, k: i32) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (min-operations nums x k)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec min_operations(Nums :: [integer()], X :: integer(), K :: integer()) -> integer().\nmin_operations(Nums, X, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_operations(nums :: [integer], x :: integer, k :: integer) :: integer\n  def min_operations(nums, x, k) do\n    \n  end\nend"
  }
}
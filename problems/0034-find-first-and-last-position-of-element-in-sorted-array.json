{
  "title": "Find First and Last Position of Element in Sorted Array",
  "problem_id": "34",
  "frontend_id": "34",
  "difficulty": "Medium",
  "problem_slug": "find-first-and-last-position-of-element-in-sorted-array",
  "topics": [
    "Array",
    "Binary Search"
  ],
  "description": "Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\nIf target is not found in the array, return [-1, -1].\nYou must write an algorithm with O(log n) runtime complexity.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1,-1]",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [], target = 0\nOutput: [-1,-1]",
      "images": []
    }
  ],
  "constraints": [
    "0 <= nums.length <= 105",
    "-109 <= nums[i] <= 109",
    "nums is a non-decreasing array.",
    "-109 <= target <= 109"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> searchRange(vector<int>& nums, int target) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] searchRange(int[] nums, int target) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* searchRange(int* nums, int numsSize, int target, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] SearchRange(int[] nums, int target) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar searchRange = function(nums, target) {\n    \n};",
    "typescript": "function searchRange(nums: number[], target: number): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function searchRange($nums, $target) {\n        \n    }\n}",
    "swift": "class Solution {\n    func searchRange(_ nums: [Int], _ target: Int) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun searchRange(nums: IntArray, target: Int): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> searchRange(List<int> nums, int target) {\n    \n  }\n}",
    "golang": "func searchRange(nums []int, target int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef search_range(nums, target)\n    \nend",
    "scala": "object Solution {\n    def searchRange(nums: Array[Int], target: Int): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn search_range(nums: Vec<i32>, target: i32) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (search-range nums target)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )",
    "erlang": "-spec search_range(Nums :: [integer()], Target :: integer()) -> [integer()].\nsearch_range(Nums, Target) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec search_range(nums :: [integer], target :: integer) :: [integer]\n  def search_range(nums, target) do\n    \n  end\nend"
  }
}
{
  "title": "Maximum Number of Balls in a Box",
  "problem_id": "1844",
  "frontend_id": "1742",
  "difficulty": "Easy",
  "problem_slug": "maximum-number-of-balls-in-a-box",
  "topics": [
    "Hash Table",
    "Math",
    "Counting"
  ],
  "description": "You are working in a ball factory where you have n balls numbered from lowLimit up to highLimit inclusive (i.e., n == highLimit - lowLimit + 1), and an infinite number of boxes numbered from 1 to infinity.\nYour job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. For example, the ball number 321 will be put in the box number 3 + 2 + 1 = 6 and the ball number 10 will be put in the box number 1 + 0 = 1.\nGiven two integers lowLimit and highLimit, return the number of balls in the box with the most balls.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: lowLimit = 1, highLimit = 10\nOutput: 2\nExplanation:\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 ...\nBall Count:  2 1 1 1 1 1 1 1 1 0  0  ...\nBox 1 has the most number of balls with 2 balls.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: lowLimit = 5, highLimit = 15\nOutput: 2\nExplanation:\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 ...\nBall Count:  1 1 1 1 2 2 1 1 1 0  0  ...\nBoxes 5 and 6 have the most number of balls with 2 balls in each.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: lowLimit = 19, highLimit = 28\nOutput: 2\nExplanation:\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 12 ...\nBall Count:  0 1 1 1 1 1 1 1 1 2  0  0  ...\nBox 10 has the most number of balls with 2 balls.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= lowLimit <= highLimit <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "Note that both lowLimit and highLimit are of small constraints so you can iterate on all number between them",
    "You can simulate the boxes by counting for each box the number of balls with digit sum equal to that box number"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int countBalls(int lowLimit, int highLimit) {\n        \n    }\n};",
    "java": "class Solution {\n    public int countBalls(int lowLimit, int highLimit) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countBalls(self, lowLimit, highLimit):\n        \"\"\"\n        :type lowLimit: int\n        :type highLimit: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countBalls(self, lowLimit: int, highLimit: int) -> int:\n        ",
    "c": "int countBalls(int lowLimit, int highLimit) {\n    \n}",
    "csharp": "public class Solution {\n    public int CountBalls(int lowLimit, int highLimit) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} lowLimit\n * @param {number} highLimit\n * @return {number}\n */\nvar countBalls = function(lowLimit, highLimit) {\n    \n};",
    "typescript": "function countBalls(lowLimit: number, highLimit: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $lowLimit\n     * @param Integer $highLimit\n     * @return Integer\n     */\n    function countBalls($lowLimit, $highLimit) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countBalls(_ lowLimit: Int, _ highLimit: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countBalls(lowLimit: Int, highLimit: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int countBalls(int lowLimit, int highLimit) {\n    \n  }\n}",
    "golang": "func countBalls(lowLimit int, highLimit int) int {\n    \n}",
    "ruby": "# @param {Integer} low_limit\n# @param {Integer} high_limit\n# @return {Integer}\ndef count_balls(low_limit, high_limit)\n    \nend",
    "scala": "object Solution {\n    def countBalls(lowLimit: Int, highLimit: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_balls(low_limit: i32, high_limit: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (count-balls lowLimit highLimit)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec count_balls(LowLimit :: integer(), HighLimit :: integer()) -> integer().\ncount_balls(LowLimit, HighLimit) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_balls(low_limit :: integer, high_limit :: integer) :: integer\n  def count_balls(low_limit, high_limit) do\n    \n  end\nend"
  }
}
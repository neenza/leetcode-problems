{
  "title": "Distribute Candies Among Children I",
  "problem_id": "3199",
  "frontend_id": "2928",
  "difficulty": "Easy",
  "problem_slug": "distribute-candies-among-children-i",
  "topics": [
    "Math",
    "Combinatorics",
    "Enumeration"
  ],
  "description": "You are given two positive integers n and limit.\nReturn the total number of ways to distribute n candies among 3 children such that no child gets more than limit candies.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 5, limit = 2\nOutput: 3\nExplanation: There are 3 ways to distribute 5 candies such that no child gets more than 2 candies: (1, 2, 2), (2, 1, 2) and (2, 2, 1).",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 3, limit = 3\nOutput: 10\nExplanation: There are 10 ways to distribute 3 candies such that no child gets more than 3 candies: (0, 0, 3), (0, 1, 2), (0, 2, 1), (0, 3, 0), (1, 0, 2), (1, 1, 1), (1, 2, 0), (2, 0, 1), (2, 1, 0) and (3, 0, 0).",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 50",
    "1 <= limit <= 50"
  ],
  "follow_ups": [],
  "hints": [
    "Use three nested for loops to check all the triplets."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int distributeCandies(int n, int limit) {\n        \n    }\n};",
    "java": "class Solution {\n    public int distributeCandies(int n, int limit) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def distributeCandies(self, n, limit):\n        \"\"\"\n        :type n: int\n        :type limit: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def distributeCandies(self, n: int, limit: int) -> int:\n        ",
    "c": "int distributeCandies(int n, int limit) {\n    \n}",
    "csharp": "public class Solution {\n    public int DistributeCandies(int n, int limit) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number} limit\n * @return {number}\n */\nvar distributeCandies = function(n, limit) {\n    \n};",
    "typescript": "function distributeCandies(n: number, limit: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $limit\n     * @return Integer\n     */\n    function distributeCandies($n, $limit) {\n        \n    }\n}",
    "swift": "class Solution {\n    func distributeCandies(_ n: Int, _ limit: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun distributeCandies(n: Int, limit: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int distributeCandies(int n, int limit) {\n    \n  }\n}",
    "golang": "func distributeCandies(n int, limit int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer} limit\n# @return {Integer}\ndef distribute_candies(n, limit)\n    \nend",
    "scala": "object Solution {\n    def distributeCandies(n: Int, limit: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn distribute_candies(n: i32, limit: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (distribute-candies n limit)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec distribute_candies(N :: integer(), Limit :: integer()) -> integer().\ndistribute_candies(N, Limit) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec distribute_candies(n :: integer, limit :: integer) :: integer\n  def distribute_candies(n, limit) do\n    \n  end\nend"
  }
}
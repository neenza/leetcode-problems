{
  "title": "Alternating Groups III",
  "problem_id": "3527",
  "frontend_id": "3245",
  "difficulty": "Hard",
  "problem_slug": "alternating-groups-iii",
  "topics": [
    "Array",
    "Binary Indexed Tree"
  ],
  "description": "There are some red and blue tiles arranged circularly. You are given an array of integers colors and a 2D integers array queries.\nThe color of tile i is represented by colors[i]:\nAn alternating group is a contiguous subset of tiles in the circle with alternating colors (each tile in the group except the first and last one has a different color from its adjacent tiles in the group).\nYou have to process queries of two types:\nReturn an array answer containing the results of the queries of the first type in order.\nNote that since colors represents a circle, the first and the last tiles are considered to be next to each other.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: colors = [0,1,1,0,1], queries = [[2,1,0],[1,4]]\nOutput: [2]\nExplanation:\n\nFirst query:\nChange colors[1] to 0.\n\nSecond query:\nCount of the alternating groups with size 4:\n",
      "images": [
        "https://assets.leetcode.com/uploads/2024/06/03/screenshot-from-2024-06-03-20-14-44.png",
        "https://assets.leetcode.com/uploads/2024/06/03/screenshot-from-2024-06-03-20-20-25.png",
        "https://assets.leetcode.com/uploads/2024/06/03/screenshot-from-2024-06-03-20-25-02-2.png",
        "https://assets.leetcode.com/uploads/2024/06/03/screenshot-from-2024-06-03-20-24-12.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: colors = [0,0,1,0,1,1], queries = [[1,3],[2,3,0],[1,5]]\nOutput: [2,0]\nExplanation:\n\nFirst query:\nCount of the alternating groups with size 3:\n\nSecond query: colors will not change.\nThird query: There is no alternating group with size 5.",
      "images": [
        "https://assets.leetcode.com/uploads/2024/06/03/screenshot-from-2024-06-03-20-35-50.png",
        "https://assets.leetcode.com/uploads/2024/06/03/screenshot-from-2024-06-03-20-37-13.png",
        "https://assets.leetcode.com/uploads/2024/06/03/screenshot-from-2024-06-03-20-36-40.png"
      ]
    }
  ],
  "constraints": [
    "4 <= colors.length <= 5 * 104",
    "0 <= colors[i] <= 1",
    "1 <= queries.length <= 5 * 104",
    "queries[i][0] == 1 or queries[i][0] == 2",
    "For all i that:\n\t\nqueries[i][0] == 1: queries[i].length == 2, 3 <= queries[i][1] <= colors.length - 1\nqueries[i][0] == 2: queries[i].length == 3, 0 <= queries[i][1] <= colors.length - 1, 0 <= queries[i][2] <= 1",
    "queries[i][0] == 1: queries[i].length == 2, 3 <= queries[i][1] <= colors.length - 1",
    "queries[i][0] == 2: queries[i].length == 3, 0 <= queries[i][1] <= colors.length - 1, 0 <= queries[i][2] <= 1"
  ],
  "follow_ups": [],
  "hints": [
    "Try using a segment tree to store the maximal alternating groups.",
    "Store the sizes of these maximal alternating groups in another data structure.",
    "Find the count of the alternating groups of size <code>k</code> with having the count of maximal alternating groups with size greater than or equal to <code>k</code> and the sum of their sizes."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> numberOfAlternatingGroups(vector<int>& colors, vector<vector<int>>& queries) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<Integer> numberOfAlternatingGroups(int[] colors, int[][] queries) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numberOfAlternatingGroups(self, colors, queries):\n        \"\"\"\n        :type colors: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numberOfAlternatingGroups(self, colors: List[int], queries: List[List[int]]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* numberOfAlternatingGroups(int* colors, int colorsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<int> NumberOfAlternatingGroups(int[] colors, int[][] queries) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} colors\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar numberOfAlternatingGroups = function(colors, queries) {\n    \n};",
    "typescript": "function numberOfAlternatingGroups(colors: number[], queries: number[][]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $colors\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function numberOfAlternatingGroups($colors, $queries) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numberOfAlternatingGroups(_ colors: [Int], _ queries: [[Int]]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numberOfAlternatingGroups(colors: IntArray, queries: Array<IntArray>): List<Int> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> numberOfAlternatingGroups(List<int> colors, List<List<int>> queries) {\n    \n  }\n}",
    "golang": "func numberOfAlternatingGroups(colors []int, queries [][]int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} colors\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef number_of_alternating_groups(colors, queries)\n    \nend",
    "scala": "object Solution {\n    def numberOfAlternatingGroups(colors: Array[Int], queries: Array[Array[Int]]): List[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn number_of_alternating_groups(colors: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (number-of-alternating-groups colors queries)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) (listof exact-integer?))\n  )",
    "erlang": "-spec number_of_alternating_groups(Colors :: [integer()], Queries :: [[integer()]]) -> [integer()].\nnumber_of_alternating_groups(Colors, Queries) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec number_of_alternating_groups(colors :: [integer], queries :: [[integer]]) :: [integer]\n  def number_of_alternating_groups(colors, queries) do\n    \n  end\nend"
  }
}
{
  "title": "Minimum Area Rectangle",
  "problem_id": "976",
  "frontend_id": "939",
  "difficulty": "Medium",
  "problem_slug": "minimum-area-rectangle",
  "topics": [
    "Array",
    "Hash Table",
    "Math",
    "Geometry",
    "Sorting"
  ],
  "description": "You are given an array of points in the X-Y plane points where points[i] = [xi, yi].\nReturn the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes. If there is not any such rectangle, return 0.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: points = [[1,1],[1,3],[3,1],[3,3],[2,2]]\nOutput: 4",
      "images": [
        "https://assets.leetcode.com/uploads/2021/08/03/rec1.JPG"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: points = [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]\nOutput: 2",
      "images": [
        "https://assets.leetcode.com/uploads/2021/08/03/rec2.JPG"
      ]
    }
  ],
  "constraints": [
    "1 <= points.length <= 500",
    "points[i].length == 2",
    "0 <= xi, yi <= 4 * 104",
    "All the given points are unique."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minAreaRect(vector<vector<int>>& points) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minAreaRect(int[][] points) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minAreaRect(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minAreaRect(self, points: List[List[int]]) -> int:\n        ",
    "c": "int minAreaRect(int** points, int pointsSize, int* pointsColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinAreaRect(int[][] points) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar minAreaRect = function(points) {\n    \n};",
    "typescript": "function minAreaRect(points: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function minAreaRect($points) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minAreaRect(_ points: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minAreaRect(points: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minAreaRect(List<List<int>> points) {\n    \n  }\n}",
    "golang": "func minAreaRect(points [][]int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} points\n# @return {Integer}\ndef min_area_rect(points)\n    \nend",
    "scala": "object Solution {\n    def minAreaRect(points: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_area_rect(points: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-area-rect points)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec min_area_rect(Points :: [[integer()]]) -> integer().\nmin_area_rect(Points) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_area_rect(points :: [[integer]]) :: integer\n  def min_area_rect(points) do\n    \n  end\nend"
  }
}
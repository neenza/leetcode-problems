{
  "title": "Max Area of Island",
  "problem_id": "695",
  "frontend_id": "695",
  "difficulty": "Medium",
  "problem_slug": "max-area-of-island",
  "topics": [
    "Array",
    "Depth-First Search",
    "Breadth-First Search",
    "Union Find",
    "Matrix"
  ],
  "description": "You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\nThe area of an island is the number of cells with a value 1 in the island.\nReturn the maximum area of an island in grid. If there is no island, return 0.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]\nOutput: 6\nExplanation: The answer is not 11, because the island must be connected 4-directionally.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/05/01/maxarea1-grid.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: grid = [[0,0,0,0,0,0,0,0]]\nOutput: 0",
      "images": [
        "https://assets.leetcode.com/uploads/2021/05/01/maxarea1-grid.jpg"
      ]
    }
  ],
  "constraints": [
    "m == grid.length",
    "n == grid[i].length",
    "1 <= m, n <= 50",
    "grid[i][j] is either 0 or 1."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxAreaOfIsland(vector<vector<int>>& grid) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxAreaOfIsland(int[][] grid) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxAreaOfIsland(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:\n        ",
    "c": "int maxAreaOfIsland(int** grid, int gridSize, int* gridColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxAreaOfIsland(int[][] grid) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxAreaOfIsland = function(grid) {\n    \n};",
    "typescript": "function maxAreaOfIsland(grid: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function maxAreaOfIsland($grid) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxAreaOfIsland(_ grid: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxAreaOfIsland(grid: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxAreaOfIsland(List<List<int>> grid) {\n    \n  }\n}",
    "golang": "func maxAreaOfIsland(grid [][]int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} grid\n# @return {Integer}\ndef max_area_of_island(grid)\n    \nend",
    "scala": "object Solution {\n    def maxAreaOfIsland(grid: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_area_of_island(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-area-of-island grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec max_area_of_island(Grid :: [[integer()]]) -> integer().\nmax_area_of_island(Grid) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_area_of_island(grid :: [[integer]]) :: integer\n  def max_area_of_island(grid) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n### Approach #1: Depth-First Search (Recursive) [Accepted]\n\n**Intuition and Algorithm**\n\nWe want to know the area of each connected shape in the grid, then take the maximum of these.\n\nIf we are on a land square and explore every square connected to it 4-directionally (and recursively squares connected to those squares, and so on), then the total number of squares explored will be the area of that connected shape.\n\nTo ensure we don't count squares in a shape more than once, let's use `seen` to keep track of squares we haven't visited before. It will also prevent us from counting the same shape more than once.**Complexity Analysis**\n\n* Time Complexity: $$O(R*C)$$, where $$R$$ is the number of rows in the given `grid`, and $$C$$ is the number of columns.  We visit every square once.\n\n* Space complexity: $$O(R*C)$$, the space used by `seen` to keep track of visited squares and the space used by the call stack during our recursion.\n\n---\n### Approach #2: Depth-First Search (Iterative) [Accepted]\n\n**Intuition and Algorithm**\n\nWe can try the same approach using a stack-based, (or \"iterative\") depth-first search.\n\nHere, `seen` will represent squares that have either been visited or are added to our list of squares to visit (`stack`). For every starting land square that hasn't been visited, we will explore 4-directionally around it, adding land squares that haven't been added to `seen` to our `stack`.\n\nOn the side, we'll keep a count `shape` of the total number of squares seen during the exploration of this shape. We'll want the running max of these counts.**Complexity Analysis**\n\n* Time Complexity: $$O(R*C)$$, where $$R$$ is the number of rows in the given `grid`, and $$C$$ is the number of columns. We visit every square once.\n\n* Space complexity: $$O(R*C)$$, the space used by `seen` to keep track of visited squares and the space used by `stack`."
}
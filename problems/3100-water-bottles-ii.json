{
  "title": "Water Bottles II",
  "problem_id": "3336",
  "frontend_id": "3100",
  "difficulty": "Medium",
  "problem_slug": "water-bottles-ii",
  "topics": [
    "Math",
    "Simulation"
  ],
  "description": "You are given two integers numBottles and numExchange.\nnumBottles represents the number of full water bottles that you initially have. In one operation, you can perform one of the following operations:\nNote that you cannot exchange multiple batches of empty bottles for the same value of numExchange. For example, if numBottles == 3 and numExchange == 1, you cannot exchange 3 empty water bottles for 3 full bottles.\nReturn the maximum number of water bottles you can drink.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: numBottles = 13, numExchange = 6\nOutput: 15\nExplanation: The table above shows the number of full water bottles, empty water bottles, the value of numExchange, and the number of bottles drunk.",
      "images": [
        "https://assets.leetcode.com/uploads/2024/01/28/exampleone1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: numBottles = 10, numExchange = 3\nOutput: 13\nExplanation: The table above shows the number of full water bottles, empty water bottles, the value of numExchange, and the number of bottles drunk.",
      "images": [
        "https://assets.leetcode.com/uploads/2024/01/28/example231.png"
      ]
    }
  ],
  "constraints": [
    "1 <= numBottles <= 100",
    "1 <= numExchange <= 100"
  ],
  "follow_ups": [],
  "hints": [
    "Simulate the process step by step. At each step, drink <code>numExchange</code> bottles of water then exchange them for a full bottle. Keep repeating this step until you cannot exchange  bottles anymore."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxBottlesDrunk(int numBottles, int numExchange) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxBottlesDrunk(int numBottles, int numExchange) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxBottlesDrunk(self, numBottles, numExchange):\n        \"\"\"\n        :type numBottles: int\n        :type numExchange: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxBottlesDrunk(self, numBottles: int, numExchange: int) -> int:\n        ",
    "c": "int maxBottlesDrunk(int numBottles, int numExchange) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxBottlesDrunk(int numBottles, int numExchange) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} numBottles\n * @param {number} numExchange\n * @return {number}\n */\nvar maxBottlesDrunk = function(numBottles, numExchange) {\n    \n};",
    "typescript": "function maxBottlesDrunk(numBottles: number, numExchange: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $numBottles\n     * @param Integer $numExchange\n     * @return Integer\n     */\n    function maxBottlesDrunk($numBottles, $numExchange) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxBottlesDrunk(_ numBottles: Int, _ numExchange: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxBottlesDrunk(numBottles: Int, numExchange: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxBottlesDrunk(int numBottles, int numExchange) {\n    \n  }\n}",
    "golang": "func maxBottlesDrunk(numBottles int, numExchange int) int {\n    \n}",
    "ruby": "# @param {Integer} num_bottles\n# @param {Integer} num_exchange\n# @return {Integer}\ndef max_bottles_drunk(num_bottles, num_exchange)\n    \nend",
    "scala": "object Solution {\n    def maxBottlesDrunk(numBottles: Int, numExchange: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_bottles_drunk(num_bottles: i32, num_exchange: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-bottles-drunk numBottles numExchange)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec max_bottles_drunk(NumBottles :: integer(), NumExchange :: integer()) -> integer().\nmax_bottles_drunk(NumBottles, NumExchange) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_bottles_drunk(num_bottles :: integer, num_exchange :: integer) :: integer\n  def max_bottles_drunk(num_bottles, num_exchange) do\n    \n  end\nend"
  }
}
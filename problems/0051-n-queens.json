{
  "title": "N-Queens",
  "problem_id": "51",
  "frontend_id": "51",
  "difficulty": "Hard",
  "problem_slug": "n-queens",
  "topics": [
    "Array",
    "Backtracking"
  ],
  "description": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\nGiven an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\nEach solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 4\nOutput: [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\nExplanation: There exist two distinct solutions to the 4-queens puzzle as shown above",
      "images": [
        "https://assets.leetcode.com/uploads/2020/11/13/queens.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 1\nOutput: [[\"Q\"]]",
      "images": [
        "https://assets.leetcode.com/uploads/2020/11/13/queens.jpg"
      ]
    }
  ],
  "constraints": [
    "1 <= n <= 9"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<vector<string>> solveNQueens(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<List<String>> solveNQueens(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        ",
    "c": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar*** solveNQueens(int n, int* returnSize, int** returnColumnSizes) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<IList<string>> SolveNQueens(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {string[][]}\n */\nvar solveNQueens = function(n) {\n    \n};",
    "typescript": "function solveNQueens(n: number): string[][] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String[][]\n     */\n    function solveNQueens($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func solveNQueens(_ n: Int) -> [[String]] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun solveNQueens(n: Int): List<List<String>> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<List<String>> solveNQueens(int n) {\n    \n  }\n}",
    "golang": "func solveNQueens(n int) [][]string {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {String[][]}\ndef solve_n_queens(n)\n    \nend",
    "scala": "object Solution {\n    def solveNQueens(n: Int): List[List[String]] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn solve_n_queens(n: i32) -> Vec<Vec<String>> {\n        \n    }\n}",
    "racket": "(define/contract (solve-n-queens n)\n  (-> exact-integer? (listof (listof string?)))\n  )",
    "erlang": "-spec solve_n_queens(N :: integer()) -> [[unicode:unicode_binary()]].\nsolve_n_queens(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec solve_n_queens(n :: integer) :: [[String.t]]\n  def solve_n_queens(n) do\n    \n  end\nend"
  }
}
{
  "title": "Binary Gap",
  "problem_id": "899",
  "frontend_id": "868",
  "difficulty": "Easy",
  "problem_slug": "binary-gap",
  "topics": [
    "Bit Manipulation"
  ],
  "description": "Given a positive integer n, find and return the longest distance between any two adjacent 1's in the binary representation of n. If there are no two adjacent 1's, return 0.\nTwo 1's are adjacent if there are only 0's separating them (possibly no 0's). The distance between two 1's is the absolute difference between their bit positions. For example, the two 1's in \"1001\" have a distance of 3.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 22\nOutput: 2\nExplanation: 22 in binary is \"10110\".\nThe first adjacent pair of 1's is \"10110\" with a distance of 2.\nThe second adjacent pair of 1's is \"10110\" with a distance of 1.\nThe answer is the largest of these two distances, which is 2.\nNote that \"10110\" is not a valid pair since there is a 1 separating the two 1's underlined.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 8\nOutput: 0\nExplanation: 8 in binary is \"1000\".\nThere are not any adjacent pairs of 1's in the binary representation of 8, so we return 0.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 5\nOutput: 2\nExplanation: 5 in binary is \"101\".",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 109"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int binaryGap(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int binaryGap(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def binaryGap(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def binaryGap(self, n: int) -> int:\n        ",
    "c": "int binaryGap(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int BinaryGap(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar binaryGap = function(n) {\n    \n};",
    "typescript": "function binaryGap(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function binaryGap($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func binaryGap(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun binaryGap(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int binaryGap(int n) {\n    \n  }\n}",
    "golang": "func binaryGap(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef binary_gap(n)\n    \nend",
    "scala": "object Solution {\n    def binaryGap(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn binary_gap(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (binary-gap n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec binary_gap(N :: integer()) -> integer().\nbinary_gap(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec binary_gap(n :: integer) :: integer\n  def binary_gap(n) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n---\n### Approach 1: Store Indexes\n\n**Intuition**\n\nSince we wanted to inspect the distance between consecutive 1s in the binary representation of `N`, let's write down the index of each `1` in that binary representation.  For example, if `N = 22 = 0b10110`, then we'll write `A = [1, 2, 4]`.  This makes it easier to proceed, as now we have a problem about adjacent values in an array.\n\n**Algorithm**\n\nLet's make a list `A` of indices `i` such that `N` has the `i`th bit set.\n\nWith this array `A`, finding the maximum distance between consecutive `1`s is much easier: it's the maximum distance between adjacent values of this array.**Complexity Analysis**\n\n* Time Complexity:  $$O(\\log N)$$.  Note that $$\\log N$$ is the number of digits in the binary representation of $$N$$.\n\n* Space Complexity:  $$O(\\log N)$$, the space used by `A`.---\n### Approach 2: One Pass\n\n**Intuition**\n\nIn *Approach 1*, we created an array `A` of indices `i` for which `N` had the `i`th bit set.\n\nSince we only care about consecutive values of this array `A`, we don't need to store the whole array.  We only need to remember the last value seen.\n\n**Algorithm**\n\nWe'll store `last`, the last value added to the *virtual* array `A`.  If `N` has the `i`th bit set, a candidate answer is `i - last`, and then the new last value added to `A` would be `last = i`.**Complexity Analysis**\n\n* Time Complexity:  $$O(\\log N)$$.  Note that $$\\log N$$ is the number of digits in the binary representation of $$N$$.\n\n* Space Complexity:  $$O(1)$$."
}
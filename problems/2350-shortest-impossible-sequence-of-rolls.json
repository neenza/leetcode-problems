{
  "title": "Shortest Impossible Sequence of Rolls",
  "problem_id": "2435",
  "frontend_id": "2350",
  "difficulty": "Hard",
  "problem_slug": "shortest-impossible-sequence-of-rolls",
  "topics": [
    "Array",
    "Hash Table",
    "Greedy"
  ],
  "description": "You are given an integer array rolls of length n and an integer k. You roll a k sided dice numbered from 1 to k, n times, where the result of the ith roll is rolls[i].\nReturn the length of the shortest sequence of rolls so that there's no such subsequence in rolls.\nA sequence of rolls of length len is the result of rolling a k sided dice len times.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: rolls = [4,2,1,2,3,3,2,4,1], k = 4\nOutput: 3\nExplanation: Every sequence of rolls of length 1, [1], [2], [3], [4], can be taken from rolls.\nEvery sequence of rolls of length 2, [1, 1], [1, 2], ..., [4, 4], can be taken from rolls.\nThe sequence [1, 4, 2] cannot be taken from rolls, so we return 3.\nNote that there are other sequences that cannot be taken from rolls.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: rolls = [1,1,2,2], k = 2\nOutput: 2\nExplanation: Every sequence of rolls of length 1, [1], [2], can be taken from rolls.\nThe sequence [2, 1] cannot be taken from rolls, so we return 2.\nNote that there are other sequences that cannot be taken from rolls but [2, 1] is the shortest.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: rolls = [1,1,3,2,2,2,3,3], k = 4\nOutput: 1\nExplanation: The sequence [4] cannot be taken from rolls, so we return 1.\nNote that there are other sequences that cannot be taken from rolls but [4] is the shortest.",
      "images": []
    }
  ],
  "constraints": [
    "n == rolls.length",
    "1 <= n <= 105",
    "1 <= rolls[i] <= k <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "How can you find the minimum index such that all sequences of length 1 can be formed from the start until that index?",
    "Starting from the previous minimum index, what is the next index such that all sequences of length 2 can be formed?",
    "Can you extend the idea to sequences of length 3 and more?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int shortestSequence(vector<int>& rolls, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int shortestSequence(int[] rolls, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def shortestSequence(self, rolls, k):\n        \"\"\"\n        :type rolls: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def shortestSequence(self, rolls: List[int], k: int) -> int:\n        ",
    "c": "int shortestSequence(int* rolls, int rollsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int ShortestSequence(int[] rolls, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} rolls\n * @param {number} k\n * @return {number}\n */\nvar shortestSequence = function(rolls, k) {\n    \n};",
    "typescript": "function shortestSequence(rolls: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $rolls\n     * @param Integer $k\n     * @return Integer\n     */\n    function shortestSequence($rolls, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func shortestSequence(_ rolls: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun shortestSequence(rolls: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int shortestSequence(List<int> rolls, int k) {\n    \n  }\n}",
    "golang": "func shortestSequence(rolls []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} rolls\n# @param {Integer} k\n# @return {Integer}\ndef shortest_sequence(rolls, k)\n    \nend",
    "scala": "object Solution {\n    def shortestSequence(rolls: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn shortest_sequence(rolls: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (shortest-sequence rolls k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec shortest_sequence(Rolls :: [integer()], K :: integer()) -> integer().\nshortest_sequence(Rolls, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec shortest_sequence(rolls :: [integer], k :: integer) :: integer\n  def shortest_sequence(rolls, k) do\n    \n  end\nend"
  }
}
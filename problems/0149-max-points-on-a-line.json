{
  "title": "Max Points on a Line",
  "problem_id": "149",
  "frontend_id": "149",
  "difficulty": "Hard",
  "problem_slug": "max-points-on-a-line",
  "topics": [
    "Array",
    "Hash Table",
    "Math",
    "Geometry"
  ],
  "description": "Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: points = [[1,1],[2,2],[3,3]]\nOutput: 3",
      "images": [
        "https://assets.leetcode.com/uploads/2021/02/25/plane1.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\nOutput: 4",
      "images": [
        "https://assets.leetcode.com/uploads/2021/02/25/plane2.jpg"
      ]
    }
  ],
  "constraints": [
    "1 <= points.length <= 300",
    "points[i].length == 2",
    "-104 <= xi, yi <= 104",
    "All the points are unique."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxPoints(vector<vector<int>>& points) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxPoints(int[][] points) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxPoints(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        ",
    "c": "int maxPoints(int** points, int pointsSize, int* pointsColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxPoints(int[][] points) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar maxPoints = function(points) {\n    \n};",
    "typescript": "function maxPoints(points: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function maxPoints($points) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxPoints(_ points: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxPoints(points: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxPoints(List<List<int>> points) {\n    \n  }\n}",
    "golang": "func maxPoints(points [][]int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} points\n# @return {Integer}\ndef max_points(points)\n    \nend",
    "scala": "object Solution {\n    def maxPoints(points: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_points(points: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-points points)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec max_points(Points :: [[integer()]]) -> integer().\nmax_points(Points) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_points(points :: [[integer]]) :: integer\n  def max_points(points) do\n    \n  end\nend"
  }
}
{
  "title": "Hexadecimal and Hexatrigesimal Conversion",
  "problem_id": "3912",
  "frontend_id": "3602",
  "difficulty": "Easy",
  "problem_slug": "hexadecimal-and-hexatrigesimal-conversion",
  "topics": [
    "Math",
    "String"
  ],
  "description": "You are given an integer n.\nReturn the concatenation of the hexadecimal representation of n2 and the hexatrigesimal representation of n3.\nA hexadecimal number is defined as a base-16 numeral system that uses the digits 0 – 9 and the uppercase letters A - F to represent values from 0 to 15.\nA hexatrigesimal number is defined as a base-36 numeral system that uses the digits 0 – 9 and the uppercase letters A - Z to represent values from 0 to 35.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 13\nOutput: \"A91P1\"\nExplanation:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 36\nOutput: \"5101000\"\nExplanation:",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 1000"
  ],
  "follow_ups": [],
  "hints": [
    "Implement a function <code>toBase(x, b)</code> that converts integer <code>x</code> into a string in base <code>b</code>, using digits <code>0–9</code> and letters <code>A-Z</code> as needed.",
    "Simulate as described"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string concatHex36(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public String concatHex36(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def concatHex36(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def concatHex36(self, n: int) -> str:\n        ",
    "c": "char* concatHex36(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public string ConcatHex36(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {string}\n */\nvar concatHex36 = function(n) {\n    \n};",
    "typescript": "function concatHex36(n: number): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String\n     */\n    function concatHex36($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func concatHex36(_ n: Int) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun concatHex36(n: Int): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String concatHex36(int n) {\n    \n  }\n}",
    "golang": "func concatHex36(n int) string {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {String}\ndef concat_hex36(n)\n    \nend",
    "scala": "object Solution {\n    def concatHex36(n: Int): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn concat_hex36(n: i32) -> String {\n        \n    }\n}",
    "racket": "(define/contract (concat-hex36 n)\n  (-> exact-integer? string?)\n  )",
    "erlang": "-spec concat_hex36(N :: integer()) -> unicode:unicode_binary().\nconcat_hex36(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec concat_hex36(n :: integer) :: String.t\n  def concat_hex36(n) do\n    \n  end\nend"
  }
}
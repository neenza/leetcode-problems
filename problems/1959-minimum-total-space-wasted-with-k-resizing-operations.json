{
  "title": "Minimum Total Space Wasted With K Resizing Operations",
  "problem_id": "2081",
  "frontend_id": "1959",
  "difficulty": "Medium",
  "problem_slug": "minimum-total-space-wasted-with-k-resizing-operations",
  "topics": [
    "Array",
    "Dynamic Programming"
  ],
  "description": "You are currently designing a dynamic array. You are given a 0-indexed integer array nums, where nums[i] is the number of elements that will be in the array at time i. In addition, you are given an integer k, the maximum number of times you can resize the array (to any size).\nThe size of the array at time t, sizet, must be at least nums[t] because there needs to be enough space in the array to hold all the elements. The space wasted atÂ time t is defined as sizet - nums[t], and the total space wasted is the sum of the space wasted across every time t where 0 <= t < nums.length.\nReturn the minimum total space wasted if you can resize the array at most k times.\nNote: The array can have any size at the start and does not count towards the number of resizing operations.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [10,20], k = 0\nOutput: 10\nExplanation: size = [20,20].\nWe can set the initial size to be 20.\nThe total wasted space is (20 - 10) + (20 - 20) = 10.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [10,20,30], k = 1\nOutput: 10\nExplanation: size = [20,20,30].\nWe can set the initial size to be 20 and resize to 30 at time 2. \nThe total wasted space is (20 - 10) + (20 - 20) + (30 - 30) = 10.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [10,20,15,30,20], k = 2\nOutput: 15\nExplanation: size = [10,20,20,30,30].\nWe can set the initial size to 10, resize to 20 at time 1, and resize to 30 at time 3.\nThe total wasted space is (10 - 10) + (20 - 20) + (20 - 15) + (30 - 30) + (30 - 20) = 15.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 200",
    "1 <= nums[i] <= 106",
    "0 <= k <= nums.length - 1"
  ],
  "follow_ups": [],
  "hints": [
    "Given a range, how can you find the minimum waste if you can't perform any resize operations?",
    "Can we build our solution using dynamic programming using the current index and the number of resizing operations performed as the states?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minSpaceWastedKResizing(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minSpaceWastedKResizing(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minSpaceWastedKResizing(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minSpaceWastedKResizing(self, nums: List[int], k: int) -> int:\n        ",
    "c": "int minSpaceWastedKResizing(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinSpaceWastedKResizing(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minSpaceWastedKResizing = function(nums, k) {\n    \n};",
    "typescript": "function minSpaceWastedKResizing(nums: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minSpaceWastedKResizing($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minSpaceWastedKResizing(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minSpaceWastedKResizing(nums: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minSpaceWastedKResizing(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func minSpaceWastedKResizing(nums []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef min_space_wasted_k_resizing(nums, k)\n    \nend",
    "scala": "object Solution {\n    def minSpaceWastedKResizing(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_space_wasted_k_resizing(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-space-wasted-k-resizing nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec min_space_wasted_k_resizing(Nums :: [integer()], K :: integer()) -> integer().\nmin_space_wasted_k_resizing(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_space_wasted_k_resizing(nums :: [integer], k :: integer) :: integer\n  def min_space_wasted_k_resizing(nums, k) do\n    \n  end\nend"
  }
}
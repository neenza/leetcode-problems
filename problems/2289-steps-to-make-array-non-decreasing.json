{
  "title": "Steps to Make Array Non-decreasing",
  "problem_id": "2374",
  "frontend_id": "2289",
  "difficulty": "Medium",
  "problem_slug": "steps-to-make-array-non-decreasing",
  "topics": [
    "Array",
    "Linked List",
    "Stack",
    "Monotonic Stack"
  ],
  "description": "You are given a 0-indexed integer array nums. In one step, remove all elements nums[i] where nums[i - 1] > nums[i] for all 0 < i < nums.length.\nReturn the number of steps performed until nums becomes a non-decreasing array.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [5,3,4,4,7,3,6,11,8,5,11]\nOutput: 3\nExplanation: The following are the steps performed:\n- Step 1: [5,3,4,4,7,3,6,11,8,5,11] becomes [5,4,4,7,6,11,11]\n- Step 2: [5,4,4,7,6,11,11] becomes [5,4,7,11,11]\n- Step 3: [5,4,7,11,11] becomes [5,7,11,11]\n[5,7,11,11] is a non-decreasing array. Therefore, we return 3.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [4,5,7,7,13]\nOutput: 0\nExplanation: nums is already a non-decreasing array. Therefore, we return 0.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "1 <= nums[i] <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "Notice that an element will be removed if and only if there exists a strictly greater element to the left of it in the array.",
    "For each element, we need to find the number of rounds it will take for it to be removed. The answer is the maximum number of rounds for all elements. Build an array dp to hold this information where the answer is the maximum value of dp.",
    "Use a stack of the indices. While processing element nums[i], remove from the stack all the indices of elements that are smaller than nums[i]. dp[i] should be set to the maximum of dp[i] + 1 and dp[removed index]."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int totalSteps(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int totalSteps(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def totalSteps(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def totalSteps(self, nums: List[int]) -> int:\n        ",
    "c": "int totalSteps(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int TotalSteps(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar totalSteps = function(nums) {\n    \n};",
    "typescript": "function totalSteps(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function totalSteps($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func totalSteps(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun totalSteps(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int totalSteps(List<int> nums) {\n    \n  }\n}",
    "golang": "func totalSteps(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef total_steps(nums)\n    \nend",
    "scala": "object Solution {\n    def totalSteps(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn total_steps(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (total-steps nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec total_steps(Nums :: [integer()]) -> integer().\ntotal_steps(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec total_steps(nums :: [integer]) :: integer\n  def total_steps(nums) do\n    \n  end\nend"
  }
}
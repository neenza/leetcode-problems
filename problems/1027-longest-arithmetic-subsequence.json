{
  "title": "Longest Arithmetic Subsequence",
  "problem_id": "1087",
  "frontend_id": "1027",
  "difficulty": "Medium",
  "problem_slug": "longest-arithmetic-subsequence",
  "topics": [
    "Array",
    "Hash Table",
    "Binary Search",
    "Dynamic Programming"
  ],
  "description": "Given an array nums of integers, return the length of the longest arithmetic subsequence in nums.\nNote that:\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [3,6,9,12]\nOutput: 4\nExplanation:  The whole array is an arithmetic sequence with steps of length = 3.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [9,4,7,2,10]\nOutput: 3\nExplanation:  The longest arithmetic subsequence is [4,7,10].",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [20,1,15,3,10,5,8]\nOutput: 4\nExplanation:  The longest arithmetic subsequence is [20,15,10,5].",
      "images": []
    }
  ],
  "constraints": [
    "2 <= nums.length <= 1000",
    "0 <= nums[i] <= 500"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int longestArithSeqLength(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int longestArithSeqLength(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def longestArithSeqLength(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def longestArithSeqLength(self, nums: List[int]) -> int:\n        ",
    "c": "int longestArithSeqLength(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int LongestArithSeqLength(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar longestArithSeqLength = function(nums) {\n    \n};",
    "typescript": "function longestArithSeqLength(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function longestArithSeqLength($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func longestArithSeqLength(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun longestArithSeqLength(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int longestArithSeqLength(List<int> nums) {\n    \n  }\n}",
    "golang": "func longestArithSeqLength(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef longest_arith_seq_length(nums)\n    \nend",
    "scala": "object Solution {\n    def longestArithSeqLength(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn longest_arith_seq_length(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (longest-arith-seq-length nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec longest_arith_seq_length(Nums :: [integer()]) -> integer().\nlongest_arith_seq_length(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec longest_arith_seq_length(nums :: [integer]) :: integer\n  def longest_arith_seq_length(nums) do\n    \n  end\nend"
  }
}
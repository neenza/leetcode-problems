{
  "title": "Find All K-Distant Indices in an Array",
  "problem_id": "2320",
  "frontend_id": "2200",
  "difficulty": "Easy",
  "problem_slug": "find-all-k-distant-indices-in-an-array",
  "topics": [
    "Array",
    "Two Pointers"
  ],
  "description": "You are given a 0-indexed integer array nums and two integers key and k. A k-distant index is an index i of nums for which there exists at least one index j such that |i - j| <= k and nums[j] == key.\nReturn a list of all k-distant indices sorted in increasing order.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [3,4,9,1,3,9,5], key = 9, k = 1\nOutput: [1,2,3,4,5,6]\nExplanation: Here, nums[2] == key and nums[5] == key.\n- For index 0, |0 - 2| > k and |0 - 5| > k, so there is no j where |0 - j| <= k and nums[j] == key. Thus, 0 is not a k-distant index.\n- For index 1, |1 - 2| <= k and nums[2] == key, so 1 is a k-distant index.\n- For index 2, |2 - 2| <= k and nums[2] == key, so 2 is a k-distant index.\n- For index 3, |3 - 2| <= k and nums[2] == key, so 3 is a k-distant index.\n- For index 4, |4 - 5| <= k and nums[5] == key, so 4 is a k-distant index.\n- For index 5, |5 - 5| <= k and nums[5] == key, so 5 is a k-distant index.\n- For index 6, |6 - 5| <= k and nums[5] == key, so 6 is a k-distant index.\nThus, we return [1,2,3,4,5,6] which is sorted in increasing order.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [2,2,2,2,2], key = 2, k = 2\nOutput: [0,1,2,3,4]\nExplanation: For all indices i in nums, there exists some index j such that |i - j| <= k and nums[j] == key, so every index is a k-distant index. \nHence, we return [0,1,2,3,4].",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 1000",
    "1 <= nums[i] <= 1000",
    "key is an integer from the array nums.",
    "1 <= k <= nums.length"
  ],
  "follow_ups": [],
  "hints": [
    "For every occurrence of key in nums, find all indices within distance k from it.",
    "Use a hash table to remove duplicate indices."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> findKDistantIndices(vector<int>& nums, int key, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<Integer> findKDistantIndices(int[] nums, int key, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findKDistantIndices(self, nums, key, k):\n        \"\"\"\n        :type nums: List[int]\n        :type key: int\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findKDistantIndices(self, nums: List[int], key: int, k: int) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findKDistantIndices(int* nums, int numsSize, int key, int k, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<int> FindKDistantIndices(int[] nums, int key, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} key\n * @param {number} k\n * @return {number[]}\n */\nvar findKDistantIndices = function(nums, key, k) {\n    \n};",
    "typescript": "function findKDistantIndices(nums: number[], key: number, k: number): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $key\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function findKDistantIndices($nums, $key, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findKDistantIndices(_ nums: [Int], _ key: Int, _ k: Int) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findKDistantIndices(nums: IntArray, key: Int, k: Int): List<Int> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> findKDistantIndices(List<int> nums, int key, int k) {\n    \n  }\n}",
    "golang": "func findKDistantIndices(nums []int, key int, k int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} key\n# @param {Integer} k\n# @return {Integer[]}\ndef find_k_distant_indices(nums, key, k)\n    \nend",
    "scala": "object Solution {\n    def findKDistantIndices(nums: Array[Int], key: Int, k: Int): List[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_k_distant_indices(nums: Vec<i32>, key: i32, k: i32) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (find-k-distant-indices nums key k)\n  (-> (listof exact-integer?) exact-integer? exact-integer? (listof exact-integer?))\n  )",
    "erlang": "-spec find_k_distant_indices(Nums :: [integer()], Key :: integer(), K :: integer()) -> [integer()].\nfind_k_distant_indices(Nums, Key, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_k_distant_indices(nums :: [integer], key :: integer, k :: integer) :: [integer]\n  def find_k_distant_indices(nums, key, k) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n\n---\n\n### Approach 1: Enumerate\n\n#### Intuition\n\nWe can enumerate all index pairs $(i, j)$ and determine whether $\\textit{nums}[j] = \\textit{key}$ and $|i - j| \\le k$. At the same time, we use the array $\\textit{res}$ to maintain all indices of the $k$ nearest neighbors. If both conditions are satisfied, we add $i$ to the array $\\textit{res}$.\n\nTo ensure that $\\textit{res}$ does not contain duplicate indices and is in ascending order, we can first enumerate $i$ in ascending order, then enumerate $j$, and terminate the inner loop each time $i$ is added to $\\textit{res}$, proceeding to the next $i$. Finally, the array $\\textit{res}$ will contain the indices of all the $k$ nearest neighbors that meet the requirements, and we can return it as the answer.\n\n#### Implementation#### Complexity Analysis\n\nLet $n$ be the length of the array $\\textit{nums}$.\n\n- Time complexity: $O(n^2)$.\n  \n  This is the time complexity for traversing indices $i$ and $j$ to find the target index.\n\n- Space complexity: $O(1)$.\n\n  The output array is not counted in the space complexity.\n\n\n### Approach 2: One-time Traversal\n\n#### Intuition\n\nLet's assume the length of the array $\\textit{nums}$ is $n$. Then, for any index $j$ that satisfies $\\textit{nums}[j] = \\textit{key}$, all indices within the closed interval $[\\max(0, j - k), \\min(n - 1, j + k)]$ are $K$-neighbor indices (the maximum and minimum functions are used here to ensure the indices are valid).\n\nSo, we can find all indices $j$ such that $\\textit{nums}[j] = \\textit{key}$ by traversing the array $\\textit{nums}$ once, and then adding the integers within the corresponding interval to $\\textit{res}$. However, this can still lead to the possibility of duplicate indices being added to the answer array. To avoid this, we can use $r$ to represent the smallest index that has not yet been determined to be a $K$-nearest neighbor index. Before the traversal begins, let $r = 0$. Whenever we reach an index $j$ that satisfies the condition, we just need to add all indices within the closed interval $[\\max(0, j - k), \\min(n - 1, j + k)]$ in order to $\\textit{res}$, starting from $r$, and at the same time, update $r$ to $\\min(n - 1, j + k) + 1$. After the traversal is complete, $\\textit{res}$ will contain all $K$-nearest neighbor indices, sorted in ascending order and without duplicates.\n\n#### Implementation#### Complexity Analysis\n\nLet $n$ be the length of the array $\\textit{nums}$.\n\n- Time complexity: $O(n)$.\n  \n  We only need to traverse the array once.\n\n- Space complexity: $O(1)$.\n\n  The output array is not counted in the space complexity."
}
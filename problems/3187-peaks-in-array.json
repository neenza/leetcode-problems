{
  "title": "Peaks in Array",
  "problem_id": "3438",
  "frontend_id": "3187",
  "difficulty": "Hard",
  "problem_slug": "peaks-in-array",
  "topics": [
    "Array",
    "Binary Indexed Tree",
    "Segment Tree"
  ],
  "description": "A peak in an array arr is an element that is greater than its previous and next element in arr.\nYou are given an integer array nums and a 2D integer array queries.\nYou have to process queries of two types:\nReturn an array answer containing the results of the queries of the first type in order.\nNotes:\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [3,1,4,2,5], queries = [[2,3,4],[1,0,4]]\nOutput: [0]\nExplanation:\nFirst query: We change nums[3] to 4 and nums becomes [3,1,4,4,5] .\nSecond query: The number of peaks in the [3,1,4,4,5] is 0.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [4,1,4,2,1,5], queries = [[2,2,4],[1,0,2],[1,0,4]]\nOutput: [0,1]\nExplanation:\nFirst query: nums[2] should become 4, but it is already set to 4.\nSecond query: The number of peaks in the [4,1,4] is 0.\nThird query: The second 4 is a peak in the [4,1,4,2,1] .",
      "images": []
    }
  ],
  "constraints": [
    "3 <= nums.length <= 105",
    "1 <= nums[i] <= 105",
    "1 <= queries.length <= 105",
    "queries[i][0] == 1 or queries[i][0] == 2",
    "For all i that:\n\t\nqueries[i][0] == 1: 0 <= queries[i][1] <= queries[i][2] <= nums.length - 1\nqueries[i][0] == 2: 0 <= queries[i][1] <= nums.length - 1, 1 <= queries[i][2] <= 105",
    "queries[i][0] == 1: 0 <= queries[i][1] <= queries[i][2] <= nums.length - 1",
    "queries[i][0] == 2: 0 <= queries[i][1] <= nums.length - 1, 1 <= queries[i][2] <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "Let <code>p[i]</code> be whether <code>nums[i]</code> is a peak in the original array. Namely <code>p[i] = nums[i] > nums[i - 1] && nums[i] > nums[i + 1]</code>.",
    "Updating <code>nums[i]</code>, only affects <code>p[i]</code>, <code>p[i - 1]</code> and <code>p[i + 1]</code>. We can recalculate the 3 values in constant time.",
    "The answer for <code>[l<sub>i</sub>, r<sub>i</sub>]</code> is <code>p[l<sub>i</sub> + 1] + p[l<sub>i</sub> + 2] + â€¦ + p[r<sub>i</sub> - 1]</code> (note that <code>l<sub>i</sub></code> and <code>r<sub>i</sub></code> are not included).",
    "Use some data structures (i.e. segment tree or binary indexed tree) to maintain the subarray sum efficiently."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countOfPeaks(self, nums, queries):\n        \"\"\"\n        :type nums: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* countOfPeaks(int* nums, int numsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<int> CountOfPeaks(int[] nums, int[][] queries) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar countOfPeaks = function(nums, queries) {\n    \n};",
    "typescript": "function countOfPeaks(nums: number[], queries: number[][]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function countOfPeaks($nums, $queries) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countOfPeaks(_ nums: [Int], _ queries: [[Int]]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countOfPeaks(nums: IntArray, queries: Array<IntArray>): List<Int> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> countOfPeaks(List<int> nums, List<List<int>> queries) {\n    \n  }\n}",
    "golang": "func countOfPeaks(nums []int, queries [][]int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef count_of_peaks(nums, queries)\n    \nend",
    "scala": "object Solution {\n    def countOfPeaks(nums: Array[Int], queries: Array[Array[Int]]): List[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_of_peaks(nums: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (count-of-peaks nums queries)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) (listof exact-integer?))\n  )",
    "erlang": "-spec count_of_peaks(Nums :: [integer()], Queries :: [[integer()]]) -> [integer()].\ncount_of_peaks(Nums, Queries) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_of_peaks(nums :: [integer], queries :: [[integer]]) :: [integer]\n  def count_of_peaks(nums, queries) do\n    \n  end\nend"
  }
}
{
  "title": "Remove Max Number of Edges to Keep Graph Fully Traversable",
  "problem_id": "1701",
  "frontend_id": "1579",
  "difficulty": "Hard",
  "problem_slug": "remove-max-number-of-edges-to-keep-graph-fully-traversable",
  "topics": [
    "Union Find",
    "Graph"
  ],
  "description": "Alice and Bob have an undirected graph of n nodes and three types of edges:\nGiven an array edges where edges[i] = [typei, ui, vi] represents a bidirectional edge of type typei between nodes ui and vi, find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both Alice and Bob. The graph is fully traversed by Alice and Bob if starting from any node, they can reach all other nodes.\nReturn the maximum number of edges you can remove, or return -1 if Alice and Bob cannot fully traverse the graph.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]\nOutput: 2\nExplanation: If we remove the 2 edges [1,1,2] and [1,1,3]. The graph will still be fully traversable by Alice and Bob. Removing any additional edge will not make it so. So the maximum number of edges we can remove is 2.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/08/19/ex1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]\nOutput: 0\nExplanation: Notice that removing any edge will not make the graph fully traversable by Alice and Bob.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/08/19/ex2.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]\nOutput: -1\nExplanation: In the current graph, Alice cannot reach node 4 from the other nodes. Likewise, Bob cannot reach 1. Therefore it's impossible to make the graph fully traversable.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/08/19/ex3.png"
      ]
    }
  ],
  "constraints": [
    "1 <= n <= 105",
    "1 <= edges.length <= min(105, 3 * n * (n - 1) / 2)",
    "edges[i].length == 3",
    "1 <= typei <= 3",
    "1 <= ui < vi <= n",
    "All tuples (typei, ui, vi) are distinct."
  ],
  "follow_ups": [],
  "hints": [
    "Build the network instead of removing extra edges.",
    "Suppose you have the final graph (after removing extra edges). Consider the subgraph with only the edges that Alice can traverse. What structure does this subgraph have? How many edges are there?",
    "Use disjoint set union data structure for both Alice and Bob.",
    "Always use Type 3 edges first, and connect the still isolated ones using other edges."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxNumEdgesToRemove(int n, vector<vector<int>>& edges) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxNumEdgesToRemove(int n, int[][] edges) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxNumEdgesToRemove(self, n, edges):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxNumEdgesToRemove(self, n: int, edges: List[List[int]]) -> int:\n        ",
    "c": "int maxNumEdgesToRemove(int n, int** edges, int edgesSize, int* edgesColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxNumEdgesToRemove(int n, int[][] edges) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {number}\n */\nvar maxNumEdgesToRemove = function(n, edges) {\n    \n};",
    "typescript": "function maxNumEdgesToRemove(n: number, edges: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @return Integer\n     */\n    function maxNumEdgesToRemove($n, $edges) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxNumEdgesToRemove(_ n: Int, _ edges: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxNumEdgesToRemove(n: Int, edges: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxNumEdgesToRemove(int n, List<List<int>> edges) {\n    \n  }\n}",
    "golang": "func maxNumEdgesToRemove(n int, edges [][]int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @return {Integer}\ndef max_num_edges_to_remove(n, edges)\n    \nend",
    "scala": "object Solution {\n    def maxNumEdgesToRemove(n: Int, edges: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_num_edges_to_remove(n: i32, edges: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-num-edges-to-remove n edges)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec max_num_edges_to_remove(N :: integer(), Edges :: [[integer()]]) -> integer().\nmax_num_edges_to_remove(N, Edges) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_num_edges_to_remove(n :: integer, edges :: [[integer]]) :: integer\n  def max_num_edges_to_remove(n, edges) do\n    \n  end\nend"
  }
}
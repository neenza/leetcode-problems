{
  "title": "New 21 Game",
  "problem_id": "867",
  "frontend_id": "837",
  "difficulty": "Medium",
  "problem_slug": "new-21-game",
  "topics": [
    "Math",
    "Dynamic Programming",
    "Sliding Window",
    "Probability and Statistics"
  ],
  "description": "Alice plays the following game, loosely based on the card game \"21\".\nAlice starts with 0 points and draws numbers while she has less than k points. During each draw, she gains an integer number of points randomly from the range [1, maxPts], where maxPts is an integer. Each draw is independent and the outcomes have equal probabilities.\nAlice stops drawing numbers when she gets k or more points.\nReturn the probability that Alice has n or fewer points.\nAnswers within 10-5 of the actual answer are considered accepted.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 10, k = 1, maxPts = 10\nOutput: 1.00000\nExplanation: Alice gets a single card, then stops.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 6, k = 1, maxPts = 10\nOutput: 0.60000\nExplanation: Alice gets a single card, then stops.\nIn 6 out of 10 possibilities, she is at or below 6 points.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 21, k = 17, maxPts = 10\nOutput: 0.73278",
      "images": []
    }
  ],
  "constraints": [
    "0 <= k <= n <= 104",
    "1 <= maxPts <= 104"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    double new21Game(int n, int k, int maxPts) {\n        \n    }\n};",
    "java": "class Solution {\n    public double new21Game(int n, int k, int maxPts) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def new21Game(self, n, k, maxPts):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :type maxPts: int\n        :rtype: float\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def new21Game(self, n: int, k: int, maxPts: int) -> float:\n        ",
    "c": "double new21Game(int n, int k, int maxPts) {\n    \n}",
    "csharp": "public class Solution {\n    public double New21Game(int n, int k, int maxPts) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number} k\n * @param {number} maxPts\n * @return {number}\n */\nvar new21Game = function(n, k, maxPts) {\n    \n};",
    "typescript": "function new21Game(n: number, k: number, maxPts: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @param Integer $maxPts\n     * @return Float\n     */\n    function new21Game($n, $k, $maxPts) {\n        \n    }\n}",
    "swift": "class Solution {\n    func new21Game(_ n: Int, _ k: Int, _ maxPts: Int) -> Double {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun new21Game(n: Int, k: Int, maxPts: Int): Double {\n        \n    }\n}",
    "dart": "class Solution {\n  double new21Game(int n, int k, int maxPts) {\n    \n  }\n}",
    "golang": "func new21Game(n int, k int, maxPts int) float64 {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer} k\n# @param {Integer} max_pts\n# @return {Float}\ndef new21_game(n, k, max_pts)\n    \nend",
    "scala": "object Solution {\n    def new21Game(n: Int, k: Int, maxPts: Int): Double = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn new21_game(n: i32, k: i32, max_pts: i32) -> f64 {\n        \n    }\n}",
    "racket": "(define/contract (new21-game n k maxPts)\n  (-> exact-integer? exact-integer? exact-integer? flonum?)\n  )",
    "erlang": "-spec new21_game(N :: integer(), K :: integer(), MaxPts :: integer()) -> float().\nnew21_game(N, K, MaxPts) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec new21_game(n :: integer, k :: integer, max_pts :: integer) :: float\n  def new21_game(n, k, max_pts) do\n    \n  end\nend"
  }
}
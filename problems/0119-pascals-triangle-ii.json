{
  "title": "Pascal's Triangle II",
  "problem_id": "119",
  "frontend_id": "119",
  "difficulty": "Easy",
  "problem_slug": "pascals-triangle-ii",
  "topics": [
    "Array",
    "Dynamic Programming"
  ],
  "description": "Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up: Could you optimize your algorithm to use only O(rowIndex) extra space?",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: rowIndex = 3\nOutput: [1,3,3,1]",
      "images": [
        "https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: rowIndex = 0\nOutput: [1]",
      "images": [
        "https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: rowIndex = 1\nOutput: [1,1]",
      "images": [
        "https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif"
      ]
    }
  ],
  "constraints": [
    "0 <= rowIndex <= 33"
  ],
  "follow_ups": [
    "Could you optimize your algorithm to use only O(rowIndex) extra space?"
  ],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> getRow(int rowIndex) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<Integer> getRow(int rowIndex) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* getRow(int rowIndex, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<int> GetRow(int rowIndex) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} rowIndex\n * @return {number[]}\n */\nvar getRow = function(rowIndex) {\n    \n};",
    "typescript": "function getRow(rowIndex: number): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $rowIndex\n     * @return Integer[]\n     */\n    function getRow($rowIndex) {\n        \n    }\n}",
    "swift": "class Solution {\n    func getRow(_ rowIndex: Int) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun getRow(rowIndex: Int): List<Int> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> getRow(int rowIndex) {\n    \n  }\n}",
    "golang": "func getRow(rowIndex int) []int {\n    \n}",
    "ruby": "# @param {Integer} row_index\n# @return {Integer[]}\ndef get_row(row_index)\n    \nend",
    "scala": "object Solution {\n    def getRow(rowIndex: Int): List[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn get_row(row_index: i32) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (get-row rowIndex)\n  (-> exact-integer? (listof exact-integer?))\n  )",
    "erlang": "-spec get_row(RowIndex :: integer()) -> [integer()].\nget_row(RowIndex) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec get_row(row_index :: integer) :: [integer]\n  def get_row(row_index) do\n    \n  end\nend"
  }
}
{
  "title": "Left and Right Sum Differences",
  "problem_id": "2714",
  "frontend_id": "2574",
  "difficulty": "Easy",
  "problem_slug": "left-and-right-sum-differences",
  "topics": [
    "Array",
    "Prefix Sum"
  ],
  "description": "You are given a 0-indexed integer array nums of size n.\nDefine two arrays leftSum and rightSum where:\nReturn an integer array answer of size n where answer[i] = |leftSum[i] - rightSum[i]|.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [10,4,8,3]\nOutput: [15,1,11,22]\nExplanation: The array leftSum is [0,10,14,22] and the array rightSum is [15,11,3,0].\nThe array answer is [|0 - 15|,|10 - 11|,|14 - 3|,|22 - 0|] = [15,1,11,22].",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1]\nOutput: [0]\nExplanation: The array leftSum is [0] and the array rightSum is [0].\nThe array answer is [|0 - 0|] = [0].",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 1000",
    "1 <= nums[i] <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "For each index i, maintain two variables leftSum and rightSum.",
    "Iterate on the range j: [0 … i - 1] and add nums[j] to the leftSum and similarly iterate on the range j: [i + 1 … nums.length - 1] and add nums[j] to the rightSum."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> leftRightDifference(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] leftRightDifference(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def leftRightDifference(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* leftRightDifference(int* nums, int numsSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] LeftRightDifference(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar leftRightDifference = function(nums) {\n    \n};",
    "typescript": "function leftRightDifference(nums: number[]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function leftRightDifference($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func leftRightDifference(_ nums: [Int]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun leftRightDifference(nums: IntArray): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> leftRightDifference(List<int> nums) {\n    \n  }\n}",
    "golang": "func leftRightDifference(nums []int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef left_right_difference(nums)\n    \nend",
    "scala": "object Solution {\n    def leftRightDifference(nums: Array[Int]): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn left_right_difference(nums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (left-right-difference nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )",
    "erlang": "-spec left_right_difference(Nums :: [integer()]) -> [integer()].\nleft_right_difference(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec left_right_difference(nums :: [integer]) :: [integer]\n  def left_right_difference(nums) do\n    \n  end\nend"
  }
}
{
  "title": "Minimum Reverse Operations",
  "problem_id": "2726",
  "frontend_id": "2612",
  "difficulty": "Hard",
  "problem_slug": "minimum-reverse-operations",
  "topics": [
    "Array",
    "Breadth-First Search",
    "Ordered Set"
  ],
  "description": "You are given an integer n and an integer p representing an array arr of length n where all elements are set to 0's, except position p which is set to 1. You are also given an integer array banned containing restricted positions. Perform the following operation on arr:\nReturn an integer array answer with n results where the ith result is the minimum number of operations needed to bring the single 1 to position i in arr, or -1 if it is impossible.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 4, p = 0, banned = [1,2], k = 4\nOutput: [0,-1,-1,1]\nExplanation:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 5, p = 0, banned = [2,4], k = 3\nOutput: [0,-1,-1,-1,-1]\nExplanation:",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 4, p = 2, banned = [0,1,3], k = 1\nOutput: [-1,-1,0,-1]\nExplanation:\nPerform operations of size 1 and 1 never changes its position.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 105",
    "0 <= p <= n - 1",
    "0 <= banned.length <= n - 1",
    "0 <= banned[i] <= n - 1",
    "1 <= k <= n",
    "banned[i] != p",
    "all values in bannedÂ are unique"
  ],
  "follow_ups": [],
  "hints": [
    "Can we use a breadth-first search to find the minimum number of operations?",
    "Find the beginning and end indices of the subarray of size k that can be reversed to bring 1 to a particular position.",
    "Can we visit every index or do we need to consider the parity of k?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> minReverseOperations(int n, int p, vector<int>& banned, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] minReverseOperations(int n, int p, int[] banned, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minReverseOperations(self, n, p, banned, k):\n        \"\"\"\n        :type n: int\n        :type p: int\n        :type banned: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minReverseOperations(self, n: int, p: int, banned: List[int], k: int) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* minReverseOperations(int n, int p, int* banned, int bannedSize, int k, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] MinReverseOperations(int n, int p, int[] banned, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number} p\n * @param {number[]} banned\n * @param {number} k\n * @return {number[]}\n */\nvar minReverseOperations = function(n, p, banned, k) {\n    \n};",
    "typescript": "function minReverseOperations(n: number, p: number, banned: number[], k: number): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $p\n     * @param Integer[] $banned\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function minReverseOperations($n, $p, $banned, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minReverseOperations(_ n: Int, _ p: Int, _ banned: [Int], _ k: Int) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minReverseOperations(n: Int, p: Int, banned: IntArray, k: Int): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> minReverseOperations(int n, int p, List<int> banned, int k) {\n    \n  }\n}",
    "golang": "func minReverseOperations(n int, p int, banned []int, k int) []int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer} p\n# @param {Integer[]} banned\n# @param {Integer} k\n# @return {Integer[]}\ndef min_reverse_operations(n, p, banned, k)\n    \nend",
    "scala": "object Solution {\n    def minReverseOperations(n: Int, p: Int, banned: Array[Int], k: Int): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_reverse_operations(n: i32, p: i32, banned: Vec<i32>, k: i32) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (min-reverse-operations n p banned k)\n  (-> exact-integer? exact-integer? (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )",
    "erlang": "-spec min_reverse_operations(N :: integer(), P :: integer(), Banned :: [integer()], K :: integer()) -> [integer()].\nmin_reverse_operations(N, P, Banned, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_reverse_operations(n :: integer, p :: integer, banned :: [integer], k :: integer) :: [integer]\n  def min_reverse_operations(n, p, banned, k) do\n    \n  end\nend"
  }
}
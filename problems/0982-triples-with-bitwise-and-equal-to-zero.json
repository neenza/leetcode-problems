{
  "title": "Triples with Bitwise AND Equal To Zero",
  "problem_id": "1024",
  "frontend_id": "982",
  "difficulty": "Hard",
  "problem_slug": "triples-with-bitwise-and-equal-to-zero",
  "topics": [
    "Array",
    "Hash Table",
    "Bit Manipulation"
  ],
  "description": "Given an integer array nums, return the number of AND triples.\nAn AND triple is a triple of indices (i, j, k) such that:\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [2,1,3]\nOutput: 12\nExplanation: We could choose the following i, j, k triples:\n(i=0, j=0, k=1) : 2 & 2 & 1\n(i=0, j=1, k=0) : 2 & 1 & 2\n(i=0, j=1, k=1) : 2 & 1 & 1\n(i=0, j=1, k=2) : 2 & 1 & 3\n(i=0, j=2, k=1) : 2 & 3 & 1\n(i=1, j=0, k=0) : 1 & 2 & 2\n(i=1, j=0, k=1) : 1 & 2 & 1\n(i=1, j=0, k=2) : 1 & 2 & 3\n(i=1, j=1, k=0) : 1 & 1 & 2\n(i=1, j=2, k=0) : 1 & 3 & 2\n(i=2, j=0, k=1) : 3 & 2 & 1\n(i=2, j=1, k=0) : 3 & 1 & 2",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [0,0,0]\nOutput: 27",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 1000",
    "0 <= nums[i] < 216"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int countTriplets(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int countTriplets(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countTriplets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countTriplets(self, nums: List[int]) -> int:\n        ",
    "c": "int countTriplets(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int CountTriplets(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countTriplets = function(nums) {\n    \n};",
    "typescript": "function countTriplets(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function countTriplets($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countTriplets(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countTriplets(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int countTriplets(List<int> nums) {\n    \n  }\n}",
    "golang": "func countTriplets(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef count_triplets(nums)\n    \nend",
    "scala": "object Solution {\n    def countTriplets(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_triplets(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (count-triplets nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec count_triplets(Nums :: [integer()]) -> integer().\ncount_triplets(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_triplets(nums :: [integer]) :: integer\n  def count_triplets(nums) do\n    \n  end\nend"
  }
}
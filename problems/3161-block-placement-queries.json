{
  "title": "Block Placement Queries",
  "problem_id": "3435",
  "frontend_id": "3161",
  "difficulty": "Hard",
  "problem_slug": "block-placement-queries",
  "topics": [
    "Array",
    "Binary Search",
    "Binary Indexed Tree",
    "Segment Tree"
  ],
  "description": "There exists an infinite number line, with its origin at 0 and extending towards the positive x-axis.\nYou are given a 2D array queries, which contains two types of queries:\nReturn a boolean array results, where results[i] is true if you can place the block specified in the ith query of type 2, and false otherwise.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: queries = [[1,2],[2,3,3],[2,3,1],[2,2,2]]\nOutput: [false,true,true]\nExplanation:\n\nFor query 0, place an obstacle at x = 2 . A block of size at most 2 can be placed before x = 3 .",
      "images": [
        "https://assets.leetcode.com/uploads/2024/04/22/example0block.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: queries = [[1,7],[2,7,6],[1,2],[2,7,5],[2,7,6]]\nOutput: [true,true,false]\nExplanation:\n",
      "images": [
        "https://assets.leetcode.com/uploads/2024/04/22/example1block.png"
      ]
    }
  ],
  "constraints": [
    "1 <= queries.length <= 15 * 104",
    "2 <= queries[i].length <= 3",
    "1 <= queries[i][0] <= 2",
    "1 <= x, sz <= min(5 * 104, 3 * queries.length)",
    "The input is generated such that for queries of type 1, no obstacle exists at distance x when the query is asked.",
    "The input is generated such that there is at least one query of type 2."
  ],
  "follow_ups": [],
  "hints": [
    "Let <code>d[x]</code> be the distance of the next obstacle after <code>x</code>.",
    "For each query of type 2, we just need to check if <code>max(d[0], d[1], d[2], â€¦d[x - sz]) > sz</code>.",
    "Use segment tree to maintain <code>d[x]</code>."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<Boolean> getResults(int[][] queries) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def getResults(self, queries):\n        \"\"\"\n        :type queries: List[List[int]]\n        :rtype: List[bool]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nbool* getResults(int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<bool> GetResults(int[][] queries) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} queries\n * @return {boolean[]}\n */\nvar getResults = function(queries) {\n    \n};",
    "typescript": "function getResults(queries: number[][]): boolean[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $queries\n     * @return Boolean[]\n     */\n    function getResults($queries) {\n        \n    }\n}",
    "swift": "class Solution {\n    func getResults(_ queries: [[Int]]) -> [Bool] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun getResults(queries: Array<IntArray>): List<Boolean> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<bool> getResults(List<List<int>> queries) {\n    \n  }\n}",
    "golang": "func getResults(queries [][]int) []bool {\n    \n}",
    "ruby": "# @param {Integer[][]} queries\n# @return {Boolean[]}\ndef get_results(queries)\n    \nend",
    "scala": "object Solution {\n    def getResults(queries: Array[Array[Int]]): List[Boolean] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn get_results(queries: Vec<Vec<i32>>) -> Vec<bool> {\n        \n    }\n}",
    "racket": "(define/contract (get-results queries)\n  (-> (listof (listof exact-integer?)) (listof boolean?))\n  )",
    "erlang": "-spec get_results(Queries :: [[integer()]]) -> [boolean()].\nget_results(Queries) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec get_results(queries :: [[integer]]) :: [boolean]\n  def get_results(queries) do\n    \n  end\nend"
  }
}
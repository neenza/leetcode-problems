{
  "title": "Count Unreachable Pairs of Nodes in an Undirected Graph",
  "problem_id": "2403",
  "frontend_id": "2316",
  "difficulty": "Medium",
  "problem_slug": "count-unreachable-pairs-of-nodes-in-an-undirected-graph",
  "topics": [
    "Depth-First Search",
    "Breadth-First Search",
    "Union Find",
    "Graph"
  ],
  "description": "You are given an integer n. There is an undirected graph with n nodes, numbered from 0 to n - 1. You are given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.\nReturn the number of pairs of different nodes that are unreachable from each other.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 3, edges = [[0,1],[0,2],[1,2]]\nOutput: 0\nExplanation: There are no pairs of nodes that are unreachable from each other. Therefore, we return 0.",
      "images": [
        "https://assets.leetcode.com/uploads/2022/05/05/tc-3.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 7, edges = [[0,2],[0,5],[2,4],[1,6],[5,4]]\nOutput: 14\nExplanation: There are 14 pairs of nodes that are unreachable from each other:\n[[0,1],[0,3],[0,6],[1,2],[1,3],[1,4],[1,5],[2,3],[2,6],[3,4],[3,5],[3,6],[4,6],[5,6]].\nTherefore, we return 14.",
      "images": [
        "https://assets.leetcode.com/uploads/2022/05/05/tc-2.png"
      ]
    }
  ],
  "constraints": [
    "1 <= n <= 105",
    "0 <= edges.length <= 2 * 105",
    "edges[i].length == 2",
    "0 <= ai, bi < n",
    "ai != bi",
    "There are no repeated edges."
  ],
  "follow_ups": [],
  "hints": [
    "Find the connected components of the graph. To find connected components, you can use Union Find (Disjoint Sets), BFS, or DFS.",
    "For a node u, the number of nodes that are unreachable from u is the number of nodes that are not in the same connected component as u.",
    "The number of unreachable nodes from node u will be the same for the number of nodes that are unreachable from node v if nodes u and v belong to the same connected component."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long countPairs(int n, vector<vector<int>>& edges) {\n        \n    }\n};",
    "java": "class Solution {\n    public long countPairs(int n, int[][] edges) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countPairs(self, n, edges):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countPairs(self, n: int, edges: List[List[int]]) -> int:\n        ",
    "c": "long long countPairs(int n, int** edges, int edgesSize, int* edgesColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public long CountPairs(int n, int[][] edges) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {number}\n */\nvar countPairs = function(n, edges) {\n    \n};",
    "typescript": "function countPairs(n: number, edges: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @return Integer\n     */\n    function countPairs($n, $edges) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countPairs(_ n: Int, _ edges: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countPairs(n: Int, edges: Array<IntArray>): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int countPairs(int n, List<List<int>> edges) {\n    \n  }\n}",
    "golang": "func countPairs(n int, edges [][]int) int64 {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @return {Integer}\ndef count_pairs(n, edges)\n    \nend",
    "scala": "object Solution {\n    def countPairs(n: Int, edges: Array[Array[Int]]): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_pairs(n: i32, edges: Vec<Vec<i32>>) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (count-pairs n edges)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec count_pairs(N :: integer(), Edges :: [[integer()]]) -> integer().\ncount_pairs(N, Edges) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_pairs(n :: integer, edges :: [[integer]]) :: integer\n  def count_pairs(n, edges) do\n    \n  end\nend"
  }
}
{
  "title": "Longest Uncommon Subsequence II",
  "problem_id": "522",
  "frontend_id": "522",
  "difficulty": "Medium",
  "problem_slug": "longest-uncommon-subsequence-ii",
  "topics": [
    "Array",
    "Hash Table",
    "Two Pointers",
    "String",
    "Sorting"
  ],
  "description": "Given an array of strings strs, return the length of the longest uncommon subsequence between them. If the longest uncommon subsequence does not exist, return -1.\nAn uncommon subsequence between an array of strings is a string that is a subsequence of one string but not the others.\nA subsequence of a string s is a string that can be obtained after deleting any number of characters from s.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: strs = [\"aba\",\"cdc\",\"eae\"]\nOutput: 3",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: strs = [\"aaa\",\"aaa\",\"aa\"]\nOutput: -1",
      "images": []
    }
  ],
  "constraints": [
    "2 <= strs.length <= 50",
    "1 <= strs[i].length <= 10",
    "strs[i] consists of lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int findLUSlength(vector<string>& strs) {\n        \n    }\n};",
    "java": "class Solution {\n    public int findLUSlength(String[] strs) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findLUSlength(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findLUSlength(self, strs: List[str]) -> int:\n        ",
    "c": "int findLUSlength(char** strs, int strsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int FindLUSlength(string[] strs) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string[]} strs\n * @return {number}\n */\nvar findLUSlength = function(strs) {\n    \n};",
    "typescript": "function findLUSlength(strs: string[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String[] $strs\n     * @return Integer\n     */\n    function findLUSlength($strs) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findLUSlength(_ strs: [String]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findLUSlength(strs: Array<String>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int findLUSlength(List<String> strs) {\n    \n  }\n}",
    "golang": "func findLUSlength(strs []string) int {\n    \n}",
    "ruby": "# @param {String[]} strs\n# @return {Integer}\ndef find_lu_slength(strs)\n    \nend",
    "scala": "object Solution {\n    def findLUSlength(strs: Array[String]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_lu_slength(strs: Vec<String>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (find-lu-slength strs)\n  (-> (listof string?) exact-integer?)\n  )",
    "erlang": "-spec find_lu_slength(Strs :: [unicode:unicode_binary()]) -> integer().\nfind_lu_slength(Strs) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_lu_slength(strs :: [String.t]) :: integer\n  def find_lu_slength(strs) do\n    \n  end\nend"
  }
}
{
  "title": "Check if Binary String Has at Most One Segment of Ones",
  "problem_id": "1910",
  "frontend_id": "1784",
  "difficulty": "Easy",
  "problem_slug": "check-if-binary-string-has-at-most-one-segment-of-ones",
  "topics": [
    "String"
  ],
  "description": "Given a binary string s ​​​​​without leading zeros, return true​​​ if s contains at most one contiguous segment of ones. Otherwise, return false.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"1001\"\nOutput: false\nExplanation: The ones do not form a contiguous segment.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"110\"\nOutput: true",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 100",
    "s[i]​​​​ is either '0' or '1'.",
    "s[0] is '1'."
  ],
  "follow_ups": [],
  "hints": [
    "It's guaranteed to have at least one segment",
    "The string size is small so you can count all segments of ones with no that have no adjacent ones."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool checkOnesSegment(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean checkOnesSegment(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def checkOnesSegment(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def checkOnesSegment(self, s: str) -> bool:\n        ",
    "c": "bool checkOnesSegment(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public bool CheckOnesSegment(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar checkOnesSegment = function(s) {\n    \n};",
    "typescript": "function checkOnesSegment(s: string): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function checkOnesSegment($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func checkOnesSegment(_ s: String) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun checkOnesSegment(s: String): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool checkOnesSegment(String s) {\n    \n  }\n}",
    "golang": "func checkOnesSegment(s string) bool {\n    \n}",
    "ruby": "# @param {String} s\n# @return {Boolean}\ndef check_ones_segment(s)\n    \nend",
    "scala": "object Solution {\n    def checkOnesSegment(s: String): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn check_ones_segment(s: String) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (check-ones-segment s)\n  (-> string? boolean?)\n  )",
    "erlang": "-spec check_ones_segment(S :: unicode:unicode_binary()) -> boolean().\ncheck_ones_segment(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec check_ones_segment(s :: String.t) :: boolean\n  def check_ones_segment(s) do\n    \n  end\nend"
  }
}
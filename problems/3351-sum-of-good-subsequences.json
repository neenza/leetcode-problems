{
  "title": "Sum of Good Subsequences",
  "problem_id": "3646",
  "frontend_id": "3351",
  "difficulty": "Hard",
  "problem_slug": "sum-of-good-subsequences",
  "topics": [
    "Array",
    "Hash Table",
    "Dynamic Programming"
  ],
  "description": "You are given an integer array nums. A good subsequence is defined as a subsequence of nums where the absolute difference between any two consecutive elements in the subsequence is exactly 1.\nReturn the sum of all possible good subsequences of nums.\nSince the answer may be very large, return it modulo 109 + 7.\nNote that a subsequence of size 1 is considered good by definition.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,1]\nOutput: 14\nExplanation:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [3,4,5]\nOutput: 40\nExplanation:",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "0 <= nums[i] <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "Consider counting how many times each element occurs in all possible good subsequences. This can help you derive the final answer more easily.",
    "Use dynamic programming to track both the count and the sum of subsequences where the last element is <code>nums[i]</code>."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int sumOfGoodSubsequences(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int sumOfGoodSubsequences(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def sumOfGoodSubsequences(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def sumOfGoodSubsequences(self, nums: List[int]) -> int:\n        ",
    "c": "int sumOfGoodSubsequences(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int SumOfGoodSubsequences(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar sumOfGoodSubsequences = function(nums) {\n    \n};",
    "typescript": "function sumOfGoodSubsequences(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function sumOfGoodSubsequences($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func sumOfGoodSubsequences(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun sumOfGoodSubsequences(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int sumOfGoodSubsequences(List<int> nums) {\n    \n  }\n}",
    "golang": "func sumOfGoodSubsequences(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef sum_of_good_subsequences(nums)\n    \nend",
    "scala": "object Solution {\n    def sumOfGoodSubsequences(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn sum_of_good_subsequences(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (sum-of-good-subsequences nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec sum_of_good_subsequences(Nums :: [integer()]) -> integer().\nsum_of_good_subsequences(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec sum_of_good_subsequences(nums :: [integer]) :: integer\n  def sum_of_good_subsequences(nums) do\n    \n  end\nend"
  }
}
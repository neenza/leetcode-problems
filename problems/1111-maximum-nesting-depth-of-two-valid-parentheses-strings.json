{
  "title": "Maximum Nesting Depth of Two Valid Parentheses Strings",
  "problem_id": "1208",
  "frontend_id": "1111",
  "difficulty": "Medium",
  "problem_slug": "maximum-nesting-depth-of-two-valid-parentheses-strings",
  "topics": [
    "String",
    "Stack"
  ],
  "description": "A string is a valid parentheses string (denoted VPS) if and only if it consists of \"(\" and \")\" characters only, and:\nWe can similarly define the nesting depth depth(S) of any VPS S as follows:\nFor example,  \"\", \"()()\", and \"()(()())\" are VPS's (with nesting depths 0, 1, and 2), and \")(\" and \"(()\" are not VPS's.\nGiven a VPS seq, split it into two disjoint subsequences A and B, such that A and B are VPS's (and A.length + B.length = seq.length).\nNow choose any such A and B such that max(depth(A), depth(B)) is the minimum possible value.\nReturn an answer array (of length seq.length) that encodes such a choice of A and B:  answer[i] = 0 if seq[i] is part of A, else answer[i] = 1.  Note that even though multiple answers may exist, you may return any of them.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: seq = \"(()())\"\nOutput: [0,1,1,1,1,0]",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: seq = \"()(())()\"\nOutput: [0,0,0,1,1,0,1,1]",
      "images": []
    }
  ],
  "constraints": [
    "1 <= seq.size <= 10000"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> maxDepthAfterSplit(string seq) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] maxDepthAfterSplit(String seq) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxDepthAfterSplit(self, seq):\n        \"\"\"\n        :type seq: str\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxDepthAfterSplit(self, seq: str) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* maxDepthAfterSplit(char* seq, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] MaxDepthAfterSplit(string seq) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} seq\n * @return {number[]}\n */\nvar maxDepthAfterSplit = function(seq) {\n    \n};",
    "typescript": "function maxDepthAfterSplit(seq: string): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $seq\n     * @return Integer[]\n     */\n    function maxDepthAfterSplit($seq) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxDepthAfterSplit(_ seq: String) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxDepthAfterSplit(seq: String): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> maxDepthAfterSplit(String seq) {\n    \n  }\n}",
    "golang": "func maxDepthAfterSplit(seq string) []int {\n    \n}",
    "ruby": "# @param {String} seq\n# @return {Integer[]}\ndef max_depth_after_split(seq)\n    \nend",
    "scala": "object Solution {\n    def maxDepthAfterSplit(seq: String): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_depth_after_split(seq: String) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (max-depth-after-split seq)\n  (-> string? (listof exact-integer?))\n  )",
    "erlang": "-spec max_depth_after_split(Seq :: unicode:unicode_binary()) -> [integer()].\nmax_depth_after_split(Seq) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_depth_after_split(seq :: String.t) :: [integer]\n  def max_depth_after_split(seq) do\n    \n  end\nend"
  }
}
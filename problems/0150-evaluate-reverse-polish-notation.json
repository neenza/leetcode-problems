{
  "title": "Evaluate Reverse Polish Notation",
  "problem_id": "150",
  "frontend_id": "150",
  "difficulty": "Medium",
  "problem_slug": "evaluate-reverse-polish-notation",
  "topics": [
    "Array",
    "Math",
    "Stack"
  ],
  "description": "You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.\nEvaluate the expression. Return an integer that represents the value of the expression.\nNote that:\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\nOutput: 9\nExplanation: ((2 + 1) * 3) = 9",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]\nOutput: 6\nExplanation: (4 + (13 / 5)) = 6",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]\nOutput: 22\nExplanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22",
      "images": []
    }
  ],
  "constraints": [
    "1 <= tokens.length <= 104",
    "tokens[i] is either an operator: \"+\", \"-\", \"*\", or \"/\", or an integer in the range [-200, 200]."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int evalRPN(vector<string>& tokens) {\n        \n    }\n};",
    "java": "class Solution {\n    public int evalRPN(String[] tokens) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def evalRPN(self, tokens: List[str]) -> int:\n        ",
    "c": "int evalRPN(char** tokens, int tokensSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int EvalRPN(string[] tokens) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string[]} tokens\n * @return {number}\n */\nvar evalRPN = function(tokens) {\n    \n};",
    "typescript": "function evalRPN(tokens: string[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String[] $tokens\n     * @return Integer\n     */\n    function evalRPN($tokens) {\n        \n    }\n}",
    "swift": "class Solution {\n    func evalRPN(_ tokens: [String]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun evalRPN(tokens: Array<String>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int evalRPN(List<String> tokens) {\n    \n  }\n}",
    "golang": "func evalRPN(tokens []string) int {\n    \n}",
    "ruby": "# @param {String[]} tokens\n# @return {Integer}\ndef eval_rpn(tokens)\n    \nend",
    "scala": "object Solution {\n    def evalRPN(tokens: Array[String]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn eval_rpn(tokens: Vec<String>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (eval-rpn tokens)\n  (-> (listof string?) exact-integer?)\n  )",
    "erlang": "-spec eval_rpn(Tokens :: [unicode:unicode_binary()]) -> integer().\neval_rpn(Tokens) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec eval_rpn(tokens :: [String.t]) :: integer\n  def eval_rpn(tokens) do\n    \n  end\nend"
  }
}
{
  "title": "Transform Array to All Equal Elements",
  "problem_id": "3876",
  "frontend_id": "3576",
  "difficulty": "Medium",
  "problem_slug": "transform-array-to-all-equal-elements",
  "topics": [
    "Array",
    "Greedy"
  ],
  "description": "You are given an integer array nums of size n containing only 1 and -1, and an integer k.\nYou can perform the following operation at most k times:\nNote that you can choose the same index i more than once in different operations.\nReturn true if it is possible to make all elements of the array equal after at most k operations, and false otherwise.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,-1,1,-1,1], k = 3\nOutput: true\nExplanation:\nWe can make all elements in the array equal in 2 operations as follows:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [-1,-1,-1,1,1,1], k = 5\nOutput: false\nExplanation:\nIt is not possible to make all array elements equal in at most 5 operations.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n == nums.length <= 105",
    "nums[i] is either -1 or 1.",
    "1 <= k <= n"
  ],
  "follow_ups": [],
  "hints": [
    "Try converting all elements to 1 and separately to -1. For each case, calculate the minimum number of operations needed.",
    "Use a greedy approach: scan the array from left to right and apply an operation only when needed to fix mismatches."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool canMakeEqual(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean canMakeEqual(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def canMakeEqual(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def canMakeEqual(self, nums: List[int], k: int) -> bool:\n        ",
    "c": "bool canMakeEqual(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public bool CanMakeEqual(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */\nvar canMakeEqual = function(nums, k) {\n    \n};",
    "typescript": "function canMakeEqual(nums: number[], k: number): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Boolean\n     */\n    function canMakeEqual($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func canMakeEqual(_ nums: [Int], _ k: Int) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun canMakeEqual(nums: IntArray, k: Int): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool canMakeEqual(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func canMakeEqual(nums []int, k int) bool {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Boolean}\ndef can_make_equal(nums, k)\n    \nend",
    "scala": "object Solution {\n    def canMakeEqual(nums: Array[Int], k: Int): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn can_make_equal(nums: Vec<i32>, k: i32) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (can-make-equal nums k)\n  (-> (listof exact-integer?) exact-integer? boolean?)\n  )",
    "erlang": "-spec can_make_equal(Nums :: [integer()], K :: integer()) -> boolean().\ncan_make_equal(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec can_make_equal(nums :: [integer], k :: integer) :: boolean\n  def can_make_equal(nums, k) do\n    \n  end\nend"
  }
}
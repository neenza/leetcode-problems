{
  "title": "Preimage Size of Factorial Zeroes Function",
  "problem_id": "809",
  "frontend_id": "793",
  "difficulty": "Hard",
  "problem_slug": "preimage-size-of-factorial-zeroes-function",
  "topics": [
    "Math",
    "Binary Search"
  ],
  "description": "Let f(x) be the number of zeroes at the end of x!. Recall that x! = 1 * 2 * 3 * ... * x and by convention, 0! = 1.\nGiven an integer k, return the number of non-negative integers x have the property that f(x) = k.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: k = 0\nOutput: 5\nExplanation: 0!, 1!, 2!, 3!, and 4! end with k = 0 zeroes.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: k = 5\nOutput: 0\nExplanation: There is no x such that x! ends in k = 5 zeroes.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: k = 3\nOutput: 5",
      "images": []
    }
  ],
  "constraints": [
    "0 <= k <= 109"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int preimageSizeFZF(int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int preimageSizeFZF(int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def preimageSizeFZF(self, k: int) -> int:\n        ",
    "c": "int preimageSizeFZF(int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int PreimageSizeFZF(int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} k\n * @return {number}\n */\nvar preimageSizeFZF = function(k) {\n    \n};",
    "typescript": "function preimageSizeFZF(k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @return Integer\n     */\n    function preimageSizeFZF($k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func preimageSizeFZF(_ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun preimageSizeFZF(k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int preimageSizeFZF(int k) {\n    \n  }\n}",
    "golang": "func preimageSizeFZF(k int) int {\n    \n}",
    "ruby": "# @param {Integer} k\n# @return {Integer}\ndef preimage_size_fzf(k)\n    \nend",
    "scala": "object Solution {\n    def preimageSizeFZF(k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn preimage_size_fzf(k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (preimage-size-fzf k)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec preimage_size_fzf(K :: integer()) -> integer().\npreimage_size_fzf(K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec preimage_size_fzf(k :: integer) :: integer\n  def preimage_size_fzf(k) do\n    \n  end\nend"
  }
}
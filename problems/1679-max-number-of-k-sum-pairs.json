{
  "title": "Max Number of K-Sum Pairs",
  "problem_id": "1798",
  "frontend_id": "1679",
  "difficulty": "Medium",
  "problem_slug": "max-number-of-k-sum-pairs",
  "topics": [
    "Array",
    "Hash Table",
    "Two Pointers",
    "Sorting"
  ],
  "description": "You are given an integer array nums and an integer k.\nIn one operation, you can pick two numbers from the array whose sum equals k and remove them from the array.\nReturn the maximum number of operations you can perform on the array.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,3,4], k = 5\nOutput: 2\nExplanation: Starting with nums = [1,2,3,4]:\n- Remove numbers 1 and 4, then nums = [2,3]\n- Remove numbers 2 and 3, then nums = []\nThere are no more pairs that sum up to 5, hence a total of 2 operations.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [3,1,3,4,3], k = 6\nOutput: 1\nExplanation: Starting with nums = [3,1,3,4,3]:\n- Remove the first two 3's, then nums = [1,4,3]\nThere are no more pairs that sum up to 6, hence a total of 1 operation.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "1 <= nums[i] <= 109",
    "1 <= k <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "The abstract problem asks to count the number of disjoint pairs with a given sum k.",
    "For each possible value x, it can be paired up with k - x.",
    "The number of such pairs equals to  min(count(x), count(k-x)), unless that x = k / 2, where the number of such pairs will be floor(count(x) / 2)."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxOperations(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxOperations(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxOperations(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxOperations(self, nums: List[int], k: int) -> int:\n        ",
    "c": "\n\nint maxOperations(int* nums, int numsSize, int k){\n\n}",
    "csharp": "public class Solution {\n    public int MaxOperations(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maxOperations = function(nums, k) {\n    \n};",
    "typescript": "function maxOperations(nums: number[], k: number): number {\n\n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxOperations($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxOperations(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxOperations(nums: IntArray, k: Int): Int {\n        \n    }\n}",
    "golang": "func maxOperations(nums []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef max_operations(nums, k)\n    \nend",
    "scala": "object Solution {\n    def maxOperations(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_operations(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}"
  }
}
{
  "title": "Find the Number of Copy Arrays",
  "problem_id": "3785",
  "frontend_id": "3468",
  "difficulty": "Medium",
  "problem_slug": "find-the-number-of-copy-arrays",
  "topics": [
    "Array",
    "Math"
  ],
  "description": "You are given an array original of length n and a 2D array bounds of length n x 2, where bounds[i] = [ui, vi].\nYou need to find the number of possible arrays copy of length n such that:\nReturn the number of such arrays.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: original = [1,2,3,4], bounds = [[1,2],[2,3],[3,4],[4,5]]\nOutput: 2\nExplanation:\nThe possible arrays are:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: original = [1,2,3,4], bounds = [[1,10],[2,9],[3,8],[4,7]]\nOutput: 4\nExplanation:\nThe possible arrays are:",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: original = [1,2,1,2], bounds = [[1,1],[2,3],[3,3],[2,3]]\nOutput: 0\nExplanation:\nNo array is possible.",
      "images": []
    }
  ],
  "constraints": [
    "2 <= n == original.length <= 105",
    "1 <= original[i] <= 109",
    "bounds.length == n",
    "bounds[i].length == 2",
    "1 <= bounds[i][0] <= bounds[i][1] <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "<code>copy[0]</code> uniquely determines all other values.",
    "Possible values for <code>copy[0]</code> are in <code>[u[0], v[0]]</code>.",
    "From left to right, compute valid ranges for each index by intersecting bounds with the previous range.",
    "The answer is the size of the valid range for the last index."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int countArrays(vector<int>& original, vector<vector<int>>& bounds) {\n        \n    }\n};",
    "java": "class Solution {\n    public int countArrays(int[] original, int[][] bounds) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countArrays(self, original, bounds):\n        \"\"\"\n        :type original: List[int]\n        :type bounds: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countArrays(self, original: List[int], bounds: List[List[int]]) -> int:\n        ",
    "c": "int countArrays(int* original, int originalSize, int** bounds, int boundsSize, int* boundsColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int CountArrays(int[] original, int[][] bounds) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} original\n * @param {number[][]} bounds\n * @return {number}\n */\nvar countArrays = function(original, bounds) {\n    \n};",
    "typescript": "function countArrays(original: number[], bounds: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $original\n     * @param Integer[][] $bounds\n     * @return Integer\n     */\n    function countArrays($original, $bounds) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countArrays(_ original: [Int], _ bounds: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countArrays(original: IntArray, bounds: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int countArrays(List<int> original, List<List<int>> bounds) {\n    \n  }\n}",
    "golang": "func countArrays(original []int, bounds [][]int) int {\n    \n}",
    "ruby": "# @param {Integer[]} original\n# @param {Integer[][]} bounds\n# @return {Integer}\ndef count_arrays(original, bounds)\n    \nend",
    "scala": "object Solution {\n    def countArrays(original: Array[Int], bounds: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_arrays(original: Vec<i32>, bounds: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (count-arrays original bounds)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec count_arrays(Original :: [integer()], Bounds :: [[integer()]]) -> integer().\ncount_arrays(Original, Bounds) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_arrays(original :: [integer], bounds :: [[integer]]) :: integer\n  def count_arrays(original, bounds) do\n    \n  end\nend"
  }
}
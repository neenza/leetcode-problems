{
  "title": "Minimum Operations to Make Array Equal II",
  "problem_id": "2604",
  "frontend_id": "2541",
  "difficulty": "Medium",
  "problem_slug": "minimum-operations-to-make-array-equal-ii",
  "topics": [
    "Array",
    "Math",
    "Greedy"
  ],
  "description": "You are given two integer arrays nums1 and nums2 of equal length n and an integer k. You can perform the following operation on nums1:\nnums1 is said to be equal to nums2 if for all indices i such that 0 <= i < n, nums1[i] == nums2[i].\nReturn the minimum number of operations required to make nums1 equal to nums2. If it is impossible to make them equal, return -1.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums1 = [4,3,1,4], nums2 = [1,3,7,1], k = 3\nOutput: 2\nExplanation: In 2 operations, we can transform nums1 to nums2.\n1st operation: i = 2, j = 0. After applying the operation, nums1 = [1,3,4,4].\n2nd operation: i = 2, j = 3. After applying the operation, nums1 = [1,3,7,1].\nOne can prove that it is impossible to make arrays equal in fewer operations.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums1 = [3,8,5,2], nums2 = [2,4,1,6], k = 1\nOutput: -1\nExplanation: It can be proved that it is impossible to make the two arrays equal.",
      "images": []
    }
  ],
  "constraints": [
    "n == nums1.length == nums2.length",
    "2 <= n <= 105",
    "0 <= nums1[i], nums2[j] <= 109",
    "0 <= k <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "What are the cases for which we cannot make nums1 == nums2?",
    "For minimum moves, if nums1[i] < nums2[i], then we should never decrement nums1[i]. \r\nIf nums1[i] > nums2[i], then we should never increment nums1[i]."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long minOperations(vector<int>& nums1, vector<int>& nums2, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public long minOperations(int[] nums1, int[] nums2, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minOperations(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minOperations(self, nums1: List[int], nums2: List[int], k: int) -> int:\n        ",
    "c": "long long minOperations(int* nums1, int nums1Size, int* nums2, int nums2Size, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public long MinOperations(int[] nums1, int[] nums2, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number} k\n * @return {number}\n */\nvar minOperations = function(nums1, nums2, k) {\n    \n};",
    "typescript": "function minOperations(nums1: number[], nums2: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @param Integer $k\n     * @return Integer\n     */\n    function minOperations($nums1, $nums2, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minOperations(_ nums1: [Int], _ nums2: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minOperations(nums1: IntArray, nums2: IntArray, k: Int): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int minOperations(List<int> nums1, List<int> nums2, int k) {\n    \n  }\n}",
    "golang": "func minOperations(nums1 []int, nums2 []int, k int) int64 {\n    \n}",
    "ruby": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @param {Integer} k\n# @return {Integer}\ndef min_operations(nums1, nums2, k)\n    \nend",
    "scala": "object Solution {\n    def minOperations(nums1: Array[Int], nums2: Array[Int], k: Int): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_operations(nums1: Vec<i32>, nums2: Vec<i32>, k: i32) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (min-operations nums1 nums2 k)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec min_operations(Nums1 :: [integer()], Nums2 :: [integer()], K :: integer()) -> integer().\nmin_operations(Nums1, Nums2, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_operations(nums1 :: [integer], nums2 :: [integer], k :: integer) :: integer\n  def min_operations(nums1, nums2, k) do\n    \n  end\nend"
  }
}
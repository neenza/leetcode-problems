{
  "title": "Sequential Digits",
  "problem_id": "1212",
  "frontend_id": "1291",
  "difficulty": "Medium",
  "problem_slug": "sequential-digits",
  "topics": [
    "Enumeration"
  ],
  "description": "An integer has sequential digits if and only if each digit in the number is one more than the previous digit.\nReturn a sorted list of all the integers in the range [low, high] inclusive that have sequential digits.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: low = 100, high = 300\nOutput: [123,234]",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: low = 1000, high = 13000\nOutput: [1234,2345,3456,4567,5678,6789,12345]",
      "images": []
    }
  ],
  "constraints": [
    "10 <= low <= high <= 10^9"
  ],
  "follow_ups": [],
  "hints": [
    "Generate all numbers with sequential digits and check if they are in the given range.",
    "Fix the starting digit then do a recursion that tries to append all valid digits."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> sequentialDigits(int low, int high) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<Integer> sequentialDigits(int low, int high) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def sequentialDigits(self, low, high):\n        \"\"\"\n        :type low: int\n        :type high: int\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def sequentialDigits(self, low: int, high: int) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* sequentialDigits(int low, int high, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<int> SequentialDigits(int low, int high) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} low\n * @param {number} high\n * @return {number[]}\n */\nvar sequentialDigits = function(low, high) {\n    \n};",
    "typescript": "function sequentialDigits(low: number, high: number): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $low\n     * @param Integer $high\n     * @return Integer[]\n     */\n    function sequentialDigits($low, $high) {\n        \n    }\n}",
    "swift": "class Solution {\n    func sequentialDigits(_ low: Int, _ high: Int) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun sequentialDigits(low: Int, high: Int): List<Int> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> sequentialDigits(int low, int high) {\n    \n  }\n}",
    "golang": "func sequentialDigits(low int, high int) []int {\n    \n}",
    "ruby": "# @param {Integer} low\n# @param {Integer} high\n# @return {Integer[]}\ndef sequential_digits(low, high)\n    \nend",
    "scala": "object Solution {\n    def sequentialDigits(low: Int, high: Int): List[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn sequential_digits(low: i32, high: i32) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (sequential-digits low high)\n  (-> exact-integer? exact-integer? (listof exact-integer?))\n  )",
    "erlang": "-spec sequential_digits(Low :: integer(), High :: integer()) -> [integer()].\nsequential_digits(Low, High) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec sequential_digits(low :: integer, high :: integer) :: [integer]\n  def sequential_digits(low, high) do\n    \n  end\nend"
  }
}
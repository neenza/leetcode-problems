{
  "title": "Count Integers With Even Digit Sum",
  "problem_id": "2298",
  "frontend_id": "2180",
  "difficulty": "Easy",
  "problem_slug": "count-integers-with-even-digit-sum",
  "topics": [
    "Math",
    "Simulation"
  ],
  "description": "Given a positive integer num, return the number of positive integers less than or equal to num whose digit sums are even.\nThe digit sum of a positive integer is the sum of all its digits.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: num = 4\nOutput: 2\nExplanation:\nThe only integers less than or equal to 4 whose digit sums are even are 2 and 4.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: num = 30\nOutput: 14\nExplanation:\nThe 14 integers less than or equal to 30 whose digit sums are even are\n2, 4, 6, 8, 11, 13, 15, 17, 19, 20, 22, 24, 26, and 28.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= num <= 1000"
  ],
  "follow_ups": [],
  "hints": [
    "Iterate through all integers from 1 to num.",
    "For any integer, extract the individual digits to compute their sum and check if it is even."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int countEven(int num) {\n        \n    }\n};",
    "java": "class Solution {\n    public int countEven(int num) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countEven(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countEven(self, num: int) -> int:\n        ",
    "c": "int countEven(int num) {\n    \n}",
    "csharp": "public class Solution {\n    public int CountEven(int num) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} num\n * @return {number}\n */\nvar countEven = function(num) {\n    \n};",
    "typescript": "function countEven(num: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer\n     */\n    function countEven($num) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countEven(_ num: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countEven(num: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int countEven(int num) {\n    \n  }\n}",
    "golang": "func countEven(num int) int {\n    \n}",
    "ruby": "# @param {Integer} num\n# @return {Integer}\ndef count_even(num)\n    \nend",
    "scala": "object Solution {\n    def countEven(num: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_even(num: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (count-even num)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec count_even(Num :: integer()) -> integer().\ncount_even(Num) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_even(num :: integer) :: integer\n  def count_even(num) do\n    \n  end\nend"
  }
}
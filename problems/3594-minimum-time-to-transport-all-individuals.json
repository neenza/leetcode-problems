{
  "title": "Minimum Time to Transport All Individuals",
  "problem_id": "3896",
  "frontend_id": "3594",
  "difficulty": "Hard",
  "problem_slug": "minimum-time-to-transport-all-individuals",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Bit Manipulation",
    "Graph",
    "Heap (Priority Queue)",
    "Shortest Path",
    "Bitmask"
  ],
  "description": "You are given n individuals at a base camp who need to cross a river to reach a destination using a single boat. The boat can carry at most k people at a time. The trip is affected by environmental conditions that vary cyclically over m stages.\nEach stage j has a speed multiplier mul[j]:\nEach individual i has a rowing strength represented by time[i], the time (in minutes) it takes them to cross alone in neutral conditions.\nRules:\nReturn the minimum total time required to transport all individuals. If it is not possible to transport all individuals to the destination, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 1, k = 1, m = 2, time = [5], mul = [1.0,1.3]\nOutput: 5.00000\nExplanation:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 3, k = 2, m = 3, time = [2,5,8], mul = [1.0,1.5,0.75]\nOutput: 14.50000\nExplanation:\nThe optimal strategy is:",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 2, k = 1, m = 2, time = [10,10], mul = [2.0,2.0]\nOutput: -1.00000\nExplanation:",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n == time.length <= 12",
    "1 <= k <= 5",
    "1 <= m <= 5",
    "1 <= time[i] <= 100",
    "m == mul.length",
    "0.5 <= mul[i] <= 2.0"
  ],
  "follow_ups": [],
  "hints": [
    "Use dynamic programming.",
    "The states are <code>mask</code> of people left and <code>current_stage</code>.",
    "The states form a cycle.",
    "Consider the transitions as edges and the entire DP problem as a graph; all edge weights are positive.",
    "We can use Dijkstra's algorithm."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    double minTime(int n, int k, int m, vector<int>& time, vector<double>& mul) {\n        \n    }\n};",
    "java": "class Solution {\n    public double minTime(int n, int k, int m, int[] time, double[] mul) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minTime(self, n, k, m, time, mul):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :type m: int\n        :type time: List[int]\n        :type mul: List[float]\n        :rtype: float\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minTime(self, n: int, k: int, m: int, time: List[int], mul: List[float]) -> float:\n        ",
    "c": "double minTime(int n, int k, int m, int* time, int timeSize, double* mul, int mulSize) {\n    \n}",
    "csharp": "public class Solution {\n    public double MinTime(int n, int k, int m, int[] time, double[] mul) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number} k\n * @param {number} m\n * @param {number[]} time\n * @param {number[]} mul\n * @return {number}\n */\nvar minTime = function(n, k, m, time, mul) {\n    \n};",
    "typescript": "function minTime(n: number, k: number, m: number, time: number[], mul: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @param Integer $m\n     * @param Integer[] $time\n     * @param Float[] $mul\n     * @return Float\n     */\n    function minTime($n, $k, $m, $time, $mul) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minTime(_ n: Int, _ k: Int, _ m: Int, _ time: [Int], _ mul: [Double]) -> Double {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minTime(n: Int, k: Int, m: Int, time: IntArray, mul: DoubleArray): Double {\n        \n    }\n}",
    "dart": "class Solution {\n  double minTime(int n, int k, int m, List<int> time, List<double> mul) {\n    \n  }\n}",
    "golang": "func minTime(n int, k int, m int, time []int, mul []float64) float64 {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer} k\n# @param {Integer} m\n# @param {Integer[]} time\n# @param {Float[]} mul\n# @return {Float}\ndef min_time(n, k, m, time, mul)\n    \nend",
    "scala": "object Solution {\n    def minTime(n: Int, k: Int, m: Int, time: Array[Int], mul: Array[Double]): Double = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_time(n: i32, k: i32, m: i32, time: Vec<i32>, mul: Vec<f64>) -> f64 {\n        \n    }\n}",
    "racket": "(define/contract (min-time n k m time mul)\n  (-> exact-integer? exact-integer? exact-integer? (listof exact-integer?) (listof flonum?) flonum?)\n  )",
    "erlang": "-spec min_time(N :: integer(), K :: integer(), M :: integer(), Time :: [integer()], Mul :: [float()]) -> float().\nmin_time(N, K, M, Time, Mul) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_time(n :: integer, k :: integer, m :: integer, time :: [integer], mul :: [float]) :: float\n  def min_time(n, k, m, time, mul) do\n    \n  end\nend"
  }
}
{
  "title": "Maximal Square",
  "problem_id": "221",
  "frontend_id": "221",
  "difficulty": "Medium",
  "problem_slug": "maximal-square",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Matrix"
  ],
  "description": "Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 4",
      "images": [
        "https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]\nOutput: 1",
      "images": [
        "https://assets.leetcode.com/uploads/2020/11/26/max2grid.jpg"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: matrix = [[\"0\"]]\nOutput: 0",
      "images": [
        "https://assets.leetcode.com/uploads/2020/11/26/max2grid.jpg"
      ]
    }
  ],
  "constraints": [
    "m == matrix.length",
    "n == matrix[i].length",
    "1 <= m, n <= 300",
    "matrix[i][j] is '0' or '1'."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maximalSquare(vector<vector<char>>& matrix) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maximalSquare(char[][] matrix) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maximalSquare(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -> int:\n        ",
    "c": "int maximalSquare(char** matrix, int matrixSize, int* matrixColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaximalSquare(char[][] matrix) {\n        \n    }\n}",
    "javascript": "/**\n * @param {character[][]} matrix\n * @return {number}\n */\nvar maximalSquare = function(matrix) {\n    \n};",
    "typescript": "function maximalSquare(matrix: string[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String[][] $matrix\n     * @return Integer\n     */\n    function maximalSquare($matrix) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maximalSquare(_ matrix: [[Character]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maximalSquare(matrix: Array<CharArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maximalSquare(List<List<String>> matrix) {\n    \n  }\n}",
    "golang": "func maximalSquare(matrix [][]byte) int {\n    \n}",
    "ruby": "# @param {Character[][]} matrix\n# @return {Integer}\ndef maximal_square(matrix)\n    \nend",
    "scala": "object Solution {\n    def maximalSquare(matrix: Array[Array[Char]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn maximal_square(matrix: Vec<Vec<char>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (maximal-square matrix)\n  (-> (listof (listof char?)) exact-integer?)\n  )",
    "erlang": "-spec maximal_square(Matrix :: [[char()]]) -> integer().\nmaximal_square(Matrix) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec maximal_square(matrix :: [[char]]) :: integer\n  def maximal_square(matrix) do\n    \n  end\nend"
  }
}
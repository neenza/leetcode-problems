{
  "title": "Sum of Squares of Special Elements ",
  "problem_id": "2844",
  "frontend_id": "2778",
  "difficulty": "Easy",
  "problem_slug": "sum-of-squares-of-special-elements",
  "topics": [
    "Array",
    "Enumeration"
  ],
  "description": "You are given a 1-indexed integer array nums of length n.\nAn element nums[i] of nums is called special if i divides n, i.e. n % i == 0.\nReturn the sum of the squares of all special elements of nums.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,3,4]\nOutput: 21\nExplanation: There are exactly 3 special elements in nums: nums[1] since 1 divides 4, nums[2] since 2 divides 4, and nums[4] since 4 divides 4. \nHence, the sum of the squares of all special elements of nums is nums[1] * nums[1] + nums[2] * nums[2] + nums[4] * nums[4] = 1 * 1 + 2 * 2 + 4 * 4 = 21.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [2,7,1,19,18,3]\nOutput: 63\nExplanation: There are exactly 4 special elements in nums: nums[1] since 1 divides 6, nums[2] since 2 divides 6, nums[3] since 3 divides 6, and nums[6] since 6 divides 6. \nHence, the sum of the squares of all special elements of nums is nums[1] * nums[1] + nums[2] * nums[2] + nums[3] * nums[3] + nums[6] * nums[6] = 2 * 2 + 7 * 7 + 1 * 1 + 3 * 3 = 63.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length == n <= 50",
    "1 <= nums[i] <= 50"
  ],
  "follow_ups": [],
  "hints": [
    "Iterate over all the elements of the array. For each index i, check if it is special using the modulo operator.",
    "if n%i == 0, index i is special and you should add nums[i] to the answer."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int sumOfSquares(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int sumOfSquares(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def sumOfSquares(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def sumOfSquares(self, nums: List[int]) -> int:\n        ",
    "c": "int sumOfSquares(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int SumOfSquares(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar sumOfSquares = function(nums) {\n    \n};",
    "typescript": "function sumOfSquares(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function sumOfSquares($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func sumOfSquares(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun sumOfSquares(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int sumOfSquares(List<int> nums) {\n    \n  }\n}",
    "golang": "func sumOfSquares(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef sum_of_squares(nums)\n    \nend",
    "scala": "object Solution {\n    def sumOfSquares(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn sum_of_squares(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (sum-of-squares nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec sum_of_squares(Nums :: [integer()]) -> integer().\nsum_of_squares(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec sum_of_squares(nums :: [integer]) :: integer\n  def sum_of_squares(nums) do\n    \n  end\nend"
  }
}
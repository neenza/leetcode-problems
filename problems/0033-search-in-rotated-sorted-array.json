{
  "title": "Search in Rotated Sorted Array",
  "problem_id": "33",
  "frontend_id": "33",
  "difficulty": "Medium",
  "problem_slug": "search-in-rotated-sorted-array",
  "topics": [
    "Array",
    "Binary Search"
  ],
  "description": "There is an integer array nums sorted in ascending order (with distinct values).\nPrior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\nGiven the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\nYou must write an algorithm with O(log n) runtime complexity.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1], target = 0\nOutput: -1",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 5000",
    "-104 <= nums[i] <= 104",
    "All values of nums are unique.",
    "nums is an ascending array that is possibly rotated.",
    "-104 <= target <= 104"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        \n    }\n};",
    "java": "class Solution {\n    public int search(int[] nums, int target) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        ",
    "c": "int search(int* nums, int numsSize, int target) {\n    \n}",
    "csharp": "public class Solution {\n    public int Search(int[] nums, int target) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar search = function(nums, target) {\n    \n};",
    "typescript": "function search(nums: number[], target: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function search($nums, $target) {\n        \n    }\n}",
    "swift": "class Solution {\n    func search(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun search(nums: IntArray, target: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int search(List<int> nums, int target) {\n    \n  }\n}",
    "golang": "func search(nums []int, target int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef search(nums, target)\n    \nend",
    "scala": "object Solution {\n    def search(nums: Array[Int], target: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn search(nums: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (search nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec search(Nums :: [integer()], Target :: integer()) -> integer().\nsearch(Nums, Target) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec search(nums :: [integer], target :: integer) :: integer\n  def search(nums, target) do\n    \n  end\nend"
  }
}
{
  "title": "Sum of K Subarrays With Length at Least M",
  "problem_id": "3722",
  "frontend_id": "3473",
  "difficulty": "Medium",
  "problem_slug": "sum-of-k-subarrays-with-length-at-least-m",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Prefix Sum"
  ],
  "description": "You are given an integer array nums and two integers, k and m.\nReturn the maximum sum of k non-overlapping subarrays of nums, where each subarray has a length of at least m.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,-1,3,3,4], k = 2, m = 2\nOutput: 13\nExplanation:\nThe optimal choice is:\nThe total sum is 10 + 3 = 13 .",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [-10,3,-1,-2], k = 4, m = 1\nOutput: -10\nExplanation:\nThe optimal choice is choosing each element as a subarray. The output is (-10) + 3 + (-1) + (-2) = -10 .",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 2000",
    "-104 <= nums[i] <= 104",
    "1 <= k <= floor(nums.length / m)",
    "1 <= m <= 3"
  ],
  "follow_ups": [],
  "hints": [
    "Dynamic Programming",
    "Prefix Sum",
    "Let <code>dp[i][j]</code> be the maximum sum with <code>i</code> subarrays for the first <code>j</code> elements"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxSum(vector<int>& nums, int k, int m) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxSum(int[] nums, int k, int m) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxSum(self, nums, k, m):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxSum(self, nums: List[int], k: int, m: int) -> int:\n        ",
    "c": "int maxSum(int* nums, int numsSize, int k, int m) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxSum(int[] nums, int k, int m) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @param {number} m\n * @return {number}\n */\nvar maxSum = function(nums, k, m) {\n    \n};",
    "typescript": "function maxSum(nums: number[], k: number, m: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @param Integer $m\n     * @return Integer\n     */\n    function maxSum($nums, $k, $m) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxSum(_ nums: [Int], _ k: Int, _ m: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxSum(nums: IntArray, k: Int, m: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxSum(List<int> nums, int k, int m) {\n    \n  }\n}",
    "golang": "func maxSum(nums []int, k int, m int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @param {Integer} m\n# @return {Integer}\ndef max_sum(nums, k, m)\n    \nend",
    "scala": "object Solution {\n    def maxSum(nums: Array[Int], k: Int, m: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_sum(nums: Vec<i32>, k: i32, m: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-sum nums k m)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec max_sum(Nums :: [integer()], K :: integer(), M :: integer()) -> integer().\nmax_sum(Nums, K, M) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_sum(nums :: [integer], k :: integer, m :: integer) :: integer\n  def max_sum(nums, k, m) do\n    \n  end\nend"
  }
}
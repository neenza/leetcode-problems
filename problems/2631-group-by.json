{
  "title": "Group By",
  "problem_id": "2742",
  "frontend_id": "2631",
  "difficulty": "Medium",
  "problem_slug": "group-by",
  "topics": [],
  "description": "Write code that enhances all arrays such that you can call the array.groupBy(fn) method on any array and it will return a grouped version of the array.\nA grouped array is an object where each key is the output of fn(arr[i]) and each value is an array containing all items in the original array which generate that key.\nThe provided callback fn will accept an item in the array and return a string key.\nThe order of each value list should be the order the items appear in the array. Any order of keys is acceptable.\nPlease solve it without lodash's _.groupBy function.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: \narray = [\n  {\"id\":\"1\"},\n  {\"id\":\"1\"},\n  {\"id\":\"2\"}\n], \nfn = function (item) { \n  return item.id; \n}\nOutput: \n{ \n  \"1\": [{\"id\": \"1\"}, {\"id\": \"1\"}],   \n  \"2\": [{\"id\": \"2\"}] \n}\nExplanation:\nOutput is from array.groupBy(fn).\nThe selector function gets the \"id\" out of each item in the array.\nThere are two objects with an \"id\" of 1. Both of those objects are put in the first array.\nThere is one object with an \"id\" of 2. That object is put in the second array.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: \narray = [\n  [1, 2, 3],\n  [1, 3, 5],\n  [1, 5, 9]\n]\nfn = function (list) { \n  return String(list[0]); \n}\nOutput: \n{ \n  \"1\": [[1, 2, 3], [1, 3, 5], [1, 5, 9]] \n}\nExplanation:\nThe array can be of any type. In this case, the selector function defines the key as being the first element in the array. \nAll the arrays have 1 as their first element so they are grouped together.\n{\n  \"1\": [[1, 2, 3], [1, 3, 5], [1, 5, 9]]\n}",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: \narray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfn = function (n) { \n  return String(n > 5);\n}\nOutput:\n{\n  \"true\": [6, 7, 8, 9, 10],\n  \"false\": [1, 2, 3, 4, 5]\n}\nExplanation:\nThe selector function splits the array by whether each number is greater than 5.",
      "images": []
    }
  ],
  "constraints": [
    "0 <= array.length <= 105",
    "fn returns a string"
  ],
  "follow_ups": [],
  "hints": [
    "First declare an object that will eventually be returned.",
    "Iterate of each element in the array. You can access the array with the \"this\" keyword.",
    "The key is fn(arr[i]). If the key already exists on the object, set the value to be an empty array. Then push the value onto the array at the key."
  ],
  "code_snippets": {
    "javascript": "/**\n * @param {Function} fn\n * @return {Object}\n */\nArray.prototype.groupBy = function(fn) {\n    \n};\n\n/**\n * [1,2,3].groupBy(String) // {\"1\":[1],\"2\":[2],\"3\":[3]}\n */",
    "typescript": "interface Array<T> {\n    groupBy(fn: (item: T) => string): Record<string, T[]>\n}\n\n\nArray.prototype.groupBy = function(fn) {\n    \n}\n\n/**\n * [1,2,3].groupBy(String) // {\"1\":[1],\"2\":[2],\"3\":[3]}\n */"
  }
}
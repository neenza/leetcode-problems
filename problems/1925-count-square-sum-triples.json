{
  "title": "Count Square Sum Triples",
  "problem_id": "2037",
  "frontend_id": "1925",
  "difficulty": "Easy",
  "problem_slug": "count-square-sum-triples",
  "topics": [
    "Math",
    "Enumeration"
  ],
  "description": "A square triple (a,b,c) is a triple where a, b, and c are integers and a2 + b2 = c2.\nGiven an integer n, return the number of square triples such that 1 <= a, b, c <= n.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 5\nOutput: 2\nExplanation: The square triples are (3,4,5) and (4,3,5).",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 10\nOutput: 4\nExplanation: The square triples are (3,4,5), (4,3,5), (6,8,10), and (8,6,10).",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 250"
  ],
  "follow_ups": [],
  "hints": [
    "Iterate over all possible pairs (a,b) and check that the square root of a * a + b * b is an integers less than or equal n",
    "You can check that the square root of an integer is an integer using binary seach or a builtin function like sqrt"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int countTriples(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int countTriples(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countTriples(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countTriples(self, n: int) -> int:\n        ",
    "c": "int countTriples(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int CountTriples(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar countTriples = function(n) {\n    \n};",
    "typescript": "function countTriples(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function countTriples($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countTriples(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countTriples(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int countTriples(int n) {\n    \n  }\n}",
    "golang": "func countTriples(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef count_triples(n)\n    \nend",
    "scala": "object Solution {\n    def countTriples(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_triples(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (count-triples n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec count_triples(N :: integer()) -> integer().\ncount_triples(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_triples(n :: integer) :: integer\n  def count_triples(n) do\n    \n  end\nend"
  }
}
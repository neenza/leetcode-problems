{
  "title": "Find the Duplicate Number",
  "problem_id": "287",
  "frontend_id": "287",
  "difficulty": "Medium",
  "problem_slug": "find-the-duplicate-number",
  "topics": [
    "Array",
    "Two Pointers",
    "Binary Search",
    "Bit Manipulation"
  ],
  "description": "Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\nThere is only one repeated number in nums, return this repeated number.\nYou must solve the problem without modifying the array nums and using only constant extra space.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,3,4,2,2]\nOutput: 2",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [3,1,3,4,2]\nOutput: 3",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [3,3,3,3,3]\nOutput: 3",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 105",
    "nums.length == n + 1",
    "1 <= nums[i] <= n",
    "All the integers in nums appear only once except for precisely one integer which appears two or more times."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int findDuplicate(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int findDuplicate(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findDuplicate(self, nums: List[int]) -> int:\n        ",
    "c": "int findDuplicate(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int FindDuplicate(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDuplicate = function(nums) {\n    \n};",
    "typescript": "function findDuplicate(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findDuplicate($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findDuplicate(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findDuplicate(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int findDuplicate(List<int> nums) {\n    \n  }\n}",
    "golang": "func findDuplicate(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef find_duplicate(nums)\n    \nend",
    "scala": "object Solution {\n    def findDuplicate(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_duplicate(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (find-duplicate nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec find_duplicate(Nums :: [integer()]) -> integer().\nfind_duplicate(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_duplicate(nums :: [integer]) :: integer\n  def find_duplicate(nums) do\n    \n  end\nend"
  }
}
{
  "title": "Permutation Sequence",
  "problem_id": "60",
  "frontend_id": "60",
  "difficulty": "Hard",
  "problem_slug": "permutation-sequence",
  "topics": [
    "Math",
    "Recursion"
  ],
  "description": "The set [1, 2, 3, ...,Â n] contains a total of n! unique permutations.\nBy listing and labeling all of the permutations in order, we get the following sequence for n = 3:\nGiven n and k, return the kth permutation sequence.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 3, k = 3\nOutput: \"213\"",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 4, k = 9\nOutput: \"2314\"",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 3, k = 1\nOutput: \"123\"",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 9",
    "1 <= k <= n!"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string getPermutation(int n, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public String getPermutation(int n, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def getPermutation(self, n: int, k: int) -> str:\n        ",
    "c": "char* getPermutation(int n, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public string GetPermutation(int n, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number} k\n * @return {string}\n */\nvar getPermutation = function(n, k) {\n    \n};",
    "typescript": "function getPermutation(n: number, k: number): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return String\n     */\n    function getPermutation($n, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func getPermutation(_ n: Int, _ k: Int) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun getPermutation(n: Int, k: Int): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String getPermutation(int n, int k) {\n    \n  }\n}",
    "golang": "func getPermutation(n int, k int) string {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer} k\n# @return {String}\ndef get_permutation(n, k)\n    \nend",
    "scala": "object Solution {\n    def getPermutation(n: Int, k: Int): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn get_permutation(n: i32, k: i32) -> String {\n        \n    }\n}",
    "racket": "(define/contract (get-permutation n k)\n  (-> exact-integer? exact-integer? string?)\n  )",
    "erlang": "-spec get_permutation(N :: integer(), K :: integer()) -> unicode:unicode_binary().\nget_permutation(N, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec get_permutation(n :: integer, k :: integer) :: String.t\n  def get_permutation(n, k) do\n    \n  end\nend"
  }
}
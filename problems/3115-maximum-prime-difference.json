{
  "title": "Maximum Prime Difference",
  "problem_id": "3373",
  "frontend_id": "3115",
  "difficulty": "Medium",
  "problem_slug": "maximum-prime-difference",
  "topics": [
    "Array",
    "Math",
    "Number Theory"
  ],
  "description": "You are given an integer array nums.\nReturn an integer that is the maximum distance between the indices of two (not necessarily different) prime numbers in nums.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [4,2,9,5,3]\nOutput: 3\nExplanation: nums[1] , nums[3] , and nums[4] are prime. So the answer is |4 - 1| = 3 .",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [4,8,2,8]\nOutput: 0\nExplanation: nums[2] is prime. Because there is just one prime number, the answer is |2 - 2| = 0 .",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 3 * 105",
    "1 <= nums[i] <= 100",
    "The input is generated such that the number of prime numbers in the nums is at least one."
  ],
  "follow_ups": [],
  "hints": [
    "Find all prime numbers in the <code>nums</code>.",
    "Find the first and the last prime number in the <code>nums</code>."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maximumPrimeDifference(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maximumPrimeDifference(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maximumPrimeDifference(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maximumPrimeDifference(self, nums: List[int]) -> int:\n        ",
    "c": "int maximumPrimeDifference(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaximumPrimeDifference(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumPrimeDifference = function(nums) {\n    \n};",
    "typescript": "function maximumPrimeDifference(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximumPrimeDifference($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maximumPrimeDifference(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maximumPrimeDifference(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maximumPrimeDifference(List<int> nums) {\n    \n  }\n}",
    "golang": "func maximumPrimeDifference(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef maximum_prime_difference(nums)\n    \nend",
    "scala": "object Solution {\n    def maximumPrimeDifference(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn maximum_prime_difference(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (maximum-prime-difference nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec maximum_prime_difference(Nums :: [integer()]) -> integer().\nmaximum_prime_difference(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec maximum_prime_difference(nums :: [integer]) :: integer\n  def maximum_prime_difference(nums) do\n    \n  end\nend"
  }
}
{
  "title": "Increasing Triplet Subsequence",
  "problem_id": "334",
  "frontend_id": "334",
  "difficulty": "Medium",
  "problem_slug": "increasing-triplet-subsequence",
  "topics": [
    "Array",
    "Greedy"
  ],
  "description": "Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,3,4,5]\nOutput: true\nExplanation: Any triplet where i < j < k is valid.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [5,4,3,2,1]\nOutput: false\nExplanation: No triplet exists.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [2,1,5,0,4,6]\nOutput: true\nExplanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 5 * 105",
    "-231 <= nums[i] <= 231 - 1"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool increasingTriplet(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean increasingTriplet(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def increasingTriplet(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def increasingTriplet(self, nums: List[int]) -> bool:\n        ",
    "c": "bool increasingTriplet(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public bool IncreasingTriplet(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar increasingTriplet = function(nums) {\n    \n};",
    "typescript": "function increasingTriplet(nums: number[]): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function increasingTriplet($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func increasingTriplet(_ nums: [Int]) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun increasingTriplet(nums: IntArray): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool increasingTriplet(List<int> nums) {\n    \n  }\n}",
    "golang": "func increasingTriplet(nums []int) bool {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Boolean}\ndef increasing_triplet(nums)\n    \nend",
    "scala": "object Solution {\n    def increasingTriplet(nums: Array[Int]): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn increasing_triplet(nums: Vec<i32>) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (increasing-triplet nums)\n  (-> (listof exact-integer?) boolean?)\n  )",
    "erlang": "-spec increasing_triplet(Nums :: [integer()]) -> boolean().\nincreasing_triplet(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec increasing_triplet(nums :: [integer]) :: boolean\n  def increasing_triplet(nums) do\n    \n  end\nend"
  }
}
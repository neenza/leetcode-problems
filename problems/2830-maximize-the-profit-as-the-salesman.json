{
  "title": "Maximize the Profit as the Salesman",
  "problem_id": "2979",
  "frontend_id": "2830",
  "difficulty": "Medium",
  "problem_slug": "maximize-the-profit-as-the-salesman",
  "topics": [
    "Array",
    "Hash Table",
    "Binary Search",
    "Dynamic Programming",
    "Sorting"
  ],
  "description": "You are given an integer n representing the number of houses on a number line, numbered from 0 to n - 1.\nAdditionally, you are given a 2D integer array offers where offers[i] = [starti, endi, goldi], indicating that ith buyer wants to buy all the houses from starti to endi for goldi amount of gold.\nAs a salesman, your goal is to maximize your earnings by strategically selecting and selling houses to buyers.\nReturn the maximum amount of gold you can earn.\nNote that different buyers can't buy the same house, and some houses may remain unsold.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 5, offers = [[0,0,1],[0,2,2],[1,3,2]]\nOutput: 3\nExplanation: There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.\nWe sell houses in the range [0,0] to 1st buyer for 1 gold and houses in the range [1,3] to 3rd buyer for 2 golds.\nIt can be proven that 3 is the maximum amount of gold we can achieve.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 5, offers = [[0,0,1],[0,2,10],[1,3,2]]\nOutput: 10\nExplanation: There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.\nWe sell houses in the range [0,2] to 2nd buyer for 10 golds.\nIt can be proven that 10 is the maximum amount of gold we can achieve.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 105",
    "1 <= offers.length <= 105",
    "offers[i].length == 3",
    "0 <= starti <= endi <= n - 1",
    "1 <= goldi <= 103"
  ],
  "follow_ups": [],
  "hints": [
    "<div class=\"_1l1MA\">The intended solution uses a dynamic programming approach to solve the problem.</div>",
    "<div class=\"_1l1MA\">Sort the array offers by <code>start<sub>i</sub></code>.</div>",
    "<div class=\"_1l1MA\">Let <code>dp[i]</code> = { the maximum amount of gold if the sold houses are in the range <code>[0 â€¦ i]</code> }.</div>"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maximizeTheProfit(int n, vector<vector<int>>& offers) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maximizeTheProfit(int n, List<List<Integer>> offers) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maximizeTheProfit(self, n, offers):\n        \"\"\"\n        :type n: int\n        :type offers: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maximizeTheProfit(self, n: int, offers: List[List[int]]) -> int:\n        ",
    "c": "int maximizeTheProfit(int n, int** offers, int offersSize, int* offersColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaximizeTheProfit(int n, IList<IList<int>> offers) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number[][]} offers\n * @return {number}\n */\nvar maximizeTheProfit = function(n, offers) {\n    \n};",
    "typescript": "function maximizeTheProfit(n: number, offers: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $offers\n     * @return Integer\n     */\n    function maximizeTheProfit($n, $offers) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maximizeTheProfit(_ n: Int, _ offers: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maximizeTheProfit(n: Int, offers: List<List<Int>>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maximizeTheProfit(int n, List<List<int>> offers) {\n    \n  }\n}",
    "golang": "func maximizeTheProfit(n int, offers [][]int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer[][]} offers\n# @return {Integer}\ndef maximize_the_profit(n, offers)\n    \nend",
    "scala": "object Solution {\n    def maximizeTheProfit(n: Int, offers: List[List[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn maximize_the_profit(n: i32, offers: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (maximize-the-profit n offers)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec maximize_the_profit(N :: integer(), Offers :: [[integer()]]) -> integer().\nmaximize_the_profit(N, Offers) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec maximize_the_profit(n :: integer, offers :: [[integer]]) :: integer\n  def maximize_the_profit(n, offers) do\n    \n  end\nend"
  }
}
{
  "title": "Counter",
  "problem_id": "2732",
  "frontend_id": "2620",
  "difficulty": "Easy",
  "problem_slug": "counter",
  "topics": [],
  "description": "Given an integer n, return a counter function. This counter function initially returns n and then returns 1 more than the previous value every subsequent time it is called (n, n + 1, n + 2, etc).\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: \nn = 10 \n[\"call\",\"call\",\"call\"]\nOutput: [10,11,12]\nExplanation: \ncounter() = 10 // The first time counter() is called, it returns n.\ncounter() = 11 // Returns 1 more than the previous time.\ncounter() = 12 // Returns 1 more than the previous time.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: \nn = -2\n[\"call\",\"call\",\"call\",\"call\",\"call\"]\nOutput: [-2,-1,0,1,2]\nExplanation: counter() initially returns -2. Then increases after each sebsequent call.",
      "images": []
    }
  ],
  "constraints": [
    "-1000 <= n <= 1000",
    "0 <= calls.length <= 1000",
    "calls[i] === \"call\""
  ],
  "follow_ups": [],
  "hints": [
    "In JavaScript, a function can return a closure. A closure is defined as a function and the variables declared around it (it's lexical environment).",
    "A count variable can be initialized in the outer function and mutated in the inner function."
  ],
  "code_snippets": {
    "javascript": "/**\n * @param {number} n\n * @return {Function} counter\n */\nvar createCounter = function(n) {\n    \n    return function() {\n        \n    };\n};\n\n/** \n * const counter = createCounter(10)\n * counter() // 10\n * counter() // 11\n * counter() // 12\n */",
    "typescript": "function createCounter(n: number): () => number {\n    \n    return function() {\n        \n    }\n}\n\n\n/** \n * const counter = createCounter(10)\n * counter() // 10\n * counter() // 11\n * counter() // 12\n */"
  },
  "solution": "[TOC]\n\n## Solution\n---\n\n### Overview\n\nThis question is intended as an introduction to ***closures***. In JavaScript, functions have a reference to all variables declared in the same scope as well as any outer scopes. These scopes are known as the function's ***lexical environment***. The combination of the function and it's environment is known as a ***closure***.\n\n#### Closure Example\n\nIn Javascript, you can declare functions within other functions and return them. The inner function has access to any variables declared above it.\n\n```js\nfunction createAdder(a) {\n  return function add(b) {\n    const sum = a + b;\n    return sum;\n  }\n}\nconst addTo2 = createAdder(2);\naddTo2(5); // 7\n```\nThe inner function `add` has access to `a`. This allows the outer function to serve as a factory of new functions, each with different behavior.\n\n#### Closures Versus Classes\n\nYou may notice that in the above example `createAdder` is very similar to a class constructor.\n\n```js\nclass Adder {\n  constructor(a) {\n     this.a = a;\n  }\n\n  add(b) {\n    const sum = this.a + b;\n    return sum;\n  }\n}\nconst addTo2 = new Adder(2);\naddTo2.add(5); // 7\n```\n\nBesides differences in syntax, both code examples essentially serve the same purpose. They both allow you to pass in some state in a \"constructor\" and have \"methods\" that access this state.\n\nOne key difference is that closures allow for true ***encapsulation***. In the class example, there is nothing stopping you from writing `addTo2.a = 3;` and breaking it's expected behavior. However, in the closure example, it is theoretically impossible to access `a`. Note that as of 2022, true encapsulation is achievable in classes with [# prefix syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields).\n\nAnother difference is how the functions are stored in memory. If you create many instances of a class, each instance stores a single reference to the ***prototype object*** where all the methods are stored. Whereas for closures, all the \"methods\" are generated and a \"copy\" of each is stored in memory each time the outer function is called. For this reason, classes can be more efficient, particularly in the case where there are many methods.\n\nUnlike in languages like Java, you will tend to see code written with functions rather than with classes. But since JavaScript is a multi-paradigm language, it will depend on the particular project you are working on.\n\n### Approach 1: Increment Then Return\n\nWe declare a variable `currentCount` and set it equal to `n - 1`. Then inside the counter function, increment `currentCount` and return the value. Note that since `currentCount` is modified, it should be declared with `let` rather than `const`. \n\n**Implementation**---\n### Approach 2: Postfix Increment Syntax\n\nJavaScript provides convenient syntax that returns a value and ***then*** increments it. This allows us to avoid having to initially set a variable to `n - 1`.\n\n**Implementation**### Approach 3: Prefix Decrement and Increment Syntax\n\nJavaScript also has syntax that allows you to increment a value and ***then*** return it. Because the increment happens before the value is returned, we must first decrement the value initially similar to Approach 1.\n\n**Implementation**### Approach 4: Postfix Increment Syntax With Arrow Function\n\nWe can reduce the amount of code in Approach 2 by using an arrow function with an implicit return.\n\n**Implementation**"
}
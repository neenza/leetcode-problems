{
  "title": "Operations on Tree",
  "problem_id": "2104",
  "frontend_id": "1993",
  "difficulty": "Medium",
  "problem_slug": "operations-on-tree",
  "topics": [
    "Array",
    "Hash Table",
    "Tree",
    "Depth-First Search",
    "Breadth-First Search",
    "Design"
  ],
  "description": "You are given a tree with n nodes numbered from 0 to n - 1 in the form of a parent array parent where parent[i] is the parent of the ith node. The root of the tree is node 0, so parent[0] = -1 since it has no parent. You want to design a data structure that allows users to lock, unlock, and upgrade nodes in the tree.\nThe data structure should support the following functions:\nImplement the LockingTree class:\nExample 1:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input\n[\"LockingTree\", \"lock\", \"unlock\", \"unlock\", \"lock\", \"upgrade\", \"lock\"]\n[[[-1, 0, 0, 1, 1, 2, 2]], [2, 2], [2, 3], [2, 2], [4, 5], [0, 1], [0, 1]]\nOutput\n[null, true, false, true, true, true, false]\n\nExplanation\nLockingTree lockingTree = new LockingTree([-1, 0, 0, 1, 1, 2, 2]);\nlockingTree.lock(2, 2);    // return true because node 2 is unlocked.\n                           // Node 2 will now be locked by user 2.\nlockingTree.unlock(2, 3);  // return false because user 3 cannot unlock a node locked by user 2.\nlockingTree.unlock(2, 2);  // return true because node 2 was previously locked by user 2.\n                           // Node 2 will now be unlocked.\nlockingTree.lock(4, 5);    // return true because node 4 is unlocked.\n                           // Node 4 will now be locked by user 5.\nlockingTree.upgrade(0, 1); // return true because node 0 is unlocked and has at least one locked descendant (node 4).\n                           // Node 0 will now be locked by user 1 and node 4 will now be unlocked.\nlockingTree.lock(0, 1);    // return false because node 0 is already locked.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/07/29/untitled.png"
      ]
    }
  ],
  "constraints": [
    "n == parent.length",
    "2 <= n <= 2000",
    "0 <= parent[i] <= n - 1 for i != 0",
    "parent[0] == -1",
    "0 <= num <= n - 1",
    "1 <= user <= 104",
    "parent represents a valid tree.",
    "At most 2000 calls in total will be made to lock, unlock, and upgrade."
  ],
  "follow_ups": [],
  "hints": [
    "How can we use the small constraints to help us solve the problem?",
    "How can we traverse the ancestors and descendants of a node?"
  ],
  "code_snippets": {
    "cpp": "class LockingTree {\npublic:\n    LockingTree(vector<int>& parent) {\n        \n    }\n    \n    bool lock(int num, int user) {\n        \n    }\n    \n    bool unlock(int num, int user) {\n        \n    }\n    \n    bool upgrade(int num, int user) {\n        \n    }\n};\n\n/**\n * Your LockingTree object will be instantiated and called as such:\n * LockingTree* obj = new LockingTree(parent);\n * bool param_1 = obj->lock(num,user);\n * bool param_2 = obj->unlock(num,user);\n * bool param_3 = obj->upgrade(num,user);\n */",
    "java": "class LockingTree {\n\n    public LockingTree(int[] parent) {\n        \n    }\n    \n    public boolean lock(int num, int user) {\n        \n    }\n    \n    public boolean unlock(int num, int user) {\n        \n    }\n    \n    public boolean upgrade(int num, int user) {\n        \n    }\n}\n\n/**\n * Your LockingTree object will be instantiated and called as such:\n * LockingTree obj = new LockingTree(parent);\n * boolean param_1 = obj.lock(num,user);\n * boolean param_2 = obj.unlock(num,user);\n * boolean param_3 = obj.upgrade(num,user);\n */",
    "python": "class LockingTree(object):\n\n    def __init__(self, parent):\n        \"\"\"\n        :type parent: List[int]\n        \"\"\"\n        \n\n    def lock(self, num, user):\n        \"\"\"\n        :type num: int\n        :type user: int\n        :rtype: bool\n        \"\"\"\n        \n\n    def unlock(self, num, user):\n        \"\"\"\n        :type num: int\n        :type user: int\n        :rtype: bool\n        \"\"\"\n        \n\n    def upgrade(self, num, user):\n        \"\"\"\n        :type num: int\n        :type user: int\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your LockingTree object will be instantiated and called as such:\n# obj = LockingTree(parent)\n# param_1 = obj.lock(num,user)\n# param_2 = obj.unlock(num,user)\n# param_3 = obj.upgrade(num,user)",
    "python3": "class LockingTree:\n\n    def __init__(self, parent: List[int]):\n        \n\n    def lock(self, num: int, user: int) -> bool:\n        \n\n    def unlock(self, num: int, user: int) -> bool:\n        \n\n    def upgrade(self, num: int, user: int) -> bool:\n        \n\n\n# Your LockingTree object will be instantiated and called as such:\n# obj = LockingTree(parent)\n# param_1 = obj.lock(num,user)\n# param_2 = obj.unlock(num,user)\n# param_3 = obj.upgrade(num,user)",
    "c": "\n\n\ntypedef struct {\n    \n} LockingTree;\n\n\nLockingTree* lockingTreeCreate(int* parent, int parentSize) {\n    \n}\n\nbool lockingTreeLock(LockingTree* obj, int num, int user) {\n    \n}\n\nbool lockingTreeUnlock(LockingTree* obj, int num, int user) {\n    \n}\n\nbool lockingTreeUpgrade(LockingTree* obj, int num, int user) {\n    \n}\n\nvoid lockingTreeFree(LockingTree* obj) {\n    \n}\n\n/**\n * Your LockingTree struct will be instantiated and called as such:\n * LockingTree* obj = lockingTreeCreate(parent, parentSize);\n * bool param_1 = lockingTreeLock(obj, num, user);\n \n * bool param_2 = lockingTreeUnlock(obj, num, user);\n \n * bool param_3 = lockingTreeUpgrade(obj, num, user);\n \n * lockingTreeFree(obj);\n*/",
    "csharp": "public class LockingTree {\n\n    public LockingTree(int[] parent) {\n        \n    }\n    \n    public bool Lock(int num, int user) {\n        \n    }\n    \n    public bool Unlock(int num, int user) {\n        \n    }\n    \n    public bool Upgrade(int num, int user) {\n        \n    }\n}\n\n/**\n * Your LockingTree object will be instantiated and called as such:\n * LockingTree obj = new LockingTree(parent);\n * bool param_1 = obj.Lock(num,user);\n * bool param_2 = obj.Unlock(num,user);\n * bool param_3 = obj.Upgrade(num,user);\n */",
    "javascript": "/**\n * @param {number[]} parent\n */\nvar LockingTree = function(parent) {\n    \n};\n\n/** \n * @param {number} num \n * @param {number} user\n * @return {boolean}\n */\nLockingTree.prototype.lock = function(num, user) {\n    \n};\n\n/** \n * @param {number} num \n * @param {number} user\n * @return {boolean}\n */\nLockingTree.prototype.unlock = function(num, user) {\n    \n};\n\n/** \n * @param {number} num \n * @param {number} user\n * @return {boolean}\n */\nLockingTree.prototype.upgrade = function(num, user) {\n    \n};\n\n/** \n * Your LockingTree object will be instantiated and called as such:\n * var obj = new LockingTree(parent)\n * var param_1 = obj.lock(num,user)\n * var param_2 = obj.unlock(num,user)\n * var param_3 = obj.upgrade(num,user)\n */",
    "typescript": "class LockingTree {\n    constructor(parent: number[]) {\n        \n    }\n\n    lock(num: number, user: number): boolean {\n        \n    }\n\n    unlock(num: number, user: number): boolean {\n        \n    }\n\n    upgrade(num: number, user: number): boolean {\n        \n    }\n}\n\n/**\n * Your LockingTree object will be instantiated and called as such:\n * var obj = new LockingTree(parent)\n * var param_1 = obj.lock(num,user)\n * var param_2 = obj.unlock(num,user)\n * var param_3 = obj.upgrade(num,user)\n */",
    "php": "class LockingTree {\n    /**\n     * @param Integer[] $parent\n     */\n    function __construct($parent) {\n        \n    }\n  \n    /**\n     * @param Integer $num\n     * @param Integer $user\n     * @return Boolean\n     */\n    function lock($num, $user) {\n        \n    }\n  \n    /**\n     * @param Integer $num\n     * @param Integer $user\n     * @return Boolean\n     */\n    function unlock($num, $user) {\n        \n    }\n  \n    /**\n     * @param Integer $num\n     * @param Integer $user\n     * @return Boolean\n     */\n    function upgrade($num, $user) {\n        \n    }\n}\n\n/**\n * Your LockingTree object will be instantiated and called as such:\n * $obj = LockingTree($parent);\n * $ret_1 = $obj->lock($num, $user);\n * $ret_2 = $obj->unlock($num, $user);\n * $ret_3 = $obj->upgrade($num, $user);\n */",
    "swift": "\nclass LockingTree {\n\n    init(_ parent: [Int]) {\n        \n    }\n    \n    func lock(_ num: Int, _ user: Int) -> Bool {\n        \n    }\n    \n    func unlock(_ num: Int, _ user: Int) -> Bool {\n        \n    }\n    \n    func upgrade(_ num: Int, _ user: Int) -> Bool {\n        \n    }\n}\n\n/**\n * Your LockingTree object will be instantiated and called as such:\n * let obj = LockingTree(parent)\n * let ret_1: Bool = obj.lock(num, user)\n * let ret_2: Bool = obj.unlock(num, user)\n * let ret_3: Bool = obj.upgrade(num, user)\n */",
    "kotlin": "class LockingTree(parent: IntArray) {\n\n    fun lock(num: Int, user: Int): Boolean {\n        \n    }\n\n    fun unlock(num: Int, user: Int): Boolean {\n        \n    }\n\n    fun upgrade(num: Int, user: Int): Boolean {\n        \n    }\n\n}\n\n/**\n * Your LockingTree object will be instantiated and called as such:\n * var obj = LockingTree(parent)\n * var param_1 = obj.lock(num,user)\n * var param_2 = obj.unlock(num,user)\n * var param_3 = obj.upgrade(num,user)\n */",
    "dart": "class LockingTree {\n\n  LockingTree(List<int> parent) {\n    \n  }\n  \n  bool lock(int num, int user) {\n    \n  }\n  \n  bool unlock(int num, int user) {\n    \n  }\n  \n  bool upgrade(int num, int user) {\n    \n  }\n}\n\n/**\n * Your LockingTree object will be instantiated and called as such:\n * LockingTree obj = LockingTree(parent);\n * bool param1 = obj.lock(num,user);\n * bool param2 = obj.unlock(num,user);\n * bool param3 = obj.upgrade(num,user);\n */",
    "golang": "type LockingTree struct {\n    \n}\n\n\nfunc Constructor(parent []int) LockingTree {\n    \n}\n\n\nfunc (this *LockingTree) Lock(num int, user int) bool {\n    \n}\n\n\nfunc (this *LockingTree) Unlock(num int, user int) bool {\n    \n}\n\n\nfunc (this *LockingTree) Upgrade(num int, user int) bool {\n    \n}\n\n\n/**\n * Your LockingTree object will be instantiated and called as such:\n * obj := Constructor(parent);\n * param_1 := obj.Lock(num,user);\n * param_2 := obj.Unlock(num,user);\n * param_3 := obj.Upgrade(num,user);\n */",
    "ruby": "class LockingTree\n\n=begin\n    :type parent: Integer[]\n=end\n    def initialize(parent)\n        \n    end\n\n\n=begin\n    :type num: Integer\n    :type user: Integer\n    :rtype: Boolean\n=end\n    def lock(num, user)\n        \n    end\n\n\n=begin\n    :type num: Integer\n    :type user: Integer\n    :rtype: Boolean\n=end\n    def unlock(num, user)\n        \n    end\n\n\n=begin\n    :type num: Integer\n    :type user: Integer\n    :rtype: Boolean\n=end\n    def upgrade(num, user)\n        \n    end\n\n\nend\n\n# Your LockingTree object will be instantiated and called as such:\n# obj = LockingTree.new(parent)\n# param_1 = obj.lock(num, user)\n# param_2 = obj.unlock(num, user)\n# param_3 = obj.upgrade(num, user)",
    "scala": "class LockingTree(_parent: Array[Int]) {\n\n    def lock(num: Int, user: Int): Boolean = {\n        \n    }\n\n    def unlock(num: Int, user: Int): Boolean = {\n        \n    }\n\n    def upgrade(num: Int, user: Int): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your LockingTree object will be instantiated and called as such:\n * val obj = new LockingTree(parent)\n * val param_1 = obj.lock(num,user)\n * val param_2 = obj.unlock(num,user)\n * val param_3 = obj.upgrade(num,user)\n */",
    "rust": "struct LockingTree {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl LockingTree {\n\n    fn new(parent: Vec<i32>) -> Self {\n        \n    }\n    \n    fn lock(&self, num: i32, user: i32) -> bool {\n        \n    }\n    \n    fn unlock(&self, num: i32, user: i32) -> bool {\n        \n    }\n    \n    fn upgrade(&self, num: i32, user: i32) -> bool {\n        \n    }\n}\n\n/**\n * Your LockingTree object will be instantiated and called as such:\n * let obj = LockingTree::new(parent);\n * let ret_1: bool = obj.lock(num, user);\n * let ret_2: bool = obj.unlock(num, user);\n * let ret_3: bool = obj.upgrade(num, user);\n */",
    "racket": "(define locking-tree%\n  (class object%\n    (super-new)\n    \n    ; parent : (listof exact-integer?)\n    (init-field\n      parent)\n    \n    ; lock : exact-integer? exact-integer? -> boolean?\n    (define/public (lock num user)\n      )\n    ; unlock : exact-integer? exact-integer? -> boolean?\n    (define/public (unlock num user)\n      )\n    ; upgrade : exact-integer? exact-integer? -> boolean?\n    (define/public (upgrade num user)\n      )))\n\n;; Your locking-tree% object will be instantiated and called as such:\n;; (define obj (new locking-tree% [parent parent]))\n;; (define param_1 (send obj lock num user))\n;; (define param_2 (send obj unlock num user))\n;; (define param_3 (send obj upgrade num user))",
    "erlang": "-spec locking_tree_init_(Parent :: [integer()]) -> any().\nlocking_tree_init_(Parent) ->\n  .\n\n-spec locking_tree_lock(Num :: integer(), User :: integer()) -> boolean().\nlocking_tree_lock(Num, User) ->\n  .\n\n-spec locking_tree_unlock(Num :: integer(), User :: integer()) -> boolean().\nlocking_tree_unlock(Num, User) ->\n  .\n\n-spec locking_tree_upgrade(Num :: integer(), User :: integer()) -> boolean().\nlocking_tree_upgrade(Num, User) ->\n  .\n\n\n%% Your functions will be called as such:\n%% locking_tree_init_(Parent),\n%% Param_1 = locking_tree_lock(Num, User),\n%% Param_2 = locking_tree_unlock(Num, User),\n%% Param_3 = locking_tree_upgrade(Num, User),\n\n%% locking_tree_init_ will be called before every test case, in which you can do some necessary initializations.",
    "elixir": "defmodule LockingTree do\n  @spec init_(parent :: [integer]) :: any\n  def init_(parent) do\n    \n  end\n\n  @spec lock(num :: integer, user :: integer) :: boolean\n  def lock(num, user) do\n    \n  end\n\n  @spec unlock(num :: integer, user :: integer) :: boolean\n  def unlock(num, user) do\n    \n  end\n\n  @spec upgrade(num :: integer, user :: integer) :: boolean\n  def upgrade(num, user) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# LockingTree.init_(parent)\n# param_1 = LockingTree.lock(num, user)\n# param_2 = LockingTree.unlock(num, user)\n# param_3 = LockingTree.upgrade(num, user)\n\n# LockingTree.init_ will be called before every test case, in which you can do some necessary initializations."
  }
}
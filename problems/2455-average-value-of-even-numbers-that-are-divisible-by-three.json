{
  "title": "Average Value of Even Numbers That Are Divisible by Three",
  "problem_id": "2542",
  "frontend_id": "2455",
  "difficulty": "Easy",
  "problem_slug": "average-value-of-even-numbers-that-are-divisible-by-three",
  "topics": [
    "Array",
    "Math"
  ],
  "description": "Given an integer array nums of positive integers, return the average value of all even integers that are divisible by 3.\nNote that the average of n elements is the sum of the n elements divided by n and rounded down to the nearest integer.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,3,6,10,12,15]\nOutput: 9\nExplanation: 6 and 12 are even numbers that are divisible by 3. (6 + 12) / 2 = 9.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,2,4,7,10]\nOutput: 0\nExplanation: There is no single number that satisfies the requirement, so return 0.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 1000",
    "1 <= nums[i] <= 1000"
  ],
  "follow_ups": [],
  "hints": [
    "What is the property of a number if it is divisible by both 2 and 3 at the same time?",
    "It is equivalent to finding all the numbers that are divisible by 6."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int averageValue(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int averageValue(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def averageValue(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def averageValue(self, nums: List[int]) -> int:\n        ",
    "c": "int averageValue(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int AverageValue(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar averageValue = function(nums) {\n    \n};",
    "typescript": "function averageValue(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function averageValue($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func averageValue(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun averageValue(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int averageValue(List<int> nums) {\n    \n  }\n}",
    "golang": "func averageValue(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef average_value(nums)\n    \nend",
    "scala": "object Solution {\n    def averageValue(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn average_value(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (average-value nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec average_value(Nums :: [integer()]) -> integer().\naverage_value(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec average_value(nums :: [integer]) :: integer\n  def average_value(nums) do\n    \n  end\nend"
  }
}
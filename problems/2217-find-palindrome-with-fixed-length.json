{
  "title": "Find Palindrome With Fixed Length",
  "problem_id": "1375",
  "frontend_id": "2217",
  "difficulty": "Medium",
  "problem_slug": "find-palindrome-with-fixed-length",
  "topics": [
    "Array",
    "Math"
  ],
  "description": "Given an integer array queries and a positive integer intLength, return an array answer where answer[i] is either the queries[i]th smallest positive palindrome of length intLength or -1 if no such palindrome exists.\nA palindrome is a number that reads the same backwards and forwards. Palindromes cannot have leading zeros.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: queries = [1,2,3,4,5,90], intLength = 3\nOutput: [101,111,121,131,141,999]\nExplanation:\nThe first few palindromes of length 3 are:\n101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, ...\nThe 90th palindrome of length 3 is 999.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: queries = [2,4,6], intLength = 4\nOutput: [1111,1331,1551]\nExplanation:\nThe first six palindromes of length 4 are:\n1001, 1111, 1221, 1331, 1441, and 1551.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= queries.length <= 5 * 104",
    "1 <= queries[i] <= 109",
    "1 <= intLengthÂ <= 15"
  ],
  "follow_ups": [],
  "hints": [
    "For any value of queries[i] and intLength, how can you check if there exists at least queries[i] palindromes of length intLength?",
    "Since a palindrome reads the same forwards and backwards, consider how you can efficiently find the first half (ceil(intLength/2) digits) of the palindrome."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<long long> kthPalindrome(vector<int>& queries, int intLength) {\n        \n    }\n};",
    "java": "class Solution {\n    public long[] kthPalindrome(int[] queries, int intLength) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def kthPalindrome(self, queries, intLength):\n        \"\"\"\n        :type queries: List[int]\n        :type intLength: int\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def kthPalindrome(self, queries: List[int], intLength: int) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nlong long* kthPalindrome(int* queries, int queriesSize, int intLength, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public long[] KthPalindrome(int[] queries, int intLength) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} queries\n * @param {number} intLength\n * @return {number[]}\n */\nvar kthPalindrome = function(queries, intLength) {\n    \n};",
    "typescript": "function kthPalindrome(queries: number[], intLength: number): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $queries\n     * @param Integer $intLength\n     * @return Integer[]\n     */\n    function kthPalindrome($queries, $intLength) {\n        \n    }\n}",
    "swift": "class Solution {\n    func kthPalindrome(_ queries: [Int], _ intLength: Int) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun kthPalindrome(queries: IntArray, intLength: Int): LongArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> kthPalindrome(List<int> queries, int intLength) {\n    \n  }\n}",
    "golang": "func kthPalindrome(queries []int, intLength int) []int64 {\n    \n}",
    "ruby": "# @param {Integer[]} queries\n# @param {Integer} int_length\n# @return {Integer[]}\ndef kth_palindrome(queries, int_length)\n    \nend",
    "scala": "object Solution {\n    def kthPalindrome(queries: Array[Int], intLength: Int): Array[Long] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn kth_palindrome(queries: Vec<i32>, int_length: i32) -> Vec<i64> {\n        \n    }\n}",
    "racket": "(define/contract (kth-palindrome queries intLength)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )",
    "erlang": "-spec kth_palindrome(Queries :: [integer()], IntLength :: integer()) -> [integer()].\nkth_palindrome(Queries, IntLength) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec kth_palindrome(queries :: [integer], int_length :: integer) :: [integer]\n  def kth_palindrome(queries, int_length) do\n    \n  end\nend"
  }
}
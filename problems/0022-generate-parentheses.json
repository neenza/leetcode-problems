{
  "title": "Generate Parentheses",
  "problem_id": "22",
  "frontend_id": "22",
  "difficulty": "Medium",
  "problem_slug": "generate-parentheses",
  "topics": [
    "String",
    "Dynamic Programming",
    "Backtracking"
  ],
  "description": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 3\nOutput: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 1\nOutput: [\"()\"]",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 8"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<string> generateParenthesis(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<String> generateParenthesis(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** generateParenthesis(int n, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<string> GenerateParenthesis(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function(n) {\n    \n};",
    "typescript": "function generateParenthesis(n: number): string[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String[]\n     */\n    function generateParenthesis($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func generateParenthesis(_ n: Int) -> [String] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun generateParenthesis(n: Int): List<String> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<String> generateParenthesis(int n) {\n    \n  }\n}",
    "golang": "func generateParenthesis(n int) []string {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {String[]}\ndef generate_parenthesis(n)\n    \nend",
    "scala": "object Solution {\n    def generateParenthesis(n: Int): List[String] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn generate_parenthesis(n: i32) -> Vec<String> {\n        \n    }\n}",
    "racket": "(define/contract (generate-parenthesis n)\n  (-> exact-integer? (listof string?))\n  )",
    "erlang": "-spec generate_parenthesis(N :: integer()) -> [unicode:unicode_binary()].\ngenerate_parenthesis(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec generate_parenthesis(n :: integer) :: [String.t]\n  def generate_parenthesis(n) do\n    \n  end\nend"
  }
}
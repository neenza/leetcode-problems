{
  "title": "Split Array into Consecutive Subsequences",
  "problem_id": "659",
  "frontend_id": "659",
  "difficulty": "Medium",
  "problem_slug": "split-array-into-consecutive-subsequences",
  "topics": [
    "Array",
    "Hash Table",
    "Greedy",
    "Heap (Priority Queue)"
  ],
  "description": "You are given an integer array nums that is sorted in non-decreasing order.\nDetermine if it is possible to split nums into one or more subsequences such that both of the following conditions are true:\nReturn true if you can split nums according to the above conditions, or false otherwise.\nA subsequence of an array is a new array that is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements. (i.e., [1,3,5] is a subsequence of [1,2,3,4,5] while [1,3,2] is not).\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,3,3,4,5]\nOutput: true\nExplanation: nums can be split into the following subsequences:\n[1,2,3,3,4,5] --> 1, 2, 3\n[1,2,3,3,4,5] --> 3, 4, 5",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,2,3,3,4,4,5,5]\nOutput: true\nExplanation: nums can be split into the following subsequences:\n[1,2,3,3,4,4,5,5] --> 1, 2, 3, 4, 5\n[1,2,3,3,4,4,5,5] --> 3, 4, 5",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,2,3,4,4,5]\nOutput: false\nExplanation: It is impossible to split nums into consecutive increasing subsequences of length 3 or more.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 104",
    "-1000 <= nums[i] <= 1000",
    "nums is sorted in non-decreasing order."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool isPossible(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean isPossible(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def isPossible(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def isPossible(self, nums: List[int]) -> bool:\n        ",
    "c": "bool isPossible(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public bool IsPossible(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar isPossible = function(nums) {\n    \n};",
    "typescript": "function isPossible(nums: number[]): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function isPossible($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func isPossible(_ nums: [Int]) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun isPossible(nums: IntArray): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool isPossible(List<int> nums) {\n    \n  }\n}",
    "golang": "func isPossible(nums []int) bool {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Boolean}\ndef is_possible(nums)\n    \nend",
    "scala": "object Solution {\n    def isPossible(nums: Array[Int]): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn is_possible(nums: Vec<i32>) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (is-possible nums)\n  (-> (listof exact-integer?) boolean?)\n  )",
    "erlang": "-spec is_possible(Nums :: [integer()]) -> boolean().\nis_possible(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec is_possible(nums :: [integer]) :: boolean\n  def is_possible(nums) do\n    \n  end\nend"
  }
}
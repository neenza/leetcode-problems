{
  "title": "Maximum Product of Two Elements in an Array",
  "problem_id": "1574",
  "frontend_id": "1464",
  "difficulty": "Easy",
  "problem_slug": "maximum-product-of-two-elements-in-an-array",
  "topics": [
    "Array",
    "Sorting",
    "Heap (Priority Queue)"
  ],
  "description": "Example 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [3,4,5,2]\nOutput: 12 \nExplanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,5,4,5]\nOutput: 16\nExplanation: Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [3,7]\nOutput: 12",
      "images": []
    }
  ],
  "constraints": [
    "2 <= nums.length <= 500",
    "1 <= nums[i] <= 10^3"
  ],
  "follow_ups": [],
  "hints": [
    "Use brute force: two loops to select i and j, then select the maximum value of (nums[i]-1)*(nums[j]-1)."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxProduct(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        ",
    "c": "int maxProduct(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxProduct(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxProduct = function(nums) {\n    \n};",
    "typescript": "function maxProduct(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxProduct($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxProduct(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxProduct(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxProduct(List<int> nums) {\n    \n  }\n}",
    "golang": "func maxProduct(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_product(nums)\n    \nend",
    "scala": "object Solution {\n    def maxProduct(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_product(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-product nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec max_product(Nums :: [integer()]) -> integer().\nmax_product(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_product(nums :: [integer]) :: integer\n  def max_product(nums) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n\n---\n\n### Approach 1: Brute Force\n\n**Intuition**\n\nTo start, we will simply check every pair of indices `(i, j)` and calculate `(nums[i] - 1) * (nums[j] - 1)`. We will take the maximum value as the answer.\n\nNote that a pair of indices `(i, j)` will have the same result as `(j, i)`. Thus, to be more efficient, we will start iterating `j` from `i + 1`. This way, we don't check any duplicate pairs.\n\n**Algorithm**\n\n1. Initialize the answer `ans = 0`.\n2. Iterate `i` over the indices of `nums`:\n    - Iterate `j` over the indices of `nums`, starting from `i + 1`:\n        - Calculate `(nums[i] - 1) * (nums[j] - 1)` and update `ans` if it is larger.\n3. Return `ans`.\n\n**Implementation****Complexity Analysis**\n\nGiven $$n$$ as the length of `nums`,\n\n* Time complexity: $$O(n^2)$$\n\n    We have a nested for loop over the indices of `nums`. For `i = 0`, we will iterate `j` over $$n$$ indices. For `i = 1`, we will iterate `j` over $$n - 1$$ indices. For `i = 2`, we will iterate `j` over $$n - 2$$ indices, and so on.\n\n    In total, we iterate `j` over $$1 + 2 + 3 + ... + n$$ indices. This is the partial sum of [this series](https://en.wikipedia.org/wiki/1_%2B_2_%2B_3_%2B_4_%2B_%E2%8B%AF#Partial_sums), which is equal to $$\\frac{n \\cdot (n + 1)}{2} = O(n^2)$$.\n\n* Space complexity: $$O(1)$$\n\n    We aren't using any extra space.---\n\n### Approach 2: Sort\n\n**Intuition**\n\nIntuitively, given all the candidates are non-negative, if you wanted to maximize the product of `x * y`, you would choose the largest values for `x` and `y`.\n\nIn this problem, we need to subtract one from our numbers before multiplying them. However, this doesn't change the logic of choosing the largest numbers, since **every** element will be reduced by the same amount and will still be non-negative. Thus, it is optimal for us to choose the two largest elements.\n\nWe can sort the array to easily find the two largest elements.\n\n**Algorithm**\n\n1. Sort `nums` in ascending order.\n2. Set `x` as the last element in `nums` and `y` as the second last element in `nums`.\n3. Return `(x - 1) * (y - 1)`.\n\n**Implementation****Complexity Analysis**\n\nGiven $$n$$ as the length of `nums`,\n\n* Time complexity: $$O(n \\cdot \\log{}n)$$\n\n    We sort `nums`, which costs $$O(n \\cdot \\log{}n)$$.\n\n* Space Complexity: $$O(\\log n)$$ or $$O(n)$$\n\n    The space complexity of the sorting algorithm depends on the implementation of each programming language:\n    * In Java, Arrays.sort() for primitives is implemented using a variant of the Quick Sort algorithm, which has a space complexity of $$O(\\log n)$$\n    * In C++, the sort() function provided by STL uses a hybrid of Quick Sort, Heap Sort and Insertion Sort, with a worst case space complexity of $$O(\\log n)$$\n    * In Python, the sort() function is implemented using the Timsort algorithm, which has a worst-case space complexity of $$O(n)$$---\n\n### Approach 3: Track Second Biggest\n\n**Intuition**\n\nWithout sorting, we can easily find the maximum element in `nums` by iterating over `nums` and continuously updating a variable with the largest value we see. However, we need the second largest value as well. Can we accomplish this without sorting?\n\nWe will use two variables: `biggest` to represent the biggest element we have seen so far, and `secondBiggest` to represent the second biggest element we have seen so far.\n\nWe then iterate over each `num` in `nums`. For each `num`, there are two possibilities:\n\n1. `num > biggest`. We have found a new biggest element and should update `biggest = num`. However, before we do this, we update `secondBiggest = biggest` since the old biggest element we saw will become the new second biggest element.\n2. `num <= biggest`. We should not update `biggest`. However, `num` may be larger than `secondBiggest`, in which case it would be the new second biggest element. We update `secondBiggest` with `num` if it is larger.\n\nAfter iterating over all elements, we simply return `(biggest - 1) * (secondBiggest - 1)`.\n\n**Algorithm**\n\n1. Initialize `biggest = 0` and `secondBiggest = 0`.\n2. Iterate over each `num` in `nums`:\n    - If `num > biggest`:\n        - Update `secondBiggest = biggest`.\n        - Update `biggest = num`.\n    - Else:\n        - Update `secondBiggest` with `num` if it is larger.\n3. Return `(biggest - 1) * (secondBiggest - 1)`.\n\n**Implementation****Complexity Analysis**\n\nGiven $$n$$ as the length of `nums`,\n\n* Time complexity: $$O(n)$$\n\n    We iterate over `nums` once, performing $$O(1)$$ work at each iteration.\n\n* Space complexity: $$O(1)$$\n\n    We aren't using any extra space other than a few integers.---"
}
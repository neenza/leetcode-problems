{
  "title": "Majority Element II",
  "problem_id": "229",
  "frontend_id": "229",
  "difficulty": "Medium",
  "problem_slug": "majority-element-ii",
  "topics": [
    "Array",
    "Hash Table",
    "Sorting",
    "Counting"
  ],
  "description": "Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up: Could you solve the problem in linear time and in O(1) space?",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [3,2,3]\nOutput: [3]",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1]\nOutput: [1]",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,2]\nOutput: [1,2]",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 5 * 104",
    "-109 <= nums[i] <= 109"
  ],
  "follow_ups": [
    "Could you solve the problem in linear time and in O(1) space?"
  ],
  "hints": [
    "Think about the possible number of elements that can appear more than ⌊ n/3 ⌋ times in the array.",
    "It can be at most two. Why?",
    "Consider using Boyer-Moore Voting Algorithm, which is efficient for finding elements that appear more than a certain threshold."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> majorityElement(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<Integer> majorityElement(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def majorityElement(self, nums: List[int]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* majorityElement(int* nums, int numsSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<int> MajorityElement(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar majorityElement = function(nums) {\n    \n};",
    "typescript": "function majorityElement(nums: number[]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function majorityElement($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func majorityElement(_ nums: [Int]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun majorityElement(nums: IntArray): List<Int> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> majorityElement(List<int> nums) {\n    \n  }\n}",
    "golang": "func majorityElement(nums []int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef majority_element(nums)\n    \nend",
    "scala": "object Solution {\n    def majorityElement(nums: Array[Int]): List[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn majority_element(nums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (majority-element nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )",
    "erlang": "-spec majority_element(Nums :: [integer()]) -> [integer()].\nmajority_element(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec majority_element(nums :: [integer]) :: [integer]\n  def majority_element(nums) do\n    \n  end\nend"
  }
}
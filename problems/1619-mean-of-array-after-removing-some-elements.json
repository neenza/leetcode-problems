{
  "title": "Mean of Array After Removing Some Elements",
  "problem_id": "1210",
  "frontend_id": "1619",
  "difficulty": "Easy",
  "problem_slug": "mean-of-array-after-removing-some-elements",
  "topics": [
    "Array",
    "Sorting"
  ],
  "description": "Given an integer array arr, return the mean of the remaining integers after removing the smallest 5% and the largest 5% of the elements.\nAnswers within 10-5 of the actual answer will be considered accepted.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]\nOutput: 2.00000\nExplanation: After erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]\nOutput: 4.00000",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]\nOutput: 4.77778",
      "images": []
    }
  ],
  "constraints": [
    "20 <= arr.length <= 1000",
    "arr.length is a multiple of 20.",
    "0 <= arr[i] <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "Sort the given array.",
    "Remove the first and last 5% of the sorted array."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    double trimMean(vector<int>& arr) {\n        \n    }\n};",
    "java": "class Solution {\n    public double trimMean(int[] arr) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def trimMean(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: float\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def trimMean(self, arr: List[int]) -> float:\n        ",
    "c": "double trimMean(int* arr, int arrSize) {\n    \n}",
    "csharp": "public class Solution {\n    public double TrimMean(int[] arr) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar trimMean = function(arr) {\n    \n};",
    "typescript": "function trimMean(arr: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Float\n     */\n    function trimMean($arr) {\n        \n    }\n}",
    "swift": "class Solution {\n    func trimMean(_ arr: [Int]) -> Double {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun trimMean(arr: IntArray): Double {\n        \n    }\n}",
    "dart": "class Solution {\n  double trimMean(List<int> arr) {\n    \n  }\n}",
    "golang": "func trimMean(arr []int) float64 {\n    \n}",
    "ruby": "# @param {Integer[]} arr\n# @return {Float}\ndef trim_mean(arr)\n    \nend",
    "scala": "object Solution {\n    def trimMean(arr: Array[Int]): Double = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn trim_mean(arr: Vec<i32>) -> f64 {\n        \n    }\n}",
    "racket": "(define/contract (trim-mean arr)\n  (-> (listof exact-integer?) flonum?)\n  )",
    "erlang": "-spec trim_mean(Arr :: [integer()]) -> float().\ntrim_mean(Arr) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec trim_mean(arr :: [integer]) :: float\n  def trim_mean(arr) do\n    \n  end\nend"
  }
}
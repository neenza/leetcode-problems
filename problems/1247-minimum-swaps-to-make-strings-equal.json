{
  "title": "Minimum Swaps to Make Strings Equal",
  "problem_id": "1369",
  "frontend_id": "1247",
  "difficulty": "Medium",
  "problem_slug": "minimum-swaps-to-make-strings-equal",
  "topics": [
    "Math",
    "String",
    "Greedy"
  ],
  "description": "You are given two strings s1 and s2 of equal length consisting of letters \"x\" and \"y\" only. Your task is to make these two strings equal to each other. You can swap any two characters that belong to different strings, which means: swap s1[i] and s2[j].\nReturn the minimum number of swaps required to make s1 and s2 equal, or return -1 if it is impossible to do so.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s1 = \"xx\", s2 = \"yy\"\nOutput: 1\nExplanation: Swap s1[0] and s2[1], s1 = \"yx\", s2 = \"yx\".",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s1 = \"xy\", s2 = \"yx\"\nOutput: 2\nExplanation: Swap s1[0] and s2[0], s1 = \"yy\", s2 = \"xx\".\nSwap s1[0] and s2[1], s1 = \"xy\", s2 = \"xy\".\nNote that you cannot swap s1[0] and s1[1] to make s1 equal to \"yx\", cause we can only swap chars in different strings.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s1 = \"xx\", s2 = \"xy\"\nOutput: -1",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s1.length, s2.length <= 1000",
    "s1.length == s2.length",
    "s1, s2 only contain 'x' or 'y'."
  ],
  "follow_ups": [],
  "hints": [
    "First, ignore all the already matched positions, they don't affect the answer at all. For the unmatched positions, there are three basic cases (already given in the examples):",
    "(\"xx\", \"yy\") => 1 swap, (\"xy\", \"yx\") => 2 swaps",
    "So the strategy is, apply case 1 as much as possible, then apply case 2 if the last two unmatched are in this case, or fall into impossible if only one pair of unmatched left. This can be done via a simple math."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimumSwap(string s1, string s2) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimumSwap(String s1, String s2) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumSwap(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumSwap(self, s1: str, s2: str) -> int:\n        ",
    "c": "int minimumSwap(char* s1, char* s2) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimumSwap(string s1, string s2) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s1\n * @param {string} s2\n * @return {number}\n */\nvar minimumSwap = function(s1, s2) {\n    \n};",
    "typescript": "function minimumSwap(s1: string, s2: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @return Integer\n     */\n    function minimumSwap($s1, $s2) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumSwap(_ s1: String, _ s2: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumSwap(s1: String, s2: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumSwap(String s1, String s2) {\n    \n  }\n}",
    "golang": "func minimumSwap(s1 string, s2 string) int {\n    \n}",
    "ruby": "# @param {String} s1\n# @param {String} s2\n# @return {Integer}\ndef minimum_swap(s1, s2)\n    \nend",
    "scala": "object Solution {\n    def minimumSwap(s1: String, s2: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_swap(s1: String, s2: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-swap s1 s2)\n  (-> string? string? exact-integer?)\n  )",
    "erlang": "-spec minimum_swap(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary()) -> integer().\nminimum_swap(S1, S2) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_swap(s1 :: String.t, s2 :: String.t) :: integer\n  def minimum_swap(s1, s2) do\n    \n  end\nend"
  }
}
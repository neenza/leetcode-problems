{
  "title": "Smallest Even Multiple",
  "problem_id": "2491",
  "frontend_id": "2413",
  "difficulty": "Easy",
  "problem_slug": "smallest-even-multiple",
  "topics": [
    "Math",
    "Number Theory"
  ],
  "description": "Example 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 5\nOutput: 10\nExplanation: The smallest multiple of both 5 and 2 is 10.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 6\nOutput: 6\nExplanation: The smallest multiple of both 6 and 2 is 6. Note that a number is a multiple of itself.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 150"
  ],
  "follow_ups": [],
  "hints": [
    "A guaranteed way to find a multiple of 2 and n is to multiply them together. When is this the answer, and when is there a smaller answer?",
    "There is a smaller answer when n is even."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int smallestEvenMultiple(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int smallestEvenMultiple(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def smallestEvenMultiple(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def smallestEvenMultiple(self, n: int) -> int:\n        ",
    "c": "int smallestEvenMultiple(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int SmallestEvenMultiple(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar smallestEvenMultiple = function(n) {\n    \n};",
    "typescript": "function smallestEvenMultiple(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function smallestEvenMultiple($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func smallestEvenMultiple(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun smallestEvenMultiple(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int smallestEvenMultiple(int n) {\n    \n  }\n}",
    "golang": "func smallestEvenMultiple(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef smallest_even_multiple(n)\n    \nend",
    "scala": "object Solution {\n    def smallestEvenMultiple(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn smallest_even_multiple(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (smallest-even-multiple n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec smallest_even_multiple(N :: integer()) -> integer().\nsmallest_even_multiple(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec smallest_even_multiple(n :: integer) :: integer\n  def smallest_even_multiple(n) do\n    \n  end\nend"
  }
}
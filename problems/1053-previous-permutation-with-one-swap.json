{
  "title": "Previous Permutation With One Swap",
  "problem_id": "1139",
  "frontend_id": "1053",
  "difficulty": "Medium",
  "problem_slug": "previous-permutation-with-one-swap",
  "topics": [
    "Array",
    "Greedy"
  ],
  "description": "Given an array of positive integers arr (not necessarily distinct), return the lexicographically largest permutation that is smaller than arr, that can be made with exactly one swap. If it cannot be done, then return the same array.\nNote that a swap exchanges the positions of two numbers arr[i] and arr[j]\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: arr = [3,2,1]\nOutput: [3,1,2]\nExplanation: Swapping 2 and 1.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: arr = [1,1,5]\nOutput: [1,1,5]\nExplanation: This is already the smallest permutation.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: arr = [1,9,4,6,7]\nOutput: [1,7,4,6,9]\nExplanation: Swapping 9 and 7.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= arr.length <= 104",
    "1 <= arr[i] <= 104"
  ],
  "follow_ups": [],
  "hints": [
    "You need to swap two values, one larger than the other.  Where is the larger one located?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> prevPermOpt1(vector<int>& arr) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] prevPermOpt1(int[] arr) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def prevPermOpt1(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def prevPermOpt1(self, arr: List[int]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* prevPermOpt1(int* arr, int arrSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] PrevPermOpt1(int[] arr) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} arr\n * @return {number[]}\n */\nvar prevPermOpt1 = function(arr) {\n    \n};",
    "typescript": "function prevPermOpt1(arr: number[]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer[]\n     */\n    function prevPermOpt1($arr) {\n        \n    }\n}",
    "swift": "class Solution {\n    func prevPermOpt1(_ arr: [Int]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun prevPermOpt1(arr: IntArray): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> prevPermOpt1(List<int> arr) {\n    \n  }\n}",
    "golang": "func prevPermOpt1(arr []int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} arr\n# @return {Integer[]}\ndef prev_perm_opt1(arr)\n    \nend",
    "scala": "object Solution {\n    def prevPermOpt1(arr: Array[Int]): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn prev_perm_opt1(arr: Vec<i32>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (prev-perm-opt1 arr)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )",
    "erlang": "-spec prev_perm_opt1(Arr :: [integer()]) -> [integer()].\nprev_perm_opt1(Arr) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec prev_perm_opt1(arr :: [integer]) :: [integer]\n  def prev_perm_opt1(arr) do\n    \n  end\nend"
  }
}
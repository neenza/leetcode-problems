{
  "title": "Hamming Distance",
  "problem_id": "461",
  "frontend_id": "461",
  "difficulty": "Easy",
  "problem_slug": "hamming-distance",
  "topics": [
    "Bit Manipulation"
  ],
  "description": "The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\nGiven two integers x and y, return the Hamming distance between them.\nExample 1:\nExample 2:\nConstraints:\nNote: This question is the same as  2220: Minimum Bit Flips to Convert Number.",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: x = 1, y = 4\nOutput: 2\nExplanation:\n1   (0 0 0 1)\n4   (0 1 0 0)\n       ↑   ↑\nThe above arrows point to positions where the corresponding bits are different.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: x = 3, y = 1\nOutput: 1",
      "images": []
    }
  ],
  "constraints": [
    "0 <= x, y <= 231 - 1"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int hammingDistance(int x, int y) {\n        \n    }\n};",
    "java": "class Solution {\n    public int hammingDistance(int x, int y) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def hammingDistance(self, x: int, y: int) -> int:\n        ",
    "c": "int hammingDistance(int x, int y) {\n    \n}",
    "csharp": "public class Solution {\n    public int HammingDistance(int x, int y) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nvar hammingDistance = function(x, y) {\n    \n};",
    "typescript": "function hammingDistance(x: number, y: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @param Integer $y\n     * @return Integer\n     */\n    function hammingDistance($x, $y) {\n        \n    }\n}",
    "swift": "class Solution {\n    func hammingDistance(_ x: Int, _ y: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun hammingDistance(x: Int, y: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int hammingDistance(int x, int y) {\n    \n  }\n}",
    "golang": "func hammingDistance(x int, y int) int {\n    \n}",
    "ruby": "# @param {Integer} x\n# @param {Integer} y\n# @return {Integer}\ndef hamming_distance(x, y)\n    \nend",
    "scala": "object Solution {\n    def hammingDistance(x: Int, y: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn hamming_distance(x: i32, y: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (hamming-distance x y)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec hamming_distance(X :: integer(), Y :: integer()) -> integer().\nhamming_distance(X, Y) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec hamming_distance(x :: integer, y :: integer) :: integer\n  def hamming_distance(x, y) do\n    \n  end\nend"
  }
}
{
  "title": "Minimize String Length",
  "problem_id": "2825",
  "frontend_id": "2716",
  "difficulty": "Easy",
  "problem_slug": "minimize-string-length",
  "topics": [
    "Hash Table",
    "String"
  ],
  "description": "Given a string s, you have two types of operation:\nYour task is to minimize the length of s by performing the above operations zero or more times.\nReturn an integer denoting the length of the minimized string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"aaabc\"\nOutput: 3\nExplanation:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"cbbd\"\nOutput: 3\nExplanation:",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"baadccab\"\nOutput: 4\nExplanation:",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 100",
    "s contains only lowercase English letters"
  ],
  "follow_ups": [],
  "hints": [
    "The minimized string will not contain duplicate characters.",
    "The minimized string will contain all distinct characters of the original string."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimizedStringLength(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimizedStringLength(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimizedStringLength(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimizedStringLength(self, s: str) -> int:\n        ",
    "c": "int minimizedStringLength(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimizedStringLength(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {number}\n */\nvar minimizedStringLength = function(s) {\n    \n};",
    "typescript": "function minimizedStringLength(s: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function minimizedStringLength($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimizedStringLength(_ s: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimizedStringLength(s: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimizedStringLength(String s) {\n    \n  }\n}",
    "golang": "func minimizedStringLength(s string) int {\n    \n}",
    "ruby": "# @param {String} s\n# @return {Integer}\ndef minimized_string_length(s)\n    \nend",
    "scala": "object Solution {\n    def minimizedStringLength(s: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimized_string_length(s: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimized-string-length s)\n  (-> string? exact-integer?)\n  )",
    "erlang": "-spec minimized_string_length(S :: unicode:unicode_binary()) -> integer().\nminimized_string_length(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimized_string_length(s :: String.t) :: integer\n  def minimized_string_length(s) do\n    \n  end\nend"
  }
}
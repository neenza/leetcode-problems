{
  "title": "Ant on the Boundary",
  "problem_id": "3311",
  "frontend_id": "3028",
  "difficulty": "Easy",
  "problem_slug": "ant-on-the-boundary",
  "topics": [
    "Array",
    "Simulation",
    "Prefix Sum"
  ],
  "description": "An ant is on a boundary. It sometimes goes left and sometimes right.\nYou are given an array of non-zero integers nums. The ant starts reading nums from the first element of it to its end. At each step, it moves according to the value of the current element:\nReturn the number of times the ant returns to the boundary.\nNotes:\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [2,3,-5]\nOutput: 1\nExplanation: After the first step, the ant is 2 steps to the right of the boundary.\nAfter the second step, the ant is 5 steps to the right of the boundary.\nAfter the third step, the ant is on the boundary.\nSo the answer is 1.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [3,2,-3,-4]\nOutput: 0\nExplanation: After the first step, the ant is 3 steps to the right of the boundary.\nAfter the second step, the ant is 5 steps to the right of the boundary.\nAfter the third step, the ant is 2 steps to the right of the boundary.\nAfter the fourth step, the ant is 2 steps to the left of the boundary.\nThe ant never returned to the boundary, so the answer is 0.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 100",
    "-10 <= nums[i] <= 10",
    "nums[i] != 0"
  ],
  "follow_ups": [],
  "hints": [
    "Define a variable and add <code>nums[i]</code> to it in each step."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int returnToBoundaryCount(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int returnToBoundaryCount(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def returnToBoundaryCount(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def returnToBoundaryCount(self, nums: List[int]) -> int:\n        ",
    "c": "int returnToBoundaryCount(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int ReturnToBoundaryCount(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar returnToBoundaryCount = function(nums) {\n    \n};",
    "typescript": "function returnToBoundaryCount(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function returnToBoundaryCount($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func returnToBoundaryCount(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun returnToBoundaryCount(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int returnToBoundaryCount(List<int> nums) {\n    \n  }\n}",
    "golang": "func returnToBoundaryCount(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef return_to_boundary_count(nums)\n    \nend",
    "scala": "object Solution {\n    def returnToBoundaryCount(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn return_to_boundary_count(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (return-to-boundary-count nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec return_to_boundary_count(Nums :: [integer()]) -> integer().\nreturn_to_boundary_count(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec return_to_boundary_count(nums :: [integer]) :: integer\n  def return_to_boundary_count(nums) do\n    \n  end\nend"
  }
}
{
  "title": "Number of Different Integers in a String",
  "problem_id": "1933",
  "frontend_id": "1805",
  "difficulty": "Easy",
  "problem_slug": "number-of-different-integers-in-a-string",
  "topics": [
    "Hash Table",
    "String"
  ],
  "description": "You are given a string word that consists of digits and lowercase English letters.\nYou will replace every non-digit character with a space. For example, \"a123bc34d8ef34\" will become \" 123  34 8  34\". Notice that you are left with some integers that are separated by at least one space: \"123\", \"34\", \"8\", and \"34\".\nReturn the number of different integers after performing the replacement operations on word.\nTwo integers are considered different if their decimal representations without any leading zeros are different.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: word = \"a123bc34d8ef34\"\nOutput: 3\nExplanation: The three different integers are \"123\", \"34\", and \"8\". Notice that \"34\" is only counted once.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: word = \"leet1234code234\"\nOutput: 2",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: word = \"a1b01c001\"\nOutput: 1\nExplanation: The three integers \"1\", \"01\", and \"001\" all represent the same integer because\nthe leading zeros are ignored when comparing their decimal values.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= word.length <= 1000",
    "word consists of digits and lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [
    "Try to split the string so that each integer is in a different string.",
    "Try to remove each integer's leading zeroes and compare the strings to find how many of them are unique."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int numDifferentIntegers(string word) {\n        \n    }\n};",
    "java": "class Solution {\n    public int numDifferentIntegers(String word) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numDifferentIntegers(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numDifferentIntegers(self, word: str) -> int:\n        ",
    "c": "int numDifferentIntegers(char* word) {\n    \n}",
    "csharp": "public class Solution {\n    public int NumDifferentIntegers(string word) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} word\n * @return {number}\n */\nvar numDifferentIntegers = function(word) {\n    \n};",
    "typescript": "function numDifferentIntegers(word: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $word\n     * @return Integer\n     */\n    function numDifferentIntegers($word) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numDifferentIntegers(_ word: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numDifferentIntegers(word: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int numDifferentIntegers(String word) {\n    \n  }\n}",
    "golang": "func numDifferentIntegers(word string) int {\n    \n}",
    "ruby": "# @param {String} word\n# @return {Integer}\ndef num_different_integers(word)\n    \nend",
    "scala": "object Solution {\n    def numDifferentIntegers(word: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn num_different_integers(word: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (num-different-integers word)\n  (-> string? exact-integer?)\n  )",
    "erlang": "-spec num_different_integers(Word :: unicode:unicode_binary()) -> integer().\nnum_different_integers(Word) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec num_different_integers(word :: String.t) :: integer\n  def num_different_integers(word) do\n    \n  end\nend"
  }
}
{
  "title": "Reconstruct Original Digits from English",
  "problem_id": "423",
  "frontend_id": "423",
  "difficulty": "Medium",
  "problem_slug": "reconstruct-original-digits-from-english",
  "topics": [
    "Hash Table",
    "Math",
    "String"
  ],
  "description": "Given a string s containing an out-of-order English representation of digits 0-9, return the digits in ascending order.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"owoztneoer\"\nOutput: \"012\"",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"fviefuro\"\nOutput: \"45\"",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 105",
    "s[i] is one of the characters [\"e\",\"g\",\"f\",\"i\",\"h\",\"o\",\"n\",\"s\",\"r\",\"u\",\"t\",\"w\",\"v\",\"x\",\"z\"].",
    "s is guaranteed to be valid."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string originalDigits(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public String originalDigits(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def originalDigits(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def originalDigits(self, s: str) -> str:\n        ",
    "c": "char* originalDigits(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public string OriginalDigits(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {string}\n */\nvar originalDigits = function(s) {\n    \n};",
    "typescript": "function originalDigits(s: string): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function originalDigits($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func originalDigits(_ s: String) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun originalDigits(s: String): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String originalDigits(String s) {\n    \n  }\n}",
    "golang": "func originalDigits(s string) string {\n    \n}",
    "ruby": "# @param {String} s\n# @return {String}\ndef original_digits(s)\n    \nend",
    "scala": "object Solution {\n    def originalDigits(s: String): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn original_digits(s: String) -> String {\n        \n    }\n}",
    "racket": "(define/contract (original-digits s)\n  (-> string? string?)\n  )",
    "erlang": "-spec original_digits(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\noriginal_digits(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec original_digits(s :: String.t) :: String.t\n  def original_digits(s) do\n    \n  end\nend"
  }
}
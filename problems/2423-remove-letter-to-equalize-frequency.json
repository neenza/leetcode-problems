{
  "title": "Remove Letter To Equalize Frequency",
  "problem_id": "2532",
  "frontend_id": "2423",
  "difficulty": "Easy",
  "problem_slug": "remove-letter-to-equalize-frequency",
  "topics": [
    "Hash Table",
    "String",
    "Counting"
  ],
  "description": "You are given a 0-indexed string word, consisting of lowercase English letters. You need to select one index and remove the letter at that index from word so that the frequency of every letter present in word is equal.\nReturn true if it is possible to remove one letter so that the frequency of all letters in word are equal, and false otherwise.\nNote:\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: word = \"abcc\"\nOutput: true\nExplanation: Select index 3 and delete it: word becomes \"abc\" and each character has a frequency of 1.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: word = \"aazz\"\nOutput: false\nExplanation: We must delete a character, so either the frequency of \"a\" is 1 and the frequency of \"z\" is 2, or vice versa. It is impossible to make all present letters have equal frequency.",
      "images": []
    }
  ],
  "constraints": [
    "2 <= word.length <= 100",
    "word consists of lowercase English letters only."
  ],
  "follow_ups": [],
  "hints": [
    "Brute force all letters that could be removed.",
    "Use a frequency array of size 26."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool equalFrequency(string word) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean equalFrequency(String word) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def equalFrequency(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def equalFrequency(self, word: str) -> bool:\n        ",
    "c": "bool equalFrequency(char* word) {\n    \n}",
    "csharp": "public class Solution {\n    public bool EqualFrequency(string word) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} word\n * @return {boolean}\n */\nvar equalFrequency = function(word) {\n    \n};",
    "typescript": "function equalFrequency(word: string): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $word\n     * @return Boolean\n     */\n    function equalFrequency($word) {\n        \n    }\n}",
    "swift": "class Solution {\n    func equalFrequency(_ word: String) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun equalFrequency(word: String): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool equalFrequency(String word) {\n    \n  }\n}",
    "golang": "func equalFrequency(word string) bool {\n    \n}",
    "ruby": "# @param {String} word\n# @return {Boolean}\ndef equal_frequency(word)\n    \nend",
    "scala": "object Solution {\n    def equalFrequency(word: String): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn equal_frequency(word: String) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (equal-frequency word)\n  (-> string? boolean?)\n  )",
    "erlang": "-spec equal_frequency(Word :: unicode:unicode_binary()) -> boolean().\nequal_frequency(Word) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec equal_frequency(word :: String.t) :: boolean\n  def equal_frequency(word) do\n    \n  end\nend"
  }
}
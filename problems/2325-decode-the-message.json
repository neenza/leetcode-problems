{
  "title": "Decode the Message",
  "problem_id": "2406",
  "frontend_id": "2325",
  "difficulty": "Easy",
  "problem_slug": "decode-the-message",
  "topics": [
    "Hash Table",
    "String"
  ],
  "description": "You are given the strings key and message, which represent a cipher key and a secret message, respectively. The steps to decode message are as follows:\nReturn the decoded message.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: key = \"the quick brown fox jumps over the lazy dog\", message = \"vkbs bs t suepuv\"\nOutput: \"this is a secret\"\nExplanation: The diagram above shows the substitution table.\nIt is obtained by taking the first appearance of each letter in \"the quick brown fox jumps over the lazy dog\".",
      "images": [
        "https://assets.leetcode.com/uploads/2022/05/08/ex1new4.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: key = \"eljuxhpwnyrdgtqkviszcfmabo\", message = \"zwx hnfx lqantp mnoeius ycgk vcnjrdb\"\nOutput: \"the five boxing wizards jump quickly\"\nExplanation: The diagram above shows the substitution table.\nIt is obtained by taking the first appearance of each letter in \"eljuxhpwnyrdgtqkviszcfmabo\".",
      "images": [
        "https://assets.leetcode.com/uploads/2022/05/08/ex2new.jpg"
      ]
    }
  ],
  "constraints": [
    "26 <= key.length <= 2000",
    "key consists of lowercase English letters and ' '.",
    "key contains every letter in the English alphabet ('a' to 'z') at least once.",
    "1 <= message.length <= 2000",
    "message consists of lowercase English letters and ' '."
  ],
  "follow_ups": [],
  "hints": [
    "Iterate through the characters in the key to construct a mapping to the English alphabet.",
    "Make sure to check that the current character is not already in the mapping (only the first appearance is considered).",
    "Map the characters in the message according to the constructed mapping."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string decodeMessage(string key, string message) {\n        \n    }\n};",
    "java": "class Solution {\n    public String decodeMessage(String key, String message) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def decodeMessage(self, key, message):\n        \"\"\"\n        :type key: str\n        :type message: str\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def decodeMessage(self, key: str, message: str) -> str:\n        ",
    "c": "char* decodeMessage(char* key, char* message) {\n    \n}",
    "csharp": "public class Solution {\n    public string DecodeMessage(string key, string message) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} key\n * @param {string} message\n * @return {string}\n */\nvar decodeMessage = function(key, message) {\n    \n};",
    "typescript": "function decodeMessage(key: string, message: string): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $key\n     * @param String $message\n     * @return String\n     */\n    function decodeMessage($key, $message) {\n        \n    }\n}",
    "swift": "class Solution {\n    func decodeMessage(_ key: String, _ message: String) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun decodeMessage(key: String, message: String): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String decodeMessage(String key, String message) {\n    \n  }\n}",
    "golang": "func decodeMessage(key string, message string) string {\n    \n}",
    "ruby": "# @param {String} key\n# @param {String} message\n# @return {String}\ndef decode_message(key, message)\n    \nend",
    "scala": "object Solution {\n    def decodeMessage(key: String, message: String): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn decode_message(key: String, message: String) -> String {\n        \n    }\n}",
    "racket": "(define/contract (decode-message key message)\n  (-> string? string? string?)\n  )",
    "erlang": "-spec decode_message(Key :: unicode:unicode_binary(), Message :: unicode:unicode_binary()) -> unicode:unicode_binary().\ndecode_message(Key, Message) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec decode_message(key :: String.t, message :: String.t) :: String.t\n  def decode_message(key, message) do\n    \n  end\nend"
  }
}
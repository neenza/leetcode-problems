{
  "title": "Partition String ",
  "problem_id": "3905",
  "frontend_id": "3597",
  "difficulty": "Medium",
  "problem_slug": "partition-string",
  "topics": [
    "Hash Table",
    "String",
    "Trie",
    "Simulation"
  ],
  "description": "Given a string s, partition it into unique segments according to the following procedure:\nReturn an array of strings segments, where segments[i] is the ith segment created.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"abbccccd\"\nOutput: [\"a\",\"b\",\"bc\",\"c\",\"cc\",\"d\"]\nExplanation:\nHence, the final output is [\"a\", \"b\", \"bc\", \"c\", \"cc\", \"d\"] .",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"aaaa\"\nOutput: [\"a\",\"aa\"]\nExplanation:\nHence, the final output is [\"a\", \"aa\"] .",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 105",
    "s contains only lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [
    "Simulate as described"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<string> partitionString(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<String> partitionString(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def partitionString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def partitionString(self, s: str) -> List[str]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** partitionString(char* s, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<string> PartitionString(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {string[]}\n */\nvar partitionString = function(s) {\n    \n};",
    "typescript": "function partitionString(s: string): string[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String[]\n     */\n    function partitionString($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func partitionString(_ s: String) -> [String] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun partitionString(s: String): List<String> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<String> partitionString(String s) {\n    \n  }\n}",
    "golang": "func partitionString(s string) []string {\n    \n}",
    "ruby": "# @param {String} s\n# @return {String[]}\ndef partition_string(s)\n    \nend",
    "scala": "object Solution {\n    def partitionString(s: String): List[String] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn partition_string(s: String) -> Vec<String> {\n        \n    }\n}",
    "racket": "(define/contract (partition-string s)\n  (-> string? (listof string?))\n  )",
    "erlang": "-spec partition_string(S :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\npartition_string(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec partition_string(s :: String.t) :: [String.t]\n  def partition_string(s) do\n    \n  end\nend"
  }
}
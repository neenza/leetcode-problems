{
  "title": "Kth Smallest Instructions",
  "problem_id": "489",
  "frontend_id": "1643",
  "difficulty": "Hard",
  "problem_slug": "kth-smallest-instructions",
  "topics": [
    "Array",
    "Math",
    "Dynamic Programming",
    "Combinatorics"
  ],
  "description": "Bob is standing at cell (0, 0), and he wants to reach destination: (row, column). He can only travel right and down. You are going to help Bob by providing instructions for him to reach destination.\nThe instructions are represented as a string, where each character is either:\nMultiple instructions will lead Bob to destination. For example, if destination is (2, 3), both \"HHHVV\" and \"HVHVH\" are valid instructions.\nHowever, Bob is very picky. Bob has a lucky number k, and he wants the kth lexicographically smallest instructions that will lead him to destination. k is 1-indexed.\nGiven an integer array destination and an integer k, return the kth lexicographically smallest instructions that will take Bob to destination.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: destination = [2,3], k = 1\nOutput: \"HHHVV\"\nExplanation: All the instructions that reach (2, 3) in lexicographic order are as follows:\n[\"HHHVV\", \"HHVHV\", \"HHVVH\", \"HVHHV\", \"HVHVH\", \"HVVHH\", \"VHHHV\", \"VHHVH\", \"VHVHH\", \"VVHHH\"].",
      "images": [
        "https://assets.leetcode.com/uploads/2020/10/12/ex1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: destination = [2,3], k = 2\nOutput: \"HHVHV\"",
      "images": [
        "https://assets.leetcode.com/uploads/2020/10/12/ex2.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: destination = [2,3], k = 3\nOutput: \"HHVVH\"",
      "images": [
        "https://assets.leetcode.com/uploads/2020/10/12/ex3.png"
      ]
    }
  ],
  "constraints": [
    "destination.length == 2",
    "1 <= row, column <= 15",
    "1 <= k <= nCr(row + column, row), where nCr(a, b) denotes a choose b​​​​​."
  ],
  "follow_ups": [],
  "hints": [
    "There are nCr(row + column, row) possible instructions to reach (row, column).",
    "Try building the instructions one step at a time. How many instructions start with \"H\", and how does this compare with k?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string kthSmallestPath(vector<int>& destination, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public String kthSmallestPath(int[] destination, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def kthSmallestPath(self, destination, k):\n        \"\"\"\n        :type destination: List[int]\n        :type k: int\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def kthSmallestPath(self, destination: List[int], k: int) -> str:\n        ",
    "c": "char* kthSmallestPath(int* destination, int destinationSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public string KthSmallestPath(int[] destination, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} destination\n * @param {number} k\n * @return {string}\n */\nvar kthSmallestPath = function(destination, k) {\n    \n};",
    "typescript": "function kthSmallestPath(destination: number[], k: number): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $destination\n     * @param Integer $k\n     * @return String\n     */\n    function kthSmallestPath($destination, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func kthSmallestPath(_ destination: [Int], _ k: Int) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun kthSmallestPath(destination: IntArray, k: Int): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String kthSmallestPath(List<int> destination, int k) {\n    \n  }\n}",
    "golang": "func kthSmallestPath(destination []int, k int) string {\n    \n}",
    "ruby": "# @param {Integer[]} destination\n# @param {Integer} k\n# @return {String}\ndef kth_smallest_path(destination, k)\n    \nend",
    "scala": "object Solution {\n    def kthSmallestPath(destination: Array[Int], k: Int): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn kth_smallest_path(destination: Vec<i32>, k: i32) -> String {\n        \n    }\n}",
    "racket": "(define/contract (kth-smallest-path destination k)\n  (-> (listof exact-integer?) exact-integer? string?)\n  )",
    "erlang": "-spec kth_smallest_path(Destination :: [integer()], K :: integer()) -> unicode:unicode_binary().\nkth_smallest_path(Destination, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec kth_smallest_path(destination :: [integer], k :: integer) :: String.t\n  def kth_smallest_path(destination, k) do\n    \n  end\nend"
  }
}
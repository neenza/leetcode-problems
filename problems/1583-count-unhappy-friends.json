{
  "title": "Count Unhappy Friends",
  "problem_id": "1705",
  "frontend_id": "1583",
  "difficulty": "Medium",
  "problem_slug": "count-unhappy-friends",
  "topics": [
    "Array",
    "Simulation"
  ],
  "description": "You are given a list of preferences for n friends, where n is always even.\nFor each person i, preferences[i] contains a list of friends sorted in the order of preference. In other words, a friend earlier in the list is more preferred than a friend later in the list. Friends in each list are denoted by integers from 0 to n-1.\nAll the friends are divided into pairs. The pairings are given in a list pairs, where pairs[i] = [xi, yi] denotes xi is paired with yi and yi is paired with xi.\nHowever, this pairing may cause some of the friends to be unhappy. A friend x is unhappy if x is paired with y and there exists a friend u who is paired with v but:\nReturn the number of unhappy friends.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]\nOutput: 2\nExplanation:\nFriend 1 is unhappy because:\n- 1 is paired with 0 but prefers 3 over 0, and\n- 3 prefers 1 over 2.\nFriend 3 is unhappy because:\n- 3 is paired with 2 but prefers 1 over 2, and\n- 1 prefers 3 over 0.\nFriends 0 and 2 are happy.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 2, preferences = [[1], [0]], pairs = [[1, 0]]\nOutput: 0\nExplanation: Both friends 0 and 1 are happy.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]]\nOutput: 4",
      "images": []
    }
  ],
  "constraints": [
    "2 <= n <= 500",
    "n is even.",
    "preferences.length == n",
    "preferences[i].length == n - 1",
    "0 <= preferences[i][j] <= n - 1",
    "preferences[i] does not contain i.",
    "All values in preferences[i] are unique.",
    "pairs.length == n/2",
    "pairs[i].length == 2",
    "xi != yi",
    "0 <= xi, yi <= n - 1",
    "Each person is contained in exactly one pair."
  ],
  "follow_ups": [],
  "hints": [
    "Create a matrix “rank” where rank[i][j] holds how highly friend ‘i' views ‘j’. This allows for O(1) comparisons between people"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int unhappyFriends(int n, vector<vector<int>>& preferences, vector<vector<int>>& pairs) {\n        \n    }\n};",
    "java": "class Solution {\n    public int unhappyFriends(int n, int[][] preferences, int[][] pairs) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def unhappyFriends(self, n, preferences, pairs):\n        \"\"\"\n        :type n: int\n        :type preferences: List[List[int]]\n        :type pairs: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def unhappyFriends(self, n: int, preferences: List[List[int]], pairs: List[List[int]]) -> int:\n        ",
    "c": "int unhappyFriends(int n, int** preferences, int preferencesSize, int* preferencesColSize, int** pairs, int pairsSize, int* pairsColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int UnhappyFriends(int n, int[][] preferences, int[][] pairs) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number[][]} preferences\n * @param {number[][]} pairs\n * @return {number}\n */\nvar unhappyFriends = function(n, preferences, pairs) {\n    \n};",
    "typescript": "function unhappyFriends(n: number, preferences: number[][], pairs: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $preferences\n     * @param Integer[][] $pairs\n     * @return Integer\n     */\n    function unhappyFriends($n, $preferences, $pairs) {\n        \n    }\n}",
    "swift": "class Solution {\n    func unhappyFriends(_ n: Int, _ preferences: [[Int]], _ pairs: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun unhappyFriends(n: Int, preferences: Array<IntArray>, pairs: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int unhappyFriends(int n, List<List<int>> preferences, List<List<int>> pairs) {\n    \n  }\n}",
    "golang": "func unhappyFriends(n int, preferences [][]int, pairs [][]int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer[][]} preferences\n# @param {Integer[][]} pairs\n# @return {Integer}\ndef unhappy_friends(n, preferences, pairs)\n    \nend",
    "scala": "object Solution {\n    def unhappyFriends(n: Int, preferences: Array[Array[Int]], pairs: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn unhappy_friends(n: i32, preferences: Vec<Vec<i32>>, pairs: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (unhappy-friends n preferences pairs)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec unhappy_friends(N :: integer(), Preferences :: [[integer()]], Pairs :: [[integer()]]) -> integer().\nunhappy_friends(N, Preferences, Pairs) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec unhappy_friends(n :: integer, preferences :: [[integer]], pairs :: [[integer]]) :: integer\n  def unhappy_friends(n, preferences, pairs) do\n    \n  end\nend"
  }
}
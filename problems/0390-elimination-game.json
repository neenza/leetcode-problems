{
  "title": "Elimination Game",
  "problem_id": "390",
  "frontend_id": "390",
  "difficulty": "Medium",
  "problem_slug": "elimination-game",
  "topics": [
    "Math",
    "Recursion"
  ],
  "description": "You have a list arr of all integers in the range [1, n] sorted in a strictly increasing order. Apply the following algorithm on arr:\nGiven the integer n, return the last number that remains in arr.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 9\nOutput: 6\nExplanation:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\narr = [2, 4, 6, 8]\narr = [2, 6]\narr = [6]",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 1\nOutput: 1",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 109"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int lastRemaining(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int lastRemaining(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def lastRemaining(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def lastRemaining(self, n: int) -> int:\n        ",
    "c": "int lastRemaining(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int LastRemaining(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar lastRemaining = function(n) {\n    \n};",
    "typescript": "function lastRemaining(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function lastRemaining($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func lastRemaining(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun lastRemaining(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int lastRemaining(int n) {\n    \n  }\n}",
    "golang": "func lastRemaining(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef last_remaining(n)\n    \nend",
    "scala": "object Solution {\n    def lastRemaining(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn last_remaining(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (last-remaining n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec last_remaining(N :: integer()) -> integer().\nlast_remaining(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec last_remaining(n :: integer) :: integer\n  def last_remaining(n) do\n    \n  end\nend"
  }
}
{
  "title": "Minimum Number of Operations to Make Word K-Periodic",
  "problem_id": "3384",
  "frontend_id": "3137",
  "difficulty": "Medium",
  "problem_slug": "minimum-number-of-operations-to-make-word-k-periodic",
  "topics": [
    "Hash Table",
    "String",
    "Counting"
  ],
  "description": "You are given a string word of size n, and an integer k such that k divides n.\nIn one operation, you can pick any two indices i and j, that are divisible by k, then replace the substring of length k starting at i with the substring of length k starting at j. That is, replace the substring word[i..i + k - 1] with the substring word[j..j + k - 1].\nReturn the minimum number of operations required to make word k-periodic.\nWe say that word is k-periodic if there is some string s of length k such that word can be obtained by concatenating s an arbitrary number of times. For example, if word == “ababab”, then word is 2-periodic for s = \"ab\".\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: word = \"leetcodeleet\", k = 4\nOutput: 1\nExplanation:\nWe can obtain a 4-periodic string by picking i = 4 and j = 0. After this operation, word becomes equal to \"leetleetleet\".",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: word = \" leetcoleet \", k = 2\nOutput: 3\nExplanation:\nWe can obtain a 2-periodic string by applying the operations in the table below.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n == word.length <= 105",
    "1 <= k <= word.length",
    "k divides word.length.",
    "word consists only of lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [
    "Calculate the frequency of each substring of length <code>k</code> that starts at an index that is divisible by <code>k</code>.",
    "The period of the final string will be the substring with the highest frequency."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimumOperationsToMakeKPeriodic(string word, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimumOperationsToMakeKPeriodic(String word, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumOperationsToMakeKPeriodic(self, word, k):\n        \"\"\"\n        :type word: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumOperationsToMakeKPeriodic(self, word: str, k: int) -> int:\n        ",
    "c": "int minimumOperationsToMakeKPeriodic(char* word, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimumOperationsToMakeKPeriodic(string word, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} word\n * @param {number} k\n * @return {number}\n */\nvar minimumOperationsToMakeKPeriodic = function(word, k) {\n    \n};",
    "typescript": "function minimumOperationsToMakeKPeriodic(word: string, k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $word\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumOperationsToMakeKPeriodic($word, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumOperationsToMakeKPeriodic(_ word: String, _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumOperationsToMakeKPeriodic(word: String, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumOperationsToMakeKPeriodic(String word, int k) {\n    \n  }\n}",
    "golang": "func minimumOperationsToMakeKPeriodic(word string, k int) int {\n    \n}",
    "ruby": "# @param {String} word\n# @param {Integer} k\n# @return {Integer}\ndef minimum_operations_to_make_k_periodic(word, k)\n    \nend",
    "scala": "object Solution {\n    def minimumOperationsToMakeKPeriodic(word: String, k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_operations_to_make_k_periodic(word: String, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-operations-to-make-k-periodic word k)\n  (-> string? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec minimum_operations_to_make_k_periodic(Word :: unicode:unicode_binary(), K :: integer()) -> integer().\nminimum_operations_to_make_k_periodic(Word, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_operations_to_make_k_periodic(word :: String.t, k :: integer) :: integer\n  def minimum_operations_to_make_k_periodic(word, k) do\n    \n  end\nend"
  }
}
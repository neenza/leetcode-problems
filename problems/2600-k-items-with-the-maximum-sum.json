{
  "title": "K Items With the Maximum Sum",
  "problem_id": "2715",
  "frontend_id": "2600",
  "difficulty": "Easy",
  "problem_slug": "k-items-with-the-maximum-sum",
  "topics": [
    "Math",
    "Greedy"
  ],
  "description": "There is a bag that consists of items, each itemÂ has a number 1, 0, or -1 written on it.\nYou are given four non-negative integers numOnes, numZeros, numNegOnes, and k.\nThe bag initially contains:\nWe want to pick exactly k items among the available items. Return the maximum possible sum of numbers written on the items.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: numOnes = 3, numZeros = 2, numNegOnes = 0, k = 2\nOutput: 2\nExplanation: We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 2 items with 1 written on them and get a sum in a total of 2.\nIt can be proven that 2 is the maximum possible sum.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: numOnes = 3, numZeros = 2, numNegOnes = 0, k = 4\nOutput: 3\nExplanation: We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 3 items with 1 written on them, and 1 item with 0 written on it, and get a sum in a total of 3.\nIt can be proven that 3 is the maximum possible sum.",
      "images": []
    }
  ],
  "constraints": [
    "0 <= numOnes, numZeros, numNegOnes <= 50",
    "0 <= k <= numOnes + numZeros + numNegOnes"
  ],
  "follow_ups": [],
  "hints": [
    "It is always optimal to take items with the number 1 written on them as much as possible.",
    "If k > numOnes, after taking all items with the number 1, it is always optimal to take items with the number 0 written on them as much as possible.",
    "If k > numOnes + numZeroes we are forced to take k - numOnes - numZeroes -1s."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int kItemsWithMaximumSum(int numOnes, int numZeros, int numNegOnes, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int kItemsWithMaximumSum(int numOnes, int numZeros, int numNegOnes, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def kItemsWithMaximumSum(self, numOnes, numZeros, numNegOnes, k):\n        \"\"\"\n        :type numOnes: int\n        :type numZeros: int\n        :type numNegOnes: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def kItemsWithMaximumSum(self, numOnes: int, numZeros: int, numNegOnes: int, k: int) -> int:\n        ",
    "c": "int kItemsWithMaximumSum(int numOnes, int numZeros, int numNegOnes, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int KItemsWithMaximumSum(int numOnes, int numZeros, int numNegOnes, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} numOnes\n * @param {number} numZeros\n * @param {number} numNegOnes\n * @param {number} k\n * @return {number}\n */\nvar kItemsWithMaximumSum = function(numOnes, numZeros, numNegOnes, k) {\n    \n};",
    "typescript": "function kItemsWithMaximumSum(numOnes: number, numZeros: number, numNegOnes: number, k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $numOnes\n     * @param Integer $numZeros\n     * @param Integer $numNegOnes\n     * @param Integer $k\n     * @return Integer\n     */\n    function kItemsWithMaximumSum($numOnes, $numZeros, $numNegOnes, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func kItemsWithMaximumSum(_ numOnes: Int, _ numZeros: Int, _ numNegOnes: Int, _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun kItemsWithMaximumSum(numOnes: Int, numZeros: Int, numNegOnes: Int, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int kItemsWithMaximumSum(int numOnes, int numZeros, int numNegOnes, int k) {\n    \n  }\n}",
    "golang": "func kItemsWithMaximumSum(numOnes int, numZeros int, numNegOnes int, k int) int {\n    \n}",
    "ruby": "# @param {Integer} num_ones\n# @param {Integer} num_zeros\n# @param {Integer} num_neg_ones\n# @param {Integer} k\n# @return {Integer}\ndef k_items_with_maximum_sum(num_ones, num_zeros, num_neg_ones, k)\n    \nend",
    "scala": "object Solution {\n    def kItemsWithMaximumSum(numOnes: Int, numZeros: Int, numNegOnes: Int, k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn k_items_with_maximum_sum(num_ones: i32, num_zeros: i32, num_neg_ones: i32, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (k-items-with-maximum-sum numOnes numZeros numNegOnes k)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec k_items_with_maximum_sum(NumOnes :: integer(), NumZeros :: integer(), NumNegOnes :: integer(), K :: integer()) -> integer().\nk_items_with_maximum_sum(NumOnes, NumZeros, NumNegOnes, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec k_items_with_maximum_sum(num_ones :: integer, num_zeros :: integer, num_neg_ones :: integer, k :: integer) :: integer\n  def k_items_with_maximum_sum(num_ones, num_zeros, num_neg_ones, k) do\n    \n  end\nend"
  }
}
{
  "title": "Split Array into Fibonacci Sequence",
  "problem_id": "872",
  "frontend_id": "842",
  "difficulty": "Medium",
  "problem_slug": "split-array-into-fibonacci-sequence",
  "topics": [
    "String",
    "Backtracking"
  ],
  "description": "You are given a string of digits num, such as \"123456579\". We can split it into a Fibonacci-like sequence [123, 456, 579].\nFormally, a Fibonacci-like sequence is a list f of non-negative integers such that:\nNote that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.\nReturn any Fibonacci-like sequence split from num, or return [] if it cannot be done.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: num = \"1101111\"\nOutput: [11,0,11,11]\nExplanation: The output [110, 1, 111] would also be accepted.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: num = \"112358130\"\nOutput: []\nExplanation: The task is impossible.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: num = \"0123\"\nOutput: []\nExplanation: Leading zeroes are not allowed, so \"01\", \"2\", \"3\" is not valid.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= num.length <= 200",
    "num contains only digits."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> splitIntoFibonacci(string num) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<Integer> splitIntoFibonacci(String num) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def splitIntoFibonacci(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def splitIntoFibonacci(self, num: str) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* splitIntoFibonacci(char* num, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<int> SplitIntoFibonacci(string num) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} num\n * @return {number[]}\n */\nvar splitIntoFibonacci = function(num) {\n    \n};",
    "typescript": "function splitIntoFibonacci(num: string): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $num\n     * @return Integer[]\n     */\n    function splitIntoFibonacci($num) {\n        \n    }\n}",
    "swift": "class Solution {\n    func splitIntoFibonacci(_ num: String) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun splitIntoFibonacci(num: String): List<Int> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> splitIntoFibonacci(String num) {\n    \n  }\n}",
    "golang": "func splitIntoFibonacci(num string) []int {\n    \n}",
    "ruby": "# @param {String} num\n# @return {Integer[]}\ndef split_into_fibonacci(num)\n    \nend",
    "scala": "object Solution {\n    def splitIntoFibonacci(num: String): List[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn split_into_fibonacci(num: String) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (split-into-fibonacci num)\n  (-> string? (listof exact-integer?))\n  )",
    "erlang": "-spec split_into_fibonacci(Num :: unicode:unicode_binary()) -> [integer()].\nsplit_into_fibonacci(Num) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec split_into_fibonacci(num :: String.t) :: [integer]\n  def split_into_fibonacci(num) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n---\n### Approach #1: Brute Force [Accepted]\n\n**Intuition**\n\nThe first two elements of the array uniquely determine the rest of the sequence.\n\n**Algorithm**\n\nFor each of the first two elements, assuming they have no leading zero, let's iterate through the rest of the string.  At each stage, we expect a number less than or equal to `2^31 - 1` that starts with the sum of the two previous numbers.**Complexity Analysis**\n\n* Time Complexity:  $$O(N^2)$$, where $$N$$ is the length of `S`, and with the requirement that the values of the answer are $$O(1)$$ in length.\n\n* Space Complexity:  $$O(N)$$."
}
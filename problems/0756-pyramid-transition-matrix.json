{
  "title": "Pyramid Transition Matrix",
  "problem_id": "757",
  "frontend_id": "756",
  "difficulty": "Medium",
  "problem_slug": "pyramid-transition-matrix",
  "topics": [
    "Bit Manipulation",
    "Depth-First Search",
    "Breadth-First Search"
  ],
  "description": "You are stacking blocks to form a pyramid. Each block has a color, which is represented by a single letter. Each row of blocks contains one less block than the row beneath it and is centered on top.\nTo make the pyramid aesthetically pleasing, there are only specific triangular patterns that are allowed. A triangular pattern consists of a single block stacked on top of two blocks. The patterns are given as a list of three-letter strings allowed, where the first two characters of a pattern represent the left and right bottom blocks respectively, and the third character is the top block.\nYou start with a bottom row of blocks bottom, given as a single string, that you must use as the base of the pyramid.\nGiven bottom and allowed, return true if you can build the pyramid all the way to the top such that every triangular pattern in the pyramid is in allowed, or false otherwise.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: bottom = \"BCD\", allowed = [\"BCC\",\"CDE\",\"CEA\",\"FFF\"]\nOutput: true\nExplanation: The allowed triangular patterns are shown on the right.\nStarting from the bottom (level 3), we can build \"CE\" on level 2 and then build \"A\" on level 1.\nThere are three triangular patterns in the pyramid, which are \"BCC\", \"CDE\", and \"CEA\". All are allowed.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/08/26/pyramid1-grid.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: bottom = \"AAAA\", allowed = [\"AAB\",\"AAC\",\"BCD\",\"BBE\",\"DEF\"]\nOutput: false\nExplanation: The allowed triangular patterns are shown on the right.\nStarting from the bottom (level 4), there are multiple ways to build level 3, but trying all the possibilites, you will get always stuck before building level 1.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/08/26/pyramid2-grid.jpg"
      ]
    }
  ],
  "constraints": [
    "2 <= bottom.length <= 6",
    "0 <= allowed.length <= 216",
    "allowed[i].length == 3",
    "The letters in all input strings are from the set {'A', 'B', 'C', 'D', 'E', 'F'}.",
    "All the values of allowed are unique."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool pyramidTransition(string bottom, vector<string>& allowed) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean pyramidTransition(String bottom, List<String> allowed) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def pyramidTransition(self, bottom, allowed):\n        \"\"\"\n        :type bottom: str\n        :type allowed: List[str]\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def pyramidTransition(self, bottom: str, allowed: List[str]) -> bool:\n        ",
    "c": "bool pyramidTransition(char* bottom, char** allowed, int allowedSize) {\n    \n}",
    "csharp": "public class Solution {\n    public bool PyramidTransition(string bottom, IList<string> allowed) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} bottom\n * @param {string[]} allowed\n * @return {boolean}\n */\nvar pyramidTransition = function(bottom, allowed) {\n    \n};",
    "typescript": "function pyramidTransition(bottom: string, allowed: string[]): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $bottom\n     * @param String[] $allowed\n     * @return Boolean\n     */\n    function pyramidTransition($bottom, $allowed) {\n        \n    }\n}",
    "swift": "class Solution {\n    func pyramidTransition(_ bottom: String, _ allowed: [String]) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun pyramidTransition(bottom: String, allowed: List<String>): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool pyramidTransition(String bottom, List<String> allowed) {\n    \n  }\n}",
    "golang": "func pyramidTransition(bottom string, allowed []string) bool {\n    \n}",
    "ruby": "# @param {String} bottom\n# @param {String[]} allowed\n# @return {Boolean}\ndef pyramid_transition(bottom, allowed)\n    \nend",
    "scala": "object Solution {\n    def pyramidTransition(bottom: String, allowed: List[String]): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn pyramid_transition(bottom: String, allowed: Vec<String>) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (pyramid-transition bottom allowed)\n  (-> string? (listof string?) boolean?)\n  )",
    "erlang": "-spec pyramid_transition(Bottom :: unicode:unicode_binary(), Allowed :: [unicode:unicode_binary()]) -> boolean().\npyramid_transition(Bottom, Allowed) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec pyramid_transition(bottom :: String.t, allowed :: [String.t]) :: boolean\n  def pyramid_transition(bottom, allowed) do\n    \n  end\nend"
  }
}
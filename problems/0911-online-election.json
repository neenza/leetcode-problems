{
  "title": "Online Election",
  "problem_id": "947",
  "frontend_id": "911",
  "difficulty": "Medium",
  "problem_slug": "online-election",
  "topics": [
    "Array",
    "Hash Table",
    "Binary Search",
    "Design"
  ],
  "description": "You are given two integer arrays persons and times. In an election, the ith vote was cast for persons[i] at time times[i].\nFor each query at a time t, find the person that was leading the election at time t. Votes cast at time t will count towards our query. In the case of a tie, the most recent vote (among tied candidates) wins.\nImplement the TopVotedCandidate class:\nExample 1:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input\n[\"TopVotedCandidate\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\"]\n[[[0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]], [3], [12], [25], [15], [24], [8]]\nOutput\n[null, 0, 1, 1, 0, 0, 1]\n\nExplanation\nTopVotedCandidate topVotedCandidate = new TopVotedCandidate([0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]);\ntopVotedCandidate.q(3); // return 0, At time 3, the votes are [0], and 0 is leading.\ntopVotedCandidate.q(12); // return 1, At time 12, the votes are [0,1,1], and 1 is leading.\ntopVotedCandidate.q(25); // return 1, At time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.)\ntopVotedCandidate.q(15); // return 0\ntopVotedCandidate.q(24); // return 0\ntopVotedCandidate.q(8); // return 1",
      "images": []
    }
  ],
  "constraints": [
    "1 <= persons.length <= 5000",
    "times.length == persons.length",
    "0 <= persons[i] < persons.length",
    "0 <= times[i] <= 109",
    "times is sorted in a strictly increasing order.",
    "times[0] <= t <= 109",
    "At most 104 calls will be made to q."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class TopVotedCandidate {\npublic:\n    TopVotedCandidate(vector<int>& persons, vector<int>& times) {\n        \n    }\n    \n    int q(int t) {\n        \n    }\n};\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * TopVotedCandidate* obj = new TopVotedCandidate(persons, times);\n * int param_1 = obj->q(t);\n */",
    "java": "class TopVotedCandidate {\n\n    public TopVotedCandidate(int[] persons, int[] times) {\n        \n    }\n    \n    public int q(int t) {\n        \n    }\n}\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * TopVotedCandidate obj = new TopVotedCandidate(persons, times);\n * int param_1 = obj.q(t);\n */",
    "python": "class TopVotedCandidate(object):\n\n    def __init__(self, persons, times):\n        \"\"\"\n        :type persons: List[int]\n        :type times: List[int]\n        \"\"\"\n        \n\n    def q(self, t):\n        \"\"\"\n        :type t: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your TopVotedCandidate object will be instantiated and called as such:\n# obj = TopVotedCandidate(persons, times)\n# param_1 = obj.q(t)",
    "python3": "class TopVotedCandidate:\n\n    def __init__(self, persons: List[int], times: List[int]):\n        \n\n    def q(self, t: int) -> int:\n        \n\n\n# Your TopVotedCandidate object will be instantiated and called as such:\n# obj = TopVotedCandidate(persons, times)\n# param_1 = obj.q(t)",
    "c": "\n\n\ntypedef struct {\n    \n} TopVotedCandidate;\n\n\nTopVotedCandidate* topVotedCandidateCreate(int* persons, int personsSize, int* times, int timesSize) {\n    \n}\n\nint topVotedCandidateQ(TopVotedCandidate* obj, int t) {\n    \n}\n\nvoid topVotedCandidateFree(TopVotedCandidate* obj) {\n    \n}\n\n/**\n * Your TopVotedCandidate struct will be instantiated and called as such:\n * TopVotedCandidate* obj = topVotedCandidateCreate(persons, personsSize, times, timesSize);\n * int param_1 = topVotedCandidateQ(obj, t);\n \n * topVotedCandidateFree(obj);\n*/",
    "csharp": "public class TopVotedCandidate {\n\n    public TopVotedCandidate(int[] persons, int[] times) {\n        \n    }\n    \n    public int Q(int t) {\n        \n    }\n}\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * TopVotedCandidate obj = new TopVotedCandidate(persons, times);\n * int param_1 = obj.Q(t);\n */",
    "javascript": "/**\n * @param {number[]} persons\n * @param {number[]} times\n */\nvar TopVotedCandidate = function(persons, times) {\n    \n};\n\n/** \n * @param {number} t\n * @return {number}\n */\nTopVotedCandidate.prototype.q = function(t) {\n    \n};\n\n/** \n * Your TopVotedCandidate object will be instantiated and called as such:\n * var obj = new TopVotedCandidate(persons, times)\n * var param_1 = obj.q(t)\n */",
    "typescript": "class TopVotedCandidate {\n    constructor(persons: number[], times: number[]) {\n        \n    }\n\n    q(t: number): number {\n        \n    }\n}\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * var obj = new TopVotedCandidate(persons, times)\n * var param_1 = obj.q(t)\n */",
    "php": "class TopVotedCandidate {\n    /**\n     * @param Integer[] $persons\n     * @param Integer[] $times\n     */\n    function __construct($persons, $times) {\n        \n    }\n  \n    /**\n     * @param Integer $t\n     * @return Integer\n     */\n    function q($t) {\n        \n    }\n}\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * $obj = TopVotedCandidate($persons, $times);\n * $ret_1 = $obj->q($t);\n */",
    "swift": "\nclass TopVotedCandidate {\n\n    init(_ persons: [Int], _ times: [Int]) {\n        \n    }\n    \n    func q(_ t: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * let obj = TopVotedCandidate(persons, times)\n * let ret_1: Int = obj.q(t)\n */",
    "kotlin": "class TopVotedCandidate(persons: IntArray, times: IntArray) {\n\n    fun q(t: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * var obj = TopVotedCandidate(persons, times)\n * var param_1 = obj.q(t)\n */",
    "dart": "class TopVotedCandidate {\n\n  TopVotedCandidate(List<int> persons, List<int> times) {\n    \n  }\n  \n  int q(int t) {\n    \n  }\n}\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * TopVotedCandidate obj = TopVotedCandidate(persons, times);\n * int param1 = obj.q(t);\n */",
    "golang": "type TopVotedCandidate struct {\n    \n}\n\n\nfunc Constructor(persons []int, times []int) TopVotedCandidate {\n    \n}\n\n\nfunc (this *TopVotedCandidate) Q(t int) int {\n    \n}\n\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * obj := Constructor(persons, times);\n * param_1 := obj.Q(t);\n */",
    "ruby": "class TopVotedCandidate\n\n=begin\n    :type persons: Integer[]\n    :type times: Integer[]\n=end\n    def initialize(persons, times)\n        \n    end\n\n\n=begin\n    :type t: Integer\n    :rtype: Integer\n=end\n    def q(t)\n        \n    end\n\n\nend\n\n# Your TopVotedCandidate object will be instantiated and called as such:\n# obj = TopVotedCandidate.new(persons, times)\n# param_1 = obj.q(t)",
    "scala": "class TopVotedCandidate(_persons: Array[Int], _times: Array[Int]) {\n\n    def q(t: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * val obj = new TopVotedCandidate(persons, times)\n * val param_1 = obj.q(t)\n */",
    "rust": "struct TopVotedCandidate {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl TopVotedCandidate {\n\n    fn new(persons: Vec<i32>, times: Vec<i32>) -> Self {\n        \n    }\n    \n    fn q(&self, t: i32) -> i32 {\n        \n    }\n}\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * let obj = TopVotedCandidate::new(persons, times);\n * let ret_1: i32 = obj.q(t);\n */",
    "racket": "(define top-voted-candidate%\n  (class object%\n    (super-new)\n    \n    ; persons : (listof exact-integer?)\n    ; times : (listof exact-integer?)\n    (init-field\n      persons\n      times)\n    \n    ; q : exact-integer? -> exact-integer?\n    (define/public (q t)\n      )))\n\n;; Your top-voted-candidate% object will be instantiated and called as such:\n;; (define obj (new top-voted-candidate% [persons persons] [times times]))\n;; (define param_1 (send obj q t))",
    "erlang": "-spec top_voted_candidate_init_(Persons :: [integer()], Times :: [integer()]) -> any().\ntop_voted_candidate_init_(Persons, Times) ->\n  .\n\n-spec top_voted_candidate_q(T :: integer()) -> integer().\ntop_voted_candidate_q(T) ->\n  .\n\n\n%% Your functions will be called as such:\n%% top_voted_candidate_init_(Persons, Times),\n%% Param_1 = top_voted_candidate_q(T),\n\n%% top_voted_candidate_init_ will be called before every test case, in which you can do some necessary initializations.",
    "elixir": "defmodule TopVotedCandidate do\n  @spec init_(persons :: [integer], times :: [integer]) :: any\n  def init_(persons, times) do\n    \n  end\n\n  @spec q(t :: integer) :: integer\n  def q(t) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# TopVotedCandidate.init_(persons, times)\n# param_1 = TopVotedCandidate.q(t)\n\n# TopVotedCandidate.init_ will be called before every test case, in which you can do some necessary initializations."
  }
}
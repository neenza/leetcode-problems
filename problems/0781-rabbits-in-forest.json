{
  "title": "Rabbits in Forest",
  "problem_id": "797",
  "frontend_id": "781",
  "difficulty": "Medium",
  "problem_slug": "rabbits-in-forest",
  "topics": [
    "Array",
    "Hash Table",
    "Math",
    "Greedy"
  ],
  "description": "There is a forest with an unknown number of rabbits. We asked n rabbits \"How many rabbits have the same color as you?\" and collected the answers in an integer array answers where answers[i] is the answer of the ith rabbit.\nGiven the array answers, return the minimum number of rabbits that could be in the forest.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: answers = [1,1,2]\nOutput: 5\nExplanation:\nThe two rabbits that answered \"1\" could both be the same color, say red.\nThe rabbit that answered \"2\" can't be red or the answers would be inconsistent.\nSay the rabbit that answered \"2\" was blue.\nThen there should be 2 other blue rabbits in the forest that didn't answer into the array.\nThe smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn't.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: answers = [10,10,10]\nOutput: 11",
      "images": []
    }
  ],
  "constraints": [
    "1 <= answers.length <= 1000",
    "0 <= answers[i] < 1000"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int numRabbits(vector<int>& answers) {\n        \n    }\n};",
    "java": "class Solution {\n    public int numRabbits(int[] answers) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numRabbits(self, answers):\n        \"\"\"\n        :type answers: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numRabbits(self, answers: List[int]) -> int:\n        ",
    "c": "int numRabbits(int* answers, int answersSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int NumRabbits(int[] answers) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} answers\n * @return {number}\n */\nvar numRabbits = function(answers) {\n    \n};",
    "typescript": "function numRabbits(answers: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $answers\n     * @return Integer\n     */\n    function numRabbits($answers) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numRabbits(_ answers: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numRabbits(answers: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int numRabbits(List<int> answers) {\n    \n  }\n}",
    "golang": "func numRabbits(answers []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} answers\n# @return {Integer}\ndef num_rabbits(answers)\n    \nend",
    "scala": "object Solution {\n    def numRabbits(answers: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn num_rabbits(answers: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (num-rabbits answers)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec num_rabbits(Answers :: [integer()]) -> integer().\nnum_rabbits(Answers) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec num_rabbits(answers :: [integer]) :: integer\n  def num_rabbits(answers) do\n    \n  end\nend"
  }
}
{
  "title": "Trapping Rain Water",
  "problem_id": "42",
  "frontend_id": "42",
  "difficulty": "Hard",
  "problem_slug": "trapping-rain-water",
  "topics": [
    "Array",
    "Two Pointers",
    "Dynamic Programming",
    "Stack",
    "Monotonic Stack"
  ],
  "description": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.",
      "images": [
        "https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: height = [4,2,0,3,2,5]\nOutput: 9",
      "images": [
        "https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png"
      ]
    }
  ],
  "constraints": [
    "n == height.length",
    "1 <= n <= 2 * 104",
    "0 <= height[i] <= 105"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int trap(vector<int>& height) {\n        \n    }\n};",
    "java": "class Solution {\n    public int trap(int[] height) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def trap(self, height: List[int]) -> int:\n        ",
    "c": "int trap(int* height, int heightSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int Trap(int[] height) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} height\n * @return {number}\n */\nvar trap = function(height) {\n    \n};",
    "typescript": "function trap(height: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $height\n     * @return Integer\n     */\n    function trap($height) {\n        \n    }\n}",
    "swift": "class Solution {\n    func trap(_ height: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun trap(height: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int trap(List<int> height) {\n    \n  }\n}",
    "golang": "func trap(height []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} height\n# @return {Integer}\ndef trap(height)\n    \nend",
    "scala": "object Solution {\n    def trap(height: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn trap(height: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (trap height)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec trap(Height :: [integer()]) -> integer().\ntrap(Height) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec trap(height :: [integer]) :: integer\n  def trap(height) do\n    \n  end\nend"
  }
}
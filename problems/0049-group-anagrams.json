{
  "title": "Group Anagrams",
  "problem_id": "49",
  "frontend_id": "49",
  "difficulty": "Medium",
  "problem_slug": "group-anagrams",
  "topics": [
    "Array",
    "Hash Table",
    "String",
    "Sorting"
  ],
  "description": "Given an array of strings strs, group the anagrams together. You can return the answer in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\nOutput: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\nExplanation:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: strs = [\"\"]\nOutput: [[\"\"]]",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: strs = [\"a\"]\nOutput: [[\"a\"]]",
      "images": []
    }
  ],
  "constraints": [
    "1 <= strs.length <= 104",
    "0 <= strs[i].length <= 100",
    "strs[i] consists of lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def groupAnagrams(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        ",
    "c": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar*** groupAnagrams(char** strs, int strsSize, int* returnSize, int** returnColumnSizes) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<IList<string>> GroupAnagrams(string[] strs) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string[]} strs\n * @return {string[][]}\n */\nvar groupAnagrams = function(strs) {\n    \n};",
    "typescript": "function groupAnagrams(strs: string[]): string[][] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String[] $strs\n     * @return String[][]\n     */\n    function groupAnagrams($strs) {\n        \n    }\n}",
    "swift": "class Solution {\n    func groupAnagrams(_ strs: [String]) -> [[String]] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun groupAnagrams(strs: Array<String>): List<List<String>> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<List<String>> groupAnagrams(List<String> strs) {\n    \n  }\n}",
    "golang": "func groupAnagrams(strs []string) [][]string {\n    \n}",
    "ruby": "# @param {String[]} strs\n# @return {String[][]}\ndef group_anagrams(strs)\n    \nend",
    "scala": "object Solution {\n    def groupAnagrams(strs: Array[String]): List[List[String]] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn group_anagrams(strs: Vec<String>) -> Vec<Vec<String>> {\n        \n    }\n}",
    "racket": "(define/contract (group-anagrams strs)\n  (-> (listof string?) (listof (listof string?)))\n  )",
    "erlang": "-spec group_anagrams(Strs :: [unicode:unicode_binary()]) -> [[unicode:unicode_binary()]].\ngroup_anagrams(Strs) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec group_anagrams(strs :: [String.t]) :: [[String.t]]\n  def group_anagrams(strs) do\n    \n  end\nend"
  }
}
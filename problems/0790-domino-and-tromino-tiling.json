{
  "title": "Domino and Tromino Tiling",
  "problem_id": "806",
  "frontend_id": "790",
  "difficulty": "Medium",
  "problem_slug": "domino-and-tromino-tiling",
  "topics": [
    "Dynamic Programming"
  ],
  "description": "You have two types of tiles: a 2 x 1 domino shape and a tromino shape. You may rotate these shapes.\nGiven an integer n, return the number of ways to tile an 2 x n board. Since the answer may be very large, return it modulo 109 + 7.\nIn a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 3\nOutput: 5\nExplanation: The five different ways are shown above.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/07/15/lc-domino1.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 1\nOutput: 1",
      "images": [
        "https://assets.leetcode.com/uploads/2021/07/15/lc-domino1.jpg"
      ]
    }
  ],
  "constraints": [
    "1 <= n <= 1000"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int numTilings(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int numTilings(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numTilings(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numTilings(self, n: int) -> int:\n        ",
    "c": "int numTilings(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int NumTilings(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar numTilings = function(n) {\n    \n};",
    "typescript": "function numTilings(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function numTilings($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numTilings(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numTilings(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int numTilings(int n) {\n    \n  }\n}",
    "golang": "func numTilings(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef num_tilings(n)\n    \nend",
    "scala": "object Solution {\n    def numTilings(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn num_tilings(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (num-tilings n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec num_tilings(N :: integer()) -> integer().\nnum_tilings(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec num_tilings(n :: integer) :: integer\n  def num_tilings(n) do\n    \n  end\nend"
  }
}
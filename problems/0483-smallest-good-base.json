{
  "title": "Smallest Good Base",
  "problem_id": "483",
  "frontend_id": "483",
  "difficulty": "Hard",
  "problem_slug": "smallest-good-base",
  "topics": [
    "Math",
    "Binary Search"
  ],
  "description": "Given an integer n represented as a string, return the smallest good base of n.\nWe call k >= 2 a good base of n, if all digits of n base k are 1's.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = \"13\"\nOutput: \"3\"\nExplanation: 13 base 3 is 111.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = \"4681\"\nOutput: \"8\"\nExplanation: 4681 base 8 is 11111.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = \"1000000000000000000\"\nOutput: \"999999999999999999\"\nExplanation: 1000000000000000000 base 999999999999999999 is 11.",
      "images": []
    }
  ],
  "constraints": [
    "n is an integer in the range [3, 1018].",
    "n does not contain any leading zeros."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string smallestGoodBase(string n) {\n        \n    }\n};",
    "java": "class Solution {\n    public String smallestGoodBase(String n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def smallestGoodBase(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def smallestGoodBase(self, n: str) -> str:\n        ",
    "c": "char* smallestGoodBase(char* n) {\n    \n}",
    "csharp": "public class Solution {\n    public string SmallestGoodBase(string n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} n\n * @return {string}\n */\nvar smallestGoodBase = function(n) {\n    \n};",
    "typescript": "function smallestGoodBase(n: string): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $n\n     * @return String\n     */\n    function smallestGoodBase($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func smallestGoodBase(_ n: String) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun smallestGoodBase(n: String): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String smallestGoodBase(String n) {\n    \n  }\n}",
    "golang": "func smallestGoodBase(n string) string {\n    \n}",
    "ruby": "# @param {String} n\n# @return {String}\ndef smallest_good_base(n)\n    \nend",
    "scala": "object Solution {\n    def smallestGoodBase(n: String): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn smallest_good_base(n: String) -> String {\n        \n    }\n}",
    "racket": "(define/contract (smallest-good-base n)\n  (-> string? string?)\n  )",
    "erlang": "-spec smallest_good_base(N :: unicode:unicode_binary()) -> unicode:unicode_binary().\nsmallest_good_base(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec smallest_good_base(n :: String.t) :: String.t\n  def smallest_good_base(n) do\n    \n  end\nend"
  }
}
{
  "title": "Find Followers Count",
  "problem_id": "1877",
  "frontend_id": "1729",
  "difficulty": "Easy",
  "problem_slug": "find-followers-count",
  "topics": [
    "Database"
  ],
  "description": "Table: Followers\nWrite a solution that will, for each user, return the number of followers.\nReturn the result table ordered by user_id in ascending order.\nTheÂ result format is in the following example.\nExample 1:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| user_id     | int  |\n| follower_id | int  |\n+-------------+------+\n(user_id, follower_id) is the primary key (combination of columns with unique values) for this table.\nThis table contains the IDs of a user and a follower in a social media app where the follower follows the user.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: \nFollowers table:\n+---------+-------------+\n| user_id | follower_id |\n+---------+-------------+\n| 0       | 1           |\n| 1       | 0           |\n| 2       | 0           |\n| 2       | 1           |\n+---------+-------------+\nOutput: \n+---------+----------------+\n| user_id | followers_count|\n+---------+----------------+\n| 0       | 1              |\n| 1       | 1              |\n| 2       | 2              |\n+---------+----------------+\nExplanation: \nThe followers of 0 are {1}\nThe followers of 1 are {0}\nThe followers of 2 are {0,1}",
      "images": []
    }
  ],
  "constraints": [],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "mysql": "# Write your MySQL query statement below\n",
    "mssql": "/* Write your T-SQL query statement below */\n",
    "oraclesql": "/* Write your PL/SQL query statement below */\n",
    "pythondata": "import pandas as pd\n\ndef count_followers(followers: pd.DataFrame) -> pd.DataFrame:\n    ",
    "postgresql": "-- Write your PostgreSQL query statement below\n"
  },
  "solution": "[TOC]\n\n## Solution\n\n--- \n\n### Overview\n\nWe want to find the followers for each user in this problem.\n> (user_id, follower_id) is the primary key for this table.\n\nThis implies that there will be unique combinations of `user_id` and `follower_id` in the table. For example, you cannot have the following table:\n```\n+---------+-------------+\n| user_id | follower_id |\n+---------+-------------+\n|    1    |      2      |\n|    1    |      2      |\n+---------+-------------+\n```\nThe same combination of `user_id` and `follower_id` cannot occur multiple times.\n\nIn the table below, user `1` has three followers.\n\n```\n+---------+-------------+\n| user_id | follower_id |\n+---------+-------------+\n|    1    |      2      |\n|    1    |      3      |\n|    1    |      4      |\n|    3    |      2      |\n|    3    |      5      |\n+---------+-------------+\n```\n\nNext, we need to ensure that our output users are ordered by `user_id` in ascending order.\n\nFor the example shared above the output should look like:\n\n```\n+---------+-----------------+\n| user_id | followers_count |\n+---------+-----------------+\n|    1    |        3        |\n|    3    |        2        |\n+---------+-----------------+\n```\n---\n\n### Approach: `COUNT` and `GROUP BY`\n\n#### Intuition\n\nWe essentially need to count the number of times a particular `user_id` occurs in the `user_id` column and this count will be equal to the follower count. This is because each `(user_id, follower_id)` combination is unique. We can try to use the `COUNT` function to count the occurences of a single `user_id`. Remember, `COUNT` is an aggregate function, you will have to tell it which field to aggregate by. This can be done using the `GROUP BY` clause. Since we want to print the `user_id` and its count in the table, we can do `GROUP BY user_id`.\n\nLastly, we can use the `ORDER BY` clause to order the result by `user_id`.\n\n\n#### Algorithm\n\n1. `SELECT user_id, COUNT(user_id) AS followers_count`: This part specifies the columns to be selected in the result set. Here, we want to retrieve the `user_id` and the count of followers for each user. The `COUNT(user_id)` function is used to count the number of rows in the followers table, which represents the number of followers for a particular user. The result of this count is aliased as `followers_count` to match the output requirements of the problem.\n\n2. `FROM followers`: This part specifies the table from which the data is being retrieved.\n\n3. `GROUP BY user_id`: This part groups the rows based on the `user_id` column. By using `GROUP BY`, the query will calculate the count of followers for each unique `user_id`. The result set will have one row for each unique `user_id`.\n\n4. `ORDER BY user_id ASC`: This part orders the result set based on the `user_id` column in ascending order. `ASC` stands for ascending. Please note, the default ordering done by the `ORDER BY` clause is ascending. So removing `ASC` from the query will also work.\n\n#### Implementation\n\n##### SQL\n\n```sql\nSELECT user_id, COUNT(user_id) AS followers_count\nFROM followers\nGROUP BY user_id\nORDER BY user_id ASC;\n```"
}
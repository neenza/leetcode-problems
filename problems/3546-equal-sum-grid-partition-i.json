{
  "title": "Equal Sum Grid Partition I",
  "problem_id": "3849",
  "frontend_id": "3546",
  "difficulty": "Medium",
  "problem_slug": "equal-sum-grid-partition-i",
  "topics": [
    "Array",
    "Matrix",
    "Enumeration",
    "Prefix Sum"
  ],
  "description": "You are given an m x n matrix grid of positive integers. Your task is to determine if it is possible to make either one horizontal or one vertical cut on the grid such that:\nReturn true if such a partition exists; otherwise return false.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: grid = [[1,4],[2,3]]\nOutput: true\nExplanation:\n\nA horizontal cut between row 0 and row 1 results in two non-empty sections, each with a sum of 5. Thus, the answer is true .",
      "images": [
        "https://assets.leetcode.com/uploads/2025/03/30/lc.png",
        "https://assets.leetcode.com/uploads/2025/03/30/lc.jpeg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: grid = [[1,3],[2,4]]\nOutput: false\nExplanation:\nNo horizontal or vertical cut results in two non-empty sections with equal sums. Thus, the answer is false .",
      "images": []
    }
  ],
  "constraints": [
    "1 <= m == grid.length <= 105",
    "1 <= n == grid[i].length <= 105",
    "2 <= m * n <= 105",
    "1 <= grid[i][j] <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "There are two types of cuts: a <code>horizontal</code> cut or a <code>vertical</code> cut.",
    "For a <code>horizontal</code> cut at row <code>r</code> (0 <= r <m - 1), split <code>grid</code> into rows 0...r vs. r+1...m-1 and compare their sums.",
    "For a <code>vertical</code> cut at column <code>c</code> (0 <= c < n - 1), split <code>grid</code> into columns 0...c vs. c+1...n-1 and compare their sums.",
    "Bruteâ€‘force all possible <code>r</code> and <code>c</code> cuts; if any yields equal section sums, return <code>true</code>."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool canPartitionGrid(vector<vector<int>>& grid) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean canPartitionGrid(int[][] grid) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def canPartitionGrid(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def canPartitionGrid(self, grid: List[List[int]]) -> bool:\n        ",
    "c": "bool canPartitionGrid(int** grid, int gridSize, int* gridColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public bool CanPartitionGrid(int[][] grid) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} grid\n * @return {boolean}\n */\nvar canPartitionGrid = function(grid) {\n    \n};",
    "typescript": "function canPartitionGrid(grid: number[][]): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Boolean\n     */\n    function canPartitionGrid($grid) {\n        \n    }\n}",
    "swift": "class Solution {\n    func canPartitionGrid(_ grid: [[Int]]) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun canPartitionGrid(grid: Array<IntArray>): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool canPartitionGrid(List<List<int>> grid) {\n    \n  }\n}",
    "golang": "func canPartitionGrid(grid [][]int) bool {\n    \n}",
    "ruby": "# @param {Integer[][]} grid\n# @return {Boolean}\ndef can_partition_grid(grid)\n    \nend",
    "scala": "object Solution {\n    def canPartitionGrid(grid: Array[Array[Int]]): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn can_partition_grid(grid: Vec<Vec<i32>>) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (can-partition-grid grid)\n  (-> (listof (listof exact-integer?)) boolean?)\n  )",
    "erlang": "-spec can_partition_grid(Grid :: [[integer()]]) -> boolean().\ncan_partition_grid(Grid) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec can_partition_grid(grid :: [[integer]]) :: boolean\n  def can_partition_grid(grid) do\n    \n  end\nend"
  }
}
{
  "title": "RLE Iterator",
  "problem_id": "936",
  "frontend_id": "900",
  "difficulty": "Medium",
  "problem_slug": "rle-iterator",
  "topics": [
    "Array",
    "Design",
    "Counting",
    "Iterator"
  ],
  "description": "We can use run-length encoding (i.e., RLE) to encode a sequence of integers. In a run-length encoded array of even length encoding (0-indexed), for all even i, encoding[i] tells us the number of times that the non-negative integer value encoding[i + 1] is repeated in the sequence.\nGiven a run-length encoded array, design an iterator that iterates through it.\nImplement the RLEIterator class:\nExample 1:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input\n[\"RLEIterator\", \"next\", \"next\", \"next\", \"next\"]\n[[[3, 8, 0, 9, 2, 5]], [2], [1], [1], [2]]\nOutput\n[null, 8, 8, 5, -1]\n\nExplanation\nRLEIterator rLEIterator = new RLEIterator([3, 8, 0, 9, 2, 5]); // This maps to the sequence [8,8,8,5,5].\nrLEIterator.next(2); // exhausts 2 terms of the sequence, returning 8. The remaining sequence is now [8, 5, 5].\nrLEIterator.next(1); // exhausts 1 term of the sequence, returning 8. The remaining sequence is now [5, 5].\nrLEIterator.next(1); // exhausts 1 term of the sequence, returning 5. The remaining sequence is now [5].\nrLEIterator.next(2); // exhausts 2 terms, returning -1. This is because the first term exhausted was 5,\nbut the second term did not exist. Since the last term exhausted does not exist, we return -1.",
      "images": []
    }
  ],
  "constraints": [
    "2 <= encoding.length <= 1000",
    "encoding.length is even.",
    "0 <= encoding[i] <= 109",
    "1 <= n <= 109",
    "At most 1000 calls will be made to next."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class RLEIterator {\npublic:\n    RLEIterator(vector<int>& encoding) {\n        \n    }\n    \n    int next(int n) {\n        \n    }\n};\n\n/**\n * Your RLEIterator object will be instantiated and called as such:\n * RLEIterator* obj = new RLEIterator(encoding);\n * int param_1 = obj->next(n);\n */",
    "java": "class RLEIterator {\n\n    public RLEIterator(int[] encoding) {\n        \n    }\n    \n    public int next(int n) {\n        \n    }\n}\n\n/**\n * Your RLEIterator object will be instantiated and called as such:\n * RLEIterator obj = new RLEIterator(encoding);\n * int param_1 = obj.next(n);\n */",
    "python": "class RLEIterator(object):\n\n    def __init__(self, encoding):\n        \"\"\"\n        :type encoding: List[int]\n        \"\"\"\n        \n\n    def next(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your RLEIterator object will be instantiated and called as such:\n# obj = RLEIterator(encoding)\n# param_1 = obj.next(n)",
    "python3": "class RLEIterator:\n\n    def __init__(self, encoding: List[int]):\n        \n\n    def next(self, n: int) -> int:\n        \n\n\n# Your RLEIterator object will be instantiated and called as such:\n# obj = RLEIterator(encoding)\n# param_1 = obj.next(n)",
    "c": "\n\n\ntypedef struct {\n    \n} RLEIterator;\n\n\nRLEIterator* rLEIteratorCreate(int* encoding, int encodingSize) {\n    \n}\n\nint rLEIteratorNext(RLEIterator* obj, int n) {\n    \n}\n\nvoid rLEIteratorFree(RLEIterator* obj) {\n    \n}\n\n/**\n * Your RLEIterator struct will be instantiated and called as such:\n * RLEIterator* obj = rLEIteratorCreate(encoding, encodingSize);\n * int param_1 = rLEIteratorNext(obj, n);\n \n * rLEIteratorFree(obj);\n*/",
    "csharp": "public class RLEIterator {\n\n    public RLEIterator(int[] encoding) {\n        \n    }\n    \n    public int Next(int n) {\n        \n    }\n}\n\n/**\n * Your RLEIterator object will be instantiated and called as such:\n * RLEIterator obj = new RLEIterator(encoding);\n * int param_1 = obj.Next(n);\n */",
    "javascript": "/**\n * @param {number[]} encoding\n */\nvar RLEIterator = function(encoding) {\n    \n};\n\n/** \n * @param {number} n\n * @return {number}\n */\nRLEIterator.prototype.next = function(n) {\n    \n};\n\n/** \n * Your RLEIterator object will be instantiated and called as such:\n * var obj = new RLEIterator(encoding)\n * var param_1 = obj.next(n)\n */",
    "typescript": "class RLEIterator {\n    constructor(encoding: number[]) {\n        \n    }\n\n    next(n: number): number {\n        \n    }\n}\n\n/**\n * Your RLEIterator object will be instantiated and called as such:\n * var obj = new RLEIterator(encoding)\n * var param_1 = obj.next(n)\n */",
    "php": "class RLEIterator {\n    /**\n     * @param Integer[] $encoding\n     */\n    function __construct($encoding) {\n        \n    }\n  \n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function next($n) {\n        \n    }\n}\n\n/**\n * Your RLEIterator object will be instantiated and called as such:\n * $obj = RLEIterator($encoding);\n * $ret_1 = $obj->next($n);\n */",
    "swift": "\nclass RLEIterator {\n\n    init(_ encoding: [Int]) {\n        \n    }\n    \n    func next(_ n: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your RLEIterator object will be instantiated and called as such:\n * let obj = RLEIterator(encoding)\n * let ret_1: Int = obj.next(n)\n */",
    "kotlin": "class RLEIterator(encoding: IntArray) {\n\n    fun next(n: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your RLEIterator object will be instantiated and called as such:\n * var obj = RLEIterator(encoding)\n * var param_1 = obj.next(n)\n */",
    "dart": "class RLEIterator {\n\n  RLEIterator(List<int> encoding) {\n    \n  }\n  \n  int next(int n) {\n    \n  }\n}\n\n/**\n * Your RLEIterator object will be instantiated and called as such:\n * RLEIterator obj = RLEIterator(encoding);\n * int param1 = obj.next(n);\n */",
    "golang": "type RLEIterator struct {\n    \n}\n\n\nfunc Constructor(encoding []int) RLEIterator {\n    \n}\n\n\nfunc (this *RLEIterator) Next(n int) int {\n    \n}\n\n\n/**\n * Your RLEIterator object will be instantiated and called as such:\n * obj := Constructor(encoding);\n * param_1 := obj.Next(n);\n */",
    "ruby": "class RLEIterator\n\n=begin\n    :type encoding: Integer[]\n=end\n    def initialize(encoding)\n        \n    end\n\n\n=begin\n    :type n: Integer\n    :rtype: Integer\n=end\n    def next(n)\n        \n    end\n\n\nend\n\n# Your RLEIterator object will be instantiated and called as such:\n# obj = RLEIterator.new(encoding)\n# param_1 = obj.next(n)",
    "scala": "class RLEIterator(_encoding: Array[Int]) {\n\n    def next(n: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your RLEIterator object will be instantiated and called as such:\n * val obj = new RLEIterator(encoding)\n * val param_1 = obj.next(n)\n */",
    "rust": "struct RLEIterator {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl RLEIterator {\n\n    fn new(encoding: Vec<i32>) -> Self {\n        \n    }\n    \n    fn next(&self, n: i32) -> i32 {\n        \n    }\n}\n\n/**\n * Your RLEIterator object will be instantiated and called as such:\n * let obj = RLEIterator::new(encoding);\n * let ret_1: i32 = obj.next(n);\n */",
    "racket": "(define rle-iterator%\n  (class object%\n    (super-new)\n    \n    ; encoding : (listof exact-integer?)\n    (init-field\n      encoding)\n    \n    ; next : exact-integer? -> exact-integer?\n    (define/public (next n)\n      )))\n\n;; Your rle-iterator% object will be instantiated and called as such:\n;; (define obj (new rle-iterator% [encoding encoding]))\n;; (define param_1 (send obj next n))",
    "erlang": "-spec rle_iterator_init_(Encoding :: [integer()]) -> any().\nrle_iterator_init_(Encoding) ->\n  .\n\n-spec rle_iterator_next(N :: integer()) -> integer().\nrle_iterator_next(N) ->\n  .\n\n\n%% Your functions will be called as such:\n%% rle_iterator_init_(Encoding),\n%% Param_1 = rle_iterator_next(N),\n\n%% rle_iterator_init_ will be called before every test case, in which you can do some necessary initializations.",
    "elixir": "defmodule RLEIterator do\n  @spec init_(encoding :: [integer]) :: any\n  def init_(encoding) do\n    \n  end\n\n  @spec next(n :: integer) :: integer\n  def next(n) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# RLEIterator.init_(encoding)\n# param_1 = RLEIterator.next(n)\n\n# RLEIterator.init_ will be called before every test case, in which you can do some necessary initializations."
  }
}
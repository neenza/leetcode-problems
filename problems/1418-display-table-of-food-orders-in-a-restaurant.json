{
  "title": "Display Table of Food Orders in a Restaurant",
  "problem_id": "1533",
  "frontend_id": "1418",
  "difficulty": "Medium",
  "problem_slug": "display-table-of-food-orders-in-a-restaurant",
  "topics": [
    "Array",
    "Hash Table",
    "String",
    "Sorting",
    "Ordered Set"
  ],
  "description": "Given the array orders, which represents the orders that customers have done in a restaurant. More specifically orders[i]=[customerNamei,tableNumberi,foodItemi] where customerNamei is the name of the customer, tableNumberi is the table customer sit at, and foodItemi is the item customer orders.\nReturn the restaurant's “display table”. The “display table” is a table whose row entries denote how many of each food item each table ordered. The first column is the table number and the remaining columns correspond to each food item in alphabetical order. The first row should be a header whose first column is “Table”, followed by the names of the food items. Note that the customer names are not part of the table. Additionally, the rows should be sorted in numerically increasing order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: orders = [[\"David\",\"3\",\"Ceviche\"],[\"Corina\",\"10\",\"Beef Burrito\"],[\"David\",\"3\",\"Fried Chicken\"],[\"Carla\",\"5\",\"Water\"],[\"Carla\",\"5\",\"Ceviche\"],[\"Rous\",\"3\",\"Ceviche\"]]\r\nOutput: [[\"Table\",\"Beef Burrito\",\"Ceviche\",\"Fried Chicken\",\"Water\"],[\"3\",\"0\",\"2\",\"1\",\"0\"],[\"5\",\"0\",\"1\",\"0\",\"1\"],[\"10\",\"1\",\"0\",\"0\",\"0\"]] \r\nExplanation:\r\nThe displaying table looks like:\r\nTable,Beef Burrito,Ceviche,Fried Chicken,Water\r\n3    ,0           ,2      ,1            ,0\r\n5    ,0           ,1      ,0            ,1\r\n10   ,1           ,0      ,0            ,0\r\nFor the table 3: David orders \"Ceviche\" and \"Fried Chicken\", and Rous orders \"Ceviche\".\r\nFor the table 5: Carla orders \"Water\" and \"Ceviche\".\r\nFor the table 10: Corina orders \"Beef Burrito\".",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: orders = [[\"James\",\"12\",\"Fried Chicken\"],[\"Ratesh\",\"12\",\"Fried Chicken\"],[\"Amadeus\",\"12\",\"Fried Chicken\"],[\"Adam\",\"1\",\"Canadian Waffles\"],[\"Brianna\",\"1\",\"Canadian Waffles\"]]\r\nOutput: [[\"Table\",\"Canadian Waffles\",\"Fried Chicken\"],[\"1\",\"2\",\"0\"],[\"12\",\"0\",\"3\"]] \r\nExplanation: \r\nFor the table 1: Adam and Brianna order \"Canadian Waffles\".\r\nFor the table 12: James, Ratesh and Amadeus order \"Fried Chicken\".",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: orders = [[\"Laura\",\"2\",\"Bean Burrito\"],[\"Jhon\",\"2\",\"Beef Burrito\"],[\"Melissa\",\"2\",\"Soda\"]]\r\nOutput: [[\"Table\",\"Bean Burrito\",\"Beef Burrito\",\"Soda\"],[\"2\",\"1\",\"1\",\"1\"]]",
      "images": []
    }
  ],
  "constraints": [
    "1 <= orders.length <= 5 * 10^4",
    "orders[i].length == 3",
    "1 <= customerNamei.length, foodItemi.length <= 20",
    "customerNamei and foodItemi consist of lowercase and uppercase English letters and the space character.",
    "tableNumberi is a valid integer between 1 and 500."
  ],
  "follow_ups": [],
  "hints": [
    "Keep the frequency of all pairs (tableNumber, foodItem) using a hashmap.",
    "Sort rows by tableNumber and columns by foodItem, then process the resulted table."
  ],
  "code_snippets": {
    "cpp": "class Solution {\r\npublic:\r\n    vector<vector<string>> displayTable(vector<vector<string>>& orders) {\r\n        \r\n    }\r\n};",
    "java": "class Solution {\r\n    public List<List<String>> displayTable(List<List<String>> orders) {\r\n        \r\n    }\r\n}",
    "python": "class Solution(object):\r\n    def displayTable(self, orders):\r\n        \"\"\"\r\n        :type orders: List[List[str]]\r\n        :rtype: List[List[str]]\r\n        \"\"\"",
    "python3": "class Solution:\r\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:",
    "c": "/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *returnColumnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nchar *** displayTable(char *** orders, int ordersSize, int* ordersColSize, int* returnSize, int** returnColumnSizes){\r\n\r\n}",
    "csharp": "public class Solution {\r\n    public IList<IList<string>> DisplayTable(IList<IList<string>> orders) {\r\n        \r\n    }\r\n}",
    "javascript": "/**\r\n * @param {string[][]} orders\r\n * @return {string[][]}\r\n */\r\nvar displayTable = function(orders) {\r\n    \r\n};",
    "typescript": "function displayTable(orders: string[][]): string[][] {\r\n\r\n};",
    "php": "class Solution {\r\n\r\n    /**\r\n     * @param String[][] $orders\r\n     * @return String[][]\r\n     */\r\n    function displayTable($orders) {\r\n        \r\n    }\r\n}",
    "swift": "class Solution {\r\n    func displayTable(_ orders: [[String]]) -> [[String]] {\r\n        \r\n    }\r\n}",
    "kotlin": "class Solution {\r\n    fun displayTable(orders: List<List<String>>): List<List<String>> {\r\n        \r\n    }\r\n}",
    "golang": "func displayTable(orders [][]string) [][]string {\r\n    \r\n}",
    "ruby": "# @param {String[][]} orders\r\n# @return {String[][]}\r\ndef display_table(orders)\r\n    \r\nend",
    "scala": "object Solution {\r\n    def displayTable(orders: List[List[String]]): List[List[String]] = {\r\n        \r\n    }\r\n}",
    "rust": "impl Solution {\r\n    pub fn display_table(orders: Vec<Vec<String>>) -> Vec<Vec<String>> {\r\n        \r\n    }\r\n}"
  }
}
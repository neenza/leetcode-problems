{
  "title": "K Inverse Pairs Array",
  "problem_id": "629",
  "frontend_id": "629",
  "difficulty": "Hard",
  "problem_slug": "k-inverse-pairs-array",
  "topics": [
    "Dynamic Programming"
  ],
  "description": "For an integer array nums, an inverse pair is a pair of integers [i, j] where 0 <= i < j < nums.length and nums[i] > nums[j].\nGiven two integers n and k, return the number of different arrays consisting of numbers from 1 to n such that there are exactly k inverse pairs. Since the answer can be huge, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 3, k = 0\nOutput: 1\nExplanation: Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pairs.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 3, k = 1\nOutput: 2\nExplanation: The array [1,3,2] and [2,1,3] have exactly 1 inverse pair.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 1000",
    "0 <= k <= 1000"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int kInversePairs(int n, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int kInversePairs(int n, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def kInversePairs(self, n: int, k: int) -> int:\n        ",
    "c": "int kInversePairs(int n, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int KInversePairs(int n, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar kInversePairs = function(n, k) {\n    \n};",
    "typescript": "function kInversePairs(n: number, k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer\n     */\n    function kInversePairs($n, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func kInversePairs(_ n: Int, _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun kInversePairs(n: Int, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int kInversePairs(int n, int k) {\n    \n  }\n}",
    "golang": "func kInversePairs(n int, k int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef k_inverse_pairs(n, k)\n    \nend",
    "scala": "object Solution {\n    def kInversePairs(n: Int, k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn k_inverse_pairs(n: i32, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (k-inverse-pairs n k)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec k_inverse_pairs(N :: integer(), K :: integer()) -> integer().\nk_inverse_pairs(N, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec k_inverse_pairs(n :: integer, k :: integer) :: integer\n  def k_inverse_pairs(n, k) do\n    \n  end\nend"
  }
}
{
  "title": "Alert Using Same Key-Card Three or More Times in a One Hour Period",
  "problem_id": "1709",
  "frontend_id": "1604",
  "difficulty": "Medium",
  "problem_slug": "alert-using-same-key-card-three-or-more-times-in-a-one-hour-period",
  "topics": [
    "Array",
    "Hash Table",
    "String",
    "Sorting"
  ],
  "description": "LeetCode company workers use key-cards to unlock office doors. Each time a worker uses their key-card, the security system saves the worker's name and the time when it was used. The system emits an alert if any worker uses the key-card three or more times in a one-hour period.\nYou are given a list of strings keyName and keyTime where [keyName[i], keyTime[i]] corresponds to a person's name and the time when their key-card was used in a single day.\nAccess times are given in the 24-hour time format \"HH:MM\", such as \"23:51\" and \"09:49\".\nReturn a list of unique worker names who received an alert for frequent keycard use. Sort the names in ascending order alphabetically.\nNotice that \"10:00\" - \"11:00\" is considered to be within a one-hour period, while \"22:51\" - \"23:52\" is not considered to be within a one-hour period.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: keyName = [\"daniel\",\"daniel\",\"daniel\",\"luis\",\"luis\",\"luis\",\"luis\"], keyTime = [\"10:00\",\"10:40\",\"11:00\",\"09:00\",\"11:00\",\"13:00\",\"15:00\"]\nOutput: [\"daniel\"]\nExplanation: \"daniel\" used the keycard 3 times in a one-hour period (\"10:00\",\"10:40\", \"11:00\").",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: keyName = [\"alice\",\"alice\",\"alice\",\"bob\",\"bob\",\"bob\",\"bob\"], keyTime = [\"12:01\",\"12:00\",\"18:00\",\"21:00\",\"21:20\",\"21:30\",\"23:00\"]\nOutput: [\"bob\"]\nExplanation: \"bob\" used the keycard 3 times in a one-hour period (\"21:00\",\"21:20\", \"21:30\").",
      "images": []
    }
  ],
  "constraints": [
    "1 <= keyName.length, keyTime.length <= 105",
    "keyName.length == keyTime.length",
    "keyTime[i] is in the format \"HH:MM\".",
    "[keyName[i], keyTime[i]] is unique.",
    "1 <= keyName[i].length <= 10",
    "keyName[i] contains only lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [
    "Group the times by the name of the card user, then sort each group"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<string> alertNames(vector<string>& keyName, vector<string>& keyTime) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<String> alertNames(String[] keyName, String[] keyTime) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def alertNames(self, keyName, keyTime):\n        \"\"\"\n        :type keyName: List[str]\n        :type keyTime: List[str]\n        :rtype: List[str]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def alertNames(self, keyName: List[str], keyTime: List[str]) -> List[str]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** alertNames(char** keyName, int keyNameSize, char** keyTime, int keyTimeSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<string> AlertNames(string[] keyName, string[] keyTime) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string[]} keyName\n * @param {string[]} keyTime\n * @return {string[]}\n */\nvar alertNames = function(keyName, keyTime) {\n    \n};",
    "typescript": "function alertNames(keyName: string[], keyTime: string[]): string[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String[] $keyName\n     * @param String[] $keyTime\n     * @return String[]\n     */\n    function alertNames($keyName, $keyTime) {\n        \n    }\n}",
    "swift": "class Solution {\n    func alertNames(_ keyName: [String], _ keyTime: [String]) -> [String] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun alertNames(keyName: Array<String>, keyTime: Array<String>): List<String> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<String> alertNames(List<String> keyName, List<String> keyTime) {\n    \n  }\n}",
    "golang": "func alertNames(keyName []string, keyTime []string) []string {\n    \n}",
    "ruby": "# @param {String[]} key_name\n# @param {String[]} key_time\n# @return {String[]}\ndef alert_names(key_name, key_time)\n    \nend",
    "scala": "object Solution {\n    def alertNames(keyName: Array[String], keyTime: Array[String]): List[String] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn alert_names(key_name: Vec<String>, key_time: Vec<String>) -> Vec<String> {\n        \n    }\n}",
    "racket": "(define/contract (alert-names keyName keyTime)\n  (-> (listof string?) (listof string?) (listof string?))\n  )",
    "erlang": "-spec alert_names(KeyName :: [unicode:unicode_binary()], KeyTime :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\nalert_names(KeyName, KeyTime) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec alert_names(key_name :: [String.t], key_time :: [String.t]) :: [String.t]\n  def alert_names(key_name, key_time) do\n    \n  end\nend"
  }
}
{
  "title": "Check if Array is Good",
  "problem_id": "2892",
  "frontend_id": "2784",
  "difficulty": "Easy",
  "problem_slug": "check-if-array-is-good",
  "topics": [
    "Array",
    "Hash Table",
    "Sorting"
  ],
  "description": "You are given an integer array nums. We consider an array good if it is a permutation of an array base[n].\nbase[n] = [1, 2, ..., n - 1, n, n] (in other words, it is an array of length n + 1 which contains 1 to n - 1 exactly once, plus two occurrences of n). For example, base[1] = [1, 1] and base[3] = [1, 2, 3, 3].\nReturn true if the given array is good, otherwise return false.\nNote: A permutation of integers represents an arrangement of these numbers.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [2, 1, 3]\nOutput: false\nExplanation: Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. However, base[3] has four elements but array nums has three. Therefore, it can not be a permutation of base[3] = [1, 2, 3, 3]. So the answer is false.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1, 3, 3, 2]\nOutput: true\nExplanation: Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. It can be seen that nums is a permutation of base[3] = [1, 2, 3, 3] (by swapping the second and fourth elements in nums, we reach base[3]). Therefore, the answer is true.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1, 1]\nOutput: true\nExplanation: Since the maximum element of the array is 1, the only candidate n for which this array could be a permutation of base[n], is n = 1. It can be seen that nums is a permutation of base[1] = [1, 1]. Therefore, the answer is true.",
      "images": []
    },
    {
      "example_num": 4,
      "example_text": "Input: nums = [3, 4, 4, 1, 2, 1]\nOutput: false\nExplanation: Since the maximum element of the array is 4, the only candidate n for which this array could be a permutation of base[n], is n = 4. However, base[4] has five elements but array nums has six. Therefore, it can not be a permutation of base[4] = [1, 2, 3, 4, 4]. So the answer is false.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 100",
    "1 <= num[i] <= 200"
  ],
  "follow_ups": [],
  "hints": [
    "Find the maximum element of the array."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool isGood(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean isGood(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def isGood(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def isGood(self, nums: List[int]) -> bool:\n        ",
    "c": "bool isGood(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public bool IsGood(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar isGood = function(nums) {\n    \n};",
    "typescript": "function isGood(nums: number[]): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function isGood($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func isGood(_ nums: [Int]) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun isGood(nums: IntArray): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool isGood(List<int> nums) {\n    \n  }\n}",
    "golang": "func isGood(nums []int) bool {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Boolean}\ndef is_good(nums)\n    \nend",
    "scala": "object Solution {\n    def isGood(nums: Array[Int]): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn is_good(nums: Vec<i32>) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (is-good nums)\n  (-> (listof exact-integer?) boolean?)\n  )",
    "erlang": "-spec is_good(Nums :: [integer()]) -> boolean().\nis_good(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec is_good(nums :: [integer]) :: boolean\n  def is_good(nums) do\n    \n  end\nend"
  }
}
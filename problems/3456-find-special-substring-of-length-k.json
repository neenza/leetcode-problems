{
  "title": "Find Special Substring of Length K",
  "problem_id": "3709",
  "frontend_id": "3456",
  "difficulty": "Easy",
  "problem_slug": "find-special-substring-of-length-k",
  "topics": [
    "String"
  ],
  "description": "You are given a string s and an integer k.\nDetermine if there exists a substring of length exactly k in s that satisfies the following conditions:\nReturn true if such a substring exists. Otherwise, return false.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"aaabaaa\", k = 3\nOutput: true\nExplanation:\nThe substring s[4..6] == \"aaa\" satisfies the conditions.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"abc\", k = 2\nOutput: false\nExplanation:\nThere is no substring of length 2 that consists of one distinct character and satisfies the conditions.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= k <= s.length <= 100",
    "s consists of lowercase English letters only."
  ],
  "follow_ups": [],
  "hints": [
    "Return <code>true</code> if there is a sequence of consecutive characters of length <code>k</code>"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool hasSpecialSubstring(string s, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean hasSpecialSubstring(String s, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def hasSpecialSubstring(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def hasSpecialSubstring(self, s: str, k: int) -> bool:\n        ",
    "c": "bool hasSpecialSubstring(char* s, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public bool HasSpecialSubstring(string s, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @param {number} k\n * @return {boolean}\n */\nvar hasSpecialSubstring = function(s, k) {\n    \n};",
    "typescript": "function hasSpecialSubstring(s: string, k: number): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Boolean\n     */\n    function hasSpecialSubstring($s, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func hasSpecialSubstring(_ s: String, _ k: Int) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun hasSpecialSubstring(s: String, k: Int): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool hasSpecialSubstring(String s, int k) {\n    \n  }\n}",
    "golang": "func hasSpecialSubstring(s string, k int) bool {\n    \n}",
    "ruby": "# @param {String} s\n# @param {Integer} k\n# @return {Boolean}\ndef has_special_substring(s, k)\n    \nend",
    "scala": "object Solution {\n    def hasSpecialSubstring(s: String, k: Int): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn has_special_substring(s: String, k: i32) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (has-special-substring s k)\n  (-> string? exact-integer? boolean?)\n  )",
    "erlang": "-spec has_special_substring(S :: unicode:unicode_binary(), K :: integer()) -> boolean().\nhas_special_substring(S, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec has_special_substring(s :: String.t, k :: integer) :: boolean\n  def has_special_substring(s, k) do\n    \n  end\nend"
  }
}
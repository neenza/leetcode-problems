{
  "title": "Find the Sum of the Power of All Subsequences",
  "problem_id": "3345",
  "frontend_id": "3082",
  "difficulty": "Hard",
  "problem_slug": "find-the-sum-of-the-power-of-all-subsequences",
  "topics": [
    "Array",
    "Dynamic Programming"
  ],
  "description": "You are given an integer array nums of length n and a positive integer k.\nThe power of an array of integers is defined as the number of subsequences with their sum equal to k.\nReturn the sum of power of all subsequences of nums.\nSince the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,3], k = 3\nOutput: 6\nExplanation:\nThere are 5 subsequences of nums with non-zero power:\nHence the answer is 2 + 1 + 1 + 1 + 1 = 6 .",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [2,3,3], k = 5\nOutput: 4\nExplanation:\nThere are 3 subsequences of nums with non-zero power:\nHence the answer is 2 + 1 + 1 = 4 .",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,2,3], k = 7\nOutput: 0\nExplanation: There exists no subsequence with sum 7 . Hence all subsequences of nums have power = 0 .",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 100",
    "1 <= nums[i] <= 104",
    "1 <= k <= 100"
  ],
  "follow_ups": [],
  "hints": [
    "If there is a subsequence of length <code>j</code> with the sum of elements <code>k</code>, it contributes <code>2<sup>n - j</sup></code> to the answer.",
    "Let <code>dp[i][j]</code> represent the number of subsequences in the subarray <code>nums[0..i]</code> which have a sum of <code>j</code>.",
    "We can find the <code>dp[i][k]</code> for all <code>0 <= i <= n-1</code> and multiply them with <code>2<sup>n - j</sup></code> to get final answer."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int sumOfPower(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int sumOfPower(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def sumOfPower(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def sumOfPower(self, nums: List[int], k: int) -> int:\n        ",
    "c": "int sumOfPower(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int SumOfPower(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar sumOfPower = function(nums, k) {\n    \n};",
    "typescript": "function sumOfPower(nums: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function sumOfPower($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func sumOfPower(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun sumOfPower(nums: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int sumOfPower(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func sumOfPower(nums []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef sum_of_power(nums, k)\n    \nend",
    "scala": "object Solution {\n    def sumOfPower(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn sum_of_power(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (sum-of-power nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec sum_of_power(Nums :: [integer()], K :: integer()) -> integer().\nsum_of_power(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec sum_of_power(nums :: [integer], k :: integer) :: integer\n  def sum_of_power(nums, k) do\n    \n  end\nend"
  }
}
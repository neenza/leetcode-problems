{
  "title": "Decrypt String from Alphabet to Integer Mapping",
  "problem_id": "1434",
  "frontend_id": "1309",
  "difficulty": "Easy",
  "problem_slug": "decrypt-string-from-alphabet-to-integer-mapping",
  "topics": [
    "String"
  ],
  "description": "You are given a string s formed by digits and '#'. We want to map s to English lowercase characters as follows:\nReturn the string formed after mapping.\nThe test cases are generated so that a unique mapping will always exist.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"10#11#12\"\nOutput: \"jkab\"\nExplanation: \"j\" -> \"10#\" , \"k\" -> \"11#\" , \"a\" -> \"1\" , \"b\" -> \"2\".",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"1326#\"\nOutput: \"acz\"",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 1000",
    "s consists of digits and the '#' letter.",
    "s will be a valid string such that mapping is always possible."
  ],
  "follow_ups": [],
  "hints": [
    "Scan from right to left, in each step of the scanning check whether there is a trailing \"#\" 2 indexes away."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string freqAlphabets(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public String freqAlphabets(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def freqAlphabets(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def freqAlphabets(self, s: str) -> str:\n        ",
    "c": "char* freqAlphabets(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public string FreqAlphabets(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {string}\n */\nvar freqAlphabets = function(s) {\n    \n};",
    "typescript": "function freqAlphabets(s: string): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function freqAlphabets($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func freqAlphabets(_ s: String) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun freqAlphabets(s: String): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String freqAlphabets(String s) {\n    \n  }\n}",
    "golang": "func freqAlphabets(s string) string {\n    \n}",
    "ruby": "# @param {String} s\n# @return {String}\ndef freq_alphabets(s)\n    \nend",
    "scala": "object Solution {\n    def freqAlphabets(s: String): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn freq_alphabets(s: String) -> String {\n        \n    }\n}",
    "racket": "(define/contract (freq-alphabets s)\n  (-> string? string?)\n  )",
    "erlang": "-spec freq_alphabets(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nfreq_alphabets(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec freq_alphabets(s :: String.t) :: String.t\n  def freq_alphabets(s) do\n    \n  end\nend"
  }
}
{
  "title": "Rename Columns",
  "problem_id": "3068",
  "frontend_id": "2885",
  "difficulty": "Easy",
  "problem_slug": "rename-columns",
  "topics": [],
  "description": "Write a solution to rename the columns as follows:\nThe result format is in the following example.",
  "examples": [
    {
      "example_num": 1,
      "example_text": "DataFrame students\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| id          | int    |\n| first       | object |\n| last        | object |\n| age         | int    |\n+-------------+--------+",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Example 1:\nInput:\n+----+---------+----------+-----+\n| id | first   | last     | age |\n+----+---------+----------+-----+\n| 1  | Mason   | King     | 6   |\n| 2  | Ava     | Wright   | 7   |\n| 3  | Taylor  | Hall     | 16  |\n| 4  | Georgia | Thompson | 18  |\n| 5  | Thomas  | Moore    | 10  |\n+----+---------+----------+-----+\nOutput:\n+------------+------------+-----------+--------------+\n| student_id | first_name | last_name | age_in_years |\n+------------+------------+-----------+--------------+\n| 1          | Mason      | King      | 6            |\n| 2          | Ava        | Wright    | 7            |\n| 3          | Taylor     | Hall      | 16           |\n| 4          | Georgia    | Thompson  | 18           |\n| 5          | Thomas     | Moore     | 10           |\n+------------+------------+-----------+--------------+\nExplanation: \nThe column names are changed accordingly.",
      "images": []
    }
  ],
  "constraints": [],
  "follow_ups": [],
  "hints": [
    "Consider using a build-in function in pandas library with a dictionary to rename the columns as specified."
  ],
  "code_snippets": {
    "pythondata": "import pandas as pd\n\ndef renameColumns(students: pd.DataFrame) -> pd.DataFrame:\n    "
  },
  "solution": "[TOC]\n\n## Solution\n--- \n### Overview\n\nIn this problem, we have a DataFrame named `students` that contains student data. However, the column names are not very descriptive. The goal is to rename them to be clearer.\n\n**Key Concepts**:\n - **DataFrame:** a 2D table-like structure, similar to a spreadsheet or SQL table. Each row represents an individual record and each column represents a different attribute. It is size-mutable and designed to handle a mix of different types of data.\n - **`rename` function**: The `rename` function in pandas is a very useful tool when it comes to renaming column names or index names. \n\n**Usage of `rename`**: \n```python\nDataFrame.rename(mapper=None, index=None, columns=None, axis=None, copy=True, inplace=False, level=None, errors='raise')\n```\n\nThe `rename` method has many optional arguments that it can take. For our purpose, we are interested in the `columns` argument, which allows you to pass a dictionary where the keys represent the current column names and the values are the new column names.\n\nFor example, if we have:\n\n```python\n{'id': 'student_id'}\n```\n\nThis means that we are renaming the column that is currently named \"id\" to \"student_id\".\n\n**Argument Definition**:\n\n- `mapper`, `index`, `columns`: The dictionaries you can pass to rename index or columns. In our example, we use `columns`.\n  \n- `axis`: Can be either \"index\" or \"columns\". Determines whether you're renaming the index or the columns. By default, if you provide the `columns` argument, you're renaming columns.\n  \n- `copy`: If set to `True`, a new DataFrame is created. If `False`, the original DataFrame is modified.\n  \n- `inplace`: If set to `True`, the renaming will modify the DataFrame in place and nothing will be returned. If `False`, a new DataFrame with renamed columns will be returned without modifying the original DataFrame.\n\n- `level`: For DataFrames with multi-level index, level from which the labels should be renamed.\n\n- `errors`: If 'raise', an error is raised if you try to rename an item that doesn't exist. If set to 'ignore', any failure to rename items will be ignored.\n\n### Intuition\n\n\n**Visualization of `rename` function**\n\n![fig](../Figures/3312/3312-1.png)\n\n\nIn the provided solution:\n\n1. We first import the pandas library and give it an alias `pd`.\n2. We define a function `renameColumns` that takes in a DataFrame `students` and returns a modified DataFrame.\n3. Within the function, we use the `rename` method on `students` to rename the columns. We pass a dictionary to the `columns` argument to specify the new names for each column.\n4. The modified DataFrame is then returned.\n\nWhen you pass this DataFrame to the function:idfirstlastage1MasonKing62AvaWright73TaylorHall164GeorgiaThompson185ThomasMoore10It will return:student_idfirst_namelast_nameage_in_years1MasonKing62AvaWright73TaylorHall164GeorgiaThompson185ThomasMoore10Remember, this function doesn't change the original DataFrame, but instead returns a new DataFrame with renamed columns. If you wish to modify the original DataFrame, you can set the `inplace` argument to `True` when calling the `rename` method.\n\n### Implementation"
}
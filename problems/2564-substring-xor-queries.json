{
  "title": "Substring XOR Queries",
  "problem_id": "2700",
  "frontend_id": "2564",
  "difficulty": "Medium",
  "problem_slug": "substring-xor-queries",
  "topics": [
    "Array",
    "Hash Table",
    "String",
    "Bit Manipulation"
  ],
  "description": "You are given a binary string s, and a 2D integer array queries where queries[i] = [firsti, secondi].\nFor the ith query, find the shortest substring of s whose decimal value, val, yields secondi when bitwise XORed with firsti. In other words, val ^ firsti == secondi.\nThe answer to the ith query is the endpoints (0-indexed) of the substring [lefti, righti] or [-1, -1] if no such substring exists. If there are multiple answers, choose the one with the minimum lefti.\nReturn an array ans where ans[i] = [lefti, righti] is the answer to the ith query.\nA substring is a contiguous non-empty sequence of characters within a string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"101101\", queries = [[0,5],[1,2]]\nOutput: [[0,2],[2,3]]\nExplanation: For the first query the substring in range [0,2] is \"101\" which has a decimal value of 5, and 5 ^ 0 = 5, hence the answer to the first query is [0,2]. In the second query, the substring in range [2,3] is \"11\", and has a decimal value of 3, and 3 ^ 1 = 2.Â So, [2,3] is returned for the second query.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"0101\", queries = [[12,8]]\nOutput: [[-1,-1]]\nExplanation: In this example there is no substring that answers the query, hence [-1,-1] is returned.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"1\", queries = [[4,5]]\nOutput: [[0,0]]\nExplanation: For this example, the substring in range [0,0] has a decimal value of 1, and 1 ^ 4 = 5. So, the answer is [0,0].",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 104",
    "s[i] is either '0' or '1'.",
    "1 <= queries.length <= 105",
    "0 <= firsti, secondi <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "You do not need to consider substrings having lengths greater than 30.",
    "Pre-process all substrings with lengths not greater than 30, and add the best endpoints to a dictionary."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<vector<int>> substringXorQueries(string s, vector<vector<int>>& queries) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[][] substringXorQueries(String s, int[][] queries) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def substringXorQueries(self, s, queries):\n        \"\"\"\n        :type s: str\n        :type queries: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def substringXorQueries(self, s: str, queries: List[List[int]]) -> List[List[int]]:\n        ",
    "c": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** substringXorQueries(char* s, int** queries, int queriesSize, int* queriesColSize, int* returnSize, int** returnColumnSizes) {\n    \n}",
    "csharp": "public class Solution {\n    public int[][] SubstringXorQueries(string s, int[][] queries) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @param {number[][]} queries\n * @return {number[][]}\n */\nvar substringXorQueries = function(s, queries) {\n    \n};",
    "typescript": "function substringXorQueries(s: string, queries: number[][]): number[][] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer[][] $queries\n     * @return Integer[][]\n     */\n    function substringXorQueries($s, $queries) {\n        \n    }\n}",
    "swift": "class Solution {\n    func substringXorQueries(_ s: String, _ queries: [[Int]]) -> [[Int]] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun substringXorQueries(s: String, queries: Array<IntArray>): Array<IntArray> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<List<int>> substringXorQueries(String s, List<List<int>> queries) {\n    \n  }\n}",
    "golang": "func substringXorQueries(s string, queries [][]int) [][]int {\n    \n}",
    "ruby": "# @param {String} s\n# @param {Integer[][]} queries\n# @return {Integer[][]}\ndef substring_xor_queries(s, queries)\n    \nend",
    "scala": "object Solution {\n    def substringXorQueries(s: String, queries: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn substring_xor_queries(s: String, queries: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}",
    "racket": "(define/contract (substring-xor-queries s queries)\n  (-> string? (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )",
    "erlang": "-spec substring_xor_queries(S :: unicode:unicode_binary(), Queries :: [[integer()]]) -> [[integer()]].\nsubstring_xor_queries(S, Queries) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec substring_xor_queries(s :: String.t, queries :: [[integer]]) :: [[integer]]\n  def substring_xor_queries(s, queries) do\n    \n  end\nend"
  }
}
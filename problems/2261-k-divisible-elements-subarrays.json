{
  "title": "K Divisible Elements Subarrays",
  "problem_id": "2339",
  "frontend_id": "2261",
  "difficulty": "Medium",
  "problem_slug": "k-divisible-elements-subarrays",
  "topics": [
    "Array",
    "Hash Table",
    "Trie",
    "Rolling Hash",
    "Hash Function",
    "Enumeration"
  ],
  "description": "Given an integer array nums and two integers k and p, return the number of distinct subarrays, which have at most k elements that are divisible by p.\nTwo arrays nums1 and nums2 are said to be distinct if:\nA subarray is defined as a non-empty contiguous sequence of elements in an array.\nExample 1:\nExample 2:\nConstraints:\nFollow up:\nCan you solve this problem in O(n2) time complexity?",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [2,3,3,2,2], k = 2, p = 2\nOutput: 11\nExplanation:\nThe elements at indices 0, 3, and 4 are divisible by p = 2.\nThe 11 distinct subarrays which have at most k = 2 elements divisible by 2 are:\n[2], [2,3], [2,3,3], [2,3,3,2], [3], [3,3], [3,3,2], [3,3,2,2], [3,2], [3,2,2], and [2,2].\nNote that the subarrays [2] and [3] occur more than once in nums, but they should each be counted only once.\nThe subarray [2,3,3,2,2] should not be counted because it has 3 elements that are divisible by 2.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,2,3,4], k = 4, p = 1\nOutput: 10\nExplanation:\nAll element of nums are divisible by p = 1.\nAlso, every subarray of nums will have at most 4 elements that are divisible by 1.\nSince all subarrays are distinct, the total number of subarrays satisfying all the constraints is 10.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 200",
    "1 <= nums[i], p <= 200",
    "1 <= k <= nums.length"
  ],
  "follow_ups": [],
  "hints": [
    "Enumerate all subarrays and find the ones that satisfy all the conditions.",
    "Use any suitable method to hash the subarrays to avoid duplicates."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int countDistinct(vector<int>& nums, int k, int p) {\n        \n    }\n};",
    "java": "class Solution {\n    public int countDistinct(int[] nums, int k, int p) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countDistinct(self, nums, k, p):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :type p: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countDistinct(self, nums: List[int], k: int, p: int) -> int:\n        ",
    "c": "int countDistinct(int* nums, int numsSize, int k, int p) {\n    \n}",
    "csharp": "public class Solution {\n    public int CountDistinct(int[] nums, int k, int p) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @param {number} p\n * @return {number}\n */\nvar countDistinct = function(nums, k, p) {\n    \n};",
    "typescript": "function countDistinct(nums: number[], k: number, p: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @param Integer $p\n     * @return Integer\n     */\n    function countDistinct($nums, $k, $p) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countDistinct(_ nums: [Int], _ k: Int, _ p: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countDistinct(nums: IntArray, k: Int, p: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int countDistinct(List<int> nums, int k, int p) {\n    \n  }\n}",
    "golang": "func countDistinct(nums []int, k int, p int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @param {Integer} p\n# @return {Integer}\ndef count_distinct(nums, k, p)\n    \nend",
    "scala": "object Solution {\n    def countDistinct(nums: Array[Int], k: Int, p: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_distinct(nums: Vec<i32>, k: i32, p: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (count-distinct nums k p)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec count_distinct(Nums :: [integer()], K :: integer(), P :: integer()) -> integer().\ncount_distinct(Nums, K, P) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_distinct(nums :: [integer], k :: integer, p :: integer) :: integer\n  def count_distinct(nums, k, p) do\n    \n  end\nend"
  }
}
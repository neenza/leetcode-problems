{
  "title": "Count Alternating Subarrays",
  "problem_id": "3374",
  "frontend_id": "3101",
  "difficulty": "Medium",
  "problem_slug": "count-alternating-subarrays",
  "topics": [
    "Array",
    "Math"
  ],
  "description": "You are given a binary array nums.\nWe call a subarray alternating if no two adjacent elements in the subarray have the same value.\nReturn the number of alternating subarrays in nums.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [0,1,1,1]\nOutput: 5\nExplanation:\nThe following subarrays are alternating: [0] , [1] , [1] , [1] , and [0,1] .",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,0,1,0]\nOutput: 10\nExplanation:\nEvery subarray of the array is alternating. There are 10 possible subarrays that we can choose.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "nums[i] is either 0 or 1."
  ],
  "follow_ups": [],
  "hints": [
    "Try using dynamic programming.",
    "Let <code>dp[i]</code> be the number of alternating subarrays ending at index <code>i</code>.",
    "The final answer is the sum of <code>dp[i]</code> over all  indices <code>i</code> from <code>0</code> to <code>n - 1</code>."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long countAlternatingSubarrays(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public long countAlternatingSubarrays(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countAlternatingSubarrays(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countAlternatingSubarrays(self, nums: List[int]) -> int:\n        ",
    "c": "long long countAlternatingSubarrays(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public long CountAlternatingSubarrays(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countAlternatingSubarrays = function(nums) {\n    \n};",
    "typescript": "function countAlternatingSubarrays(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function countAlternatingSubarrays($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countAlternatingSubarrays(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countAlternatingSubarrays(nums: IntArray): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int countAlternatingSubarrays(List<int> nums) {\n    \n  }\n}",
    "golang": "func countAlternatingSubarrays(nums []int) int64 {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef count_alternating_subarrays(nums)\n    \nend",
    "scala": "object Solution {\n    def countAlternatingSubarrays(nums: Array[Int]): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_alternating_subarrays(nums: Vec<i32>) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (count-alternating-subarrays nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec count_alternating_subarrays(Nums :: [integer()]) -> integer().\ncount_alternating_subarrays(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_alternating_subarrays(nums :: [integer]) :: integer\n  def count_alternating_subarrays(nums) do\n    \n  end\nend"
  }
}
{
  "title": "Count the Number of Good Nodes",
  "problem_id": "3486",
  "frontend_id": "3249",
  "difficulty": "Medium",
  "problem_slug": "count-the-number-of-good-nodes",
  "topics": [
    "Tree",
    "Depth-First Search"
  ],
  "description": "There is an undirected tree with n nodes labeled from 0 to n - 1, and rooted at node 0. You are given a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nA node is good if all the subtrees rooted at its children have the same size.\nReturn the number of good nodes in the given tree.\nA subtree of treeName is a tree consisting of a node in treeName and all of its descendants.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]\nOutput: 7\nExplanation:\nAll of the nodes of the given tree are good.",
      "images": [
        "https://assets.leetcode.com/uploads/2024/05/26/tree1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: edges = [[0,1],[1,2],[2,3],[3,4],[0,5],[1,6],[2,7],[3,8]]\nOutput: 6\nExplanation:\nThere are 6 good nodes in the given tree. They are colored in the image above.\nExample 3:\nInput: edges = [[0,1],[1,2],[1,3],[1,4],[0,5],[5,6],[6,7],[7,8],[0,9],[9,10],[9,12],[10,11]]\nOutput: 12\nExplanation:\nAll nodes except node 9 are good.",
      "images": [
        "https://assets.leetcode.com/uploads/2024/06/03/screenshot-2024-06-03-193552.png",
        "https://assets.leetcode.com/uploads/2024/08/08/rob.jpg"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: edges = [[0,1],[1,2],[1,3],[1,4],[0,5],[5,6],[6,7],[7,8],[0,9],[9,10],[9,12],[10,11]]\nOutput: 12\nExplanation:\nAll nodes except node 9 are good.",
      "images": [
        "https://assets.leetcode.com/uploads/2024/08/08/rob.jpg"
      ]
    }
  ],
  "constraints": [
    "2 <= n <= 105",
    "edges.length == n - 1",
    "edges[i].length == 2",
    "0 <= ai, bi < n",
    "The input is generated such that edges represents a valid tree."
  ],
  "follow_ups": [],
  "hints": [
    "Use DFS."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int countGoodNodes(vector<vector<int>>& edges) {\n        \n    }\n};",
    "java": "class Solution {\n    public int countGoodNodes(int[][] edges) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countGoodNodes(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countGoodNodes(self, edges: List[List[int]]) -> int:\n        ",
    "c": "int countGoodNodes(int** edges, int edgesSize, int* edgesColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int CountGoodNodes(int[][] edges) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} edges\n * @return {number}\n */\nvar countGoodNodes = function(edges) {\n    \n};",
    "typescript": "function countGoodNodes(edges: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $edges\n     * @return Integer\n     */\n    function countGoodNodes($edges) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countGoodNodes(_ edges: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countGoodNodes(edges: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int countGoodNodes(List<List<int>> edges) {\n    \n  }\n}",
    "golang": "func countGoodNodes(edges [][]int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} edges\n# @return {Integer}\ndef count_good_nodes(edges)\n    \nend",
    "scala": "object Solution {\n    def countGoodNodes(edges: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_good_nodes(edges: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (count-good-nodes edges)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec count_good_nodes(Edges :: [[integer()]]) -> integer().\ncount_good_nodes(Edges) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_good_nodes(edges :: [[integer]]) :: integer\n  def count_good_nodes(edges) do\n    \n  end\nend"
  }
}
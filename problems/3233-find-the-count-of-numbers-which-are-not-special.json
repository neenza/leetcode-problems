{
  "title": "Find the Count of Numbers Which Are Not Special",
  "problem_id": "3507",
  "frontend_id": "3233",
  "difficulty": "Medium",
  "problem_slug": "find-the-count-of-numbers-which-are-not-special",
  "topics": [
    "Array",
    "Math",
    "Number Theory"
  ],
  "description": "You are given 2 positive integers l and r. For any number x, all positive divisors of x except x are called the proper divisors of x.\nA number is called special if it has exactly 2 proper divisors. For example:\nReturn the count of numbers in the range [l, r] that are not special.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: l = 5, r = 7\nOutput: 3\nExplanation:\nThere are no special numbers in the range [5, 7] .",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: l = 4, r = 16\nOutput: 11\nExplanation:\nThe special numbers in the range [4, 16] are 4 and 9.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= l <= r <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "A special number must be a square of a prime number.",
    "We need to find all primes in the range <code>[sqrt(l), sqrt(r)]</code>.",
    "Use sieve to find primes till <code>sqrt(10<sup>9</sup>)</code>."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int nonSpecialCount(int l, int r) {\n        \n    }\n};",
    "java": "class Solution {\n    public int nonSpecialCount(int l, int r) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def nonSpecialCount(self, l, r):\n        \"\"\"\n        :type l: int\n        :type r: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def nonSpecialCount(self, l: int, r: int) -> int:\n        ",
    "c": "int nonSpecialCount(int l, int r) {\n    \n}",
    "csharp": "public class Solution {\n    public int NonSpecialCount(int l, int r) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} l\n * @param {number} r\n * @return {number}\n */\nvar nonSpecialCount = function(l, r) {\n    \n};",
    "typescript": "function nonSpecialCount(l: number, r: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $l\n     * @param Integer $r\n     * @return Integer\n     */\n    function nonSpecialCount($l, $r) {\n        \n    }\n}",
    "swift": "class Solution {\n    func nonSpecialCount(_ l: Int, _ r: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun nonSpecialCount(l: Int, r: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int nonSpecialCount(int l, int r) {\n    \n  }\n}",
    "golang": "func nonSpecialCount(l int, r int) int {\n    \n}",
    "ruby": "# @param {Integer} l\n# @param {Integer} r\n# @return {Integer}\ndef non_special_count(l, r)\n    \nend",
    "scala": "object Solution {\n    def nonSpecialCount(l: Int, r: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn non_special_count(l: i32, r: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (non-special-count l r)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec non_special_count(L :: integer(), R :: integer()) -> integer().\nnon_special_count(L, R) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec non_special_count(l :: integer, r :: integer) :: integer\n  def non_special_count(l, r) do\n    \n  end\nend"
  }
}
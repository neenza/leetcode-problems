{
  "title": "Consecutive Numbers Sum",
  "problem_id": "856",
  "frontend_id": "829",
  "difficulty": "Hard",
  "problem_slug": "consecutive-numbers-sum",
  "topics": [
    "Math",
    "Enumeration"
  ],
  "description": "Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 9\nOutput: 3\nExplanation: 9 = 4 + 5 = 2 + 3 + 4",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 109"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int consecutiveNumbersSum(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int consecutiveNumbersSum(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def consecutiveNumbersSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def consecutiveNumbersSum(self, n: int) -> int:\n        ",
    "c": "int consecutiveNumbersSum(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int ConsecutiveNumbersSum(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar consecutiveNumbersSum = function(n) {\n    \n};",
    "typescript": "function consecutiveNumbersSum(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function consecutiveNumbersSum($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func consecutiveNumbersSum(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun consecutiveNumbersSum(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int consecutiveNumbersSum(int n) {\n    \n  }\n}",
    "golang": "func consecutiveNumbersSum(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef consecutive_numbers_sum(n)\n    \nend",
    "scala": "object Solution {\n    def consecutiveNumbersSum(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn consecutive_numbers_sum(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (consecutive-numbers-sum n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec consecutive_numbers_sum(N :: integer()) -> integer().\nconsecutive_numbers_sum(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec consecutive_numbers_sum(n :: integer) :: integer\n  def consecutive_numbers_sum(n) do\n    \n  end\nend"
  }
}
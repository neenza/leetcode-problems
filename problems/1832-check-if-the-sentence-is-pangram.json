{
  "title": "Check if the Sentence Is Pangram",
  "problem_id": "1960",
  "frontend_id": "1832",
  "difficulty": "Easy",
  "problem_slug": "check-if-the-sentence-is-pangram",
  "topics": [
    "Hash Table",
    "String"
  ],
  "description": "A pangram is a sentence where every letter of the English alphabet appears at least once.\nGiven a string sentence containing only lowercase English letters, return true if sentence is a pangram, or false otherwise.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: sentence = \"thequickbrownfoxjumpsoverthelazydog\"\nOutput: true\nExplanation: sentence contains at least one of every letter of the English alphabet.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: sentence = \"leetcode\"\nOutput: false",
      "images": []
    }
  ],
  "constraints": [
    "1 <= sentence.length <= 1000",
    "sentence consists of lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [
    "Iterate over the string and mark each character as found (using a boolean array, bitmask, or any other similar way).",
    "Check if the number of found characters equals the alphabet length."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool checkIfPangram(string sentence) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean checkIfPangram(String sentence) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def checkIfPangram(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def checkIfPangram(self, sentence: str) -> bool:\n        ",
    "c": "bool checkIfPangram(char* sentence) {\n    \n}",
    "csharp": "public class Solution {\n    public bool CheckIfPangram(string sentence) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} sentence\n * @return {boolean}\n */\nvar checkIfPangram = function(sentence) {\n    \n};",
    "typescript": "function checkIfPangram(sentence: string): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $sentence\n     * @return Boolean\n     */\n    function checkIfPangram($sentence) {\n        \n    }\n}",
    "swift": "class Solution {\n    func checkIfPangram(_ sentence: String) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun checkIfPangram(sentence: String): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool checkIfPangram(String sentence) {\n    \n  }\n}",
    "golang": "func checkIfPangram(sentence string) bool {\n    \n}",
    "ruby": "# @param {String} sentence\n# @return {Boolean}\ndef check_if_pangram(sentence)\n    \nend",
    "scala": "object Solution {\n    def checkIfPangram(sentence: String): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn check_if_pangram(sentence: String) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (check-if-pangram sentence)\n  (-> string? boolean?)\n  )",
    "erlang": "-spec check_if_pangram(Sentence :: unicode:unicode_binary()) -> boolean().\ncheck_if_pangram(Sentence) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec check_if_pangram(sentence :: String.t) :: boolean\n  def check_if_pangram(sentence) do\n    \n  end\nend"
  }
}
{
  "title": "Maximum Balanced Shipments",
  "problem_id": "3954",
  "frontend_id": "3638",
  "difficulty": "Medium",
  "problem_slug": "maximum-balanced-shipments",
  "topics": [],
  "description": "You are given an integer array weight of length n, representing the weights of n parcels arranged in a straight line. A shipment is defined as a contiguous subarray of parcels. A shipment is considered balanced if the weight of the last parcel is strictly less than the maximum weight among all parcels in that shipment.\nSelect a set of non-overlapping, contiguous, balanced shipments such that each parcel appears in at most one shipment (parcels may remain unshipped).\nReturn the maximum possible number of balanced shipments that can be formed.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: weight = [2,5,1,4,3]\nOutput: 2\nExplanation:\nWe can form the maximum of two balanced shipments as follows:\nIt is impossible to partition the parcels to achieve more than two balanced shipments, so the answer is 2.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: weight = [4,4]\nOutput: 0\nExplanation:\nNo balanced shipment can be formed in this case:\nAs there is no way to form even one balanced shipment, the answer is 0.",
      "images": []
    }
  ],
  "constraints": [
    "2 <= n <= 105",
    "1 <= weight[i] <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "Use a monotonic stack to find for each end index <code>i</code> the nearest previous index <code>j</code> with <code>weight[j] > weight[i]</code> (set <code>j = -1</code> if none).",
    "Then set <code>dp[i] = best[j] + 1</code> (using <code>best[-1] = 0</code>), and update <code>best[i] = max(best[i-1], dp[i])</code>; the result is <code>best[n-1]</code>."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxBalancedShipments(vector<int>& weight) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxBalancedShipments(int[] weight) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxBalancedShipments(self, weight):\n        \"\"\"\n        :type weight: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxBalancedShipments(self, weight: List[int]) -> int:\n        ",
    "c": "int maxBalancedShipments(int* weight, int weightSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxBalancedShipments(int[] weight) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} weight\n * @return {number}\n */\nvar maxBalancedShipments = function(weight) {\n    \n};",
    "typescript": "function maxBalancedShipments(weight: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $weight\n     * @return Integer\n     */\n    function maxBalancedShipments($weight) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxBalancedShipments(_ weight: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxBalancedShipments(weight: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxBalancedShipments(List<int> weight) {\n    \n  }\n}",
    "golang": "func maxBalancedShipments(weight []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} weight\n# @return {Integer}\ndef max_balanced_shipments(weight)\n    \nend",
    "scala": "object Solution {\n    def maxBalancedShipments(weight: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_balanced_shipments(weight: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-balanced-shipments weight)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec max_balanced_shipments(Weight :: [integer()]) -> integer().\nmax_balanced_shipments(Weight) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_balanced_shipments(weight :: [integer]) :: integer\n  def max_balanced_shipments(weight) do\n    \n  end\nend"
  }
}
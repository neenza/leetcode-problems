{
  "title": "Find the Kth Smallest Sum of a Matrix With Sorted Rows",
  "problem_id": "1550",
  "frontend_id": "1439",
  "difficulty": "Hard",
  "problem_slug": "find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows",
  "topics": [
    "Array",
    "Binary Search",
    "Heap (Priority Queue)",
    "Matrix"
  ],
  "description": "You are given an m x n matrix mat that has its rows sorted in non-decreasing order and an integer k.\nYou are allowed to choose exactly one element from each row to form an array.\nReturn the kth smallest array sum among all possible arrays.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: mat = [[1,3,11],[2,4,6]], k = 5\nOutput: 7\nExplanation: Choosing one element from each row, the first k smallest sum are:\n[1,2], [1,4], [3,2], [3,4], [1,6]. Where the 5th sum is 7.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: mat = [[1,3,11],[2,4,6]], k = 9\nOutput: 17",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7\nOutput: 9\nExplanation: Choosing one element from each row, the first k smallest sum are:\n[1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1,5,3]. Where the 7th sum is 9.",
      "images": []
    }
  ],
  "constraints": [
    "m == mat.length",
    "n == mat.length[i]",
    "1 <= m, n <= 40",
    "1 <= mat[i][j] <= 5000",
    "1 <= k <= min(200, nm)",
    "mat[i] is a non-decreasing array."
  ],
  "follow_ups": [],
  "hints": [
    "Save all visited sums and corresponding indexes in a priority queue. Then, once you pop the smallest sum so far, you can quickly identify the next m candidates for smallest sum by incrementing each row index by 1."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int kthSmallest(vector<vector<int>>& mat, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int kthSmallest(int[][] mat, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def kthSmallest(self, mat, k):\n        \"\"\"\n        :type mat: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def kthSmallest(self, mat: List[List[int]], k: int) -> int:\n        ",
    "c": "int kthSmallest(int** mat, int matSize, int* matColSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int KthSmallest(int[][] mat, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} mat\n * @param {number} k\n * @return {number}\n */\nvar kthSmallest = function(mat, k) {\n    \n};",
    "typescript": "function kthSmallest(mat: number[][], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $mat\n     * @param Integer $k\n     * @return Integer\n     */\n    function kthSmallest($mat, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func kthSmallest(_ mat: [[Int]], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun kthSmallest(mat: Array<IntArray>, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int kthSmallest(List<List<int>> mat, int k) {\n    \n  }\n}",
    "golang": "func kthSmallest(mat [][]int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} mat\n# @param {Integer} k\n# @return {Integer}\ndef kth_smallest(mat, k)\n    \nend",
    "scala": "object Solution {\n    def kthSmallest(mat: Array[Array[Int]], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn kth_smallest(mat: Vec<Vec<i32>>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (kth-smallest mat k)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec kth_smallest(Mat :: [[integer()]], K :: integer()) -> integer().\nkth_smallest(Mat, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec kth_smallest(mat :: [[integer]], k :: integer) :: integer\n  def kth_smallest(mat, k) do\n    \n  end\nend"
  }
}
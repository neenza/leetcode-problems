{
  "title": "K-diff Pairs in an Array",
  "problem_id": "532",
  "frontend_id": "532",
  "difficulty": "Medium",
  "problem_slug": "k-diff-pairs-in-an-array",
  "topics": [
    "Array",
    "Hash Table",
    "Two Pointers",
    "Binary Search",
    "Sorting"
  ],
  "description": "Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.\nA k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:\nNotice that |val| denotes the absolute value of val.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [3,1,4,1,5], k = 2\nOutput: 2\nExplanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).\nAlthough we have two 1s in the input, we should only return the number of unique pairs.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,2,3,4,5], k = 1\nOutput: 4\nExplanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,3,1,5,4], k = 0\nOutput: 1\nExplanation: There is one 0-diff pair in the array, (1, 1).",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 104",
    "-107 <= nums[i] <= 107",
    "0 <= k <= 107"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int findPairs(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int findPairs(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findPairs(self, nums: List[int], k: int) -> int:\n        ",
    "c": "int findPairs(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int FindPairs(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findPairs = function(nums, k) {\n    \n};",
    "typescript": "function findPairs(nums: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function findPairs($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findPairs(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findPairs(nums: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int findPairs(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func findPairs(nums []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef find_pairs(nums, k)\n    \nend",
    "scala": "object Solution {\n    def findPairs(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_pairs(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (find-pairs nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec find_pairs(Nums :: [integer()], K :: integer()) -> integer().\nfind_pairs(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_pairs(nums :: [integer], k :: integer) :: integer\n  def find_pairs(nums, k) do\n    \n  end\nend"
  }
}
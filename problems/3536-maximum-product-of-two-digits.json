{
  "title": "Maximum Product of Two Digits",
  "problem_id": "3859",
  "frontend_id": "3536",
  "difficulty": "Easy",
  "problem_slug": "maximum-product-of-two-digits",
  "topics": [
    "Math",
    "Sorting"
  ],
  "description": "You are given a positive integer n.\nReturn the maximum product of any two digits in n.\nNote: You may use the same digit twice if it appears more than once in n.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 31\nOutput: 3\nExplanation:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 22\nOutput: 4\nExplanation:",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 124\nOutput: 8\nExplanation:",
      "images": []
    }
  ],
  "constraints": [
    "10 <= n <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "Use brute force"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxProduct(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxProduct(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxProduct(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxProduct(self, n: int) -> int:\n        ",
    "c": "int maxProduct(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxProduct(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar maxProduct = function(n) {\n    \n};",
    "typescript": "function maxProduct(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function maxProduct($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxProduct(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxProduct(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxProduct(int n) {\n    \n  }\n}",
    "golang": "func maxProduct(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef max_product(n)\n    \nend",
    "scala": "object Solution {\n    def maxProduct(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_product(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-product n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec max_product(N :: integer()) -> integer().\nmax_product(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_product(n :: integer) :: integer\n  def max_product(n) do\n    \n  end\nend"
  }
}
{
  "title": "Goat Latin",
  "problem_id": "851",
  "frontend_id": "824",
  "difficulty": "Easy",
  "problem_slug": "goat-latin",
  "topics": [
    "String"
  ],
  "description": "You are given a string sentence that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only.\nWe would like to convert the sentence to \"Goat Latin\" (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows:\nReturn the final sentence representing the conversion from sentence to Goat Latin.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: sentence = \"I speak Goat Latin\"\nOutput: \"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\"",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: sentence = \"The quick brown fox jumped over the lazy dog\"\nOutput: \"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\"",
      "images": []
    }
  ],
  "constraints": [
    "1 <= sentence.length <= 150",
    "sentence consists of English letters and spaces.",
    "sentence has no leading or trailing spaces.",
    "All the words in sentence are separated by a single space."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string toGoatLatin(string sentence) {\n        \n    }\n};",
    "java": "class Solution {\n    public String toGoatLatin(String sentence) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def toGoatLatin(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def toGoatLatin(self, sentence: str) -> str:\n        ",
    "c": "char* toGoatLatin(char* sentence) {\n    \n}",
    "csharp": "public class Solution {\n    public string ToGoatLatin(string sentence) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} sentence\n * @return {string}\n */\nvar toGoatLatin = function(sentence) {\n    \n};",
    "typescript": "function toGoatLatin(sentence: string): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $sentence\n     * @return String\n     */\n    function toGoatLatin($sentence) {\n        \n    }\n}",
    "swift": "class Solution {\n    func toGoatLatin(_ sentence: String) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun toGoatLatin(sentence: String): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String toGoatLatin(String sentence) {\n    \n  }\n}",
    "golang": "func toGoatLatin(sentence string) string {\n    \n}",
    "ruby": "# @param {String} sentence\n# @return {String}\ndef to_goat_latin(sentence)\n    \nend",
    "scala": "object Solution {\n    def toGoatLatin(sentence: String): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn to_goat_latin(sentence: String) -> String {\n        \n    }\n}",
    "racket": "(define/contract (to-goat-latin sentence)\n  (-> string? string?)\n  )",
    "erlang": "-spec to_goat_latin(Sentence :: unicode:unicode_binary()) -> unicode:unicode_binary().\nto_goat_latin(Sentence) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec to_goat_latin(sentence :: String.t) :: String.t\n  def to_goat_latin(sentence) do\n    \n  end\nend"
  }
}
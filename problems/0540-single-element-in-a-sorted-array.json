{
  "title": "Single Element in a Sorted Array",
  "problem_id": "540",
  "frontend_id": "540",
  "difficulty": "Medium",
  "problem_slug": "single-element-in-a-sorted-array",
  "topics": [
    "Array",
    "Binary Search"
  ],
  "description": "You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.\nReturn the single element that appears only once.\nYour solution must run in O(log n) time and O(1) space.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,1,2,3,3,4,4,8,8]\nOutput: 2",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [3,3,7,7,10,11,11]\nOutput: 10",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "0 <= nums[i] <= 105"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int singleNonDuplicate(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int singleNonDuplicate(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def singleNonDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def singleNonDuplicate(self, nums: List[int]) -> int:\n        ",
    "c": "int singleNonDuplicate(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int SingleNonDuplicate(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNonDuplicate = function(nums) {\n    \n};",
    "typescript": "function singleNonDuplicate(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function singleNonDuplicate($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func singleNonDuplicate(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun singleNonDuplicate(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int singleNonDuplicate(List<int> nums) {\n    \n  }\n}",
    "golang": "func singleNonDuplicate(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef single_non_duplicate(nums)\n    \nend",
    "scala": "object Solution {\n    def singleNonDuplicate(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn single_non_duplicate(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (single-non-duplicate nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec single_non_duplicate(Nums :: [integer()]) -> integer().\nsingle_non_duplicate(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec single_non_duplicate(nums :: [integer]) :: integer\n  def single_non_duplicate(nums) do\n    \n  end\nend"
  }
}
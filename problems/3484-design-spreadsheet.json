{
  "title": "Design Spreadsheet",
  "problem_id": "3797",
  "frontend_id": "3484",
  "difficulty": "Medium",
  "problem_slug": "design-spreadsheet",
  "topics": [
    "Array",
    "Hash Table",
    "String",
    "Design",
    "Matrix"
  ],
  "description": "A spreadsheet is a grid with 26 columns (labeled from 'A' to 'Z') and a given number of rows. Each cell in the spreadsheet can hold an integer value between 0 and 105.\nImplement the Spreadsheet class:\nNote: If getValue references a cell that has not been explicitly set using setCell, its value is considered 0.\nExample 1:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: [\"Spreadsheet\", \"getValue\", \"setCell\", \"getValue\", \"setCell\", \"getValue\", \"resetCell\", \"getValue\"] [[3], [\"=5+7\"], [\"A1\", 10], [\"=A1+6\"], [\"B2\", 15], [\"=A1+B2\"], [\"A1\"], [\"=A1+B2\"]]\nOutput: [null, 12, null, 16, null, 25, null, 15]\nExplanation",
      "images": []
    }
  ],
  "constraints": [
    "1 <= rows <= 103",
    "0 <= value <= 105",
    "The formula is always in the format \"=X+Y\", where X and Y are either valid cell references or non-negative integers with values less than or equal to 105.",
    "Each cell reference consists of a capital letter from 'A' to 'Z' followed by a row number between 1 and rows.",
    "At most 104 calls will be made in total to setCell, resetCell, and getValue."
  ],
  "follow_ups": [],
  "hints": [
    "Use a hashmap to represent the cells, where the key is the cell reference (e.g., <code>\"A1\"</code>) and the value is the integer stored in the cell.",
    "For <code>setCell</code>, simply assign the given value to the specified cell in the hashmap.",
    "For <code>resetCell</code>, set the value of the specified cell to <code>0</code> in the hashmap.",
    "For <code>getValue</code>, find the values of the operands from the hashmap and return their sum."
  ],
  "code_snippets": {
    "cpp": "class Spreadsheet {\npublic:\n    Spreadsheet(int rows) {\n        \n    }\n    \n    void setCell(string cell, int value) {\n        \n    }\n    \n    void resetCell(string cell) {\n        \n    }\n    \n    int getValue(string formula) {\n        \n    }\n};\n\n/**\n * Your Spreadsheet object will be instantiated and called as such:\n * Spreadsheet* obj = new Spreadsheet(rows);\n * obj->setCell(cell,value);\n * obj->resetCell(cell);\n * int param_3 = obj->getValue(formula);\n */",
    "java": "class Spreadsheet {\n\n    public Spreadsheet(int rows) {\n        \n    }\n    \n    public void setCell(String cell, int value) {\n        \n    }\n    \n    public void resetCell(String cell) {\n        \n    }\n    \n    public int getValue(String formula) {\n        \n    }\n}\n\n/**\n * Your Spreadsheet object will be instantiated and called as such:\n * Spreadsheet obj = new Spreadsheet(rows);\n * obj.setCell(cell,value);\n * obj.resetCell(cell);\n * int param_3 = obj.getValue(formula);\n */",
    "python": "class Spreadsheet(object):\n\n    def __init__(self, rows):\n        \"\"\"\n        :type rows: int\n        \"\"\"\n        \n\n    def setCell(self, cell, value):\n        \"\"\"\n        :type cell: str\n        :type value: int\n        :rtype: None\n        \"\"\"\n        \n\n    def resetCell(self, cell):\n        \"\"\"\n        :type cell: str\n        :rtype: None\n        \"\"\"\n        \n\n    def getValue(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your Spreadsheet object will be instantiated and called as such:\n# obj = Spreadsheet(rows)\n# obj.setCell(cell,value)\n# obj.resetCell(cell)\n# param_3 = obj.getValue(formula)",
    "python3": "class Spreadsheet:\n\n    def __init__(self, rows: int):\n        \n\n    def setCell(self, cell: str, value: int) -> None:\n        \n\n    def resetCell(self, cell: str) -> None:\n        \n\n    def getValue(self, formula: str) -> int:\n        \n\n\n# Your Spreadsheet object will be instantiated and called as such:\n# obj = Spreadsheet(rows)\n# obj.setCell(cell,value)\n# obj.resetCell(cell)\n# param_3 = obj.getValue(formula)",
    "c": "\n\n\ntypedef struct {\n    \n} Spreadsheet;\n\n\nSpreadsheet* spreadsheetCreate(int rows) {\n    \n}\n\nvoid spreadsheetSetCell(Spreadsheet* obj, char* cell, int value) {\n    \n}\n\nvoid spreadsheetResetCell(Spreadsheet* obj, char* cell) {\n    \n}\n\nint spreadsheetGetValue(Spreadsheet* obj, char* formula) {\n    \n}\n\nvoid spreadsheetFree(Spreadsheet* obj) {\n    \n}\n\n/**\n * Your Spreadsheet struct will be instantiated and called as such:\n * Spreadsheet* obj = spreadsheetCreate(rows);\n * spreadsheetSetCell(obj, cell, value);\n \n * spreadsheetResetCell(obj, cell);\n \n * int param_3 = spreadsheetGetValue(obj, formula);\n \n * spreadsheetFree(obj);\n*/",
    "csharp": "public class Spreadsheet {\n\n    public Spreadsheet(int rows) {\n        \n    }\n    \n    public void SetCell(string cell, int value) {\n        \n    }\n    \n    public void ResetCell(string cell) {\n        \n    }\n    \n    public int GetValue(string formula) {\n        \n    }\n}\n\n/**\n * Your Spreadsheet object will be instantiated and called as such:\n * Spreadsheet obj = new Spreadsheet(rows);\n * obj.SetCell(cell,value);\n * obj.ResetCell(cell);\n * int param_3 = obj.GetValue(formula);\n */",
    "javascript": "/**\n * @param {number} rows\n */\nvar Spreadsheet = function(rows) {\n    \n};\n\n/** \n * @param {string} cell \n * @param {number} value\n * @return {void}\n */\nSpreadsheet.prototype.setCell = function(cell, value) {\n    \n};\n\n/** \n * @param {string} cell\n * @return {void}\n */\nSpreadsheet.prototype.resetCell = function(cell) {\n    \n};\n\n/** \n * @param {string} formula\n * @return {number}\n */\nSpreadsheet.prototype.getValue = function(formula) {\n    \n};\n\n/** \n * Your Spreadsheet object will be instantiated and called as such:\n * var obj = new Spreadsheet(rows)\n * obj.setCell(cell,value)\n * obj.resetCell(cell)\n * var param_3 = obj.getValue(formula)\n */",
    "typescript": "class Spreadsheet {\n    constructor(rows: number) {\n        \n    }\n\n    setCell(cell: string, value: number): void {\n        \n    }\n\n    resetCell(cell: string): void {\n        \n    }\n\n    getValue(formula: string): number {\n        \n    }\n}\n\n/**\n * Your Spreadsheet object will be instantiated and called as such:\n * var obj = new Spreadsheet(rows)\n * obj.setCell(cell,value)\n * obj.resetCell(cell)\n * var param_3 = obj.getValue(formula)\n */",
    "php": "class Spreadsheet {\n    /**\n     * @param Integer $rows\n     */\n    function __construct($rows) {\n        \n    }\n  \n    /**\n     * @param String $cell\n     * @param Integer $value\n     * @return NULL\n     */\n    function setCell($cell, $value) {\n        \n    }\n  \n    /**\n     * @param String $cell\n     * @return NULL\n     */\n    function resetCell($cell) {\n        \n    }\n  \n    /**\n     * @param String $formula\n     * @return Integer\n     */\n    function getValue($formula) {\n        \n    }\n}\n\n/**\n * Your Spreadsheet object will be instantiated and called as such:\n * $obj = Spreadsheet($rows);\n * $obj->setCell($cell, $value);\n * $obj->resetCell($cell);\n * $ret_3 = $obj->getValue($formula);\n */",
    "swift": "\nclass Spreadsheet {\n\n    init(_ rows: Int) {\n        \n    }\n    \n    func setCell(_ cell: String, _ value: Int) {\n        \n    }\n    \n    func resetCell(_ cell: String) {\n        \n    }\n    \n    func getValue(_ formula: String) -> Int {\n        \n    }\n}\n\n/**\n * Your Spreadsheet object will be instantiated and called as such:\n * let obj = Spreadsheet(rows)\n * obj.setCell(cell, value)\n * obj.resetCell(cell)\n * let ret_3: Int = obj.getValue(formula)\n */",
    "kotlin": "class Spreadsheet(rows: Int) {\n\n    fun setCell(cell: String, value: Int) {\n        \n    }\n\n    fun resetCell(cell: String) {\n        \n    }\n\n    fun getValue(formula: String): Int {\n        \n    }\n\n}\n\n/**\n * Your Spreadsheet object will be instantiated and called as such:\n * var obj = Spreadsheet(rows)\n * obj.setCell(cell,value)\n * obj.resetCell(cell)\n * var param_3 = obj.getValue(formula)\n */",
    "dart": "class Spreadsheet {\n\n  Spreadsheet(int rows) {\n    \n  }\n  \n  void setCell(String cell, int value) {\n    \n  }\n  \n  void resetCell(String cell) {\n    \n  }\n  \n  int getValue(String formula) {\n    \n  }\n}\n\n/**\n * Your Spreadsheet object will be instantiated and called as such:\n * Spreadsheet obj = Spreadsheet(rows);\n * obj.setCell(cell,value);\n * obj.resetCell(cell);\n * int param3 = obj.getValue(formula);\n */",
    "golang": "type Spreadsheet struct {\n    \n}\n\n\nfunc Constructor(rows int) Spreadsheet {\n    \n}\n\n\nfunc (this *Spreadsheet) SetCell(cell string, value int)  {\n    \n}\n\n\nfunc (this *Spreadsheet) ResetCell(cell string)  {\n    \n}\n\n\nfunc (this *Spreadsheet) GetValue(formula string) int {\n    \n}\n\n\n/**\n * Your Spreadsheet object will be instantiated and called as such:\n * obj := Constructor(rows);\n * obj.SetCell(cell,value);\n * obj.ResetCell(cell);\n * param_3 := obj.GetValue(formula);\n */",
    "ruby": "class Spreadsheet\n\n=begin\n    :type rows: Integer\n=end\n    def initialize(rows)\n        \n    end\n\n\n=begin\n    :type cell: String\n    :type value: Integer\n    :rtype: Void\n=end\n    def set_cell(cell, value)\n        \n    end\n\n\n=begin\n    :type cell: String\n    :rtype: Void\n=end\n    def reset_cell(cell)\n        \n    end\n\n\n=begin\n    :type formula: String\n    :rtype: Integer\n=end\n    def get_value(formula)\n        \n    end\n\n\nend\n\n# Your Spreadsheet object will be instantiated and called as such:\n# obj = Spreadsheet.new(rows)\n# obj.set_cell(cell, value)\n# obj.reset_cell(cell)\n# param_3 = obj.get_value(formula)",
    "scala": "class Spreadsheet(_rows: Int) {\n\n    def setCell(cell: String, value: Int): Unit = {\n        \n    }\n\n    def resetCell(cell: String): Unit = {\n        \n    }\n\n    def getValue(formula: String): Int = {\n        \n    }\n\n}\n\n/**\n * Your Spreadsheet object will be instantiated and called as such:\n * val obj = new Spreadsheet(rows)\n * obj.setCell(cell,value)\n * obj.resetCell(cell)\n * val param_3 = obj.getValue(formula)\n */",
    "rust": "struct Spreadsheet {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Spreadsheet {\n\n    fn new(rows: i32) -> Self {\n        \n    }\n    \n    fn set_cell(&self, cell: String, value: i32) {\n        \n    }\n    \n    fn reset_cell(&self, cell: String) {\n        \n    }\n    \n    fn get_value(&self, formula: String) -> i32 {\n        \n    }\n}\n\n/**\n * Your Spreadsheet object will be instantiated and called as such:\n * let obj = Spreadsheet::new(rows);\n * obj.set_cell(cell, value);\n * obj.reset_cell(cell);\n * let ret_3: i32 = obj.get_value(formula);\n */",
    "racket": "(define spreadsheet%\n  (class object%\n    (super-new)\n    \n    ; rows : exact-integer?\n    (init-field\n      rows)\n    \n    ; set-cell : string? exact-integer? -> void?\n    (define/public (set-cell cell value)\n      )\n    ; reset-cell : string? -> void?\n    (define/public (reset-cell cell)\n      )\n    ; get-value : string? -> exact-integer?\n    (define/public (get-value formula)\n      )))\n\n;; Your spreadsheet% object will be instantiated and called as such:\n;; (define obj (new spreadsheet% [rows rows]))\n;; (send obj set-cell cell value)\n;; (send obj reset-cell cell)\n;; (define param_3 (send obj get-value formula))",
    "erlang": "-spec spreadsheet_init_(Rows :: integer()) -> any().\nspreadsheet_init_(Rows) ->\n  .\n\n-spec spreadsheet_set_cell(Cell :: unicode:unicode_binary(), Value :: integer()) -> any().\nspreadsheet_set_cell(Cell, Value) ->\n  .\n\n-spec spreadsheet_reset_cell(Cell :: unicode:unicode_binary()) -> any().\nspreadsheet_reset_cell(Cell) ->\n  .\n\n-spec spreadsheet_get_value(Formula :: unicode:unicode_binary()) -> integer().\nspreadsheet_get_value(Formula) ->\n  .\n\n\n%% Your functions will be called as such:\n%% spreadsheet_init_(Rows),\n%% spreadsheet_set_cell(Cell, Value),\n%% spreadsheet_reset_cell(Cell),\n%% Param_3 = spreadsheet_get_value(Formula),\n\n%% spreadsheet_init_ will be called before every test case, in which you can do some necessary initializations.",
    "elixir": "defmodule Spreadsheet do\n  @spec init_(rows :: integer) :: any\n  def init_(rows) do\n    \n  end\n\n  @spec set_cell(cell :: String.t, value :: integer) :: any\n  def set_cell(cell, value) do\n    \n  end\n\n  @spec reset_cell(cell :: String.t) :: any\n  def reset_cell(cell) do\n    \n  end\n\n  @spec get_value(formula :: String.t) :: integer\n  def get_value(formula) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# Spreadsheet.init_(rows)\n# Spreadsheet.set_cell(cell, value)\n# Spreadsheet.reset_cell(cell)\n# param_3 = Spreadsheet.get_value(formula)\n\n# Spreadsheet.init_ will be called before every test case, in which you can do some necessary initializations."
  }
}
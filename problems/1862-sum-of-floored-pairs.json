{
  "title": "Sum of Floored Pairs",
  "problem_id": "1326",
  "frontend_id": "1862",
  "difficulty": "Hard",
  "problem_slug": "sum-of-floored-pairs",
  "topics": [
    "Array",
    "Math",
    "Binary Search",
    "Prefix Sum"
  ],
  "description": "Given an integer array nums, return the sum of floor(nums[i] / nums[j]) for all pairs of indices 0 <= i, j < nums.length in the array. Since the answer may be too large, return it modulo 109 + 7.\nThe floor() function returns the integer part of the division.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [2,5,9]\nOutput: 10\nExplanation:\nfloor(2 / 5) = floor(2 / 9) = floor(5 / 9) = 0\nfloor(2 / 2) = floor(5 / 5) = floor(9 / 9) = 1\nfloor(5 / 2) = 2\nfloor(9 / 2) = 4\nfloor(9 / 5) = 1\nWe calculate the floor of the division for every pair of indices in the array then sum them up.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [7,7,7,7,7,7,7]\nOutput: 49",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "1 <= nums[i] <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "Find the frequency (number of occurrences) of all elements in the array.",
    "For each element, iterate through its multiples and multiply frequencies to find the answer."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int sumOfFlooredPairs(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int sumOfFlooredPairs(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def sumOfFlooredPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def sumOfFlooredPairs(self, nums: List[int]) -> int:\n        ",
    "c": "int sumOfFlooredPairs(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int SumOfFlooredPairs(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar sumOfFlooredPairs = function(nums) {\n    \n};",
    "typescript": "function sumOfFlooredPairs(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function sumOfFlooredPairs($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func sumOfFlooredPairs(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun sumOfFlooredPairs(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int sumOfFlooredPairs(List<int> nums) {\n    \n  }\n}",
    "golang": "func sumOfFlooredPairs(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef sum_of_floored_pairs(nums)\n    \nend",
    "scala": "object Solution {\n    def sumOfFlooredPairs(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn sum_of_floored_pairs(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (sum-of-floored-pairs nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec sum_of_floored_pairs(Nums :: [integer()]) -> integer().\nsum_of_floored_pairs(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec sum_of_floored_pairs(nums :: [integer]) :: integer\n  def sum_of_floored_pairs(nums) do\n    \n  end\nend"
  }
}
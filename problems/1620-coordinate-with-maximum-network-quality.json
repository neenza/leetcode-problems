{
  "title": "Coordinate With Maximum Network Quality",
  "problem_id": "1726",
  "frontend_id": "1620",
  "difficulty": "Medium",
  "problem_slug": "coordinate-with-maximum-network-quality",
  "topics": [
    "Array",
    "Enumeration"
  ],
  "description": "You are given an array of network towers towers, where towers[i] = [xi, yi, qi] denotes the ith network tower with location (xi, yi) and quality factor qi. All the coordinates are integral coordinates on the X-Y plane, and the distance between the two coordinates is the Euclidean distance.\nYou are also given an integer radius where a tower is reachable if the distance is less than or equal to radius. Outside that distance, the signal becomes garbled, and the tower is not reachable.\nThe signal quality of the ith tower at a coordinate (x, y) is calculated with the formula ⌊qi / (1 + d)⌋, where d is the distance between the tower and the coordinate. The network quality at a coordinate is the sum of the signal qualities from all the reachable towers.\nReturn the array [cx, cy] representing the integral coordinate (cx, cy) where the network quality is maximum. If there are multiple coordinates with the same network quality, return the lexicographically minimum non-negative coordinate.\nNote:\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2\nOutput: [2,1]\nExplanation: At coordinate (2, 1) the total quality is 13.\n- Quality of 7 from (2, 1) results in ⌊7 / (1 + sqrt(0)⌋ = ⌊7⌋ = 7\n- Quality of 5 from (1, 2) results in ⌊5 / (1 + sqrt(2)⌋ = ⌊2.07⌋ = 2\n- Quality of 9 from (3, 1) results in ⌊9 / (1 + sqrt(1)⌋ = ⌊4.5⌋ = 4\nNo other coordinate has a higher network quality.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/09/22/untitled-diagram.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: towers = [[23,11,21]], radius = 9\nOutput: [23,11]\nExplanation: Since there is only one tower, the network quality is highest right at the tower's location.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/09/22/untitled-diagram.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: towers = [[1,2,13],[2,1,7],[0,1,9]], radius = 2\nOutput: [1,2]\nExplanation: Coordinate (1, 2) has the highest network quality.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/09/22/untitled-diagram.png"
      ]
    }
  ],
  "constraints": [
    "1 <= towers.length <= 50",
    "towers[i].length == 3",
    "0 <= xi, yi, qi <= 50",
    "1 <= radius <= 50"
  ],
  "follow_ups": [],
  "hints": [
    "The constraints are small enough to consider every possible coordinate and calculate its quality."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> bestCoordinate(vector<vector<int>>& towers, int radius) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] bestCoordinate(int[][] towers, int radius) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def bestCoordinate(self, towers, radius):\n        \"\"\"\n        :type towers: List[List[int]]\n        :type radius: int\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def bestCoordinate(self, towers: List[List[int]], radius: int) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* bestCoordinate(int** towers, int towersSize, int* towersColSize, int radius, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] BestCoordinate(int[][] towers, int radius) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} towers\n * @param {number} radius\n * @return {number[]}\n */\nvar bestCoordinate = function(towers, radius) {\n    \n};",
    "typescript": "function bestCoordinate(towers: number[][], radius: number): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $towers\n     * @param Integer $radius\n     * @return Integer[]\n     */\n    function bestCoordinate($towers, $radius) {\n        \n    }\n}",
    "swift": "class Solution {\n    func bestCoordinate(_ towers: [[Int]], _ radius: Int) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun bestCoordinate(towers: Array<IntArray>, radius: Int): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> bestCoordinate(List<List<int>> towers, int radius) {\n    \n  }\n}",
    "golang": "func bestCoordinate(towers [][]int, radius int) []int {\n    \n}",
    "ruby": "# @param {Integer[][]} towers\n# @param {Integer} radius\n# @return {Integer[]}\ndef best_coordinate(towers, radius)\n    \nend",
    "scala": "object Solution {\n    def bestCoordinate(towers: Array[Array[Int]], radius: Int): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn best_coordinate(towers: Vec<Vec<i32>>, radius: i32) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (best-coordinate towers radius)\n  (-> (listof (listof exact-integer?)) exact-integer? (listof exact-integer?))\n  )",
    "erlang": "-spec best_coordinate(Towers :: [[integer()]], Radius :: integer()) -> [integer()].\nbest_coordinate(Towers, Radius) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec best_coordinate(towers :: [[integer]], radius :: integer) :: [integer]\n  def best_coordinate(towers, radius) do\n    \n  end\nend"
  }
}
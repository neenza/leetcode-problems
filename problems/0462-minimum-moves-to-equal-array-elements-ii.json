{
  "title": "Minimum Moves to Equal Array Elements II",
  "problem_id": "462",
  "frontend_id": "462",
  "difficulty": "Medium",
  "problem_slug": "minimum-moves-to-equal-array-elements-ii",
  "topics": [
    "Array",
    "Math",
    "Sorting"
  ],
  "description": "Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.\nIn one move, you can increment or decrement an element of the array by 1.\nTest cases are designed so that the answer will fit in a 32-bit integer.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,3]\nOutput: 2\nExplanation:\nOnly two moves are needed (remember each move increments or decrements one element):\n[1,2,3]  =>  [2,2,3]  =>  [2,2,2]",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,10,2,9]\nOutput: 16",
      "images": []
    }
  ],
  "constraints": [
    "n == nums.length",
    "1 <= nums.length <= 105",
    "-109 <= nums[i] <= 109"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minMoves2(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minMoves2(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minMoves2(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minMoves2(self, nums: List[int]) -> int:\n        ",
    "c": "int minMoves2(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinMoves2(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minMoves2 = function(nums) {\n    \n};",
    "typescript": "function minMoves2(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minMoves2($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minMoves2(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minMoves2(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minMoves2(List<int> nums) {\n    \n  }\n}",
    "golang": "func minMoves2(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef min_moves2(nums)\n    \nend",
    "scala": "object Solution {\n    def minMoves2(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_moves2(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-moves2 nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec min_moves2(Nums :: [integer()]) -> integer().\nmin_moves2(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_moves2(nums :: [integer]) :: integer\n  def min_moves2(nums) do\n    \n  end\nend"
  }
}
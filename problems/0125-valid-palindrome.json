{
  "title": "Valid Palindrome",
  "problem_id": "125",
  "frontend_id": "125",
  "difficulty": "Easy",
  "problem_slug": "valid-palindrome",
  "topics": [
    "Two Pointers",
    "String"
  ],
  "description": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\nGiven a string s, return true if it is a palindrome, or false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\" is a palindrome.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"race a car\"\nOutput: false\nExplanation: \"raceacar\" is not a palindrome.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \" \"\nOutput: true\nExplanation: s is an empty string \"\" after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 2 * 105",
    "s consists only of printable ASCII characters."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool isPalindrome(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean isPalindrome(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def isPalindrome(self, s: str) -> bool:\n        ",
    "c": "bool isPalindrome(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public bool IsPalindrome(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar isPalindrome = function(s) {\n    \n};",
    "typescript": "function isPalindrome(s: string): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isPalindrome($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func isPalindrome(_ s: String) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun isPalindrome(s: String): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool isPalindrome(String s) {\n    \n  }\n}",
    "golang": "func isPalindrome(s string) bool {\n    \n}",
    "ruby": "# @param {String} s\n# @return {Boolean}\ndef is_palindrome(s)\n    \nend",
    "scala": "object Solution {\n    def isPalindrome(s: String): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn is_palindrome(s: String) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (is-palindrome s)\n  (-> string? boolean?)\n  )",
    "erlang": "-spec is_palindrome(S :: unicode:unicode_binary()) -> boolean().\nis_palindrome(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec is_palindrome(s :: String.t) :: boolean\n  def is_palindrome(s) do\n    \n  end\nend"
  }
}
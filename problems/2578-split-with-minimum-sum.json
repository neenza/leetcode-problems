{
  "title": "Split With Minimum Sum",
  "problem_id": "2650",
  "frontend_id": "2578",
  "difficulty": "Easy",
  "problem_slug": "split-with-minimum-sum",
  "topics": [
    "Math",
    "Greedy",
    "Sorting"
  ],
  "description": "Given a positive integer num, split it into two non-negative integers num1 and num2 such that:\nReturn the minimum possible sum of num1 and num2.\nNotes:\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: num = 4325\nOutput: 59\nExplanation: We can split 4325 so that num1 is 24 and num2 is 35, giving a sum of 59. We can prove that 59 is indeed the minimal possible sum.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: num = 687\nOutput: 75\nExplanation: We can split 687 so that num1 is 68 and num2 is 7, which would give an optimal sum of 75.",
      "images": []
    }
  ],
  "constraints": [
    "10 <= num <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "Sort the digits of num in non decreasing order.",
    "Assign digits to num1 and num2 alternatively."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int splitNum(int num) {\n        \n    }\n};",
    "java": "class Solution {\n    public int splitNum(int num) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def splitNum(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def splitNum(self, num: int) -> int:\n        ",
    "c": "int splitNum(int num) {\n    \n}",
    "csharp": "public class Solution {\n    public int SplitNum(int num) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} num\n * @return {number}\n */\nvar splitNum = function(num) {\n    \n};",
    "typescript": "function splitNum(num: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer\n     */\n    function splitNum($num) {\n        \n    }\n}",
    "swift": "class Solution {\n    func splitNum(_ num: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun splitNum(num: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int splitNum(int num) {\n    \n  }\n}",
    "golang": "func splitNum(num int) int {\n    \n}",
    "ruby": "# @param {Integer} num\n# @return {Integer}\ndef split_num(num)\n    \nend",
    "scala": "object Solution {\n    def splitNum(num: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn split_num(num: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (split-num num)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec split_num(Num :: integer()) -> integer().\nsplit_num(Num) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec split_num(num :: integer) :: integer\n  def split_num(num) do\n    \n  end\nend"
  }
}
{
  "title": "Minimum Incompatibility",
  "problem_id": "1799",
  "frontend_id": "1681",
  "difficulty": "Hard",
  "problem_slug": "minimum-incompatibility",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Bit Manipulation",
    "Bitmask"
  ],
  "description": "You are given an integer array nums​​​ and an integer k. You are asked to distribute this array into k subsets of equal size such that there are no two equal elements in the same subset.\nA subset's incompatibility is the difference between the maximum and minimum elements in that array.\nReturn the minimum possible sum of incompatibilities of the k subsets after distributing the array optimally, or return -1 if it is not possible.\nA subset is a group integers that appear in the array with no particular order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,1,4], k = 2\nOutput: 4\nExplanation: The optimal distribution of subsets is [1,2] and [1,4].\nThe incompatibility is (2-1) + (4-1) = 4.\nNote that [1,1] and [2,4] would result in a smaller sum, but the first subset contains 2 equal elements.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [6,3,8,1,3,1,2,2], k = 4\nOutput: 6\nExplanation: The optimal distribution of subsets is [1,2], [2,3], [6,8], and [1,3].\nThe incompatibility is (2-1) + (3-2) + (8-6) + (3-1) = 6.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [5,3,3,6,3,3], k = 3\nOutput: -1\nExplanation: It is impossible to distribute nums into 3 subsets where no two elements are equal in the same subset.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= k <= nums.length <= 16",
    "nums.length is divisible by k",
    "1 <= nums[i] <= nums.length"
  ],
  "follow_ups": [],
  "hints": [
    "The constraints are small enough for a backtrack solution but not any backtrack solution",
    "If we use a naive n^k don't you think it can be optimized"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimumIncompatibility(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimumIncompatibility(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumIncompatibility(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumIncompatibility(self, nums: List[int], k: int) -> int:\n        ",
    "c": "int minimumIncompatibility(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimumIncompatibility(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minimumIncompatibility = function(nums, k) {\n    \n};",
    "typescript": "function minimumIncompatibility(nums: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumIncompatibility($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumIncompatibility(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumIncompatibility(nums: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumIncompatibility(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func minimumIncompatibility(nums []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef minimum_incompatibility(nums, k)\n    \nend",
    "scala": "object Solution {\n    def minimumIncompatibility(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_incompatibility(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-incompatibility nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec minimum_incompatibility(Nums :: [integer()], K :: integer()) -> integer().\nminimum_incompatibility(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_incompatibility(nums :: [integer], k :: integer) :: integer\n  def minimum_incompatibility(nums, k) do\n    \n  end\nend"
  }
}
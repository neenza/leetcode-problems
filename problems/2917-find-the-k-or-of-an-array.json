{
  "title": "Find the K-or of an Array",
  "problem_id": "3183",
  "frontend_id": "2917",
  "difficulty": "Easy",
  "problem_slug": "find-the-k-or-of-an-array",
  "topics": [
    "Array",
    "Bit Manipulation"
  ],
  "description": "You are given an integer array nums, and an integer k. Let's introduce K-or operation by extending the standard bitwise OR. In K-or, a bit position in the result is set to 1 if at least k numbers in nums have a 1 in that position.\nReturn the K-or of nums.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [7,12,9,8,9,15], k = 4\nOutput: 9\nExplanation:\nRepresent numbers in binary:\nBit 0 is set in 7, 9, 9, and 15. Bit 3 is set in 12, 9, 8, 9, and 15. Only bits 0 and 3 qualify. The result is (1001) 2 = 9 .",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [2,12,1,11,4,5], k = 6\nOutput: 0\nExplanation: No bit appears as 1 in all six array numbers, as required for K-or with k = 6 . Thus, the result is 0.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [10,8,5,9,11,6,8], k = 1\nOutput: 15\nExplanation: Since k == 1 , the 1-or of the array is equal to the bitwise OR of all its elements. Hence, the answer is 10 OR 8 OR 5 OR 9 OR 11 OR 6 OR 8 = 15 .",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 50",
    "0 <= nums[i] < 231",
    "1 <= k <= nums.length"
  ],
  "follow_ups": [],
  "hints": [
    "Fix a <code>bit</code> from the range <code>[0, 31]</code>, then count the number of elements of <code>nums</code> that have <code>bit</code> set in them.",
    "<code>bit</code> is set in integer <code>x</code> if and only if <code>2<sup>bit</sup> AND x == 2<sup>bit</sup></code>, where <code>AND</code> is the bitwise <code>AND</code> operation."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int findKOr(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int findKOr(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findKOr(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findKOr(self, nums: List[int], k: int) -> int:\n        ",
    "c": "int findKOr(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int FindKOr(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findKOr = function(nums, k) {\n    \n};",
    "typescript": "function findKOr(nums: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function findKOr($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findKOr(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findKOr(nums: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int findKOr(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func findKOr(nums []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef find_k_or(nums, k)\n    \nend",
    "scala": "object Solution {\n    def findKOr(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_k_or(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (find-k-or nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec find_k_or(Nums :: [integer()], K :: integer()) -> integer().\nfind_k_or(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_k_or(nums :: [integer], k :: integer) :: integer\n  def find_k_or(nums, k) do\n    \n  end\nend"
  }
}
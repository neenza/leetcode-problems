{
  "title": "Maximum 69 Number",
  "problem_id": "1448",
  "frontend_id": "1323",
  "difficulty": "Easy",
  "problem_slug": "maximum-69-number",
  "topics": [
    "Math",
    "Greedy"
  ],
  "description": "You are given a positive integer num consisting only of digits 6 and 9.\nReturn the maximum number you can get by changing at most one digit (6 becomes 9, and 9 becomes 6).\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: num = 9669\nOutput: 9969\nExplanation: \nChanging the first digit results in 6669.\nChanging the second digit results in 9969.\nChanging the third digit results in 9699.\nChanging the fourth digit results in 9666.\nThe maximum number is 9969.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: num = 9996\nOutput: 9999\nExplanation: Changing the last digit 6 to 9 results in the maximum number.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: num = 9999\nOutput: 9999\nExplanation: It is better not to apply any change.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= num <= 104",
    "numÂ consists of only 6 and 9 digits."
  ],
  "follow_ups": [],
  "hints": [
    "Convert the number in an array of its digits.",
    "Brute force on every digit to get the maximum number."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maximum69Number (int num) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maximum69Number (int num) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maximum69Number (self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maximum69Number (self, num: int) -> int:\n        ",
    "c": "int maximum69Number (int num) {\n    \n}",
    "csharp": "public class Solution {\n    public int Maximum69Number (int num) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} num\n * @return {number}\n */\nvar maximum69Number  = function(num) {\n    \n};",
    "typescript": "function maximum69Number (num: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer\n     */\n    function maximum69Number ($num) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maximum69Number (_ num: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maximum69Number (num: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maximum69Number (int num) {\n    \n  }\n}",
    "golang": "func maximum69Number (num int) int {\n    \n}",
    "ruby": "# @param {Integer} num\n# @return {Integer}\ndef maximum69_number (num)\n    \nend",
    "scala": "object Solution {\n    def maximum69Number (num: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn maximum69_number (num: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (maximum69-number  num)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec maximum69_number (Num :: integer()) -> integer().\nmaximum69_number (Num) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec maximum69_number (num :: integer) :: integer\n  def maximum69_number (num) do\n    \n  end\nend"
  }
}
{
  "title": "Count Ways to Build Rooms in an Ant Colony",
  "problem_id": "1313",
  "frontend_id": "1916",
  "difficulty": "Hard",
  "problem_slug": "count-ways-to-build-rooms-in-an-ant-colony",
  "topics": [
    "Math",
    "Dynamic Programming",
    "Tree",
    "Graph",
    "Topological Sort",
    "Combinatorics"
  ],
  "description": "You are an ant tasked with adding n new rooms numbered 0 to n-1 to your colony. You are given the expansion plan as a 0-indexed integer array of length n, prevRoom, where prevRoom[i] indicates that you must build room prevRoom[i] before building room i, and these two rooms must be connected directly. Room 0 is already built, so prevRoom[0] = -1. The expansion plan is given such that once all the rooms are built, every room will be reachable from room 0.\nYou can only build one room at a time, and you can travel freely between rooms you have already built only if they are connected. You can choose to build any room as long as its previous room is already built.\nReturn the number of different orders you can build all the rooms in. Since the answer may be large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: prevRoom = [-1,0,1]\r\nOutput: 1\r\nExplanation: There is only one way to build the additional rooms: 0 → 1 → 2",
      "images": [
        "https://assets.leetcode.com/uploads/2021/06/19/d1.JPG"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: prevRoom = [-1,0,0,1,2]\r\nOutput: 6\r\nExplanation:\r\nThe 6 ways are:\r\n0 → 1 → 3 → 2 → 4\r\n0 → 2 → 4 → 1 → 3\r\n0 → 1 → 2 → 3 → 4\r\n0 → 1 → 2 → 4 → 3\r\n0 → 2 → 1 → 3 → 4\r\n0 → 2 → 1 → 4 → 3",
      "images": [
        "https://assets.leetcode.com/uploads/2021/06/19/d2.JPG"
      ]
    }
  ],
  "constraints": [
    "n == prevRoom.length",
    "2 <= n <= 105",
    "prevRoom[0] == -1",
    "0 <= prevRoom[i] < n for all 1 <= i < n",
    "Every room is reachable from room 0 once all the rooms are built."
  ],
  "follow_ups": [],
  "hints": [
    "Use dynamic programming.",
    "Let dp[i] be the number of ways to solve the problem for the subtree of node i.",
    "Imagine you are trying to fill an array with the order of traversal, dp[i] equals the multiplications of the number of ways to distribute the subtrees of the children of i on the array using combinatorics, multiplied bu their dp values."
  ],
  "code_snippets": {
    "cpp": "class Solution {\r\npublic:\r\n    int waysToBuildRooms(vector<int>& prevRoom) {\r\n        \r\n    }\r\n};",
    "java": "class Solution {\r\n    public int waysToBuildRooms(int[] prevRoom) {\r\n        \r\n    }\r\n}",
    "python": "class Solution(object):\r\n    def waysToBuildRooms(self, prevRoom):\r\n        \"\"\"\r\n        :type prevRoom: List[int]\r\n        :rtype: int\r\n        \"\"\"",
    "python3": "class Solution:\r\n    def waysToBuildRooms(self, prevRoom: List[int]) -> int:",
    "c": "int waysToBuildRooms(int* prevRoom, int prevRoomSize){\r\n\r\n}",
    "csharp": "public class Solution {\r\n    public int WaysToBuildRooms(int[] prevRoom) {\r\n        \r\n    }\r\n}",
    "javascript": "/**\r\n * @param {number[]} prevRoom\r\n * @return {number}\r\n */\r\nvar waysToBuildRooms = function(prevRoom) {\r\n    \r\n};",
    "typescript": "function waysToBuildRooms(prevRoom: number[]): number {\r\n\r\n};",
    "php": "class Solution {\r\n\r\n    /**\r\n     * @param Integer[] $prevRoom\r\n     * @return Integer\r\n     */\r\n    function waysToBuildRooms($prevRoom) {\r\n        \r\n    }\r\n}",
    "swift": "class Solution {\r\n    func waysToBuildRooms(_ prevRoom: [Int]) -> Int {\r\n        \r\n    }\r\n}",
    "kotlin": "class Solution {\r\n    fun waysToBuildRooms(prevRoom: IntArray): Int {\r\n        \r\n    }\r\n}",
    "golang": "func waysToBuildRooms(prevRoom []int) int {\r\n    \r\n}",
    "ruby": "# @param {Integer[]} prev_room\r\n# @return {Integer}\r\ndef ways_to_build_rooms(prev_room)\r\n    \r\nend",
    "scala": "object Solution {\r\n    def waysToBuildRooms(prevRoom: Array[Int]): Int = {\r\n        \r\n    }\r\n}",
    "rust": "impl Solution {\r\n    pub fn ways_to_build_rooms(prev_room: Vec<i32>) -> i32 {\r\n        \r\n    }\r\n}",
    "racket": "(define/contract (ways-to-build-rooms prevRoom)\r\n  (-> (listof exact-integer?) exact-integer?)\r\n\r\n  )"
  }
}
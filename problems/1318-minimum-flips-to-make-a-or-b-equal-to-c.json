{
  "title": "Minimum Flips to Make a OR b Equal to c",
  "problem_id": "1441",
  "frontend_id": "1318",
  "difficulty": "Medium",
  "problem_slug": "minimum-flips-to-make-a-or-b-equal-to-c",
  "topics": [
    "Bit Manipulation"
  ],
  "description": "Given 3 positives numbers a, b and c. Return the minimum flips required in some bits of a and b to make ( a OR b == c ). (bitwise OR operation).\r\nFlip operation consists of change any single bit 1 to 0 or change the bit 0 to 1 in their binary representation.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: a = 2, b = 6, c = 5\r\nOutput: 3\r\nExplanation: After flips a = 1 , b = 4 , c = 5 such that (a OR b == c)",
      "images": [
        "https://assets.leetcode.com/uploads/2020/01/06/sample_3_1676.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: a = 4, b = 2, c = 7\r\nOutput: 1",
      "images": [
        "https://assets.leetcode.com/uploads/2020/01/06/sample_3_1676.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: a = 1, b = 2, c = 3\r\nOutput: 0",
      "images": [
        "https://assets.leetcode.com/uploads/2020/01/06/sample_3_1676.png"
      ]
    }
  ],
  "constraints": [
    "1 <= a <= 10^9",
    "1 <= b <= 10^9",
    "1 <= c <= 10^9"
  ],
  "follow_ups": [],
  "hints": [
    "Check the bits one by one whether they need to be flipped."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minFlips(int a, int b, int c) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minFlips(int a, int b, int c) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minFlips(self, a, b, c):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :type c: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minFlips(self, a: int, b: int, c: int) -> int:\n        ",
    "c": "\n\nint minFlips(int a, int b, int c){\n\n}",
    "csharp": "public class Solution {\n    public int MinFlips(int a, int b, int c) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @return {number}\n */\nvar minFlips = function(a, b, c) {\n    \n};",
    "typescript": "function minFlips(a: number, b: number, c: number): number {\n\n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $a\n     * @param Integer $b\n     * @param Integer $c\n     * @return Integer\n     */\n    function minFlips($a, $b, $c) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minFlips(_ a: Int, _ b: Int, _ c: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minFlips(a: Int, b: Int, c: Int): Int {\n        \n    }\n}",
    "golang": "func minFlips(a int, b int, c int) int {\n    \n}",
    "ruby": "# @param {Integer} a\n# @param {Integer} b\n# @param {Integer} c\n# @return {Integer}\ndef min_flips(a, b, c)\n    \nend",
    "scala": "object Solution {\n    def minFlips(a: Int, b: Int, c: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_flips(a: i32, b: i32, c: i32) -> i32 {\n        \n    }\n}"
  }
}
{
  "title": "Sum Multiples",
  "problem_id": "2752",
  "frontend_id": "2652",
  "difficulty": "Easy",
  "problem_slug": "sum-multiples",
  "topics": [
    "Math"
  ],
  "description": "Given a positive integer n, find the sum of all integers in the range [1, n] inclusive that are divisible by 3, 5, or 7.\nReturn an integer denoting the sum of all numbers in the given range satisfyingÂ the constraint.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 7\nOutput: 21\nExplanation: Numbers in the range [1, 7] that are divisible by 3, 5, or 7 are 3, 5, 6, 7. The sum of these numbers is 21.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 10\nOutput: 40\nExplanation: Numbers in the range [1, 10] that are divisible by 3, 5, or 7 are 3, 5, 6, 7, 9, 10. The sum of these numbers is 40.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 9\nOutput: 30\nExplanation: Numbers in the range [1, 9] that are divisible by 3, 5, or 7 are 3, 5, 6, 7, 9. The sum of these numbers is 30.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 103"
  ],
  "follow_ups": [],
  "hints": [
    "Iterate through the range 1 to n and count numbers divisible by either 3, 5, or 7."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int sumOfMultiples(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int sumOfMultiples(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def sumOfMultiples(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def sumOfMultiples(self, n: int) -> int:\n        ",
    "c": "int sumOfMultiples(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int SumOfMultiples(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar sumOfMultiples = function(n) {\n    \n};",
    "typescript": "function sumOfMultiples(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function sumOfMultiples($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func sumOfMultiples(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun sumOfMultiples(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int sumOfMultiples(int n) {\n    \n  }\n}",
    "golang": "func sumOfMultiples(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef sum_of_multiples(n)\n    \nend",
    "scala": "object Solution {\n    def sumOfMultiples(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn sum_of_multiples(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (sum-of-multiples n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec sum_of_multiples(N :: integer()) -> integer().\nsum_of_multiples(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec sum_of_multiples(n :: integer) :: integer\n  def sum_of_multiples(n) do\n    \n  end\nend"
  }
}
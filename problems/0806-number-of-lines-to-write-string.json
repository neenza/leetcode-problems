{
  "title": "Number of Lines To Write String",
  "problem_id": "824",
  "frontend_id": "806",
  "difficulty": "Easy",
  "problem_slug": "number-of-lines-to-write-string",
  "topics": [
    "Array",
    "String"
  ],
  "description": "You are given a string s of lowercase English letters and an array widths denoting how many pixels wide each lowercase English letter is. Specifically, widths[0] is the width of 'a', widths[1] is the width of 'b', and so on.\nYou are trying to write s across several lines, where each line is no longer than 100 pixels. Starting at the beginning of s, write as many letters on the first line such that the total width does not exceed 100 pixels. Then, from where you stopped in s, continue writing as many letters as you can on the second line. Continue this process until you have written all of s.\nReturn an array result of length 2 where:\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"abcdefghijklmnopqrstuvwxyz\"\nOutput: [3,60]\nExplanation: You can write s as follows:\nabcdefghij  // 100 pixels wide\nklmnopqrst  // 100 pixels wide\nuvwxyz      // 60 pixels wide\nThere are a total of 3 lines, and the last line is 60 pixels wide.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"bbbcccdddaaa\"\nOutput: [2,4]\nExplanation: You can write s as follows:\nbbbcccdddaa  // 98 pixels wide\na            // 4 pixels wide\nThere are a total of 2 lines, and the last line is 4 pixels wide.",
      "images": []
    }
  ],
  "constraints": [
    "widths.length == 26",
    "2 <= widths[i] <= 10",
    "1 <= s.length <= 1000",
    "s contains only lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> numberOfLines(vector<int>& widths, string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] numberOfLines(int[] widths, String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numberOfLines(self, widths, s):\n        \"\"\"\n        :type widths: List[int]\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\n        ",
    "c": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* numberOfLines(int* widths, int widthsSize, char * s, int* returnSize){\n\n}",
    "csharp": "public class Solution {\n    public int[] NumberOfLines(int[] widths, string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} widths\n * @param {string} s\n * @return {number[]}\n */\nvar numberOfLines = function(widths, s) {\n    \n};",
    "typescript": "function numberOfLines(widths: number[], s: string): number[] {\n\n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $widths\n     * @param String $s\n     * @return Integer[]\n     */\n    function numberOfLines($widths, $s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numberOfLines(_ widths: [Int], _ s: String) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numberOfLines(widths: IntArray, s: String): IntArray {\n        \n    }\n}",
    "golang": "func numberOfLines(widths []int, s string) []int {\n    \n}",
    "ruby": "# @param {Integer[]} widths\n# @param {String} s\n# @return {Integer[]}\ndef number_of_lines(widths, s)\n    \nend",
    "scala": "object Solution {\n    def numberOfLines(widths: Array[Int], s: String): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn number_of_lines(widths: Vec<i32>, s: String) -> Vec<i32> {\n        \n    }\n}"
  },
  "solution": "[TOC]\n\n---\n### Approach #1: Insert Each Character [Accepted]\n\n**Intuition**\n\nWe can write out each character in the string `S` one by one.\n\nAs we write characters, we can update `(lines, width)` that keeps track of how many lines we have used, and what is the length of the used space in the last line.\n\n**Algorithm**\n\nIf the space `w` of the next character in `S` fits our current line, we will add it.  Otherwise, we will start a new line, and use `w` space to put that character on the next line.**Complexity Analysis**\n\n* Time Complexity:  $$O(S\\text{.length})$$, as we iterate through `S`.\n\n* Space Complexity: $$O(1)$$ additional space, as we only use `lines` and `width`.  (In Java, our `toCharArray` method makes this $$O(S\\text{.length})$$, but we could use `.charAt` instead)."
}
{
  "title": "Minimum Cost to Make All Characters Equal",
  "problem_id": "2817",
  "frontend_id": "2712",
  "difficulty": "Medium",
  "problem_slug": "minimum-cost-to-make-all-characters-equal",
  "topics": [
    "String",
    "Dynamic Programming",
    "Greedy"
  ],
  "description": "You are given a 0-indexed binary string s of length n on which you can apply two types of operations:\nReturn the minimum cost to make all characters of the string equal.\nInvert a character meansÂ if its value is '0' it becomes '1' and vice-versa.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"0011\"\nOutput: 2\nExplanation: Apply the second operation with i = 2 to obtain s = \"0000\" for a cost of 2. It can be shown that 2 is the minimum cost to make all characters equal.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"010101\"\nOutput: 9\nExplanation: Apply the first operation with i = 2 to obtain s = \"101101\" for a cost of 3.\nApply the first operation with i = 1 to obtain s = \"011101\" for a cost of 2. \nApply the first operation with i = 0 to obtain s = \"111101\" for a cost of 1. \nApply the second operation with i = 4 to obtain s = \"111110\" for a cost of 2.\nApply the second operation with i = 5 to obtain s = \"111111\" for a cost of 1. \nThe total cost to make all characters equal is 9. It can be shown that 9 is the minimum cost to make all characters equal.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length == n <= 105",
    "s[i] is either '0' or '1'"
  ],
  "follow_ups": [],
  "hints": [
    "For every index i, calculate the number of operations required to make the prefix [0, i - 1] equal to the character at index i, denoted prefix[i].",
    "For every index i, calculate the number of operations required to make the suffix [i + 1, n - 1] equal to the character at index i, denoted suffix[i].",
    "The final string will contain at least one character that is left unchanged; Therefore, the answer is the minimum of prefix[i] + suffix[i] for every i in [0, n - 1]."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long minimumCost(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public long minimumCost(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumCost(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumCost(self, s: str) -> int:\n        ",
    "c": "long long minimumCost(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public long MinimumCost(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {number}\n */\nvar minimumCost = function(s) {\n    \n};",
    "typescript": "function minimumCost(s: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function minimumCost($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumCost(_ s: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumCost(s: String): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumCost(String s) {\n    \n  }\n}",
    "golang": "func minimumCost(s string) int64 {\n    \n}",
    "ruby": "# @param {String} s\n# @return {Integer}\ndef minimum_cost(s)\n    \nend",
    "scala": "object Solution {\n    def minimumCost(s: String): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_cost(s: String) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-cost s)\n  (-> string? exact-integer?)\n  )",
    "erlang": "-spec minimum_cost(S :: unicode:unicode_binary()) -> integer().\nminimum_cost(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_cost(s :: String.t) :: integer\n  def minimum_cost(s) do\n    \n  end\nend"
  }
}
{
  "title": "Probability of a Two Boxes Having The Same Number of Distinct Balls",
  "problem_id": "1577",
  "frontend_id": "1467",
  "difficulty": "Hard",
  "problem_slug": "probability-of-a-two-boxes-having-the-same-number-of-distinct-balls",
  "topics": [
    "Array",
    "Math",
    "Dynamic Programming",
    "Backtracking",
    "Combinatorics",
    "Probability and Statistics"
  ],
  "description": "Given 2n balls of k distinct colors. You will be given an integer array balls of size k where balls[i] is the number of balls of color i.\nAll the balls will be shuffled uniformly at random, then we will distribute the first n balls to the first box and the remaining n balls to the other box (Please read the explanation of the second example carefully).\nPlease note that the two boxes are considered different. For example, if we have two balls of colors a and b, and two boxes [] and (), then the distribution [a] (b) is considered different than the distribution [b] (a) (Please read the explanation of the first example carefully).\nReturn the probability that the two boxes have the same number of distinct balls. Answers within 10-5 of the actual value will be accepted as correct.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: balls = [1,1]\nOutput: 1.00000\nExplanation: Only 2 ways to divide the balls equally:\n- A ball of color 1 to box 1 and a ball of color 2 to box 2\n- A ball of color 2 to box 1 and a ball of color 1 to box 2\nIn both ways, the number of distinct colors in each box is equal. The probability is 2/2 = 1",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: balls = [2,1,1]\nOutput: 0.66667\nExplanation: We have the set of balls [1, 1, 2, 3]\nThis set of balls will be shuffled randomly and we may have one of the 12 distinct shuffles with equal probability (i.e. 1/12):\n[1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]\nAfter that, we add the first two balls to the first box and the second two balls to the second box.\nWe can see that 8 of these 12 possible random distributions have the same number of distinct colors of balls in each box.\nProbability is 8/12 = 0.66667",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: balls = [1,2,1,2]\nOutput: 0.60000\nExplanation: The set of balls is [1, 2, 2, 3, 4, 4]. It is hard to display all the 180 possible random shuffles of this set but it is easy to check that 108 of them will have the same number of distinct colors in each box.\nProbability = 108 / 180 = 0.6",
      "images": []
    }
  ],
  "constraints": [
    "1 <= balls.length <= 8",
    "1 <= balls[i] <= 6",
    "sum(balls) is even."
  ],
  "follow_ups": [],
  "hints": [
    "Check how many ways you can distribute the balls between the boxes.",
    "Consider that one way you will use (x1, x2, x3, ..., xk) where xi is the number of balls from colour i. The probability of achieving this way randomly is ( (ball1 C x1) * (ball2 C x2) * (ball3 C x3) * ... * (ballk C xk)) / (2n C n).",
    "The probability of a draw is the sigma of probabilities of different ways to achieve draw.",
    "Can you use Dynamic programming to solve this problem in a better complexity ?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    double getProbability(vector<int>& balls) {\n        \n    }\n};",
    "java": "class Solution {\n    public double getProbability(int[] balls) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def getProbability(self, balls):\n        \"\"\"\n        :type balls: List[int]\n        :rtype: float\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def getProbability(self, balls: List[int]) -> float:\n        ",
    "c": "double getProbability(int* balls, int ballsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public double GetProbability(int[] balls) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} balls\n * @return {number}\n */\nvar getProbability = function(balls) {\n    \n};",
    "typescript": "function getProbability(balls: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $balls\n     * @return Float\n     */\n    function getProbability($balls) {\n        \n    }\n}",
    "swift": "class Solution {\n    func getProbability(_ balls: [Int]) -> Double {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun getProbability(balls: IntArray): Double {\n        \n    }\n}",
    "dart": "class Solution {\n  double getProbability(List<int> balls) {\n    \n  }\n}",
    "golang": "func getProbability(balls []int) float64 {\n    \n}",
    "ruby": "# @param {Integer[]} balls\n# @return {Float}\ndef get_probability(balls)\n    \nend",
    "scala": "object Solution {\n    def getProbability(balls: Array[Int]): Double = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn get_probability(balls: Vec<i32>) -> f64 {\n        \n    }\n}",
    "racket": "(define/contract (get-probability balls)\n  (-> (listof exact-integer?) flonum?)\n  )",
    "erlang": "-spec get_probability(Balls :: [integer()]) -> float().\nget_probability(Balls) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec get_probability(balls :: [integer]) :: float\n  def get_probability(balls) do\n    \n  end\nend"
  }
}
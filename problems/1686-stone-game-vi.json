{
  "title": "Stone Game VI",
  "problem_id": "1788",
  "frontend_id": "1686",
  "difficulty": "Medium",
  "problem_slug": "stone-game-vi",
  "topics": [
    "Array",
    "Math",
    "Greedy",
    "Sorting",
    "Heap (Priority Queue)",
    "Game Theory"
  ],
  "description": "Alice and Bob take turns playing a game, with Alice starting first.\nThere are n stones in a pile. On each player's turn, they can remove a stone from the pile and receive points based on the stone's value. Alice and Bob may value the stones differently.\nYou are given two integer arrays of length n, aliceValues and bobValues. Each aliceValues[i] and bobValues[i] represents how Alice and Bob, respectively, value the ith stone.\nThe winner is the person with the most points after all the stones are chosen. If both players have the same amount of points, the game results in a draw. Both players will play optimally.Â Both players know the other's values.\nDetermine the result of the game, and:\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: aliceValues = [1,3], bobValues = [2,1]\nOutput: 1\nExplanation:\nIf Alice takes stone 1 (0-indexed) first, Alice will receive 3 points.\nBob can only choose stone 0, and will only receive 2 points.\nAlice wins.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: aliceValues = [1,2], bobValues = [3,1]\nOutput: 0\nExplanation:\nIf Alice takes stone 0, and Bob takes stone 1, they will both have 1 point.\nDraw.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: aliceValues = [2,4,3], bobValues = [1,6,7]\nOutput: -1\nExplanation:\nRegardless of how Alice plays, Bob will be able to have more points than Alice.\nFor example, if Alice takes stone 1, Bob can take stone 2, and Alice takes stone 0, Alice will have 6 points to Bob's 7.\nBob wins.",
      "images": []
    }
  ],
  "constraints": [
    "n == aliceValues.length == bobValues.length",
    "1 <= n <= 105",
    "1 <= aliceValues[i], bobValues[i] <= 100"
  ],
  "follow_ups": [],
  "hints": [
    "When one takes the stone, they not only get the points, but they take them away from the other player too.",
    "Greedily choose the stone with the maximum aliceValues[i] + bobValues[i]."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int stoneGameVI(vector<int>& aliceValues, vector<int>& bobValues) {\n        \n    }\n};",
    "java": "class Solution {\n    public int stoneGameVI(int[] aliceValues, int[] bobValues) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def stoneGameVI(self, aliceValues, bobValues):\n        \"\"\"\n        :type aliceValues: List[int]\n        :type bobValues: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def stoneGameVI(self, aliceValues: List[int], bobValues: List[int]) -> int:\n        ",
    "c": "int stoneGameVI(int* aliceValues, int aliceValuesSize, int* bobValues, int bobValuesSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int StoneGameVI(int[] aliceValues, int[] bobValues) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} aliceValues\n * @param {number[]} bobValues\n * @return {number}\n */\nvar stoneGameVI = function(aliceValues, bobValues) {\n    \n};",
    "typescript": "function stoneGameVI(aliceValues: number[], bobValues: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $aliceValues\n     * @param Integer[] $bobValues\n     * @return Integer\n     */\n    function stoneGameVI($aliceValues, $bobValues) {\n        \n    }\n}",
    "swift": "class Solution {\n    func stoneGameVI(_ aliceValues: [Int], _ bobValues: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun stoneGameVI(aliceValues: IntArray, bobValues: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int stoneGameVI(List<int> aliceValues, List<int> bobValues) {\n    \n  }\n}",
    "golang": "func stoneGameVI(aliceValues []int, bobValues []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} alice_values\n# @param {Integer[]} bob_values\n# @return {Integer}\ndef stone_game_vi(alice_values, bob_values)\n    \nend",
    "scala": "object Solution {\n    def stoneGameVI(aliceValues: Array[Int], bobValues: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn stone_game_vi(alice_values: Vec<i32>, bob_values: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (stone-game-vi aliceValues bobValues)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec stone_game_vi(AliceValues :: [integer()], BobValues :: [integer()]) -> integer().\nstone_game_vi(AliceValues, BobValues) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec stone_game_vi(alice_values :: [integer], bob_values :: [integer]) :: integer\n  def stone_game_vi(alice_values, bob_values) do\n    \n  end\nend"
  }
}
{
  "title": "Ways to Split Array Into Good Subarrays",
  "problem_id": "2867",
  "frontend_id": "2750",
  "difficulty": "Medium",
  "problem_slug": "ways-to-split-array-into-good-subarrays",
  "topics": [
    "Array",
    "Math",
    "Dynamic Programming"
  ],
  "description": "You are given a binary array nums.\nA subarray of an array is good if it contains exactly one element with the value 1.\nReturn an integer denoting the number of ways to split the array nums into good subarrays. As the number may be too large, return it modulo 109 + 7.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [0,1,0,0,1]\nOutput: 3\nExplanation: There are 3 ways to split nums into good subarrays:\n- [0,1] [0,0,1]\n- [0,1,0] [0,1]\n- [0,1,0,0] [1]",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [0,1,0]\nOutput: 1\nExplanation: There is 1 way to split nums into good subarrays:\n- [0,1,0]",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "0 <= nums[i] <= 1"
  ],
  "follow_ups": [],
  "hints": [
    "If the array consists of only 0s answer is 0.",
    "In the final split, exactly one separation point exists between two consecutive 1s.",
    "In how many ways can separation points be put?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int numberOfGoodSubarraySplits(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int numberOfGoodSubarraySplits(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numberOfGoodSubarraySplits(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numberOfGoodSubarraySplits(self, nums: List[int]) -> int:\n        ",
    "c": "int numberOfGoodSubarraySplits(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int NumberOfGoodSubarraySplits(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar numberOfGoodSubarraySplits = function(nums) {\n    \n};",
    "typescript": "function numberOfGoodSubarraySplits(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function numberOfGoodSubarraySplits($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numberOfGoodSubarraySplits(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numberOfGoodSubarraySplits(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int numberOfGoodSubarraySplits(List<int> nums) {\n    \n  }\n}",
    "golang": "func numberOfGoodSubarraySplits(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef number_of_good_subarray_splits(nums)\n    \nend",
    "scala": "object Solution {\n    def numberOfGoodSubarraySplits(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn number_of_good_subarray_splits(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (number-of-good-subarray-splits nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec number_of_good_subarray_splits(Nums :: [integer()]) -> integer().\nnumber_of_good_subarray_splits(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec number_of_good_subarray_splits(nums :: [integer]) :: integer\n  def number_of_good_subarray_splits(nums) do\n    \n  end\nend"
  }
}
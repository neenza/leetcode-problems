{
  "title": "Count Partitions With Max-Min Difference at Most K",
  "problem_id": "3835",
  "frontend_id": "3578",
  "difficulty": "Medium",
  "problem_slug": "count-partitions-with-max-min-difference-at-most-k",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Queue",
    "Sliding Window",
    "Prefix Sum",
    "Monotonic Queue"
  ],
  "description": "You are given an integer array nums and an integer k. Your task is to partition nums into one or more non-empty contiguous segments such that in each segment, the difference between its maximum and minimum elements is at most k.\nReturn the total number of ways to partition nums under this condition.\nSince the answer may be too large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [9,4,1,3,7], k = 4\nOutput: 6\nExplanation:\nThere are 6 valid partitions where the difference between the maximum and minimum elements in each segment is at most k = 4 :",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [3,3,4], k = 0\nOutput: 2\nExplanation:\nThere are 2 valid partitions that satisfy the given conditions:",
      "images": []
    }
  ],
  "constraints": [
    "2 <= nums.length <= 5 * 104",
    "1 <= nums[i] <= 109",
    "0 <= k <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "Use dynamic programming.",
    "Let <code>dp[idx]</code> be the count of ways to partition the array with the last partition ending at index <code>idx</code>.",
    "Try using a sliding window; we can track the minimum and maximum in the window using deques."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int countPartitions(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int countPartitions(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countPartitions(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countPartitions(self, nums: List[int], k: int) -> int:\n        ",
    "c": "int countPartitions(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int CountPartitions(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar countPartitions = function(nums, k) {\n    \n};",
    "typescript": "function countPartitions(nums: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function countPartitions($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countPartitions(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countPartitions(nums: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int countPartitions(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func countPartitions(nums []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef count_partitions(nums, k)\n    \nend",
    "scala": "object Solution {\n    def countPartitions(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_partitions(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (count-partitions nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec count_partitions(Nums :: [integer()], K :: integer()) -> integer().\ncount_partitions(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_partitions(nums :: [integer], k :: integer) :: integer\n  def count_partitions(nums, k) do\n    \n  end\nend"
  }
}
{
  "title": "Memoize",
  "problem_id": "2731",
  "frontend_id": "2623",
  "difficulty": "Medium",
  "problem_slug": "memoize",
  "topics": [],
  "description": "Given a function fn, return a memoized version of that function.\nA memoized function is a function that will never be called twice with the same inputs. Instead it will return a cached value.\nYou can assume there are 3 possible input functions: sum, fib, and factorial.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input:\nfnName = \"sum\"\nactions = [\"call\",\"call\",\"getCallCount\",\"call\",\"getCallCount\"]\nvalues = [[2,2],[2,2],[],[1,2],[]]\nOutput: [4,4,1,3,2]\nExplanation:\nconst sum = (a, b) => a + b;\nconst memoizedSum = memoize(sum);\nmemoizedSum(2, 2); // \"call\" - returns 4. sum() was called as (2, 2) was not seen before.\nmemoizedSum(2, 2); // \"call\" - returns 4. However sum() was not called because the same inputs were seen before.\n// \"getCallCount\" - total call count: 1\nmemoizedSum(1, 2); // \"call\" - returns 3. sum() was called as (1, 2) was not seen before.\n// \"getCallCount\" - total call count: 2",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input:\nfnName = \"factorial\"\nactions = [\"call\",\"call\",\"call\",\"getCallCount\",\"call\",\"getCallCount\"]\nvalues = [[2],[3],[2],[],[3],[]]\nOutput: [2,6,2,2,6,2]\nExplanation:\nconst factorial = (n) => (n <= 1) ? 1 : (n * factorial(n - 1));\nconst memoFactorial = memoize(factorial);\nmemoFactorial(2); // \"call\" - returns 2.\nmemoFactorial(3); // \"call\" - returns 6.\nmemoFactorial(2); // \"call\" - returns 2. However factorial was not called because 2 was seen before.\n// \"getCallCount\" - total call count: 2\nmemoFactorial(3); // \"call\" - returns 6. However factorial was not called because 3 was seen before.\n// \"getCallCount\" - total call count: 2",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input:\nfnName = \"fib\"\nactions = [\"call\",\"getCallCount\"]\nvalues = [[5],[]]\nOutput: [8,1]\nExplanation:\nfib(5) = 8 // \"call\"\n// \"getCallCount\" - total call count: 1",
      "images": []
    }
  ],
  "constraints": [
    "0 <= a, b <= 105",
    "1 <= n <= 10",
    "1 <= actions.length <= 105",
    "actions.length === values.length",
    "actions[i] is one of \"call\" and \"getCallCount\"",
    "fnName is one of \"sum\", \"factorial\" and \"fib\""
  ],
  "follow_ups": [],
  "hints": [
    "You can create copy of a function by spreading function parameters. \r\n\r\nfunction outerFunction(passedFunction) {\r\n  return newFunction(...params) {\r\n    return passedFunction(...params);\r\n  };\r\n}",
    "params is an array. Since you know all values in the array are numbers, you can turn it into a string with JSON.stringify().",
    "In the outerFunction, you can declare a Map or Object. In the inner function you can avoid executing the passed function if the params have already been passed before."
  ],
  "code_snippets": {
    "javascript": "/**\n * @param {Function} fn\n * @return {Function}\n */\nfunction memoize(fn) {\n    \n    return function(...args) {\n        \n    }\n}\n\n\n/** \n * let callCount = 0;\n * const memoizedFn = memoize(function (a, b) {\n *\t callCount += 1;\n *   return a + b;\n * })\n * memoizedFn(2, 3) // 5\n * memoizedFn(2, 3) // 5\n * console.log(callCount) // 1 \n */",
    "typescript": "type Fn = (...params: number[]) => number\n\nfunction memoize(fn: Fn): Fn {\n    \n    return function(...args) {\n        \n    }\n}\n\n\n/** \n * let callCount = 0;\n * const memoizedFn = memoize(function (a, b) {\n *\t callCount += 1;\n *   return a + b;\n * })\n * memoizedFn(2, 3) // 5\n * memoizedFn(2, 3) // 5\n * console.log(callCount) // 1 \n */"
  }
}
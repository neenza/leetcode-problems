{
  "title": "Magical String",
  "problem_id": "481",
  "frontend_id": "481",
  "difficulty": "Medium",
  "problem_slug": "magical-string",
  "topics": [
    "Two Pointers",
    "String"
  ],
  "description": "A magical string s consists of only '1' and '2' and obeys the following rules:\nThe first few elements of s is s = \"1221121221221121122……\". If we group the consecutive 1's and 2's in s, it will be \"1 22 11 2 1 22 1 22 11 2 11 22 ......\" and the occurrences of 1's or 2's in each group are \"1 2 2 1 1 2 1 2 2 1 2 2 ......\". You can see that the occurrence sequence is s itself.\nGiven an integer n, return the number of 1's in the first n number in the magical string s.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 6\nOutput: 3\nExplanation: The first 6 elements of magical string s is \"122112\" and it contains three 1's, so return 3.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 1\nOutput: 1",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 105"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int magicalString(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int magicalString(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def magicalString(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def magicalString(self, n: int) -> int:\n        ",
    "c": "int magicalString(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int MagicalString(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar magicalString = function(n) {\n    \n};",
    "typescript": "function magicalString(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function magicalString($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func magicalString(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun magicalString(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int magicalString(int n) {\n    \n  }\n}",
    "golang": "func magicalString(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef magical_string(n)\n    \nend",
    "scala": "object Solution {\n    def magicalString(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn magical_string(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (magical-string n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec magical_string(N :: integer()) -> integer().\nmagical_string(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec magical_string(n :: integer) :: integer\n  def magical_string(n) do\n    \n  end\nend"
  }
}
{
  "title": "Design Browser History",
  "problem_id": "1582",
  "frontend_id": "1472",
  "difficulty": "Medium",
  "problem_slug": "design-browser-history",
  "topics": [
    "Array",
    "Linked List",
    "Stack",
    "Design",
    "Doubly-Linked List",
    "Data Stream"
  ],
  "description": "You have a browser of one tab where you start on the homepage and you can visit another url, get back in the history number of steps or move forward in the history number of steps.\nImplement the BrowserHistory class:\nExample:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input:\n[\"BrowserHistory\",\"visit\",\"visit\",\"visit\",\"back\",\"back\",\"forward\",\"visit\",\"forward\",\"back\",\"back\"]\n[[\"leetcode.com\"],[\"google.com\"],[\"facebook.com\"],[\"youtube.com\"],[1],[1],[1],[\"linkedin.com\"],[2],[2],[7]]\nOutput:\n[null,null,null,null,\"facebook.com\",\"google.com\",\"facebook.com\",null,\"linkedin.com\",\"google.com\",\"leetcode.com\"]\n\nExplanation:\nBrowserHistory browserHistory = new BrowserHistory(\"leetcode.com\");\nbrowserHistory.visit(\"google.com\");       // You are in \"leetcode.com\". Visit \"google.com\"\nbrowserHistory.visit(\"facebook.com\");     // You are in \"google.com\". Visit \"facebook.com\"\nbrowserHistory.visit(\"youtube.com\");      // You are in \"facebook.com\". Visit \"youtube.com\"\nbrowserHistory.back(1);                   // You are in \"youtube.com\", move back to \"facebook.com\" return \"facebook.com\"\nbrowserHistory.back(1);                   // You are in \"facebook.com\", move back to \"google.com\" return \"google.com\"\nbrowserHistory.forward(1);                // You are in \"google.com\", move forward to \"facebook.com\" return \"facebook.com\"\nbrowserHistory.visit(\"linkedin.com\");     // You are in \"facebook.com\". Visit \"linkedin.com\"\nbrowserHistory.forward(2);                // You are in \"linkedin.com\", you cannot move forward any steps.\nbrowserHistory.back(2);                   // You are in \"linkedin.com\", move back two steps to \"facebook.com\" then to \"google.com\". return \"google.com\"\nbrowserHistory.back(7);                   // You are in \"google.com\", you can move back only one step to \"leetcode.com\". return \"leetcode.com\"",
      "images": []
    }
  ],
  "constraints": [
    "1 <= homepage.length <= 20",
    "1 <= url.length <= 20",
    "1 <= steps <= 100",
    "homepage and url consist of  '.' or lower case English letters.",
    "At most 5000 calls will be made to visit, back, and forward."
  ],
  "follow_ups": [],
  "hints": [
    "Use two stacks: one for back history, and one for forward history. You can simulate the functions by popping an element from one stack and pushing it into the other.",
    "Can you improve program runtime by using a different data structure?"
  ],
  "code_snippets": {
    "cpp": "class BrowserHistory {\npublic:\n    BrowserHistory(string homepage) {\n        \n    }\n    \n    void visit(string url) {\n        \n    }\n    \n    string back(int steps) {\n        \n    }\n    \n    string forward(int steps) {\n        \n    }\n};\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * BrowserHistory* obj = new BrowserHistory(homepage);\n * obj->visit(url);\n * string param_2 = obj->back(steps);\n * string param_3 = obj->forward(steps);\n */",
    "java": "class BrowserHistory {\n\n    public BrowserHistory(String homepage) {\n        \n    }\n    \n    public void visit(String url) {\n        \n    }\n    \n    public String back(int steps) {\n        \n    }\n    \n    public String forward(int steps) {\n        \n    }\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * BrowserHistory obj = new BrowserHistory(homepage);\n * obj.visit(url);\n * String param_2 = obj.back(steps);\n * String param_3 = obj.forward(steps);\n */",
    "python": "class BrowserHistory(object):\n\n    def __init__(self, homepage):\n        \"\"\"\n        :type homepage: str\n        \"\"\"\n        \n\n    def visit(self, url):\n        \"\"\"\n        :type url: str\n        :rtype: None\n        \"\"\"\n        \n\n    def back(self, steps):\n        \"\"\"\n        :type steps: int\n        :rtype: str\n        \"\"\"\n        \n\n    def forward(self, steps):\n        \"\"\"\n        :type steps: int\n        :rtype: str\n        \"\"\"\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)",
    "python3": "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        \n\n    def visit(self, url: str) -> None:\n        \n\n    def back(self, steps: int) -> str:\n        \n\n    def forward(self, steps: int) -> str:\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)",
    "c": "\n\n\ntypedef struct {\n    \n} BrowserHistory;\n\n\nBrowserHistory* browserHistoryCreate(char* homepage) {\n    \n}\n\nvoid browserHistoryVisit(BrowserHistory* obj, char* url) {\n    \n}\n\nchar* browserHistoryBack(BrowserHistory* obj, int steps) {\n    \n}\n\nchar* browserHistoryForward(BrowserHistory* obj, int steps) {\n    \n}\n\nvoid browserHistoryFree(BrowserHistory* obj) {\n    \n}\n\n/**\n * Your BrowserHistory struct will be instantiated and called as such:\n * BrowserHistory* obj = browserHistoryCreate(homepage);\n * browserHistoryVisit(obj, url);\n \n * char* param_2 = browserHistoryBack(obj, steps);\n \n * char* param_3 = browserHistoryForward(obj, steps);\n \n * browserHistoryFree(obj);\n*/",
    "csharp": "public class BrowserHistory {\n\n    public BrowserHistory(string homepage) {\n        \n    }\n    \n    public void Visit(string url) {\n        \n    }\n    \n    public string Back(int steps) {\n        \n    }\n    \n    public string Forward(int steps) {\n        \n    }\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * BrowserHistory obj = new BrowserHistory(homepage);\n * obj.Visit(url);\n * string param_2 = obj.Back(steps);\n * string param_3 = obj.Forward(steps);\n */",
    "javascript": "/**\n * @param {string} homepage\n */\nvar BrowserHistory = function(homepage) {\n    \n};\n\n/** \n * @param {string} url\n * @return {void}\n */\nBrowserHistory.prototype.visit = function(url) {\n    \n};\n\n/** \n * @param {number} steps\n * @return {string}\n */\nBrowserHistory.prototype.back = function(steps) {\n    \n};\n\n/** \n * @param {number} steps\n * @return {string}\n */\nBrowserHistory.prototype.forward = function(steps) {\n    \n};\n\n/** \n * Your BrowserHistory object will be instantiated and called as such:\n * var obj = new BrowserHistory(homepage)\n * obj.visit(url)\n * var param_2 = obj.back(steps)\n * var param_3 = obj.forward(steps)\n */",
    "typescript": "class BrowserHistory {\n    constructor(homepage: string) {\n        \n    }\n\n    visit(url: string): void {\n        \n    }\n\n    back(steps: number): string {\n        \n    }\n\n    forward(steps: number): string {\n        \n    }\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * var obj = new BrowserHistory(homepage)\n * obj.visit(url)\n * var param_2 = obj.back(steps)\n * var param_3 = obj.forward(steps)\n */",
    "php": "class BrowserHistory {\n    /**\n     * @param String $homepage\n     */\n    function __construct($homepage) {\n        \n    }\n  \n    /**\n     * @param String $url\n     * @return NULL\n     */\n    function visit($url) {\n        \n    }\n  \n    /**\n     * @param Integer $steps\n     * @return String\n     */\n    function back($steps) {\n        \n    }\n  \n    /**\n     * @param Integer $steps\n     * @return String\n     */\n    function forward($steps) {\n        \n    }\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * $obj = BrowserHistory($homepage);\n * $obj->visit($url);\n * $ret_2 = $obj->back($steps);\n * $ret_3 = $obj->forward($steps);\n */",
    "swift": "\nclass BrowserHistory {\n\n    init(_ homepage: String) {\n        \n    }\n    \n    func visit(_ url: String) {\n        \n    }\n    \n    func back(_ steps: Int) -> String {\n        \n    }\n    \n    func forward(_ steps: Int) -> String {\n        \n    }\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * let obj = BrowserHistory(homepage)\n * obj.visit(url)\n * let ret_2: String = obj.back(steps)\n * let ret_3: String = obj.forward(steps)\n */",
    "kotlin": "class BrowserHistory(homepage: String) {\n\n    fun visit(url: String) {\n        \n    }\n\n    fun back(steps: Int): String {\n        \n    }\n\n    fun forward(steps: Int): String {\n        \n    }\n\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * var obj = BrowserHistory(homepage)\n * obj.visit(url)\n * var param_2 = obj.back(steps)\n * var param_3 = obj.forward(steps)\n */",
    "dart": "class BrowserHistory {\n\n  BrowserHistory(String homepage) {\n    \n  }\n  \n  void visit(String url) {\n    \n  }\n  \n  String back(int steps) {\n    \n  }\n  \n  String forward(int steps) {\n    \n  }\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * BrowserHistory obj = BrowserHistory(homepage);\n * obj.visit(url);\n * String param2 = obj.back(steps);\n * String param3 = obj.forward(steps);\n */",
    "golang": "type BrowserHistory struct {\n    \n}\n\n\nfunc Constructor(homepage string) BrowserHistory {\n    \n}\n\n\nfunc (this *BrowserHistory) Visit(url string)  {\n    \n}\n\n\nfunc (this *BrowserHistory) Back(steps int) string {\n    \n}\n\n\nfunc (this *BrowserHistory) Forward(steps int) string {\n    \n}\n\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * obj := Constructor(homepage);\n * obj.Visit(url);\n * param_2 := obj.Back(steps);\n * param_3 := obj.Forward(steps);\n */",
    "ruby": "class BrowserHistory\n\n=begin\n    :type homepage: String\n=end\n    def initialize(homepage)\n        \n    end\n\n\n=begin\n    :type url: String\n    :rtype: Void\n=end\n    def visit(url)\n        \n    end\n\n\n=begin\n    :type steps: Integer\n    :rtype: String\n=end\n    def back(steps)\n        \n    end\n\n\n=begin\n    :type steps: Integer\n    :rtype: String\n=end\n    def forward(steps)\n        \n    end\n\n\nend\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory.new(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)",
    "scala": "class BrowserHistory(_homepage: String) {\n\n    def visit(url: String): Unit = {\n        \n    }\n\n    def back(steps: Int): String = {\n        \n    }\n\n    def forward(steps: Int): String = {\n        \n    }\n\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * val obj = new BrowserHistory(homepage)\n * obj.visit(url)\n * val param_2 = obj.back(steps)\n * val param_3 = obj.forward(steps)\n */",
    "rust": "struct BrowserHistory {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl BrowserHistory {\n\n    fn new(homepage: String) -> Self {\n        \n    }\n    \n    fn visit(&self, url: String) {\n        \n    }\n    \n    fn back(&self, steps: i32) -> String {\n        \n    }\n    \n    fn forward(&self, steps: i32) -> String {\n        \n    }\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * let obj = BrowserHistory::new(homepage);\n * obj.visit(url);\n * let ret_2: String = obj.back(steps);\n * let ret_3: String = obj.forward(steps);\n */",
    "racket": "(define browser-history%\n  (class object%\n    (super-new)\n    \n    ; homepage : string?\n    (init-field\n      homepage)\n    \n    ; visit : string? -> void?\n    (define/public (visit url)\n      )\n    ; back : exact-integer? -> string?\n    (define/public (back steps)\n      )\n    ; forward : exact-integer? -> string?\n    (define/public (forward steps)\n      )))\n\n;; Your browser-history% object will be instantiated and called as such:\n;; (define obj (new browser-history% [homepage homepage]))\n;; (send obj visit url)\n;; (define param_2 (send obj back steps))\n;; (define param_3 (send obj forward steps))",
    "erlang": "-spec browser_history_init_(Homepage :: unicode:unicode_binary()) -> any().\nbrowser_history_init_(Homepage) ->\n  .\n\n-spec browser_history_visit(Url :: unicode:unicode_binary()) -> any().\nbrowser_history_visit(Url) ->\n  .\n\n-spec browser_history_back(Steps :: integer()) -> unicode:unicode_binary().\nbrowser_history_back(Steps) ->\n  .\n\n-spec browser_history_forward(Steps :: integer()) -> unicode:unicode_binary().\nbrowser_history_forward(Steps) ->\n  .\n\n\n%% Your functions will be called as such:\n%% browser_history_init_(Homepage),\n%% browser_history_visit(Url),\n%% Param_2 = browser_history_back(Steps),\n%% Param_3 = browser_history_forward(Steps),\n\n%% browser_history_init_ will be called before every test case, in which you can do some necessary initializations.",
    "elixir": "defmodule BrowserHistory do\n  @spec init_(homepage :: String.t) :: any\n  def init_(homepage) do\n    \n  end\n\n  @spec visit(url :: String.t) :: any\n  def visit(url) do\n    \n  end\n\n  @spec back(steps :: integer) :: String.t\n  def back(steps) do\n    \n  end\n\n  @spec forward(steps :: integer) :: String.t\n  def forward(steps) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# BrowserHistory.init_(homepage)\n# BrowserHistory.visit(url)\n# param_2 = BrowserHistory.back(steps)\n# param_3 = BrowserHistory.forward(steps)\n\n# BrowserHistory.init_ will be called before every test case, in which you can do some necessary initializations."
  }
}
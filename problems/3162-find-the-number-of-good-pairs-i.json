{
  "title": "Find the Number of Good Pairs I",
  "problem_id": "3446",
  "frontend_id": "3162",
  "difficulty": "Easy",
  "problem_slug": "find-the-number-of-good-pairs-i",
  "topics": [
    "Array",
    "Hash Table"
  ],
  "description": "You are given 2 integer arrays nums1 and nums2 of lengths n and m respectively. You are also given a positive integer k.\nA pair (i, j) is called good if nums1[i] is divisible by nums2[j] * k (0 <= i <= n - 1, 0 <= j <= m - 1).\nReturn the total number of good pairs.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums1 = [1,3,4], nums2 = [1,3,4], k = 1\nOutput: 5\nExplanation:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums1 = [1,2,4,12], nums2 = [2,4], k = 3\nOutput: 2\nExplanation:\nThe 2 good pairs are (3, 0) and (3, 1) .",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n, m <= 50",
    "1 <= nums1[i], nums2[j] <= 50",
    "1 <= k <= 50"
  ],
  "follow_ups": [],
  "hints": [
    "The constraints are small. Check all pairs."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int numberOfPairs(vector<int>& nums1, vector<int>& nums2, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int numberOfPairs(int[] nums1, int[] nums2, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numberOfPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numberOfPairs(self, nums1: List[int], nums2: List[int], k: int) -> int:\n        ",
    "c": "int numberOfPairs(int* nums1, int nums1Size, int* nums2, int nums2Size, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int NumberOfPairs(int[] nums1, int[] nums2, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number} k\n * @return {number}\n */\nvar numberOfPairs = function(nums1, nums2, k) {\n    \n};",
    "typescript": "function numberOfPairs(nums1: number[], nums2: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @param Integer $k\n     * @return Integer\n     */\n    function numberOfPairs($nums1, $nums2, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numberOfPairs(_ nums1: [Int], _ nums2: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numberOfPairs(nums1: IntArray, nums2: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int numberOfPairs(List<int> nums1, List<int> nums2, int k) {\n    \n  }\n}",
    "golang": "func numberOfPairs(nums1 []int, nums2 []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @param {Integer} k\n# @return {Integer}\ndef number_of_pairs(nums1, nums2, k)\n    \nend",
    "scala": "object Solution {\n    def numberOfPairs(nums1: Array[Int], nums2: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn number_of_pairs(nums1: Vec<i32>, nums2: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (number-of-pairs nums1 nums2 k)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec number_of_pairs(Nums1 :: [integer()], Nums2 :: [integer()], K :: integer()) -> integer().\nnumber_of_pairs(Nums1, Nums2, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec number_of_pairs(nums1 :: [integer], nums2 :: [integer], k :: integer) :: integer\n  def number_of_pairs(nums1, nums2, k) do\n    \n  end\nend"
  }
}
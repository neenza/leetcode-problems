{
  "title": "Number of Good Pairs",
  "problem_id": "1635",
  "frontend_id": "1512",
  "difficulty": "Easy",
  "problem_slug": "number-of-good-pairs",
  "topics": [
    "Array",
    "Hash Table",
    "Math",
    "Counting"
  ],
  "description": "Given an array of integers nums, return the number of good pairs.\nA pair (i, j) is called good if nums[i] == nums[j] and i < j.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,3,1,1,3]\nOutput: 4\nExplanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,1,1,1]\nOutput: 6\nExplanation: Each pair in the array are good.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,2,3]\nOutput: 0",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 100",
    "1 <= nums[i] <= 100"
  ],
  "follow_ups": [],
  "hints": [
    "Count how many times each number appears. If a number appears n times, then n * (n â€“ 1) // 2 good pairs can be made with this number."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int numIdenticalPairs(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int numIdenticalPairs(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numIdenticalPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n        ",
    "c": "int numIdenticalPairs(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int NumIdenticalPairs(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar numIdenticalPairs = function(nums) {\n    \n};",
    "typescript": "function numIdenticalPairs(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function numIdenticalPairs($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numIdenticalPairs(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numIdenticalPairs(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int numIdenticalPairs(List<int> nums) {\n    \n  }\n}",
    "golang": "func numIdenticalPairs(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef num_identical_pairs(nums)\n    \nend",
    "scala": "object Solution {\n    def numIdenticalPairs(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn num_identical_pairs(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (num-identical-pairs nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec num_identical_pairs(Nums :: [integer()]) -> integer().\nnum_identical_pairs(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec num_identical_pairs(nums :: [integer]) :: integer\n  def num_identical_pairs(nums) do\n    \n  end\nend"
  }
}
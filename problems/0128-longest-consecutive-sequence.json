{
  "title": "Longest Consecutive Sequence",
  "problem_id": "128",
  "frontend_id": "128",
  "difficulty": "Medium",
  "problem_slug": "longest-consecutive-sequence",
  "topics": [
    "Array",
    "Hash Table",
    "Union Find"
  ],
  "description": "Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\nYou must write an algorithm that runs in O(n) time.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [100,4,200,1,3,2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [0,3,7,2,5,8,4,6,0,1]\nOutput: 9",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,0,1,2]\nOutput: 3",
      "images": []
    }
  ],
  "constraints": [
    "0 <= nums.length <= 105",
    "-109 <= nums[i] <= 109"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int longestConsecutive(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int longestConsecutive(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        ",
    "c": "int longestConsecutive(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int LongestConsecutive(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar longestConsecutive = function(nums) {\n    \n};",
    "typescript": "function longestConsecutive(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function longestConsecutive($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func longestConsecutive(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun longestConsecutive(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int longestConsecutive(List<int> nums) {\n    \n  }\n}",
    "golang": "func longestConsecutive(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef longest_consecutive(nums)\n    \nend",
    "scala": "object Solution {\n    def longestConsecutive(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn longest_consecutive(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (longest-consecutive nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec longest_consecutive(Nums :: [integer()]) -> integer().\nlongest_consecutive(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec longest_consecutive(nums :: [integer]) :: integer\n  def longest_consecutive(nums) do\n    \n  end\nend"
  }
}
{
  "title": "Smallest Integer Divisible by K",
  "problem_id": "1064",
  "frontend_id": "1015",
  "difficulty": "Medium",
  "problem_slug": "smallest-integer-divisible-by-k",
  "topics": [
    "Hash Table",
    "Math"
  ],
  "description": "Given a positive integer k, you need to find the length of the smallest positive integer n such that n is divisible by k, and n only contains the digit 1.\nReturn the length of n. If there is no such n, return -1.\nNote: n may not fit in a 64-bit signed integer.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: k = 1\nOutput: 1\nExplanation: The smallest answer is n = 1, which has length 1.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: k = 2\nOutput: -1\nExplanation: There is no such positive integer n divisible by 2.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: k = 3\nOutput: 3\nExplanation: The smallest answer is n = 111, which has length 3.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= k <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "11111 = 1111 * 10 + 1\r\nWe only need to store remainders modulo K.",
    "If we never get a remainder of 0, why would that happen, and how would we know that?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int smallestRepunitDivByK(int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int smallestRepunitDivByK(int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def smallestRepunitDivByK(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def smallestRepunitDivByK(self, k: int) -> int:\n        ",
    "c": "int smallestRepunitDivByK(int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int SmallestRepunitDivByK(int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} k\n * @return {number}\n */\nvar smallestRepunitDivByK = function(k) {\n    \n};",
    "typescript": "function smallestRepunitDivByK(k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @return Integer\n     */\n    function smallestRepunitDivByK($k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func smallestRepunitDivByK(_ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun smallestRepunitDivByK(k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int smallestRepunitDivByK(int k) {\n    \n  }\n}",
    "golang": "func smallestRepunitDivByK(k int) int {\n    \n}",
    "ruby": "# @param {Integer} k\n# @return {Integer}\ndef smallest_repunit_div_by_k(k)\n    \nend",
    "scala": "object Solution {\n    def smallestRepunitDivByK(k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn smallest_repunit_div_by_k(k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (smallest-repunit-div-by-k k)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec smallest_repunit_div_by_k(K :: integer()) -> integer().\nsmallest_repunit_div_by_k(K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec smallest_repunit_div_by_k(k :: integer) :: integer\n  def smallest_repunit_div_by_k(k) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n\n### Overview\n\nIt's an interesting problem that requires a little observation and insight. It's recommended to try a few numbers to find out some regular patterns. Below, we will discuss a simple approach to solve this problem.\n\n---\n\n### Approach: Checking Loop\n\n**Intuition**\n\nWe need to do two things:\n\n1. check if the required number `N` exists.\n2. find out `length(N)`.\n\nThe second one is easy: we only need to keep multiplying `N` by 10 and adding 1 until `N%K==0`. However, since `N` might overflow, we need to use the remainder. The pseudo-code is as follows:remainder = 1\nlength_N = 1\n\nwhile remainder%K != 0\n    N = remainder*10 + 1\n    remainder = N%K\n    length_N += 1\n\nreturn length_NSince the `remainder` and `N` have the same remainder of `K`, it is OK to use `remainder` instead of `N`.\n\nNow, the only problem is how to check whether the required number `N` exists.\n\nNotice that if `N` does not exist, this while loop will continue endlessly. However, the possible values of `remainder` are limited -- ranging from `0` to `K-1`. Therefore, if the while-loop continues forever, the `remainder` repeats. Also, if `remainder` repeats, then it gets into a loop. Hence, the while-loop is endless if and only if the `remainder` repeats.\n\nIn this case, we can check if the `remainder` repeats to check if the while-loop is endless:remainder = 1\nlength_N = 1\n\nseen_remainders = set()\n\nwhile remainder%K != 0\n    N = remainder*10 + 1\n    remainder = N%K\n    length_N += 1\n\n    if remainder in seen_remainders\n        return -1\n    else\n        seen_remainders.add(remainder)\n\nreturn length_NNow we have an algorithm that can solve the problem. \n\nFurthermore, we can improve this algorithm with [Pigeonhole Principle](https://en.wikipedia.org/wiki/Pigeonhole_principle). Recall that the number of possible values of `remainder` (ranging from `0` to `K-1`) is limited, and in fact, the number is `K`. As a result, if the while-loop continues more than `K` times, and hasn't stopped, then we can conclude that `remainder` repeats -- you can not have more than `K` different `remainder`.\n\nHence, if `N` exists, the while-loop must return `length_N` in the first `K` loops. Otherwise, it goes into an infinite loop.\n\nTherefore, we can just run the while-loop `K` times, and return -1 if not stopped.\n\n\n**Algorithm**\n\nWe just run the while-loop `K` times, check if the remainder is 0, and return -1 if not stopped.\n\n> Note: After reading the Algorithm part, it is recommended to try writing the code on your own before reading the solution code.There are a few interesting points worth pointing out in the code above:\n\n1. We initialize `remainder` to 0, not 1, to keep code consistency because in the first loop the `remainder` changes to 1. You can also initialize it as 1, but it requires a little change in code.\n2. We only run the loop `K` times at most, not `K+1`. This is because if it does not stop in the previous `K` loop, it will continue the `K+1`-th iteration, which must have repeated `remainder`. Therefore, it is not necessary to check the `K+1`-th iteration.\n\nAlso, note that `111...111` can never be divided by 2 or 5 because its last digit is never an even number or 5. You can just return -1 if you find that 2 or 5 is a factor of `K`.\n\n**Complexity Analysis**\n\n- Time Complexity: $\\mathcal{O}(K)$ since we at most run the loop $$\\mathcal{O}(K)$$ times.\n\n- Space Complexity: $$\\mathcal{O}(1)$$ since we only use three ints: `K`, `remainder`, and `length_N`."
}
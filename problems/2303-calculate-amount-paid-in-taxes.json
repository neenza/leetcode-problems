{
  "title": "Calculate Amount Paid in Taxes",
  "problem_id": "1382",
  "frontend_id": "2303",
  "difficulty": "Easy",
  "problem_slug": "calculate-amount-paid-in-taxes",
  "topics": [
    "Array",
    "Simulation"
  ],
  "description": "You are given a 0-indexed 2D integer array brackets where brackets[i] = [upperi, percenti] means that the ith tax bracket has an upper bound of upperi and is taxed at a rate of percenti. The brackets are sorted by upper bound (i.e. upperi-1 < upperi for 0 < i < brackets.length).\nTax is calculated as follows:\nYou are given an integer income representing the amount of money you earned. Return the amount of money that you have to pay in taxes. Answers within 10-5 of the actual answer will be accepted.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: brackets = [[3,50],[7,10],[12,25]], income = 10\nOutput: 2.65000\nExplanation:\nBased on your income, you have 3 dollars in the 1st tax bracket, 4 dollars in the 2nd tax bracket, and 3 dollars in the 3rd tax bracket.\nThe tax rate for the three tax brackets is 50%, 10%, and 25%, respectively.\nIn total, you pay $3 * 50% + $4 * 10% + $3 * 25% = $2.65 in taxes.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: brackets = [[1,0],[4,25],[5,50]], income = 2\nOutput: 0.25000\nExplanation:\nBased on your income, you have 1 dollar in the 1st tax bracket and 1 dollar in the 2nd tax bracket.\nThe tax rate for the two tax brackets is 0% and 25%, respectively.\nIn total, you pay $1 * 0% + $1 * 25% = $0.25 in taxes.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: brackets = [[2,50]], income = 0\nOutput: 0.00000\nExplanation:\nYou have no income to tax, so you have to pay a total of $0 in taxes.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= brackets.length <= 100",
    "1 <= upperi <= 1000",
    "0 <= percenti <= 100",
    "0 <= income <= 1000",
    "upperi is sorted in ascending order.",
    "All the values of upperi are unique.",
    "The upper bound of the last tax bracket is greater than or equal to income."
  ],
  "follow_ups": [],
  "hints": [
    "As you iterate through the tax brackets, keep track of the previous tax bracketâ€™s upper bound in a variable called prev. If there is no previous tax bracket, use 0 instead.",
    "The amount of money in the ith tax bracket is min(income, upperi) - prev."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    double calculateTax(vector<vector<int>>& brackets, int income) {\n        \n    }\n};",
    "java": "class Solution {\n    public double calculateTax(int[][] brackets, int income) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def calculateTax(self, brackets, income):\n        \"\"\"\n        :type brackets: List[List[int]]\n        :type income: int\n        :rtype: float\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def calculateTax(self, brackets: List[List[int]], income: int) -> float:\n        ",
    "c": "double calculateTax(int** brackets, int bracketsSize, int* bracketsColSize, int income) {\n    \n}",
    "csharp": "public class Solution {\n    public double CalculateTax(int[][] brackets, int income) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} brackets\n * @param {number} income\n * @return {number}\n */\nvar calculateTax = function(brackets, income) {\n    \n};",
    "typescript": "function calculateTax(brackets: number[][], income: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $brackets\n     * @param Integer $income\n     * @return Float\n     */\n    function calculateTax($brackets, $income) {\n        \n    }\n}",
    "swift": "class Solution {\n    func calculateTax(_ brackets: [[Int]], _ income: Int) -> Double {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun calculateTax(brackets: Array<IntArray>, income: Int): Double {\n        \n    }\n}",
    "dart": "class Solution {\n  double calculateTax(List<List<int>> brackets, int income) {\n    \n  }\n}",
    "golang": "func calculateTax(brackets [][]int, income int) float64 {\n    \n}",
    "ruby": "# @param {Integer[][]} brackets\n# @param {Integer} income\n# @return {Float}\ndef calculate_tax(brackets, income)\n    \nend",
    "scala": "object Solution {\n    def calculateTax(brackets: Array[Array[Int]], income: Int): Double = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn calculate_tax(brackets: Vec<Vec<i32>>, income: i32) -> f64 {\n        \n    }\n}",
    "racket": "(define/contract (calculate-tax brackets income)\n  (-> (listof (listof exact-integer?)) exact-integer? flonum?)\n  )",
    "erlang": "-spec calculate_tax(Brackets :: [[integer()]], Income :: integer()) -> float().\ncalculate_tax(Brackets, Income) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec calculate_tax(brackets :: [[integer]], income :: integer) :: float\n  def calculate_tax(brackets, income) do\n    \n  end\nend"
  }
}
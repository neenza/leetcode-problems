{
  "title": "Lexicographically Smallest String After a Swap",
  "problem_id": "3484",
  "frontend_id": "3216",
  "difficulty": "Easy",
  "problem_slug": "lexicographically-smallest-string-after-a-swap",
  "topics": [
    "String",
    "Greedy"
  ],
  "description": "Given a string s containing only digits, return the lexicographically smallest string that can be obtained after swapping adjacent digits in s with the same parity at most once.\nDigits have the same parity if both are odd or both are even. For example, 5 and 9, as well as 2 and 4, have the same parity, while 6 and 9 do not.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"45320\"\nOutput: \"43520\"\nExplanation:\ns[1] == '5' and s[2] == '3' both have the same parity, and swapping them results in the lexicographically smallest string.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"001\"\nOutput: \"001\"\nExplanation:\nThere is no need to perform a swap because s is already the lexicographically smallest.",
      "images": []
    }
  ],
  "constraints": [
    "2 <= s.length <= 100",
    "s consists only of digits."
  ],
  "follow_ups": [],
  "hints": [
    "Try all possible swaps satisfying the constraints and find the one that results in the lexicographically smallest string."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string getSmallestString(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public String getSmallestString(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def getSmallestString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def getSmallestString(self, s: str) -> str:\n        ",
    "c": "char* getSmallestString(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public string GetSmallestString(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {string}\n */\nvar getSmallestString = function(s) {\n    \n};",
    "typescript": "function getSmallestString(s: string): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function getSmallestString($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func getSmallestString(_ s: String) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun getSmallestString(s: String): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String getSmallestString(String s) {\n    \n  }\n}",
    "golang": "func getSmallestString(s string) string {\n    \n}",
    "ruby": "# @param {String} s\n# @return {String}\ndef get_smallest_string(s)\n    \nend",
    "scala": "object Solution {\n    def getSmallestString(s: String): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn get_smallest_string(s: String) -> String {\n        \n    }\n}",
    "racket": "(define/contract (get-smallest-string s)\n  (-> string? string?)\n  )",
    "erlang": "-spec get_smallest_string(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nget_smallest_string(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec get_smallest_string(s :: String.t) :: String.t\n  def get_smallest_string(s) do\n    \n  end\nend"
  }
}
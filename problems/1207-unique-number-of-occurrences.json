{
  "title": "Unique Number of Occurrences",
  "problem_id": "1319",
  "frontend_id": "1207",
  "difficulty": "Easy",
  "problem_slug": "unique-number-of-occurrences",
  "topics": [
    "Array",
    "Hash Table"
  ],
  "description": "Given an array of integers arr, return true if the number of occurrences of each value in the array is unique or false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: arr = [1,2,2,1,1,3]\nOutput: true\nExplanation:Â The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: arr = [1,2]\nOutput: false",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: arr = [-3,0,1,-3,1,1,1,-3,10,0]\nOutput: true",
      "images": []
    }
  ],
  "constraints": [
    "1 <= arr.length <= 1000",
    "-1000 <= arr[i] <= 1000"
  ],
  "follow_ups": [],
  "hints": [
    "Find the number of occurrences of each element in the array using a hash map.",
    "Iterate through the hash map and check if there is a repeated value."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool uniqueOccurrences(vector<int>& arr) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean uniqueOccurrences(int[] arr) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def uniqueOccurrences(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        ",
    "c": "bool uniqueOccurrences(int* arr, int arrSize) {\n    \n}",
    "csharp": "public class Solution {\n    public bool UniqueOccurrences(int[] arr) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} arr\n * @return {boolean}\n */\nvar uniqueOccurrences = function(arr) {\n    \n};",
    "typescript": "function uniqueOccurrences(arr: number[]): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Boolean\n     */\n    function uniqueOccurrences($arr) {\n        \n    }\n}",
    "swift": "class Solution {\n    func uniqueOccurrences(_ arr: [Int]) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun uniqueOccurrences(arr: IntArray): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool uniqueOccurrences(List<int> arr) {\n    \n  }\n}",
    "golang": "func uniqueOccurrences(arr []int) bool {\n    \n}",
    "ruby": "# @param {Integer[]} arr\n# @return {Boolean}\ndef unique_occurrences(arr)\n    \nend",
    "scala": "object Solution {\n    def uniqueOccurrences(arr: Array[Int]): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn unique_occurrences(arr: Vec<i32>) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (unique-occurrences arr)\n  (-> (listof exact-integer?) boolean?)\n  )",
    "erlang": "-spec unique_occurrences(Arr :: [integer()]) -> boolean().\nunique_occurrences(Arr) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec unique_occurrences(arr :: [integer]) :: boolean\n  def unique_occurrences(arr) do\n    \n  end\nend"
  }
}
{
  "title": "Jump Game",
  "problem_id": "55",
  "frontend_id": "55",
  "difficulty": "Medium",
  "problem_slug": "jump-game",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Greedy"
  ],
  "description": "You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.\nReturn true if you can reach the last index, or false otherwise.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [2,3,1,1,4]\nOutput: true\nExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [3,2,1,0,4]\nOutput: false\nExplanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 104",
    "0 <= nums[i] <= 105"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool canJump(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean canJump(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        ",
    "c": "bool canJump(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public bool CanJump(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canJump = function(nums) {\n    \n};",
    "typescript": "function canJump(nums: number[]): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canJump($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func canJump(_ nums: [Int]) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun canJump(nums: IntArray): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool canJump(List<int> nums) {\n    \n  }\n}",
    "golang": "func canJump(nums []int) bool {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Boolean}\ndef can_jump(nums)\n    \nend",
    "scala": "object Solution {\n    def canJump(nums: Array[Int]): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn can_jump(nums: Vec<i32>) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (can-jump nums)\n  (-> (listof exact-integer?) boolean?)\n  )",
    "erlang": "-spec can_jump(Nums :: [integer()]) -> boolean().\ncan_jump(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec can_jump(nums :: [integer]) :: boolean\n  def can_jump(nums) do\n    \n  end\nend"
  }
}
{
  "title": "Best Time to Buy and Sell Stock with Transaction Fee",
  "problem_id": "714",
  "frontend_id": "714",
  "difficulty": "Medium",
  "problem_slug": "best-time-to-buy-and-sell-stock-with-transaction-fee",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Greedy"
  ],
  "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.\nFind the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.\nNote:\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: prices = [1,3,2,8,4,9], fee = 2\nOutput: 8\nExplanation: The maximum profit can be achieved by:\n- Buying at prices[0] = 1\n- Selling at prices[3] = 8\n- Buying at prices[4] = 4\n- Selling at prices[5] = 9\nThe total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: prices = [1,3,7,5,10,3], fee = 3\nOutput: 6",
      "images": []
    }
  ],
  "constraints": [
    "1 <= prices.length <= 5 * 104",
    "1 <= prices[i] < 5 * 104",
    "0 <= fee < 5 * 104"
  ],
  "follow_ups": [],
  "hints": [
    "Consider the first K stock prices.  At the end, the only legal states are that you don't own a share of stock, or that you do.  Calculate the most profit you could have under each of these two cases."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxProfit(vector<int>& prices, int fee) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxProfit(int[] prices, int fee) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxProfit(self, prices, fee):\n        \"\"\"\n        :type prices: List[int]\n        :type fee: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxProfit(self, prices: List[int], fee: int) -> int:\n        ",
    "c": "int maxProfit(int* prices, int pricesSize, int fee) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxProfit(int[] prices, int fee) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} prices\n * @param {number} fee\n * @return {number}\n */\nvar maxProfit = function(prices, fee) {\n    \n};",
    "typescript": "function maxProfit(prices: number[], fee: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $prices\n     * @param Integer $fee\n     * @return Integer\n     */\n    function maxProfit($prices, $fee) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxProfit(_ prices: [Int], _ fee: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxProfit(prices: IntArray, fee: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxProfit(List<int> prices, int fee) {\n    \n  }\n}",
    "golang": "func maxProfit(prices []int, fee int) int {\n    \n}",
    "ruby": "# @param {Integer[]} prices\n# @param {Integer} fee\n# @return {Integer}\ndef max_profit(prices, fee)\n    \nend",
    "scala": "object Solution {\n    def maxProfit(prices: Array[Int], fee: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_profit(prices: Vec<i32>, fee: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-profit prices fee)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec max_profit(Prices :: [integer()], Fee :: integer()) -> integer().\nmax_profit(Prices, Fee) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_profit(prices :: [integer], fee :: integer) :: integer\n  def max_profit(prices, fee) do\n    \n  end\nend"
  }
}
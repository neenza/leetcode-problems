{
  "title": "Sum of Imbalance Numbers of All Subarrays",
  "problem_id": "2849",
  "frontend_id": "2763",
  "difficulty": "Hard",
  "problem_slug": "sum-of-imbalance-numbers-of-all-subarrays",
  "topics": [
    "Array",
    "Hash Table",
    "Ordered Set"
  ],
  "description": "The imbalance number of a 0-indexed integer array arr of length n is defined as the number of indices in sarr = sorted(arr) such that:\nHere, sorted(arr) is the function that returns the sorted version of arr.\nGiven a 0-indexed integer array nums, return the sum of imbalance numbers of all its subarrays.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [2,3,1,4]\nOutput: 3\nExplanation: There are 3 subarrays with non-zero imbalance numbers:\n- Subarray [3, 1] with an imbalance number of 1.\n- Subarray [3, 1, 4] with an imbalance number of 1.\n- Subarray [1, 4] with an imbalance number of 1.\nThe imbalance number of all other subarrays is 0. Hence, the sum of imbalance numbers of all the subarrays of nums is 3.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,3,3,3,5]\nOutput: 8\nExplanation: There are 7 subarrays with non-zero imbalance numbers:\n- Subarray [1, 3] with an imbalance number of 1.\n- Subarray [1, 3, 3] with an imbalance number of 1.\n- Subarray [1, 3, 3, 3] with an imbalance number of 1.\n- Subarray [1, 3, 3, 3, 5] with an imbalance number of 2. \n- Subarray [3, 3, 3, 5] with an imbalance number of 1. \n- Subarray [3, 3, 5] with an imbalance number of 1.\n- Subarray [3, 5] with an imbalance number of 1.\nThe imbalance number of all other subarrays is 0. Hence, the sum of imbalance numbers of all the subarrays of nums is 8.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 1000",
    "1 <= nums[i] <= nums.length"
  ],
  "follow_ups": [],
  "hints": [
    "Iterate over all subarrays in a nested fashion. Namely, for each left endpoint, start from nums[left] and add elements nums[left + 1], nums[left + 2], etc.",
    "To keep track of the imbalance value, maintain a set of added elements.",
    "Increment the imbalance value whenever a new number is not adjacent (+/- 1) to other old numbers. For example, when you add 3 to [1, 5], or when you add 5 to [1, 3]. For a formal proof, consider three cases: new value is (i) largest, (ii) smallest, (iii) between two old numbers.",
    "Decrement the imbalance value whenever a new number is adjacent (+/- 1) to two old numbers. For example, when you add 3 to [2, 4]. The imbalance value does not change in the case of one adjacent old number."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int sumImbalanceNumbers(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int sumImbalanceNumbers(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def sumImbalanceNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def sumImbalanceNumbers(self, nums: List[int]) -> int:\n        ",
    "c": "int sumImbalanceNumbers(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int SumImbalanceNumbers(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar sumImbalanceNumbers = function(nums) {\n    \n};",
    "typescript": "function sumImbalanceNumbers(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function sumImbalanceNumbers($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func sumImbalanceNumbers(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun sumImbalanceNumbers(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int sumImbalanceNumbers(List<int> nums) {\n    \n  }\n}",
    "golang": "func sumImbalanceNumbers(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef sum_imbalance_numbers(nums)\n    \nend",
    "scala": "object Solution {\n    def sumImbalanceNumbers(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn sum_imbalance_numbers(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (sum-imbalance-numbers nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec sum_imbalance_numbers(Nums :: [integer()]) -> integer().\nsum_imbalance_numbers(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec sum_imbalance_numbers(nums :: [integer]) :: integer\n  def sum_imbalance_numbers(nums) do\n    \n  end\nend"
  }
}
{
  "title": "Minimum Score by Changing Two Elements",
  "problem_id": "2706",
  "frontend_id": "2567",
  "difficulty": "Medium",
  "problem_slug": "minimum-score-by-changing-two-elements",
  "topics": [
    "Array",
    "Greedy",
    "Sorting"
  ],
  "description": "You are given an integer array nums.\nReturn the minimum score after changing two elements of nums.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,4,7,8,5]\nOutput: 3\nExplanation:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,4,3]\nOutput: 0\nExplanation:",
      "images": []
    }
  ],
  "constraints": [
    "3 <= nums.length <= 105",
    "1 <= nums[i] <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "Changing the minimum or maximum values will only minimize the score.",
    "Think about what all possible pairs of minimum and maximum values can be changed to form the minimum score."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimizeSum(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimizeSum(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimizeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimizeSum(self, nums: List[int]) -> int:\n        ",
    "c": "int minimizeSum(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimizeSum(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minimizeSum = function(nums) {\n    \n};",
    "typescript": "function minimizeSum(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minimizeSum($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimizeSum(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimizeSum(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimizeSum(List<int> nums) {\n    \n  }\n}",
    "golang": "func minimizeSum(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef minimize_sum(nums)\n    \nend",
    "scala": "object Solution {\n    def minimizeSum(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimize_sum(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimize-sum nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec minimize_sum(Nums :: [integer()]) -> integer().\nminimize_sum(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimize_sum(nums :: [integer]) :: integer\n  def minimize_sum(nums) do\n    \n  end\nend"
  }
}
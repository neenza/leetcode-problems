{
  "title": "Check if it is Possible to Split Array",
  "problem_id": "2916",
  "frontend_id": "2811",
  "difficulty": "Medium",
  "problem_slug": "check-if-it-is-possible-to-split-array",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Greedy"
  ],
  "description": "You are given an array nums of length n and an integer m. You need to determine if it is possible to split the array into n arrays of size 1 by performing a series of steps.\nAn array is called good if:\nIn each step, you can select an existing array (which may be the result of previous steps) with a length of at least two and split it into two arrays, if both resulting arrays are good.\nReturn true if you can split the given array into n arrays, otherwise return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [2, 2, 1], m = 4\nOutput: true\nExplanation:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [2, 1, 3], m = 5\nOutput: false\nExplanation:\nThe first move has to be either of the following:\nSo as both moves are invalid (they do not divide the array into two good arrays), we are unable to split nums into n arrays of size 1.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [2, 3, 3, 2, 3], m = 6\nOutput: true\nExplanation:",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n == nums.length <= 100",
    "1 <= nums[i] <= 100",
    "1 <= m <= 200"
  ],
  "follow_ups": [],
  "hints": [
    "It can be proven that if you can split more than one element as a subarray, then you can split exactly one element."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool canSplitArray(vector<int>& nums, int m) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean canSplitArray(List<Integer> nums, int m) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def canSplitArray(self, nums, m):\n        \"\"\"\n        :type nums: List[int]\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def canSplitArray(self, nums: List[int], m: int) -> bool:\n        ",
    "c": "bool canSplitArray(int* nums, int numsSize, int m) {\n    \n}",
    "csharp": "public class Solution {\n    public bool CanSplitArray(IList<int> nums, int m) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} m\n * @return {boolean}\n */\nvar canSplitArray = function(nums, m) {\n    \n};",
    "typescript": "function canSplitArray(nums: number[], m: number): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $m\n     * @return Boolean\n     */\n    function canSplitArray($nums, $m) {\n        \n    }\n}",
    "swift": "class Solution {\n    func canSplitArray(_ nums: [Int], _ m: Int) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun canSplitArray(nums: List<Int>, m: Int): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool canSplitArray(List<int> nums, int m) {\n    \n  }\n}",
    "golang": "func canSplitArray(nums []int, m int) bool {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} m\n# @return {Boolean}\ndef can_split_array(nums, m)\n    \nend",
    "scala": "object Solution {\n    def canSplitArray(nums: List[Int], m: Int): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn can_split_array(nums: Vec<i32>, m: i32) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (can-split-array nums m)\n  (-> (listof exact-integer?) exact-integer? boolean?)\n  )",
    "erlang": "-spec can_split_array(Nums :: [integer()], M :: integer()) -> boolean().\ncan_split_array(Nums, M) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec can_split_array(nums :: [integer], m :: integer) :: boolean\n  def can_split_array(nums, m) do\n    \n  end\nend"
  }
}
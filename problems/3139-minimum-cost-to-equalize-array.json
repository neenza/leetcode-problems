{
  "title": "Minimum Cost to Equalize Array",
  "problem_id": "3402",
  "frontend_id": "3139",
  "difficulty": "Hard",
  "problem_slug": "minimum-cost-to-equalize-array",
  "topics": [
    "Array",
    "Greedy",
    "Enumeration"
  ],
  "description": "You are given an integer array nums and two integers cost1 and cost2. You are allowed to perform either of the following operations any number of times:\nReturn the minimum cost required to make all elements in the array equal.\nSince the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [4,1], cost1 = 5, cost2 = 2\nOutput: 15\nExplanation:\nThe following operations can be performed to make the values equal:\nThe total cost is 15.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [2,3,3,3,5], cost1 = 2, cost2 = 1\nOutput: 6\nExplanation:\nThe following operations can be performed to make the values equal:\nThe total cost is 6.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [3,5,3], cost1 = 1, cost2 = 3\nOutput: 4\nExplanation:\nThe following operations can be performed to make the values equal:\nThe total cost is 4.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "1 <= nums[i] <= 106",
    "1 <= cost1 <= 106",
    "1 <= cost2 <= 106"
  ],
  "follow_ups": [],
  "hints": [
    "How can you determine the minimum cost if you know the maximum value in the array once all values are made equal?",
    "If <code>cost2 > cost1 * 2</code>, we should just use <code>cost1</code> to change all the values to the maximum one.",
    "Otherwise, it's optimal to choose the smallest two values and use <code>cost2</code> to increase both of them.",
    "Since the maximum value is known, calculate the required increases to equalize all values, instead of naively simulating the operations.",
    "There are not a lot of candidates for the maximum; we can try all of them and choose which uses the minimum number of operations."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minCostToEqualizeArray(vector<int>& nums, int cost1, int cost2) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minCostToEqualizeArray(int[] nums, int cost1, int cost2) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minCostToEqualizeArray(self, nums, cost1, cost2):\n        \"\"\"\n        :type nums: List[int]\n        :type cost1: int\n        :type cost2: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minCostToEqualizeArray(self, nums: List[int], cost1: int, cost2: int) -> int:\n        ",
    "c": "int minCostToEqualizeArray(int* nums, int numsSize, int cost1, int cost2) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinCostToEqualizeArray(int[] nums, int cost1, int cost2) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} cost1\n * @param {number} cost2\n * @return {number}\n */\nvar minCostToEqualizeArray = function(nums, cost1, cost2) {\n    \n};",
    "typescript": "function minCostToEqualizeArray(nums: number[], cost1: number, cost2: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $cost1\n     * @param Integer $cost2\n     * @return Integer\n     */\n    function minCostToEqualizeArray($nums, $cost1, $cost2) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minCostToEqualizeArray(_ nums: [Int], _ cost1: Int, _ cost2: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minCostToEqualizeArray(nums: IntArray, cost1: Int, cost2: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minCostToEqualizeArray(List<int> nums, int cost1, int cost2) {\n    \n  }\n}",
    "golang": "func minCostToEqualizeArray(nums []int, cost1 int, cost2 int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} cost1\n# @param {Integer} cost2\n# @return {Integer}\ndef min_cost_to_equalize_array(nums, cost1, cost2)\n    \nend",
    "scala": "object Solution {\n    def minCostToEqualizeArray(nums: Array[Int], cost1: Int, cost2: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_cost_to_equalize_array(nums: Vec<i32>, cost1: i32, cost2: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-cost-to-equalize-array nums cost1 cost2)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec min_cost_to_equalize_array(Nums :: [integer()], Cost1 :: integer(), Cost2 :: integer()) -> integer().\nmin_cost_to_equalize_array(Nums, Cost1, Cost2) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_cost_to_equalize_array(nums :: [integer], cost1 :: integer, cost2 :: integer) :: integer\n  def min_cost_to_equalize_array(nums, cost1, cost2) do\n    \n  end\nend"
  }
}
{
  "title": "Kids With the Greatest Number of Candies",
  "problem_id": "1528",
  "frontend_id": "1431",
  "difficulty": "Easy",
  "problem_slug": "kids-with-the-greatest-number-of-candies",
  "topics": [
    "Array"
  ],
  "description": "There are n kids with candies. You are given an integer array candies, where each candies[i] represents the number of candies the ith kid has, and an integer extraCandies, denoting the number of extra candies that you have.\nReturn a boolean array result of length n, where result[i] is true if, after giving the ith kid all the extraCandies, they will have the greatest number of candies among all the kids, or false otherwise.\nNote that multiple kids can have the greatest number of candies.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: candies = [2,3,5,1,3], extraCandies = 3\nOutput: [true,true,true,false,true] \nExplanation: If you give all extraCandies to:\n- Kid 1, they will have 2 + 3 = 5 candies, which is the greatest among the kids.\n- Kid 2, they will have 3 + 3 = 6 candies, which is the greatest among the kids.\n- Kid 3, they will have 5 + 3 = 8 candies, which is the greatest among the kids.\n- Kid 4, they will have 1 + 3 = 4 candies, which is not the greatest among the kids.\n- Kid 5, they will have 3 + 3 = 6 candies, which is the greatest among the kids.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: candies = [4,2,1,1,2], extraCandies = 1\nOutput: [true,false,false,false,false] \nExplanation: There is only 1 extra candy.\nKid 1 will always have the greatest number of candies, even if a different kid is given the extra candy.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: candies = [12,1,12], extraCandies = 10\nOutput: [true,false,true]",
      "images": []
    }
  ],
  "constraints": [
    "n == candies.length",
    "2 <= n <= 100",
    "1 <= candies[i] <= 100",
    "1 <= extraCandies <= 50"
  ],
  "follow_ups": [],
  "hints": [
    "For each kid check if candies[i] + extraCandies â‰¥ maximum in Candies[i]."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<bool> kidsWithCandies(vector<int>& candies, int extraCandies) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<Boolean> kidsWithCandies(int[] candies, int extraCandies) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def kidsWithCandies(self, candies, extraCandies):\n        \"\"\"\n        :type candies: List[int]\n        :type extraCandies: int\n        :rtype: List[bool]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def kidsWithCandies(self, candies: List[int], extraCandies: int) -> List[bool]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nbool* kidsWithCandies(int* candies, int candiesSize, int extraCandies, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<bool> KidsWithCandies(int[] candies, int extraCandies) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} candies\n * @param {number} extraCandies\n * @return {boolean[]}\n */\nvar kidsWithCandies = function(candies, extraCandies) {\n    \n};",
    "typescript": "function kidsWithCandies(candies: number[], extraCandies: number): boolean[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $candies\n     * @param Integer $extraCandies\n     * @return Boolean[]\n     */\n    function kidsWithCandies($candies, $extraCandies) {\n        \n    }\n}",
    "swift": "class Solution {\n    func kidsWithCandies(_ candies: [Int], _ extraCandies: Int) -> [Bool] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun kidsWithCandies(candies: IntArray, extraCandies: Int): List<Boolean> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<bool> kidsWithCandies(List<int> candies, int extraCandies) {\n    \n  }\n}",
    "golang": "func kidsWithCandies(candies []int, extraCandies int) []bool {\n    \n}",
    "ruby": "# @param {Integer[]} candies\n# @param {Integer} extra_candies\n# @return {Boolean[]}\ndef kids_with_candies(candies, extra_candies)\n    \nend",
    "scala": "object Solution {\n    def kidsWithCandies(candies: Array[Int], extraCandies: Int): List[Boolean] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn kids_with_candies(candies: Vec<i32>, extra_candies: i32) -> Vec<bool> {\n        \n    }\n}",
    "racket": "(define/contract (kids-with-candies candies extraCandies)\n  (-> (listof exact-integer?) exact-integer? (listof boolean?))\n  )",
    "erlang": "-spec kids_with_candies(Candies :: [integer()], ExtraCandies :: integer()) -> [boolean()].\nkids_with_candies(Candies, ExtraCandies) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec kids_with_candies(candies :: [integer], extra_candies :: integer) :: [boolean]\n  def kids_with_candies(candies, extra_candies) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n\n---\n\n### Overview\n\nWe are given an integer array `candies`, where each `candies[i]` represents the number of candies the $i^{th}$ kid has, and an integer `extraCandies`, denoting the number of extra candies that you have.\n\nOur task is to return a boolean array `result` of length `n`, where `result[i]` is true if, after giving the $i^{th}$ kid all the `extraCandies`, they will have the greatest number of candies among all the kids, or `false` otherwise.\n\n---\n\n### Approach: Ad Hoc\n\n#### Intuition\n\nWe precompute the greatest number of candies that any kid(s) has, let's call it `maxCandies`.\n\nFollowing the precomputation, we iterate over `candies`, checking whether the total candies that the current kid has exceeds `maxCandies` after giving `extraCandies` to the kid. For every kid, we perform `candies[i] + extraCandies >= maxCandies` and push it into a boolean list called `result`.\n\nIn the end, we return `result`.\n\nHere's a visual representation of how the approach works in the first example given in the problem description:\n\n![img](../Figures/1431/1431-1.png)\n\n#### Algorithm\n\n1. Create an integer variable called `maxCandies` to store the greatest number of candies in `candies`. We initialize it with `0`.\n2. We iterate over `candies` and for each kid who has `candy` candies, we perform `maxCandies = max(maxCandies, candy)` to get the greatest number of candies in `candies`.\n3. Create a boolean list `answer`.\n4. We iterate over `candies` once more, and for each kid who has `candy` candies, we add `candy + extraCandies >= maxCandies` to `answer`.\n5. Return `answer`.\n\n#### Implementation#### Complexity Analysis\n\nHere, $n$ is the number of kids.\n\n* Time complexity: $O(n)$\n\n    - We iterate over the `candies` array to find out `maxCandies` which takes $O(n)$ time.\n    - We iterate over the `candies` array once more. We check for each kid whether they will have the most candies among all the children after receiving `extraCandies` and push the result in `result` which takes $O(1)$ time. It requires $O(n)$ time for $n$ kids.\n\n* Space complexity: $O(1)$\n\n    - Without counting the space of input and output, we are not using any space except for some integers like `maxCandies` and `candy`."
}
{
  "title": "Distance Between Bus Stops",
  "problem_id": "1287",
  "frontend_id": "1184",
  "difficulty": "Easy",
  "problem_slug": "distance-between-bus-stops",
  "topics": [
    "Array"
  ],
  "description": "A bus has n stops numbered from 0 to n - 1 that form a circle. We know the distance between all pairs of neighboring stops where distance[i] is the distance between the stops number i and (i + 1) % n.\nThe bus goes along both directions i.e. clockwise and counterclockwise.\nReturn the shortest distance between the given start and destination stops.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: distance = [1,2,3,4], start = 0, destination = 1\r\nOutput: 1\r\nExplanation: Distance between 0 and 1 is 1 or 9, minimum is 1.",
      "images": [
        "https://assets.leetcode.com/uploads/2019/09/03/untitled-diagram-1.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: distance = [1,2,3,4], start = 0, destination = 2\r\nOutput: 3\r\nExplanation: Distance between 0 and 2 is 3 or 7, minimum is 3.",
      "images": [
        "https://assets.leetcode.com/uploads/2019/09/03/untitled-diagram-1-1.jpg"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: distance = [1,2,3,4], start = 0, destination = 3\r\nOutput: 4\r\nExplanation: Distance between 0 and 3 is 6 or 4, minimum is 4.",
      "images": [
        "https://assets.leetcode.com/uploads/2019/09/03/untitled-diagram-1-2.jpg"
      ]
    }
  ],
  "constraints": [
    "1 <= n <= 10^4",
    "distance.length == n",
    "0 <= start, destination < n",
    "0 <= distance[i] <= 10^4"
  ],
  "follow_ups": [],
  "hints": [
    "Find the distance between the two stops if the bus moved in clockwise or counterclockwise directions."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int distanceBetweenBusStops(vector<int>& distance, int start, int destination) {\n        \n    }\n};",
    "java": "class Solution {\n    public int distanceBetweenBusStops(int[] distance, int start, int destination) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def distanceBetweenBusStops(self, distance, start, destination):\n        \"\"\"\n        :type distance: List[int]\n        :type start: int\n        :type destination: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def distanceBetweenBusStops(self, distance: List[int], start: int, destination: int) -> int:\n        ",
    "c": "\n\nint distanceBetweenBusStops(int* distance, int distanceSize, int start, int destination){\n\n}",
    "csharp": "public class Solution {\n    public int DistanceBetweenBusStops(int[] distance, int start, int destination) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} distance\n * @param {number} start\n * @param {number} destination\n * @return {number}\n */\nvar distanceBetweenBusStops = function(distance, start, destination) {\n    \n};",
    "typescript": "function distanceBetweenBusStops(distance: number[], start: number, destination: number): number {\n\n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $distance\n     * @param Integer $start\n     * @param Integer $destination\n     * @return Integer\n     */\n    function distanceBetweenBusStops($distance, $start, $destination) {\n        \n    }\n}",
    "swift": "class Solution {\n    func distanceBetweenBusStops(_ distance: [Int], _ start: Int, _ destination: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun distanceBetweenBusStops(distance: IntArray, start: Int, destination: Int): Int {\n        \n    }\n}",
    "golang": "func distanceBetweenBusStops(distance []int, start int, destination int) int {\n    \n}",
    "ruby": "# @param {Integer[]} distance\n# @param {Integer} start\n# @param {Integer} destination\n# @return {Integer}\ndef distance_between_bus_stops(distance, start, destination)\n    \nend",
    "scala": "object Solution {\n    def distanceBetweenBusStops(distance: Array[Int], start: Int, destination: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn distance_between_bus_stops(distance: Vec<i32>, start: i32, destination: i32) -> i32 {\n        \n    }\n}"
  }
}
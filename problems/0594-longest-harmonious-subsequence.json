{
  "title": "Longest Harmonious Subsequence",
  "problem_id": "594",
  "frontend_id": "594",
  "difficulty": "Easy",
  "problem_slug": "longest-harmonious-subsequence",
  "topics": [
    "Array",
    "Hash Table",
    "Sliding Window",
    "Sorting",
    "Counting"
  ],
  "description": "We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1.\nGiven an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,3,2,2,5,2,3,7]\nOutput: 5\nExplanation:\nThe longest harmonious subsequence is [3,2,2,2,3] .",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,2,3,4]\nOutput: 2\nExplanation:\nThe longest harmonious subsequences are [1,2] , [2,3] , and [3,4] , all of which have a length of 2.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,1,1,1]\nOutput: 0\nExplanation:\nNo harmonic subsequence exists.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 2 * 104",
    "-109 <= nums[i] <= 109"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int findLHS(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int findLHS(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findLHS(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findLHS(self, nums: List[int]) -> int:\n        ",
    "c": "int findLHS(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int FindLHS(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findLHS = function(nums) {\n    \n};",
    "typescript": "function findLHS(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findLHS($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findLHS(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findLHS(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int findLHS(List<int> nums) {\n    \n  }\n}",
    "golang": "func findLHS(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef find_lhs(nums)\n    \nend",
    "scala": "object Solution {\n    def findLHS(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_lhs(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (find-lhs nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec find_lhs(Nums :: [integer()]) -> integer().\nfind_lhs(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_lhs(nums :: [integer]) :: integer\n  def find_lhs(nums) do\n    \n  end\nend"
  }
}
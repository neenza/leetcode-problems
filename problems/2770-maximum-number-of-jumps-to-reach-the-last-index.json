{
  "title": "Maximum Number of Jumps to Reach the Last Index",
  "problem_id": "2855",
  "frontend_id": "2770",
  "difficulty": "Medium",
  "problem_slug": "maximum-number-of-jumps-to-reach-the-last-index",
  "topics": [
    "Array",
    "Dynamic Programming"
  ],
  "description": "You are given a 0-indexed array nums of n integers and an integer target.\nYou are initially positioned at index 0. In one step, you can jump from index i to any index j such that:\nReturn the maximum number of jumps you can make to reach index n - 1.\nIf there is no way to reach index n - 1, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,3,6,4,1,2], target = 2\nOutput: 3\nExplanation: To go from index 0 to index n - 1 with the maximum number of jumps, you can perform the following jumping sequence:\n- Jump from index 0 to index 1. \n- Jump from index 1 to index 3.\n- Jump from index 3 to index 5.\nIt can be proven that there is no other jumping sequence that goes from 0 to n - 1 with more than 3 jumps. Hence, the answer is 3.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,3,6,4,1,2], target = 3\nOutput: 5\nExplanation: To go from index 0 to index n - 1 with the maximum number of jumps, you can perform the following jumping sequence:\n- Jump from index 0 to index 1.\n- Jump from index 1 to index 2.\n- Jump from index 2 to index 3.\n- Jump from index 3 to index 4.\n- Jump from index 4 to index 5.\nIt can be proven that there is no other jumping sequence that goes from 0 to n - 1 with more than 5 jumps. Hence, the answer is 5.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,3,6,4,1,2], target = 0\nOutput: -1\nExplanation: It can be proven that there is no jumping sequence that goes from 0 to n - 1. Hence, the answer is -1.",
      "images": []
    }
  ],
  "constraints": [
    "2 <= nums.length == n <= 1000",
    "-109 <= nums[i] <= 109",
    "0 <= target <= 2 * 109"
  ],
  "follow_ups": [],
  "hints": [
    "Use a dynamic programming approach.",
    "Define a dynamic programming array dp of size n, where dp[i] represents the maximum number of jumps from index 0 to index i.",
    "For each j iterate over all i < j. Set dp[j] = max(dp[j], dp[i] + 1) if -target <= nums[j] - nums[i] <= target."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maximumJumps(vector<int>& nums, int target) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maximumJumps(int[] nums, int target) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maximumJumps(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maximumJumps(self, nums: List[int], target: int) -> int:\n        ",
    "c": "int maximumJumps(int* nums, int numsSize, int target) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaximumJumps(int[] nums, int target) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar maximumJumps = function(nums, target) {\n    \n};",
    "typescript": "function maximumJumps(nums: number[], target: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function maximumJumps($nums, $target) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maximumJumps(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maximumJumps(nums: IntArray, target: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maximumJumps(List<int> nums, int target) {\n    \n  }\n}",
    "golang": "func maximumJumps(nums []int, target int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef maximum_jumps(nums, target)\n    \nend",
    "scala": "object Solution {\n    def maximumJumps(nums: Array[Int], target: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn maximum_jumps(nums: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (maximum-jumps nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec maximum_jumps(Nums :: [integer()], Target :: integer()) -> integer().\nmaximum_jumps(Nums, Target) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec maximum_jumps(nums :: [integer], target :: integer) :: integer\n  def maximum_jumps(nums, target) do\n    \n  end\nend"
  }
}
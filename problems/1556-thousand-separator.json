{
  "title": "Thousand Separator",
  "problem_id": "1660",
  "frontend_id": "1556",
  "difficulty": "Easy",
  "problem_slug": "thousand-separator",
  "topics": [
    "String"
  ],
  "description": "Given an integer n, add a dot (\".\") as the thousands separator and return it in string format.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 987\nOutput: \"987\"",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 1234\nOutput: \"1.234\"",
      "images": []
    }
  ],
  "constraints": [
    "0 <= n <= 231 - 1"
  ],
  "follow_ups": [],
  "hints": [
    "Scan from the back of the integer and use dots to connect blocks with length 3 except the last block."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string thousandSeparator(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public String thousandSeparator(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def thousandSeparator(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def thousandSeparator(self, n: int) -> str:\n        ",
    "c": "char* thousandSeparator(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public string ThousandSeparator(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {string}\n */\nvar thousandSeparator = function(n) {\n    \n};",
    "typescript": "function thousandSeparator(n: number): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String\n     */\n    function thousandSeparator($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func thousandSeparator(_ n: Int) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun thousandSeparator(n: Int): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String thousandSeparator(int n) {\n    \n  }\n}",
    "golang": "func thousandSeparator(n int) string {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {String}\ndef thousand_separator(n)\n    \nend",
    "scala": "object Solution {\n    def thousandSeparator(n: Int): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn thousand_separator(n: i32) -> String {\n        \n    }\n}",
    "racket": "(define/contract (thousand-separator n)\n  (-> exact-integer? string?)\n  )",
    "erlang": "-spec thousand_separator(N :: integer()) -> unicode:unicode_binary().\nthousand_separator(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec thousand_separator(n :: integer) :: String.t\n  def thousand_separator(n) do\n    \n  end\nend"
  }
}
{
  "title": "Design Front Middle Back Queue",
  "problem_id": "1767",
  "frontend_id": "1670",
  "difficulty": "Medium",
  "problem_slug": "design-front-middle-back-queue",
  "topics": [
    "Array",
    "Linked List",
    "Design",
    "Queue",
    "Data Stream"
  ],
  "description": "Design a queue that supports push and pop operations in the front, middle, and back.\nImplement the FrontMiddleBack class:\nNotice that when there are two middle position choices, the operation is performed on the frontmost middle position choice. For example:\nExample 1:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input:\n[\"FrontMiddleBackQueue\", \"pushFront\", \"pushBack\", \"pushMiddle\", \"pushMiddle\", \"popFront\", \"popMiddle\", \"popMiddle\", \"popBack\", \"popFront\"]\n[[], [1], [2], [3], [4], [], [], [], [], []]\nOutput:\n[null, null, null, null, null, 1, 3, 4, 2, -1]\n\nExplanation:\nFrontMiddleBackQueue q = new FrontMiddleBackQueue();\nq.pushFront(1);   // [1]\nq.pushBack(2);    // [1, 2]\nq.pushMiddle(3);  // [1, 3, 2]\nq.pushMiddle(4);  // [1, 4, 3, 2]\nq.popFront();     // return 1 -> [4, 3, 2]\nq.popMiddle();    // return 3 -> [4, 2]\nq.popMiddle();    // return 4 -> [2]\nq.popBack();      // return 2 -> []\nq.popFront();     // return -1 -> [] (The queue is empty)",
      "images": []
    }
  ],
  "constraints": [
    "1 <= val <= 109",
    "At most 1000 calls will be made to pushFront, pushMiddle, pushBack, popFront, popMiddle, and popBack."
  ],
  "follow_ups": [],
  "hints": [
    "The constraints are low enough for a brute force, single array approach.",
    "For an O(1) per method approach, use 2 double-ended queues: one for the first half and one for the second half."
  ],
  "code_snippets": {
    "cpp": "class FrontMiddleBackQueue {\npublic:\n    FrontMiddleBackQueue() {\n        \n    }\n    \n    void pushFront(int val) {\n        \n    }\n    \n    void pushMiddle(int val) {\n        \n    }\n    \n    void pushBack(int val) {\n        \n    }\n    \n    int popFront() {\n        \n    }\n    \n    int popMiddle() {\n        \n    }\n    \n    int popBack() {\n        \n    }\n};\n\n/**\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * FrontMiddleBackQueue* obj = new FrontMiddleBackQueue();\n * obj->pushFront(val);\n * obj->pushMiddle(val);\n * obj->pushBack(val);\n * int param_4 = obj->popFront();\n * int param_5 = obj->popMiddle();\n * int param_6 = obj->popBack();\n */",
    "java": "class FrontMiddleBackQueue {\n\n    public FrontMiddleBackQueue() {\n        \n    }\n    \n    public void pushFront(int val) {\n        \n    }\n    \n    public void pushMiddle(int val) {\n        \n    }\n    \n    public void pushBack(int val) {\n        \n    }\n    \n    public int popFront() {\n        \n    }\n    \n    public int popMiddle() {\n        \n    }\n    \n    public int popBack() {\n        \n    }\n}\n\n/**\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * FrontMiddleBackQueue obj = new FrontMiddleBackQueue();\n * obj.pushFront(val);\n * obj.pushMiddle(val);\n * obj.pushBack(val);\n * int param_4 = obj.popFront();\n * int param_5 = obj.popMiddle();\n * int param_6 = obj.popBack();\n */",
    "python": "class FrontMiddleBackQueue(object):\n\n    def __init__(self):\n        \n\n    def pushFront(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n    def pushMiddle(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n    def pushBack(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: None\n        \"\"\"\n        \n\n    def popFront(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def popMiddle(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def popBack(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your FrontMiddleBackQueue object will be instantiated and called as such:\n# obj = FrontMiddleBackQueue()\n# obj.pushFront(val)\n# obj.pushMiddle(val)\n# obj.pushBack(val)\n# param_4 = obj.popFront()\n# param_5 = obj.popMiddle()\n# param_6 = obj.popBack()",
    "python3": "class FrontMiddleBackQueue:\n\n    def __init__(self):\n        \n\n    def pushFront(self, val: int) -> None:\n        \n\n    def pushMiddle(self, val: int) -> None:\n        \n\n    def pushBack(self, val: int) -> None:\n        \n\n    def popFront(self) -> int:\n        \n\n    def popMiddle(self) -> int:\n        \n\n    def popBack(self) -> int:\n        \n\n\n# Your FrontMiddleBackQueue object will be instantiated and called as such:\n# obj = FrontMiddleBackQueue()\n# obj.pushFront(val)\n# obj.pushMiddle(val)\n# obj.pushBack(val)\n# param_4 = obj.popFront()\n# param_5 = obj.popMiddle()\n# param_6 = obj.popBack()",
    "c": "\n\n\ntypedef struct {\n    \n} FrontMiddleBackQueue;\n\n\nFrontMiddleBackQueue* frontMiddleBackQueueCreate() {\n    \n}\n\nvoid frontMiddleBackQueuePushFront(FrontMiddleBackQueue* obj, int val) {\n    \n}\n\nvoid frontMiddleBackQueuePushMiddle(FrontMiddleBackQueue* obj, int val) {\n    \n}\n\nvoid frontMiddleBackQueuePushBack(FrontMiddleBackQueue* obj, int val) {\n    \n}\n\nint frontMiddleBackQueuePopFront(FrontMiddleBackQueue* obj) {\n    \n}\n\nint frontMiddleBackQueuePopMiddle(FrontMiddleBackQueue* obj) {\n    \n}\n\nint frontMiddleBackQueuePopBack(FrontMiddleBackQueue* obj) {\n    \n}\n\nvoid frontMiddleBackQueueFree(FrontMiddleBackQueue* obj) {\n    \n}\n\n/**\n * Your FrontMiddleBackQueue struct will be instantiated and called as such:\n * FrontMiddleBackQueue* obj = frontMiddleBackQueueCreate();\n * frontMiddleBackQueuePushFront(obj, val);\n \n * frontMiddleBackQueuePushMiddle(obj, val);\n \n * frontMiddleBackQueuePushBack(obj, val);\n \n * int param_4 = frontMiddleBackQueuePopFront(obj);\n \n * int param_5 = frontMiddleBackQueuePopMiddle(obj);\n \n * int param_6 = frontMiddleBackQueuePopBack(obj);\n \n * frontMiddleBackQueueFree(obj);\n*/",
    "csharp": "public class FrontMiddleBackQueue {\n\n    public FrontMiddleBackQueue() {\n        \n    }\n    \n    public void PushFront(int val) {\n        \n    }\n    \n    public void PushMiddle(int val) {\n        \n    }\n    \n    public void PushBack(int val) {\n        \n    }\n    \n    public int PopFront() {\n        \n    }\n    \n    public int PopMiddle() {\n        \n    }\n    \n    public int PopBack() {\n        \n    }\n}\n\n/**\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * FrontMiddleBackQueue obj = new FrontMiddleBackQueue();\n * obj.PushFront(val);\n * obj.PushMiddle(val);\n * obj.PushBack(val);\n * int param_4 = obj.PopFront();\n * int param_5 = obj.PopMiddle();\n * int param_6 = obj.PopBack();\n */",
    "javascript": "\nvar FrontMiddleBackQueue = function() {\n    \n};\n\n/** \n * @param {number} val\n * @return {void}\n */\nFrontMiddleBackQueue.prototype.pushFront = function(val) {\n    \n};\n\n/** \n * @param {number} val\n * @return {void}\n */\nFrontMiddleBackQueue.prototype.pushMiddle = function(val) {\n    \n};\n\n/** \n * @param {number} val\n * @return {void}\n */\nFrontMiddleBackQueue.prototype.pushBack = function(val) {\n    \n};\n\n/**\n * @return {number}\n */\nFrontMiddleBackQueue.prototype.popFront = function() {\n    \n};\n\n/**\n * @return {number}\n */\nFrontMiddleBackQueue.prototype.popMiddle = function() {\n    \n};\n\n/**\n * @return {number}\n */\nFrontMiddleBackQueue.prototype.popBack = function() {\n    \n};\n\n/** \n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * var obj = new FrontMiddleBackQueue()\n * obj.pushFront(val)\n * obj.pushMiddle(val)\n * obj.pushBack(val)\n * var param_4 = obj.popFront()\n * var param_5 = obj.popMiddle()\n * var param_6 = obj.popBack()\n */",
    "typescript": "class FrontMiddleBackQueue {\n    constructor() {\n        \n    }\n\n    pushFront(val: number): void {\n        \n    }\n\n    pushMiddle(val: number): void {\n        \n    }\n\n    pushBack(val: number): void {\n        \n    }\n\n    popFront(): number {\n        \n    }\n\n    popMiddle(): number {\n        \n    }\n\n    popBack(): number {\n        \n    }\n}\n\n/**\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * var obj = new FrontMiddleBackQueue()\n * obj.pushFront(val)\n * obj.pushMiddle(val)\n * obj.pushBack(val)\n * var param_4 = obj.popFront()\n * var param_5 = obj.popMiddle()\n * var param_6 = obj.popBack()\n */",
    "php": "class FrontMiddleBackQueue {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $val\n     * @return NULL\n     */\n    function pushFront($val) {\n        \n    }\n  \n    /**\n     * @param Integer $val\n     * @return NULL\n     */\n    function pushMiddle($val) {\n        \n    }\n  \n    /**\n     * @param Integer $val\n     * @return NULL\n     */\n    function pushBack($val) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function popFront() {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function popMiddle() {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function popBack() {\n        \n    }\n}\n\n/**\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * $obj = FrontMiddleBackQueue();\n * $obj->pushFront($val);\n * $obj->pushMiddle($val);\n * $obj->pushBack($val);\n * $ret_4 = $obj->popFront();\n * $ret_5 = $obj->popMiddle();\n * $ret_6 = $obj->popBack();\n */",
    "swift": "\nclass FrontMiddleBackQueue {\n\n    init() {\n        \n    }\n    \n    func pushFront(_ val: Int) {\n        \n    }\n    \n    func pushMiddle(_ val: Int) {\n        \n    }\n    \n    func pushBack(_ val: Int) {\n        \n    }\n    \n    func popFront() -> Int {\n        \n    }\n    \n    func popMiddle() -> Int {\n        \n    }\n    \n    func popBack() -> Int {\n        \n    }\n}\n\n/**\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * let obj = FrontMiddleBackQueue()\n * obj.pushFront(val)\n * obj.pushMiddle(val)\n * obj.pushBack(val)\n * let ret_4: Int = obj.popFront()\n * let ret_5: Int = obj.popMiddle()\n * let ret_6: Int = obj.popBack()\n */",
    "kotlin": "class FrontMiddleBackQueue() {\n\n    fun pushFront(`val`: Int) {\n        \n    }\n\n    fun pushMiddle(`val`: Int) {\n        \n    }\n\n    fun pushBack(`val`: Int) {\n        \n    }\n\n    fun popFront(): Int {\n        \n    }\n\n    fun popMiddle(): Int {\n        \n    }\n\n    fun popBack(): Int {\n        \n    }\n\n}\n\n/**\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * var obj = FrontMiddleBackQueue()\n * obj.pushFront(`val`)\n * obj.pushMiddle(`val`)\n * obj.pushBack(`val`)\n * var param_4 = obj.popFront()\n * var param_5 = obj.popMiddle()\n * var param_6 = obj.popBack()\n */",
    "dart": "class FrontMiddleBackQueue {\n\n  FrontMiddleBackQueue() {\n    \n  }\n  \n  void pushFront(int val) {\n    \n  }\n  \n  void pushMiddle(int val) {\n    \n  }\n  \n  void pushBack(int val) {\n    \n  }\n  \n  int popFront() {\n    \n  }\n  \n  int popMiddle() {\n    \n  }\n  \n  int popBack() {\n    \n  }\n}\n\n/**\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * FrontMiddleBackQueue obj = FrontMiddleBackQueue();\n * obj.pushFront(val);\n * obj.pushMiddle(val);\n * obj.pushBack(val);\n * int param4 = obj.popFront();\n * int param5 = obj.popMiddle();\n * int param6 = obj.popBack();\n */",
    "golang": "type FrontMiddleBackQueue struct {\n    \n}\n\n\nfunc Constructor() FrontMiddleBackQueue {\n    \n}\n\n\nfunc (this *FrontMiddleBackQueue) PushFront(val int)  {\n    \n}\n\n\nfunc (this *FrontMiddleBackQueue) PushMiddle(val int)  {\n    \n}\n\n\nfunc (this *FrontMiddleBackQueue) PushBack(val int)  {\n    \n}\n\n\nfunc (this *FrontMiddleBackQueue) PopFront() int {\n    \n}\n\n\nfunc (this *FrontMiddleBackQueue) PopMiddle() int {\n    \n}\n\n\nfunc (this *FrontMiddleBackQueue) PopBack() int {\n    \n}\n\n\n/**\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * obj := Constructor();\n * obj.PushFront(val);\n * obj.PushMiddle(val);\n * obj.PushBack(val);\n * param_4 := obj.PopFront();\n * param_5 := obj.PopMiddle();\n * param_6 := obj.PopBack();\n */",
    "ruby": "class FrontMiddleBackQueue\n    def initialize()\n        \n    end\n\n\n=begin\n    :type val: Integer\n    :rtype: Void\n=end\n    def push_front(val)\n        \n    end\n\n\n=begin\n    :type val: Integer\n    :rtype: Void\n=end\n    def push_middle(val)\n        \n    end\n\n\n=begin\n    :type val: Integer\n    :rtype: Void\n=end\n    def push_back(val)\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def pop_front()\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def pop_middle()\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def pop_back()\n        \n    end\n\n\nend\n\n# Your FrontMiddleBackQueue object will be instantiated and called as such:\n# obj = FrontMiddleBackQueue.new()\n# obj.push_front(val)\n# obj.push_middle(val)\n# obj.push_back(val)\n# param_4 = obj.pop_front()\n# param_5 = obj.pop_middle()\n# param_6 = obj.pop_back()",
    "scala": "class FrontMiddleBackQueue() {\n\n    def pushFront(`val`: Int): Unit = {\n        \n    }\n\n    def pushMiddle(`val`: Int): Unit = {\n        \n    }\n\n    def pushBack(`val`: Int): Unit = {\n        \n    }\n\n    def popFront(): Int = {\n        \n    }\n\n    def popMiddle(): Int = {\n        \n    }\n\n    def popBack(): Int = {\n        \n    }\n\n}\n\n/**\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * val obj = new FrontMiddleBackQueue()\n * obj.pushFront(`val`)\n * obj.pushMiddle(`val`)\n * obj.pushBack(`val`)\n * val param_4 = obj.popFront()\n * val param_5 = obj.popMiddle()\n * val param_6 = obj.popBack()\n */",
    "rust": "struct FrontMiddleBackQueue {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl FrontMiddleBackQueue {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn push_front(&self, val: i32) {\n        \n    }\n    \n    fn push_middle(&self, val: i32) {\n        \n    }\n    \n    fn push_back(&self, val: i32) {\n        \n    }\n    \n    fn pop_front(&self) -> i32 {\n        \n    }\n    \n    fn pop_middle(&self) -> i32 {\n        \n    }\n    \n    fn pop_back(&self) -> i32 {\n        \n    }\n}\n\n/**\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\n * let obj = FrontMiddleBackQueue::new();\n * obj.push_front(val);\n * obj.push_middle(val);\n * obj.push_back(val);\n * let ret_4: i32 = obj.pop_front();\n * let ret_5: i32 = obj.pop_middle();\n * let ret_6: i32 = obj.pop_back();\n */",
    "racket": "(define front-middle-back-queue%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; push-front : exact-integer? -> void?\n    (define/public (push-front val)\n      )\n    ; push-middle : exact-integer? -> void?\n    (define/public (push-middle val)\n      )\n    ; push-back : exact-integer? -> void?\n    (define/public (push-back val)\n      )\n    ; pop-front : -> exact-integer?\n    (define/public (pop-front)\n      )\n    ; pop-middle : -> exact-integer?\n    (define/public (pop-middle)\n      )\n    ; pop-back : -> exact-integer?\n    (define/public (pop-back)\n      )))\n\n;; Your front-middle-back-queue% object will be instantiated and called as such:\n;; (define obj (new front-middle-back-queue%))\n;; (send obj push-front val)\n;; (send obj push-middle val)\n;; (send obj push-back val)\n;; (define param_4 (send obj pop-front))\n;; (define param_5 (send obj pop-middle))\n;; (define param_6 (send obj pop-back))",
    "erlang": "-spec front_middle_back_queue_init_() -> any().\nfront_middle_back_queue_init_() ->\n  .\n\n-spec front_middle_back_queue_push_front(Val :: integer()) -> any().\nfront_middle_back_queue_push_front(Val) ->\n  .\n\n-spec front_middle_back_queue_push_middle(Val :: integer()) -> any().\nfront_middle_back_queue_push_middle(Val) ->\n  .\n\n-spec front_middle_back_queue_push_back(Val :: integer()) -> any().\nfront_middle_back_queue_push_back(Val) ->\n  .\n\n-spec front_middle_back_queue_pop_front() -> integer().\nfront_middle_back_queue_pop_front() ->\n  .\n\n-spec front_middle_back_queue_pop_middle() -> integer().\nfront_middle_back_queue_pop_middle() ->\n  .\n\n-spec front_middle_back_queue_pop_back() -> integer().\nfront_middle_back_queue_pop_back() ->\n  .\n\n\n%% Your functions will be called as such:\n%% front_middle_back_queue_init_(),\n%% front_middle_back_queue_push_front(Val),\n%% front_middle_back_queue_push_middle(Val),\n%% front_middle_back_queue_push_back(Val),\n%% Param_4 = front_middle_back_queue_pop_front(),\n%% Param_5 = front_middle_back_queue_pop_middle(),\n%% Param_6 = front_middle_back_queue_pop_back(),\n\n%% front_middle_back_queue_init_ will be called before every test case, in which you can do some necessary initializations.",
    "elixir": "defmodule FrontMiddleBackQueue do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec push_front(val :: integer) :: any\n  def push_front(val) do\n    \n  end\n\n  @spec push_middle(val :: integer) :: any\n  def push_middle(val) do\n    \n  end\n\n  @spec push_back(val :: integer) :: any\n  def push_back(val) do\n    \n  end\n\n  @spec pop_front() :: integer\n  def pop_front() do\n    \n  end\n\n  @spec pop_middle() :: integer\n  def pop_middle() do\n    \n  end\n\n  @spec pop_back() :: integer\n  def pop_back() do\n    \n  end\nend\n\n# Your functions will be called as such:\n# FrontMiddleBackQueue.init_()\n# FrontMiddleBackQueue.push_front(val)\n# FrontMiddleBackQueue.push_middle(val)\n# FrontMiddleBackQueue.push_back(val)\n# param_4 = FrontMiddleBackQueue.pop_front()\n# param_5 = FrontMiddleBackQueue.pop_middle()\n# param_6 = FrontMiddleBackQueue.pop_back()\n\n# FrontMiddleBackQueue.init_ will be called before every test case, in which you can do some necessary initializations."
  }
}
{
  "title": "Is Graph Bipartite?",
  "problem_id": "801",
  "frontend_id": "785",
  "difficulty": "Medium",
  "problem_slug": "is-graph-bipartite",
  "topics": [
    "Depth-First Search",
    "Breadth-First Search",
    "Union Find",
    "Graph"
  ],
  "description": "There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. More formally, for each v in graph[u], there is an undirected edge between node u and node v. The graph has the following properties:\nA graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B.\nReturn true if and only if it is bipartite.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]\nOutput: false\nExplanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/10/21/bi2.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: graph = [[1,3],[0,2],[1,3],[0,2]]\nOutput: true\nExplanation: We can partition the nodes into two sets: {0, 2} and {1, 3}.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/10/21/bi1.jpg"
      ]
    }
  ],
  "constraints": [
    "graph.length == n",
    "1 <= n <= 100",
    "0 <= graph[u].length < n",
    "0 <= graph[u][i] <= n - 1",
    "graph[u] does not contain u.",
    "All the values of graph[u] are unique.",
    "If graph[u] contains v, then graph[v] contains u."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool isBipartite(vector<vector<int>>& graph) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean isBipartite(int[][] graph) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def isBipartite(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def isBipartite(self, graph: List[List[int]]) -> bool:\n        ",
    "c": "bool isBipartite(int** graph, int graphSize, int* graphColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public bool IsBipartite(int[][] graph) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} graph\n * @return {boolean}\n */\nvar isBipartite = function(graph) {\n    \n};",
    "typescript": "function isBipartite(graph: number[][]): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $graph\n     * @return Boolean\n     */\n    function isBipartite($graph) {\n        \n    }\n}",
    "swift": "class Solution {\n    func isBipartite(_ graph: [[Int]]) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun isBipartite(graph: Array<IntArray>): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool isBipartite(List<List<int>> graph) {\n    \n  }\n}",
    "golang": "func isBipartite(graph [][]int) bool {\n    \n}",
    "ruby": "# @param {Integer[][]} graph\n# @return {Boolean}\ndef is_bipartite(graph)\n    \nend",
    "scala": "object Solution {\n    def isBipartite(graph: Array[Array[Int]]): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn is_bipartite(graph: Vec<Vec<i32>>) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (is-bipartite graph)\n  (-> (listof (listof exact-integer?)) boolean?)\n  )",
    "erlang": "-spec is_bipartite(Graph :: [[integer()]]) -> boolean().\nis_bipartite(Graph) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec is_bipartite(graph :: [[integer]]) :: boolean\n  def is_bipartite(graph) do\n    \n  end\nend"
  }
}
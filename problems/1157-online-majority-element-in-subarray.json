{
  "title": "Online Majority Element In Subarray",
  "problem_id": "1262",
  "frontend_id": "1157",
  "difficulty": "Hard",
  "problem_slug": "online-majority-element-in-subarray",
  "topics": [
    "Array",
    "Binary Search",
    "Design",
    "Binary Indexed Tree",
    "Segment Tree"
  ],
  "description": "Design a data structure that efficiently finds the majority element of a given subarray.\nThe majority element of a subarray is an element that occurs threshold times or more in the subarray.\nImplementing the MajorityChecker class:\nExample 1:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input\n[\"MajorityChecker\", \"query\", \"query\", \"query\"]\n[[[1, 1, 2, 2, 1, 1]], [0, 5, 4], [0, 3, 3], [2, 3, 2]]\nOutput\n[null, 1, -1, 2]\n\nExplanation\nMajorityChecker majorityChecker = new MajorityChecker([1, 1, 2, 2, 1, 1]);\nmajorityChecker.query(0, 5, 4); // return 1\nmajorityChecker.query(0, 3, 3); // return -1\nmajorityChecker.query(2, 3, 2); // return 2",
      "images": []
    }
  ],
  "constraints": [
    "1 <= arr.length <= 2 * 104",
    "1 <= arr[i] <= 2 * 104",
    "0 <= left <= right < arr.length",
    "threshold <= right - left + 1",
    "2 * threshold > right - left + 1",
    "At most 104 calls will be made to query."
  ],
  "follow_ups": [],
  "hints": [
    "What's special about a majority element ?",
    "A majority element appears more than half the length of the array number of times.",
    "If we tried a random index of the array, what's the probability that this index has a majority element ?",
    "It's more than 50% if that array has a majority element.",
    "Try a random index for a proper number of times so that the probability of not finding the answer tends to zero."
  ],
  "code_snippets": {
    "cpp": "class MajorityChecker {\npublic:\n    MajorityChecker(vector<int>& arr) {\n        \n    }\n    \n    int query(int left, int right, int threshold) {\n        \n    }\n};\n\n/**\n * Your MajorityChecker object will be instantiated and called as such:\n * MajorityChecker* obj = new MajorityChecker(arr);\n * int param_1 = obj->query(left,right,threshold);\n */",
    "java": "class MajorityChecker {\n\n    public MajorityChecker(int[] arr) {\n        \n    }\n    \n    public int query(int left, int right, int threshold) {\n        \n    }\n}\n\n/**\n * Your MajorityChecker object will be instantiated and called as such:\n * MajorityChecker obj = new MajorityChecker(arr);\n * int param_1 = obj.query(left,right,threshold);\n */",
    "python": "class MajorityChecker(object):\n\n    def __init__(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        \"\"\"\n        \n\n    def query(self, left, right, threshold):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :type threshold: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your MajorityChecker object will be instantiated and called as such:\n# obj = MajorityChecker(arr)\n# param_1 = obj.query(left,right,threshold)",
    "python3": "class MajorityChecker:\n\n    def __init__(self, arr: List[int]):\n        \n\n    def query(self, left: int, right: int, threshold: int) -> int:\n        \n\n\n# Your MajorityChecker object will be instantiated and called as such:\n# obj = MajorityChecker(arr)\n# param_1 = obj.query(left,right,threshold)",
    "c": "\n\n\ntypedef struct {\n    \n} MajorityChecker;\n\n\nMajorityChecker* majorityCheckerCreate(int* arr, int arrSize) {\n    \n}\n\nint majorityCheckerQuery(MajorityChecker* obj, int left, int right, int threshold) {\n    \n}\n\nvoid majorityCheckerFree(MajorityChecker* obj) {\n    \n}\n\n/**\n * Your MajorityChecker struct will be instantiated and called as such:\n * MajorityChecker* obj = majorityCheckerCreate(arr, arrSize);\n * int param_1 = majorityCheckerQuery(obj, left, right, threshold);\n \n * majorityCheckerFree(obj);\n*/",
    "csharp": "public class MajorityChecker {\n\n    public MajorityChecker(int[] arr) {\n        \n    }\n    \n    public int Query(int left, int right, int threshold) {\n        \n    }\n}\n\n/**\n * Your MajorityChecker object will be instantiated and called as such:\n * MajorityChecker obj = new MajorityChecker(arr);\n * int param_1 = obj.Query(left,right,threshold);\n */",
    "javascript": "/**\n * @param {number[]} arr\n */\nvar MajorityChecker = function(arr) {\n    \n};\n\n/** \n * @param {number} left \n * @param {number} right \n * @param {number} threshold\n * @return {number}\n */\nMajorityChecker.prototype.query = function(left, right, threshold) {\n    \n};\n\n/** \n * Your MajorityChecker object will be instantiated and called as such:\n * var obj = new MajorityChecker(arr)\n * var param_1 = obj.query(left,right,threshold)\n */",
    "typescript": "class MajorityChecker {\n    constructor(arr: number[]) {\n        \n    }\n\n    query(left: number, right: number, threshold: number): number {\n        \n    }\n}\n\n/**\n * Your MajorityChecker object will be instantiated and called as such:\n * var obj = new MajorityChecker(arr)\n * var param_1 = obj.query(left,right,threshold)\n */",
    "php": "class MajorityChecker {\n    /**\n     * @param Integer[] $arr\n     */\n    function __construct($arr) {\n        \n    }\n  \n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @param Integer $threshold\n     * @return Integer\n     */\n    function query($left, $right, $threshold) {\n        \n    }\n}\n\n/**\n * Your MajorityChecker object will be instantiated and called as such:\n * $obj = MajorityChecker($arr);\n * $ret_1 = $obj->query($left, $right, $threshold);\n */",
    "swift": "\nclass MajorityChecker {\n\n    init(_ arr: [Int]) {\n        \n    }\n    \n    func query(_ left: Int, _ right: Int, _ threshold: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your MajorityChecker object will be instantiated and called as such:\n * let obj = MajorityChecker(arr)\n * let ret_1: Int = obj.query(left, right, threshold)\n */",
    "kotlin": "class MajorityChecker(arr: IntArray) {\n\n    fun query(left: Int, right: Int, threshold: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your MajorityChecker object will be instantiated and called as such:\n * var obj = MajorityChecker(arr)\n * var param_1 = obj.query(left,right,threshold)\n */",
    "dart": "class MajorityChecker {\n\n  MajorityChecker(List<int> arr) {\n    \n  }\n  \n  int query(int left, int right, int threshold) {\n    \n  }\n}\n\n/**\n * Your MajorityChecker object will be instantiated and called as such:\n * MajorityChecker obj = MajorityChecker(arr);\n * int param1 = obj.query(left,right,threshold);\n */",
    "golang": "type MajorityChecker struct {\n    \n}\n\n\nfunc Constructor(arr []int) MajorityChecker {\n    \n}\n\n\nfunc (this *MajorityChecker) Query(left int, right int, threshold int) int {\n    \n}\n\n\n/**\n * Your MajorityChecker object will be instantiated and called as such:\n * obj := Constructor(arr);\n * param_1 := obj.Query(left,right,threshold);\n */",
    "ruby": "class MajorityChecker\n\n=begin\n    :type arr: Integer[]\n=end\n    def initialize(arr)\n        \n    end\n\n\n=begin\n    :type left: Integer\n    :type right: Integer\n    :type threshold: Integer\n    :rtype: Integer\n=end\n    def query(left, right, threshold)\n        \n    end\n\n\nend\n\n# Your MajorityChecker object will be instantiated and called as such:\n# obj = MajorityChecker.new(arr)\n# param_1 = obj.query(left, right, threshold)",
    "scala": "class MajorityChecker(_arr: Array[Int]) {\n\n    def query(left: Int, right: Int, threshold: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your MajorityChecker object will be instantiated and called as such:\n * val obj = new MajorityChecker(arr)\n * val param_1 = obj.query(left,right,threshold)\n */",
    "rust": "struct MajorityChecker {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MajorityChecker {\n\n    fn new(arr: Vec<i32>) -> Self {\n        \n    }\n    \n    fn query(&self, left: i32, right: i32, threshold: i32) -> i32 {\n        \n    }\n}\n\n/**\n * Your MajorityChecker object will be instantiated and called as such:\n * let obj = MajorityChecker::new(arr);\n * let ret_1: i32 = obj.query(left, right, threshold);\n */",
    "racket": "(define majority-checker%\n  (class object%\n    (super-new)\n    \n    ; arr : (listof exact-integer?)\n    (init-field\n      arr)\n    \n    ; query : exact-integer? exact-integer? exact-integer? -> exact-integer?\n    (define/public (query left right threshold)\n      )))\n\n;; Your majority-checker% object will be instantiated and called as such:\n;; (define obj (new majority-checker% [arr arr]))\n;; (define param_1 (send obj query left right threshold))",
    "erlang": "-spec majority_checker_init_(Arr :: [integer()]) -> any().\nmajority_checker_init_(Arr) ->\n  .\n\n-spec majority_checker_query(Left :: integer(), Right :: integer(), Threshold :: integer()) -> integer().\nmajority_checker_query(Left, Right, Threshold) ->\n  .\n\n\n%% Your functions will be called as such:\n%% majority_checker_init_(Arr),\n%% Param_1 = majority_checker_query(Left, Right, Threshold),\n\n%% majority_checker_init_ will be called before every test case, in which you can do some necessary initializations.",
    "elixir": "defmodule MajorityChecker do\n  @spec init_(arr :: [integer]) :: any\n  def init_(arr) do\n    \n  end\n\n  @spec query(left :: integer, right :: integer, threshold :: integer) :: integer\n  def query(left, right, threshold) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# MajorityChecker.init_(arr)\n# param_1 = MajorityChecker.query(left, right, threshold)\n\n# MajorityChecker.init_ will be called before every test case, in which you can do some necessary initializations."
  }
}
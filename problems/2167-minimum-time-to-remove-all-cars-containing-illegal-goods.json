{
  "title": "Minimum Time to Remove All Cars Containing Illegal Goods",
  "problem_id": "2286",
  "frontend_id": "2167",
  "difficulty": "Hard",
  "problem_slug": "minimum-time-to-remove-all-cars-containing-illegal-goods",
  "topics": [
    "String",
    "Dynamic Programming"
  ],
  "description": "You are given a 0-indexed binary string s which represents a sequence of train cars. s[i] = '0' denotes that the ith car does not contain illegal goods and s[i] = '1' denotes that the ith car does contain illegal goods.\nAs the train conductor, you would like to get rid of all the cars containing illegal goods. You can do any of the following three operations any number of times:\nReturn the minimum time to remove all the cars containing illegal goods.\nNote that an empty sequence of cars is considered to have no cars containing illegal goods.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"1100101\"\nOutput: 5\nExplanation: \nOne way to remove all the cars containing illegal goods from the sequence is to\n- remove a car from the left end 2 times. Time taken is 2 * 1 = 2.\n- remove a car from the right end. Time taken is 1.\n- remove the car containing illegal goods found in the middle. Time taken is 2.\nThis obtains a total time of 2 + 1 + 2 = 5. \n\nAn alternative way is to\n- remove a car from the left end 2 times. Time taken is 2 * 1 = 2.\n- remove a car from the right end 3 times. Time taken is 3 * 1 = 3.\nThis also obtains a total time of 2 + 3 = 5.\n\n5 is the minimum time taken to remove all the cars containing illegal goods. \nThere are no other ways to remove them with less time.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"0010\"\nOutput: 2\nExplanation:\nOne way to remove all the cars containing illegal goods from the sequence is to\n- remove a car from the left end 3 times. Time taken is 3 * 1 = 3.\nThis obtains a total time of 3.\n\nAnother way to remove all the cars containing illegal goods from the sequence is to\n- remove the car containing illegal goods found in the middle. Time taken is 2.\nThis obtains a total time of 2.\n\nAnother way to remove all the cars containing illegal goods from the sequence is to \n- remove a car from the right end 2 times. Time taken is 2 * 1 = 2. \nThis obtains a total time of 2.\n\n2 is the minimum time taken to remove all the cars containing illegal goods. \nThere are no other ways to remove them with less time.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 2 * 105",
    "s[i] is either '0' or '1'."
  ],
  "follow_ups": [],
  "hints": [
    "Build an array withoutFirst where withoutFirst[i] stores the minimum time to remove all the cars containing illegal goods from the ‘suffix’ of the sequence starting from the ith car without using any type 1 operations.",
    "Next, build an array onlyFirst where onlyFirst[i] stores the minimum time to remove all the cars containing illegal goods from the ‘prefix’ of the sequence ending on the ith car using only type 1 operations.",
    "Finally, we can compare the best way to split the operations amongst these two types by finding the minimum time across all onlyFirst[i] + withoutFirst[i + 1]."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimumTime(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimumTime(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumTime(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumTime(self, s: str) -> int:\n        ",
    "c": "int minimumTime(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimumTime(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {number}\n */\nvar minimumTime = function(s) {\n    \n};",
    "typescript": "function minimumTime(s: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function minimumTime($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumTime(_ s: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumTime(s: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumTime(String s) {\n    \n  }\n}",
    "golang": "func minimumTime(s string) int {\n    \n}",
    "ruby": "# @param {String} s\n# @return {Integer}\ndef minimum_time(s)\n    \nend",
    "scala": "object Solution {\n    def minimumTime(s: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_time(s: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-time s)\n  (-> string? exact-integer?)\n  )",
    "erlang": "-spec minimum_time(S :: unicode:unicode_binary()) -> integer().\nminimum_time(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_time(s :: String.t) :: integer\n  def minimum_time(s) do\n    \n  end\nend"
  }
}
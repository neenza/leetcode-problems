{
  "title": "Flip String to Monotone Increasing",
  "problem_id": "962",
  "frontend_id": "926",
  "difficulty": "Medium",
  "problem_slug": "flip-string-to-monotone-increasing",
  "topics": [
    "String",
    "Dynamic Programming"
  ],
  "description": "A binary string is monotone increasing if it consists of some number of 0's (possibly none), followed by some number of 1's (also possibly none).\nYou are given a binary string s. You can flip s[i] changing it from 0 to 1 or from 1 to 0.\nReturn the minimum number of flips to make s monotone increasing.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"00110\"\nOutput: 1\nExplanation: We flip the last digit to get 00111.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"010110\"\nOutput: 2\nExplanation: We flip to get 011111, or alternatively 000111.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"00011000\"\nOutput: 2\nExplanation: We flip to get 00000000.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 105",
    "s[i] is either '0' or '1'."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minFlipsMonoIncr(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minFlipsMonoIncr(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minFlipsMonoIncr(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minFlipsMonoIncr(self, s: str) -> int:\n        ",
    "c": "int minFlipsMonoIncr(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinFlipsMonoIncr(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {number}\n */\nvar minFlipsMonoIncr = function(s) {\n    \n};",
    "typescript": "function minFlipsMonoIncr(s: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function minFlipsMonoIncr($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minFlipsMonoIncr(_ s: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minFlipsMonoIncr(s: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minFlipsMonoIncr(String s) {\n    \n  }\n}",
    "golang": "func minFlipsMonoIncr(s string) int {\n    \n}",
    "ruby": "# @param {String} s\n# @return {Integer}\ndef min_flips_mono_incr(s)\n    \nend",
    "scala": "object Solution {\n    def minFlipsMonoIncr(s: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_flips_mono_incr(s: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-flips-mono-incr s)\n  (-> string? exact-integer?)\n  )",
    "erlang": "-spec min_flips_mono_incr(S :: unicode:unicode_binary()) -> integer().\nmin_flips_mono_incr(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_flips_mono_incr(s :: String.t) :: integer\n  def min_flips_mono_incr(s) do\n    \n  end\nend"
  }
}
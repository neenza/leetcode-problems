{
  "title": "Longest Uploaded Prefix",
  "problem_id": "2512",
  "frontend_id": "2424",
  "difficulty": "Medium",
  "problem_slug": "longest-uploaded-prefix",
  "topics": [
    "Hash Table",
    "Binary Search",
    "Union Find",
    "Design",
    "Binary Indexed Tree",
    "Segment Tree",
    "Heap (Priority Queue)",
    "Ordered Set"
  ],
  "description": "You are given a stream of n videos, each represented by a distinct number from 1 to n that you need to \"upload\" to a server. You need to implement a data structure that calculates the length of the longest uploaded prefix at various points in the upload process.\nWe consider i to be an uploaded prefix if all videos in the range 1 to i (inclusive) have been uploaded to the server. The longest uploaded prefix is the maximum value of i that satisfies this definition.\n\nImplement the LUPrefix class:\nExample 1:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input\n[\"LUPrefix\", \"upload\", \"longest\", \"upload\", \"longest\", \"upload\", \"longest\"]\n[[4], [3], [], [1], [], [2], []]\nOutput\n[null, null, 0, null, 1, null, 3]\n\nExplanation\nLUPrefix server = new LUPrefix(4);   // Initialize a stream of 4 videos.\nserver.upload(3);                    // Upload video 3.\nserver.longest();                    // Since video 1 has not been uploaded yet, there is no prefix.\n                                     // So, we return 0.\nserver.upload(1);                    // Upload video 1.\nserver.longest();                    // The prefix [1] is the longest uploaded prefix, so we return 1.\nserver.upload(2);                    // Upload video 2.\nserver.longest();                    // The prefix [1,2,3] is the longest uploaded prefix, so we return 3.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 105",
    "1 <= video <= n",
    "All values of video are distinct.",
    "At most 2 * 105 calls in total will be made to upload and longest.",
    "At least one call will be made to longest."
  ],
  "follow_ups": [],
  "hints": [
    "Maintain an array keeping track of whether video “i” has been uploaded yet."
  ],
  "code_snippets": {
    "cpp": "class LUPrefix {\npublic:\n    LUPrefix(int n) {\n        \n    }\n    \n    void upload(int video) {\n        \n    }\n    \n    int longest() {\n        \n    }\n};\n\n/**\n * Your LUPrefix object will be instantiated and called as such:\n * LUPrefix* obj = new LUPrefix(n);\n * obj->upload(video);\n * int param_2 = obj->longest();\n */",
    "java": "class LUPrefix {\n\n    public LUPrefix(int n) {\n        \n    }\n    \n    public void upload(int video) {\n        \n    }\n    \n    public int longest() {\n        \n    }\n}\n\n/**\n * Your LUPrefix object will be instantiated and called as such:\n * LUPrefix obj = new LUPrefix(n);\n * obj.upload(video);\n * int param_2 = obj.longest();\n */",
    "python": "class LUPrefix(object):\n\n    def __init__(self, n):\n        \"\"\"\n        :type n: int\n        \"\"\"\n        \n\n    def upload(self, video):\n        \"\"\"\n        :type video: int\n        :rtype: None\n        \"\"\"\n        \n\n    def longest(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your LUPrefix object will be instantiated and called as such:\n# obj = LUPrefix(n)\n# obj.upload(video)\n# param_2 = obj.longest()",
    "python3": "class LUPrefix:\n\n    def __init__(self, n: int):\n        \n\n    def upload(self, video: int) -> None:\n        \n\n    def longest(self) -> int:\n        \n\n\n# Your LUPrefix object will be instantiated and called as such:\n# obj = LUPrefix(n)\n# obj.upload(video)\n# param_2 = obj.longest()",
    "c": "\n\n\ntypedef struct {\n    \n} LUPrefix;\n\n\nLUPrefix* lUPrefixCreate(int n) {\n    \n}\n\nvoid lUPrefixUpload(LUPrefix* obj, int video) {\n    \n}\n\nint lUPrefixLongest(LUPrefix* obj) {\n    \n}\n\nvoid lUPrefixFree(LUPrefix* obj) {\n    \n}\n\n/**\n * Your LUPrefix struct will be instantiated and called as such:\n * LUPrefix* obj = lUPrefixCreate(n);\n * lUPrefixUpload(obj, video);\n \n * int param_2 = lUPrefixLongest(obj);\n \n * lUPrefixFree(obj);\n*/",
    "csharp": "public class LUPrefix {\n\n    public LUPrefix(int n) {\n        \n    }\n    \n    public void Upload(int video) {\n        \n    }\n    \n    public int Longest() {\n        \n    }\n}\n\n/**\n * Your LUPrefix object will be instantiated and called as such:\n * LUPrefix obj = new LUPrefix(n);\n * obj.Upload(video);\n * int param_2 = obj.Longest();\n */",
    "javascript": "/**\n * @param {number} n\n */\nvar LUPrefix = function(n) {\n    \n};\n\n/** \n * @param {number} video\n * @return {void}\n */\nLUPrefix.prototype.upload = function(video) {\n    \n};\n\n/**\n * @return {number}\n */\nLUPrefix.prototype.longest = function() {\n    \n};\n\n/** \n * Your LUPrefix object will be instantiated and called as such:\n * var obj = new LUPrefix(n)\n * obj.upload(video)\n * var param_2 = obj.longest()\n */",
    "typescript": "class LUPrefix {\n    constructor(n: number) {\n        \n    }\n\n    upload(video: number): void {\n        \n    }\n\n    longest(): number {\n        \n    }\n}\n\n/**\n * Your LUPrefix object will be instantiated and called as such:\n * var obj = new LUPrefix(n)\n * obj.upload(video)\n * var param_2 = obj.longest()\n */",
    "php": "class LUPrefix {\n    /**\n     * @param Integer $n\n     */\n    function __construct($n) {\n        \n    }\n  \n    /**\n     * @param Integer $video\n     * @return NULL\n     */\n    function upload($video) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function longest() {\n        \n    }\n}\n\n/**\n * Your LUPrefix object will be instantiated and called as such:\n * $obj = LUPrefix($n);\n * $obj->upload($video);\n * $ret_2 = $obj->longest();\n */",
    "swift": "\nclass LUPrefix {\n\n    init(_ n: Int) {\n        \n    }\n    \n    func upload(_ video: Int) {\n        \n    }\n    \n    func longest() -> Int {\n        \n    }\n}\n\n/**\n * Your LUPrefix object will be instantiated and called as such:\n * let obj = LUPrefix(n)\n * obj.upload(video)\n * let ret_2: Int = obj.longest()\n */",
    "kotlin": "class LUPrefix(n: Int) {\n\n    fun upload(video: Int) {\n        \n    }\n\n    fun longest(): Int {\n        \n    }\n\n}\n\n/**\n * Your LUPrefix object will be instantiated and called as such:\n * var obj = LUPrefix(n)\n * obj.upload(video)\n * var param_2 = obj.longest()\n */",
    "dart": "class LUPrefix {\n\n  LUPrefix(int n) {\n    \n  }\n  \n  void upload(int video) {\n    \n  }\n  \n  int longest() {\n    \n  }\n}\n\n/**\n * Your LUPrefix object will be instantiated and called as such:\n * LUPrefix obj = LUPrefix(n);\n * obj.upload(video);\n * int param2 = obj.longest();\n */",
    "golang": "type LUPrefix struct {\n    \n}\n\n\nfunc Constructor(n int) LUPrefix {\n    \n}\n\n\nfunc (this *LUPrefix) Upload(video int)  {\n    \n}\n\n\nfunc (this *LUPrefix) Longest() int {\n    \n}\n\n\n/**\n * Your LUPrefix object will be instantiated and called as such:\n * obj := Constructor(n);\n * obj.Upload(video);\n * param_2 := obj.Longest();\n */",
    "ruby": "class LUPrefix\n\n=begin\n    :type n: Integer\n=end\n    def initialize(n)\n        \n    end\n\n\n=begin\n    :type video: Integer\n    :rtype: Void\n=end\n    def upload(video)\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def longest()\n        \n    end\n\n\nend\n\n# Your LUPrefix object will be instantiated and called as such:\n# obj = LUPrefix.new(n)\n# obj.upload(video)\n# param_2 = obj.longest()",
    "scala": "class LUPrefix(_n: Int) {\n\n    def upload(video: Int): Unit = {\n        \n    }\n\n    def longest(): Int = {\n        \n    }\n\n}\n\n/**\n * Your LUPrefix object will be instantiated and called as such:\n * val obj = new LUPrefix(n)\n * obj.upload(video)\n * val param_2 = obj.longest()\n */",
    "rust": "struct LUPrefix {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl LUPrefix {\n\n    fn new(n: i32) -> Self {\n        \n    }\n    \n    fn upload(&self, video: i32) {\n        \n    }\n    \n    fn longest(&self) -> i32 {\n        \n    }\n}\n\n/**\n * Your LUPrefix object will be instantiated and called as such:\n * let obj = LUPrefix::new(n);\n * obj.upload(video);\n * let ret_2: i32 = obj.longest();\n */",
    "racket": "(define lu-prefix%\n  (class object%\n    (super-new)\n    \n    ; n : exact-integer?\n    (init-field\n      n)\n    \n    ; upload : exact-integer? -> void?\n    (define/public (upload video)\n      )\n    ; longest : -> exact-integer?\n    (define/public (longest)\n      )))\n\n;; Your lu-prefix% object will be instantiated and called as such:\n;; (define obj (new lu-prefix% [n n]))\n;; (send obj upload video)\n;; (define param_2 (send obj longest))",
    "erlang": "-spec lu_prefix_init_(N :: integer()) -> any().\nlu_prefix_init_(N) ->\n  .\n\n-spec lu_prefix_upload(Video :: integer()) -> any().\nlu_prefix_upload(Video) ->\n  .\n\n-spec lu_prefix_longest() -> integer().\nlu_prefix_longest() ->\n  .\n\n\n%% Your functions will be called as such:\n%% lu_prefix_init_(N),\n%% lu_prefix_upload(Video),\n%% Param_2 = lu_prefix_longest(),\n\n%% lu_prefix_init_ will be called before every test case, in which you can do some necessary initializations.",
    "elixir": "defmodule LUPrefix do\n  @spec init_(n :: integer) :: any\n  def init_(n) do\n    \n  end\n\n  @spec upload(video :: integer) :: any\n  def upload(video) do\n    \n  end\n\n  @spec longest() :: integer\n  def longest() do\n    \n  end\nend\n\n# Your functions will be called as such:\n# LUPrefix.init_(n)\n# LUPrefix.upload(video)\n# param_2 = LUPrefix.longest()\n\n# LUPrefix.init_ will be called before every test case, in which you can do some necessary initializations."
  }
}
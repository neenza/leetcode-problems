{
  "title": "Longest Valid Parentheses",
  "problem_id": "32",
  "frontend_id": "32",
  "difficulty": "Hard",
  "problem_slug": "longest-valid-parentheses",
  "topics": [
    "String",
    "Dynamic Programming",
    "Stack"
  ],
  "description": "Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"(()\"\nOutput: 2\nExplanation: The longest valid parentheses substring is \"()\".",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \")()())\"\nOutput: 4\nExplanation: The longest valid parentheses substring is \"()()\".",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"\"\nOutput: 0",
      "images": []
    }
  ],
  "constraints": [
    "0 <= s.length <= 3 * 104",
    "s[i] is '(', or ')'."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int longestValidParentheses(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public int longestValidParentheses(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        ",
    "c": "int longestValidParentheses(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public int LongestValidParentheses(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {number}\n */\nvar longestValidParentheses = function(s) {\n    \n};",
    "typescript": "function longestValidParentheses(s: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function longestValidParentheses($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func longestValidParentheses(_ s: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun longestValidParentheses(s: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int longestValidParentheses(String s) {\n    \n  }\n}",
    "golang": "func longestValidParentheses(s string) int {\n    \n}",
    "ruby": "# @param {String} s\n# @return {Integer}\ndef longest_valid_parentheses(s)\n    \nend",
    "scala": "object Solution {\n    def longestValidParentheses(s: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn longest_valid_parentheses(s: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (longest-valid-parentheses s)\n  (-> string? exact-integer?)\n  )",
    "erlang": "-spec longest_valid_parentheses(S :: unicode:unicode_binary()) -> integer().\nlongest_valid_parentheses(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec longest_valid_parentheses(s :: String.t) :: integer\n  def longest_valid_parentheses(s) do\n    \n  end\nend"
  }
}
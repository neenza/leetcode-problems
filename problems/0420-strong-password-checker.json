{
  "title": "Strong Password Checker",
  "problem_id": "420",
  "frontend_id": "420",
  "difficulty": "Hard",
  "problem_slug": "strong-password-checker",
  "topics": [
    "String",
    "Greedy",
    "Heap (Priority Queue)"
  ],
  "description": "A password is considered strong if the below conditions are all met:\nGiven a string password, return the minimum number of steps required to make password strong. if password is already strong, return 0.\nIn one step, you can:\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: password = \"a\"\nOutput: 5",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: password = \"aA1\"\nOutput: 3",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: password = \"1337C0d3\"\nOutput: 0",
      "images": []
    }
  ],
  "constraints": [
    "1 <= password.length <= 50",
    "password consists of letters, digits, dotÂ '.' or exclamation mark '!'."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int strongPasswordChecker(string password) {\n        \n    }\n};",
    "java": "class Solution {\n    public int strongPasswordChecker(String password) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def strongPasswordChecker(self, password: str) -> int:\n        ",
    "c": "int strongPasswordChecker(char* password) {\n    \n}",
    "csharp": "public class Solution {\n    public int StrongPasswordChecker(string password) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} password\n * @return {number}\n */\nvar strongPasswordChecker = function(password) {\n    \n};",
    "typescript": "function strongPasswordChecker(password: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $password\n     * @return Integer\n     */\n    function strongPasswordChecker($password) {\n        \n    }\n}",
    "swift": "class Solution {\n    func strongPasswordChecker(_ password: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun strongPasswordChecker(password: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int strongPasswordChecker(String password) {\n    \n  }\n}",
    "golang": "func strongPasswordChecker(password string) int {\n    \n}",
    "ruby": "# @param {String} password\n# @return {Integer}\ndef strong_password_checker(password)\n    \nend",
    "scala": "object Solution {\n    def strongPasswordChecker(password: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn strong_password_checker(password: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (strong-password-checker password)\n  (-> string? exact-integer?)\n  )",
    "erlang": "-spec strong_password_checker(Password :: unicode:unicode_binary()) -> integer().\nstrong_password_checker(Password) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec strong_password_checker(password :: String.t) :: integer\n  def strong_password_checker(password) do\n    \n  end\nend"
  }
}
{
  "title": "Reverse Bits",
  "problem_id": "190",
  "frontend_id": "190",
  "difficulty": "Easy",
  "problem_slug": "reverse-bits",
  "topics": [
    "Divide and Conquer",
    "Bit Manipulation"
  ],
  "description": "Reverse bits of a given 32 bits unsigned integer.\nNote:\nExample 1:\nExample 2:\nConstraints:\nFollow up: If this function is called many times, how would you optimize it?",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 43261596\nOutput: 964176192\nExplanation:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 2147483644\nOutput: 1073741822\nExplanation:",
      "images": []
    }
  ],
  "constraints": [
    "0 <= n <= 231 - 2",
    "n is even."
  ],
  "follow_ups": [
    "If this function is called many times, how would you optimize it?"
  ],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int reverseBits(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int reverseBits(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def reverseBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def reverseBits(self, n: int) -> int:\n        ",
    "c": "int reverseBits(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int ReverseBits(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar reverseBits = function(n) {\n    \n};",
    "typescript": "function reverseBits(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function reverseBits($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func reverseBits(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun reverseBits(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int reverseBits(int n) {\n    \n  }\n}",
    "golang": "func reverseBits(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef reverse_bits(n)\n    \nend",
    "scala": "object Solution {\n    def reverseBits(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn reverse_bits(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (reverse-bits n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec reverse_bits(N :: integer()) -> integer().\nreverse_bits(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec reverse_bits(n :: integer) :: integer\n  def reverse_bits(n) do\n    \n  end\nend"
  }
}
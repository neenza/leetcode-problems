{
  "title": "Maximum Gap",
  "problem_id": "164",
  "frontend_id": "164",
  "difficulty": "Medium",
  "problem_slug": "maximum-gap",
  "topics": [
    "Array",
    "Sorting",
    "Bucket Sort",
    "Radix Sort"
  ],
  "description": "Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0.\nYou must write an algorithm that runs in linear time and uses linear extra space.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [3,6,9,1]\nOutput: 3\nExplanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [10]\nOutput: 0\nExplanation: The array contains less than 2 elements, therefore return 0.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "0 <= nums[i] <= 109"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maximumGap(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maximumGap(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maximumGap(self, nums: List[int]) -> int:\n        ",
    "c": "int maximumGap(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaximumGap(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumGap = function(nums) {\n    \n};",
    "typescript": "function maximumGap(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximumGap($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maximumGap(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maximumGap(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maximumGap(List<int> nums) {\n    \n  }\n}",
    "golang": "func maximumGap(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef maximum_gap(nums)\n    \nend",
    "scala": "object Solution {\n    def maximumGap(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn maximum_gap(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (maximum-gap nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec maximum_gap(Nums :: [integer()]) -> integer().\nmaximum_gap(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec maximum_gap(nums :: [integer]) :: integer\n  def maximum_gap(nums) do\n    \n  end\nend"
  }
}
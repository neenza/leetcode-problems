{
  "title": "Number of Restricted Paths From First to Last Node",
  "problem_id": "1912",
  "frontend_id": "1786",
  "difficulty": "Medium",
  "problem_slug": "number-of-restricted-paths-from-first-to-last-node",
  "topics": [
    "Dynamic Programming",
    "Graph",
    "Topological Sort",
    "Heap (Priority Queue)",
    "Shortest Path"
  ],
  "description": "There is an undirected weighted connected graph. You are given a positive integer n which denotes that the graph has n nodes labeled from 1 to n, and an array edges where each edges[i] = [ui, vi, weighti] denotes that there is an edge between nodes ui and vi with weight equal to weighti.\nA path from node start to node end is a sequence of nodes [z0, z1, z2, ..., zk] such that z0 = start and zk = end and there is an edge between zi and zi+1 where 0 <= i <= k-1.\nThe distance of a path is the sum of the weights on the edges of the path. Let distanceToLastNode(x) denote the shortest distance of a path between node n and node x. A restricted path is a path that also satisfies that distanceToLastNode(zi) > distanceToLastNode(zi+1) where 0 <= i <= k-1.\nReturn the number of restricted paths from node 1 to node n. Since that number may be too large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 5, edges = [[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]]\nOutput: 3\nExplanation: Each circle contains the node number in black and its distanceToLastNode value in blue. The three restricted paths are:\n1) 1 --> 2 --> 5\n2) 1 --> 2 --> 3 --> 5\n3) 1 --> 3 --> 5",
      "images": [
        "https://assets.leetcode.com/uploads/2021/02/17/restricted_paths_ex1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 7, edges = [[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[6,7,2],[7,5,3],[2,6,4]]\nOutput: 1\nExplanation: Each circle contains the node number in black and its distanceToLastNode value in blue. The only restricted path is 1 --> 3 --> 7.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/02/17/restricted_paths_ex22.png"
      ]
    }
  ],
  "constraints": [
    "1 <= n <= 2 * 104",
    "n - 1 <= edges.length <= 4 * 104",
    "edges[i].length == 3",
    "1 <= ui, vi <= n",
    "ui != vi",
    "1 <= weighti <= 105",
    "There is at most one edge between any two nodes.",
    "There is at least one path between any two nodes."
  ],
  "follow_ups": [],
  "hints": [
    "Run a Dijkstra from node numbered n to compute distance from the last node.",
    "Consider all edges [u, v] one by one and direct them such that distance of u to n > distance of v to n. If both u and v are at the same distance from n, discard this edge.",
    "Now this problem reduces to computing the number of paths from 1 to n in a DAG, a standard DP problem."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int countRestrictedPaths(int n, vector<vector<int>>& edges) {\n        \n    }\n};",
    "java": "class Solution {\n    public int countRestrictedPaths(int n, int[][] edges) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countRestrictedPaths(self, n, edges):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countRestrictedPaths(self, n: int, edges: List[List[int]]) -> int:\n        ",
    "c": "int countRestrictedPaths(int n, int** edges, int edgesSize, int* edgesColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int CountRestrictedPaths(int n, int[][] edges) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {number}\n */\nvar countRestrictedPaths = function(n, edges) {\n    \n};",
    "typescript": "function countRestrictedPaths(n: number, edges: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @return Integer\n     */\n    function countRestrictedPaths($n, $edges) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countRestrictedPaths(_ n: Int, _ edges: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countRestrictedPaths(n: Int, edges: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int countRestrictedPaths(int n, List<List<int>> edges) {\n    \n  }\n}",
    "golang": "func countRestrictedPaths(n int, edges [][]int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @return {Integer}\ndef count_restricted_paths(n, edges)\n    \nend",
    "scala": "object Solution {\n    def countRestrictedPaths(n: Int, edges: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_restricted_paths(n: i32, edges: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (count-restricted-paths n edges)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec count_restricted_paths(N :: integer(), Edges :: [[integer()]]) -> integer().\ncount_restricted_paths(N, Edges) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_restricted_paths(n :: integer, edges :: [[integer]]) :: integer\n  def count_restricted_paths(n, edges) do\n    \n  end\nend"
  }
}
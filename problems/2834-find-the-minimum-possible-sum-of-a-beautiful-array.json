{
  "title": "Find the Minimum Possible Sum of a Beautiful Array",
  "problem_id": "3026",
  "frontend_id": "2834",
  "difficulty": "Medium",
  "problem_slug": "find-the-minimum-possible-sum-of-a-beautiful-array",
  "topics": [
    "Math",
    "Greedy"
  ],
  "description": "You are given positive integers n and target.\nAn array nums is beautiful if it meets the following conditions:\nReturn the minimum possible sum that a beautiful array could have modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 2, target = 3\nOutput: 4\nExplanation: We can see that nums = [1,3] is beautiful.\n- The array nums has length n = 2.\n- The array nums consists of pairwise distinct positive integers.\n- There doesn't exist two distinct indices, i and j, with nums[i] + nums[j] == 3.\nIt can be proven that 4 is the minimum possible sum that a beautiful array could have.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 3, target = 3\nOutput: 8\nExplanation: We can see that nums = [1,3,4] is beautiful.\n- The array nums has length n = 3.\n- The array nums consists of pairwise distinct positive integers.\n- There doesn't exist two distinct indices, i and j, with nums[i] + nums[j] == 3.\nIt can be proven that 8 is the minimum possible sum that a beautiful array could have.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 1, target = 1\nOutput: 1\nExplanation: We can see, that nums = [1] is beautiful.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 109",
    "1 <= target <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "<div class=\"_1l1MA\">Greedily try to add the smallest possible number in the array <code>nums</code>, such that <code>nums</code> contains distinct positive integers, and there are no two indices <code>i</code> and <code>j</code> with <code>nums[i] + nums[j] == target</code>.</div>"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimumPossibleSum(int n, int target) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimumPossibleSum(int n, int target) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumPossibleSum(self, n, target):\n        \"\"\"\n        :type n: int\n        :type target: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumPossibleSum(self, n: int, target: int) -> int:\n        ",
    "c": "int minimumPossibleSum(int n, int target) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimumPossibleSum(int n, int target) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number} target\n * @return {number}\n */\nvar minimumPossibleSum = function(n, target) {\n    \n};",
    "typescript": "function minimumPossibleSum(n: number, target: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $target\n     * @return Integer\n     */\n    function minimumPossibleSum($n, $target) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumPossibleSum(_ n: Int, _ target: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumPossibleSum(n: Int, target: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumPossibleSum(int n, int target) {\n    \n  }\n}",
    "golang": "func minimumPossibleSum(n int, target int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer} target\n# @return {Integer}\ndef minimum_possible_sum(n, target)\n    \nend",
    "scala": "object Solution {\n    def minimumPossibleSum(n: Int, target: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_possible_sum(n: i32, target: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-possible-sum n target)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec minimum_possible_sum(N :: integer(), Target :: integer()) -> integer().\nminimum_possible_sum(N, Target) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_possible_sum(n :: integer, target :: integer) :: integer\n  def minimum_possible_sum(n, target) do\n    \n  end\nend"
  }
}
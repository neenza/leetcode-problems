{
  "title": "Get Watched Videos by Your Friends",
  "problem_id": "1436",
  "frontend_id": "1311",
  "difficulty": "Medium",
  "problem_slug": "get-watched-videos-by-your-friends",
  "topics": [
    "Array",
    "Hash Table",
    "Breadth-First Search",
    "Graph",
    "Sorting"
  ],
  "description": "There are n people, each person has a unique id between 0 and n-1. Given the arrays watchedVideos and friends, where watchedVideos[i] and friends[i] contain the list of watched videos and the list of friends respectively for the person with id = i.\nLevel 1 of videos are all watched videos by your friends, level 2 of videos are all watched videos by the friends of your friends and so on. In general, the level k of videos are all watched videos by people with the shortest path exactly equal to k with you. Given your id and the level of videos, return the list of videos ordered by their frequencies (increasing). For videos with the same frequency order them alphabetically from least to greatest.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: watchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1\nOutput: [\"B\",\"C\"] \nExplanation: \nYou have id = 0 (green color in the figure) and your friends are (yellow color in the figure):\nPerson with id = 1 -> watchedVideos = [\"C\"] \nPerson with id = 2 -> watchedVideos = [\"B\",\"C\"] \nThe frequencies of watchedVideos by your friends are: \nB -> 1 \nC -> 2",
      "images": [
        "https://assets.leetcode.com/uploads/2020/01/02/leetcode_friends_1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: watchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2\nOutput: [\"D\"]\nExplanation: \nYou have id = 0 (green color in the figure) and the only friend of your friends is the person with id = 3 (yellow color in the figure).",
      "images": [
        "https://assets.leetcode.com/uploads/2020/01/02/leetcode_friends_2.png"
      ]
    }
  ],
  "constraints": [
    "n == watchedVideos.length == friends.length",
    "2 <= n <= 100",
    "1 <= watchedVideos[i].length <= 100",
    "1 <= watchedVideos[i][j].length <= 8",
    "0 <= friends[i].length < n",
    "0 <= friends[i][j] < n",
    "0 <= id < n",
    "1 <= level < n",
    "if friends[i] contains j, then friends[j] contains i"
  ],
  "follow_ups": [],
  "hints": [
    "Do BFS to find the kth level friends.",
    "Then collect movies saw by kth level friends and sort them accordingly."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<string> watchedVideosByFriends(vector<vector<string>>& watchedVideos, vector<vector<int>>& friends, int id, int level) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<String> watchedVideosByFriends(List<List<String>> watchedVideos, int[][] friends, int id, int level) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def watchedVideosByFriends(self, watchedVideos, friends, id, level):\n        \"\"\"\n        :type watchedVideos: List[List[str]]\n        :type friends: List[List[int]]\n        :type id: int\n        :type level: int\n        :rtype: List[str]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def watchedVideosByFriends(self, watchedVideos: List[List[str]], friends: List[List[int]], id: int, level: int) -> List[str]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** watchedVideosByFriends(char*** watchedVideos, int watchedVideosSize, int* watchedVideosColSize, int** friends, int friendsSize, int* friendsColSize, int id, int level, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<string> WatchedVideosByFriends(IList<IList<string>> watchedVideos, int[][] friends, int id, int level) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string[][]} watchedVideos\n * @param {number[][]} friends\n * @param {number} id\n * @param {number} level\n * @return {string[]}\n */\nvar watchedVideosByFriends = function(watchedVideos, friends, id, level) {\n    \n};",
    "typescript": "function watchedVideosByFriends(watchedVideos: string[][], friends: number[][], id: number, level: number): string[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String[][] $watchedVideos\n     * @param Integer[][] $friends\n     * @param Integer $id\n     * @param Integer $level\n     * @return String[]\n     */\n    function watchedVideosByFriends($watchedVideos, $friends, $id, $level) {\n        \n    }\n}",
    "swift": "class Solution {\n    func watchedVideosByFriends(_ watchedVideos: [[String]], _ friends: [[Int]], _ id: Int, _ level: Int) -> [String] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun watchedVideosByFriends(watchedVideos: List<List<String>>, friends: Array<IntArray>, id: Int, level: Int): List<String> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<String> watchedVideosByFriends(List<List<String>> watchedVideos, List<List<int>> friends, int id, int level) {\n    \n  }\n}",
    "golang": "func watchedVideosByFriends(watchedVideos [][]string, friends [][]int, id int, level int) []string {\n    \n}",
    "ruby": "# @param {String[][]} watched_videos\n# @param {Integer[][]} friends\n# @param {Integer} id\n# @param {Integer} level\n# @return {String[]}\ndef watched_videos_by_friends(watched_videos, friends, id, level)\n    \nend",
    "scala": "object Solution {\n    def watchedVideosByFriends(watchedVideos: List[List[String]], friends: Array[Array[Int]], id: Int, level: Int): List[String] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn watched_videos_by_friends(watched_videos: Vec<Vec<String>>, friends: Vec<Vec<i32>>, id: i32, level: i32) -> Vec<String> {\n        \n    }\n}",
    "racket": "(define/contract (watched-videos-by-friends watchedVideos friends id level)\n  (-> (listof (listof string?)) (listof (listof exact-integer?)) exact-integer? exact-integer? (listof string?))\n  )",
    "erlang": "-spec watched_videos_by_friends(WatchedVideos :: [[unicode:unicode_binary()]], Friends :: [[integer()]], Id :: integer(), Level :: integer()) -> [unicode:unicode_binary()].\nwatched_videos_by_friends(WatchedVideos, Friends, Id, Level) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec watched_videos_by_friends(watched_videos :: [[String.t]], friends :: [[integer]], id :: integer, level :: integer) :: [String.t]\n  def watched_videos_by_friends(watched_videos, friends, id, level) do\n    \n  end\nend"
  }
}
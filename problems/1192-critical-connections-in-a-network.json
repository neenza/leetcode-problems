{
  "title": "Critical Connections in a Network",
  "problem_id": "1300",
  "frontend_id": "1192",
  "difficulty": "Hard",
  "problem_slug": "critical-connections-in-a-network",
  "topics": [
    "Depth-First Search",
    "Graph",
    "Biconnected Component"
  ],
  "description": "There are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections forming a network where connections[i] = [ai, bi] represents a connection between servers ai and bi. Any server can reach other servers directly or indirectly through the network.\nA critical connection is a connection that, if removed, will make some servers unable to reach some other server.\nReturn all critical connections in the network in any order.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]\nOutput: [[1,3]]\nExplanation: [[3,1]] is also accepted.",
      "images": [
        "https://assets.leetcode.com/uploads/2019/09/03/1537_ex1_2.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 2, connections = [[0,1]]\nOutput: [[0,1]]",
      "images": [
        "https://assets.leetcode.com/uploads/2019/09/03/1537_ex1_2.png"
      ]
    }
  ],
  "constraints": [
    "2 <= n <= 105",
    "n - 1 <= connections.length <= 105",
    "0 <= ai, bi <= n - 1",
    "ai != bi",
    "There are no repeated connections."
  ],
  "follow_ups": [],
  "hints": [
    "Use Tarjan's algorithm."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def criticalConnections(self, n, connections):\n        \"\"\"\n        :type n: int\n        :type connections: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def criticalConnections(self, n: int, connections: List[List[int]]) -> List[List[int]]:\n        ",
    "c": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** criticalConnections(int n, int** connections, int connectionsSize, int* connectionsColSize, int* returnSize, int** returnColumnSizes) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<IList<int>> CriticalConnections(int n, IList<IList<int>> connections) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number[][]} connections\n * @return {number[][]}\n */\nvar criticalConnections = function(n, connections) {\n    \n};",
    "typescript": "function criticalConnections(n: number, connections: number[][]): number[][] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $connections\n     * @return Integer[][]\n     */\n    function criticalConnections($n, $connections) {\n        \n    }\n}",
    "swift": "class Solution {\n    func criticalConnections(_ n: Int, _ connections: [[Int]]) -> [[Int]] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun criticalConnections(n: Int, connections: List<List<Int>>): List<List<Int>> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<List<int>> criticalConnections(int n, List<List<int>> connections) {\n    \n  }\n}",
    "golang": "func criticalConnections(n int, connections [][]int) [][]int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer[][]} connections\n# @return {Integer[][]}\ndef critical_connections(n, connections)\n    \nend",
    "scala": "object Solution {\n    def criticalConnections(n: Int, connections: List[List[Int]]): List[List[Int]] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn critical_connections(n: i32, connections: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}",
    "racket": "(define/contract (critical-connections n connections)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )",
    "erlang": "-spec critical_connections(N :: integer(), Connections :: [[integer()]]) -> [[integer()]].\ncritical_connections(N, Connections) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec critical_connections(n :: integer, connections :: [[integer]]) :: [[integer]]\n  def critical_connections(n, connections) do\n    \n  end\nend"
  }
}
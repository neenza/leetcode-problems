{
  "title": "Pairs of Songs With Total Durations Divisible by 60",
  "problem_id": "1055",
  "frontend_id": "1010",
  "difficulty": "Medium",
  "problem_slug": "pairs-of-songs-with-total-durations-divisible-by-60",
  "topics": [
    "Array",
    "Hash Table",
    "Counting"
  ],
  "description": "You are given a list of songs where the ith song has a duration of time[i] seconds.\nReturn the number of pairs of songs for which their total duration in seconds is divisible by 60. Formally, we want the number of indices i, j such that i < j with (time[i] + time[j]) % 60 == 0.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: time = [30,20,150,100,40]\nOutput: 3\nExplanation: Three pairs have a total duration divisible by 60:\n(time[0] = 30, time[2] = 150): total duration 180\n(time[1] = 20, time[3] = 100): total duration 120\n(time[1] = 20, time[4] = 40): total duration 60",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: time = [60,60,60]\nOutput: 3\nExplanation: All three pairs have a total duration of 120, which is divisible by 60.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= time.length <= 6 * 104",
    "1 <= time[i] <= 500"
  ],
  "follow_ups": [],
  "hints": [
    "We only need to consider each song length modulo 60.",
    "We can count the number of songs having same (length % 60), and store that in an array of size 60."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int numPairsDivisibleBy60(vector<int>& time) {\n        \n    }\n};",
    "java": "class Solution {\n    public int numPairsDivisibleBy60(int[] time) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numPairsDivisibleBy60(self, time):\n        \"\"\"\n        :type time: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numPairsDivisibleBy60(self, time: List[int]) -> int:\n        ",
    "c": "int numPairsDivisibleBy60(int* time, int timeSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int NumPairsDivisibleBy60(int[] time) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} time\n * @return {number}\n */\nvar numPairsDivisibleBy60 = function(time) {\n    \n};",
    "typescript": "function numPairsDivisibleBy60(time: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $time\n     * @return Integer\n     */\n    function numPairsDivisibleBy60($time) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numPairsDivisibleBy60(_ time: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numPairsDivisibleBy60(time: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int numPairsDivisibleBy60(List<int> time) {\n    \n  }\n}",
    "golang": "func numPairsDivisibleBy60(time []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} time\n# @return {Integer}\ndef num_pairs_divisible_by60(time)\n    \nend",
    "scala": "object Solution {\n    def numPairsDivisibleBy60(time: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn num_pairs_divisible_by60(time: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (num-pairs-divisible-by60 time)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec num_pairs_divisible_by60(Time :: [integer()]) -> integer().\nnum_pairs_divisible_by60(Time) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec num_pairs_divisible_by60(time :: [integer]) :: integer\n  def num_pairs_divisible_by60(time) do\n    \n  end\nend"
  }
}
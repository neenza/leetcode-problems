{
  "title": "Interleaving String",
  "problem_id": "97",
  "frontend_id": "97",
  "difficulty": "Medium",
  "problem_slug": "interleaving-string",
  "topics": [
    "String",
    "Dynamic Programming"
  ],
  "description": "Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\nAn interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that:\nNote: a + b is the concatenation of strings a and b.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow up: Could you solve it using only O(s2.length) additional memory space?",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\nOutput: true\nExplanation: One way to obtain s3 is:\nSplit s1 into s1 = \"aa\" + \"bc\" + \"c\", and s2 into s2 = \"dbbc\" + \"a\".\nInterleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".\nSince s3 can be obtained by interleaving s1 and s2, we return true.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/09/02/interleave.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\nOutput: false\nExplanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/09/02/interleave.jpg"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: s1 = \"\", s2 = \"\", s3 = \"\"\nOutput: true",
      "images": [
        "https://assets.leetcode.com/uploads/2020/09/02/interleave.jpg"
      ]
    }
  ],
  "constraints": [
    "0 <= s1.length, s2.length <= 100",
    "0 <= s3.length <= 200",
    "s1, s2, and s3 consist of lowercase English letters."
  ],
  "follow_ups": [
    "Could you solve it using only O(s2.length) additional memory space?"
  ],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool isInterleave(string s1, string s2, string s3) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean isInterleave(String s1, String s2, String s3) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        ",
    "c": "bool isInterleave(char* s1, char* s2, char* s3) {\n    \n}",
    "csharp": "public class Solution {\n    public bool IsInterleave(string s1, string s2, string s3) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s1\n * @param {string} s2\n * @param {string} s3\n * @return {boolean}\n */\nvar isInterleave = function(s1, s2, s3) {\n    \n};",
    "typescript": "function isInterleave(s1: string, s2: string, s3: string): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @param String $s3\n     * @return Boolean\n     */\n    function isInterleave($s1, $s2, $s3) {\n        \n    }\n}",
    "swift": "class Solution {\n    func isInterleave(_ s1: String, _ s2: String, _ s3: String) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun isInterleave(s1: String, s2: String, s3: String): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool isInterleave(String s1, String s2, String s3) {\n    \n  }\n}",
    "golang": "func isInterleave(s1 string, s2 string, s3 string) bool {\n    \n}",
    "ruby": "# @param {String} s1\n# @param {String} s2\n# @param {String} s3\n# @return {Boolean}\ndef is_interleave(s1, s2, s3)\n    \nend",
    "scala": "object Solution {\n    def isInterleave(s1: String, s2: String, s3: String): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn is_interleave(s1: String, s2: String, s3: String) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (is-interleave s1 s2 s3)\n  (-> string? string? string? boolean?)\n  )",
    "erlang": "-spec is_interleave(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary(), S3 :: unicode:unicode_binary()) -> boolean().\nis_interleave(S1, S2, S3) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec is_interleave(s1 :: String.t, s2 :: String.t, s3 :: String.t) :: boolean\n  def is_interleave(s1, s2, s3) do\n    \n  end\nend"
  }
}
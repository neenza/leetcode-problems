{
  "title": "Maximum Product of the Length of Two Palindromic Subsequences",
  "problem_id": "2130",
  "frontend_id": "2002",
  "difficulty": "Medium",
  "problem_slug": "maximum-product-of-the-length-of-two-palindromic-subsequences",
  "topics": [
    "String",
    "Dynamic Programming",
    "Backtracking",
    "Bit Manipulation",
    "Bitmask"
  ],
  "description": "Given a string s, find two disjoint palindromic subsequences of s such that the product of their lengths is maximized. The two subsequences are disjoint if they do not both pick a character at the same index.\nReturn the maximum possible product of the lengths of the two palindromic subsequences.\nA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. A string is palindromic if it reads the same forward and backward.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"leetcodecom\"\nOutput: 9\nExplanation: An optimal solution is to choose \"ete\" for the 1st subsequence and \"cdc\" for the 2nd subsequence.\nThe product of their lengths is: 3 * 3 = 9.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/08/24/two-palindromic-subsequences.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"bb\"\nOutput: 1\nExplanation: An optimal solution is to choose \"b\" (the first character) for the 1st subsequence and \"b\" (the second character) for the 2nd subsequence.\nThe product of their lengths is: 1 * 1 = 1.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/08/24/two-palindromic-subsequences.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"accbcaxxcxx\"\nOutput: 25\nExplanation: An optimal solution is to choose \"accca\" for the 1st subsequence and \"xxcxx\" for the 2nd subsequence.\nThe product of their lengths is: 5 * 5 = 25.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/08/24/two-palindromic-subsequences.png"
      ]
    }
  ],
  "constraints": [
    "2 <= s.length <= 12",
    "s consists of lowercase English letters only."
  ],
  "follow_ups": [],
  "hints": [
    "Could you generate all possible pairs of disjoint subsequences?",
    "Could you find the maximum length palindrome in each subsequence for a pair of disjoint subsequences?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxProduct(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxProduct(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxProduct(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxProduct(self, s: str) -> int:\n        ",
    "c": "int maxProduct(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxProduct(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {number}\n */\nvar maxProduct = function(s) {\n    \n};",
    "typescript": "function maxProduct(s: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function maxProduct($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxProduct(_ s: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxProduct(s: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxProduct(String s) {\n    \n  }\n}",
    "golang": "func maxProduct(s string) int {\n    \n}",
    "ruby": "# @param {String} s\n# @return {Integer}\ndef max_product(s)\n    \nend",
    "scala": "object Solution {\n    def maxProduct(s: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_product(s: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-product s)\n  (-> string? exact-integer?)\n  )",
    "erlang": "-spec max_product(S :: unicode:unicode_binary()) -> integer().\nmax_product(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_product(s :: String.t) :: integer\n  def max_product(s) do\n    \n  end\nend"
  }
}
{
  "title": "Find the Width of Columns of a Grid",
  "problem_id": "2675",
  "frontend_id": "2639",
  "difficulty": "Easy",
  "problem_slug": "find-the-width-of-columns-of-a-grid",
  "topics": [
    "Array",
    "Matrix"
  ],
  "description": "You are given a 0-indexed m x n integer matrix grid. The width of a column is the maximum length of its integers.\nReturn an integer array ans of size n where ans[i] is the width of the ith column.\nThe length of an integer x with len digits is equal to len if x is non-negative, and len + 1 otherwise.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: grid = [[1],[22],[333]]\nOutput: [3]\nExplanation: In the 0th column, 333 is of length 3.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: grid = [[-15,1,3],[15,7,12],[5,6,-2]]\nOutput: [3,1,2]\nExplanation: \nIn the 0th column, only -15 is of length 3.\nIn the 1st column, all integers are of length 1. \nIn the 2nd column, both 12 and -2 are of length 2.",
      "images": []
    }
  ],
  "constraints": [
    "m == grid.length",
    "n == grid[i].length",
    "1 <= m, n <= 100",
    "-109 <= grid[r][c] <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "You can find the length of a number by dividing it by 10 and then rounding it down again and again until this number becomes equal to 0. Add 1 if this number is negative.",
    "Traverse the matrix column-wise to find the maximum length in each column."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] findColumnWidth(int[][] grid) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findColumnWidth(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findColumnWidth(int** grid, int gridSize, int* gridColSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] FindColumnWidth(int[][] grid) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} grid\n * @return {number[]}\n */\nvar findColumnWidth = function(grid) {\n    \n};",
    "typescript": "function findColumnWidth(grid: number[][]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer[]\n     */\n    function findColumnWidth($grid) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findColumnWidth(_ grid: [[Int]]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findColumnWidth(grid: Array<IntArray>): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> findColumnWidth(List<List<int>> grid) {\n    \n  }\n}",
    "golang": "func findColumnWidth(grid [][]int) []int {\n    \n}",
    "ruby": "# @param {Integer[][]} grid\n# @return {Integer[]}\ndef find_column_width(grid)\n    \nend",
    "scala": "object Solution {\n    def findColumnWidth(grid: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_column_width(grid: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (find-column-width grid)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n  )",
    "erlang": "-spec find_column_width(Grid :: [[integer()]]) -> [integer()].\nfind_column_width(Grid) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_column_width(grid :: [[integer]]) :: [integer]\n  def find_column_width(grid) do\n    \n  end\nend"
  }
}
{
  "title": "Number of Boomerangs",
  "problem_id": "447",
  "frontend_id": "447",
  "difficulty": "Medium",
  "problem_slug": "number-of-boomerangs",
  "topics": [
    "Array",
    "Hash Table",
    "Math"
  ],
  "description": "You are given n points in the plane that are all distinct, where points[i] = [xi, yi]. A boomerang is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).\nReturn the number of boomerangs.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: points = [[0,0],[1,0],[2,0]]\nOutput: 2\nExplanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: points = [[1,1],[2,2],[3,3]]\nOutput: 2",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: points = [[1,1]]\nOutput: 0",
      "images": []
    }
  ],
  "constraints": [
    "n == points.length",
    "1 <= n <= 500",
    "points[i].length == 2",
    "-104 <= xi, yi <= 104",
    "All the points are unique."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int numberOfBoomerangs(vector<vector<int>>& points) {\n        \n    }\n};",
    "java": "class Solution {\n    public int numberOfBoomerangs(int[][] points) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numberOfBoomerangs(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numberOfBoomerangs(self, points: List[List[int]]) -> int:\n        ",
    "c": "int numberOfBoomerangs(int** points, int pointsSize, int* pointsColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int NumberOfBoomerangs(int[][] points) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar numberOfBoomerangs = function(points) {\n    \n};",
    "typescript": "function numberOfBoomerangs(points: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function numberOfBoomerangs($points) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numberOfBoomerangs(_ points: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numberOfBoomerangs(points: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int numberOfBoomerangs(List<List<int>> points) {\n    \n  }\n}",
    "golang": "func numberOfBoomerangs(points [][]int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} points\n# @return {Integer}\ndef number_of_boomerangs(points)\n    \nend",
    "scala": "object Solution {\n    def numberOfBoomerangs(points: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn number_of_boomerangs(points: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (number-of-boomerangs points)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec number_of_boomerangs(Points :: [[integer()]]) -> integer().\nnumber_of_boomerangs(Points) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec number_of_boomerangs(points :: [[integer]]) :: integer\n  def number_of_boomerangs(points) do\n    \n  end\nend"
  }
}
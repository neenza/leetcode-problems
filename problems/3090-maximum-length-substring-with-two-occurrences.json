{
  "title": "Maximum Length Substring With Two Occurrences",
  "problem_id": "3349",
  "frontend_id": "3090",
  "difficulty": "Easy",
  "problem_slug": "maximum-length-substring-with-two-occurrences",
  "topics": [
    "Hash Table",
    "String",
    "Sliding Window"
  ],
  "description": "Example 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"bcbbbcba\"\nOutput: 4\nExplanation:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"aaaa\"\nOutput: 2\nExplanation:",
      "images": []
    }
  ],
  "constraints": [
    "2 <= s.length <= 100",
    "s consists only of lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [
    "We can try all substrings by brute-force since the constraints are very small."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maximumLengthSubstring(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maximumLengthSubstring(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maximumLengthSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maximumLengthSubstring(self, s: str) -> int:\n        ",
    "c": "int maximumLengthSubstring(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaximumLengthSubstring(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {number}\n */\nvar maximumLengthSubstring = function(s) {\n    \n};",
    "typescript": "function maximumLengthSubstring(s: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function maximumLengthSubstring($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maximumLengthSubstring(_ s: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maximumLengthSubstring(s: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maximumLengthSubstring(String s) {\n    \n  }\n}",
    "golang": "func maximumLengthSubstring(s string) int {\n    \n}",
    "ruby": "# @param {String} s\n# @return {Integer}\ndef maximum_length_substring(s)\n    \nend",
    "scala": "object Solution {\n    def maximumLengthSubstring(s: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn maximum_length_substring(s: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (maximum-length-substring s)\n  (-> string? exact-integer?)\n  )",
    "erlang": "-spec maximum_length_substring(S :: unicode:unicode_binary()) -> integer().\nmaximum_length_substring(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec maximum_length_substring(s :: String.t) :: integer\n  def maximum_length_substring(s) do\n    \n  end\nend"
  }
}
{
  "title": "Minimum Distance to Type a Word Using Two Fingers",
  "problem_id": "1443",
  "frontend_id": "1320",
  "difficulty": "Hard",
  "problem_slug": "minimum-distance-to-type-a-word-using-two-fingers",
  "topics": [
    "String",
    "Dynamic Programming"
  ],
  "description": "You have a keyboard layout as shown above in the X-Y plane, where each English uppercase letter is located at some coordinate.\nGiven the string word, return the minimum total distance to type such string using only two fingers.\nThe distance between coordinates (x1, y1) and (x2, y2) is |x1 - x2| + |y1 - y2|.\nNote that the initial positions of your two fingers are considered free so do not count towards your total distance, also your two fingers do not have to start at the first letter or the first two letters.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: word = \"CAKE\"\nOutput: 3\nExplanation: Using two fingers, one optimal way to type \"CAKE\" is: \nFinger 1 on letter 'C' -> cost = 0 \nFinger 1 on letter 'A' -> cost = Distance from letter 'C' to letter 'A' = 2 \nFinger 2 on letter 'K' -> cost = 0 \nFinger 2 on letter 'E' -> cost = Distance from letter 'K' to letter 'E' = 1 \nTotal distance = 3",
      "images": [
        "https://assets.leetcode.com/uploads/2020/01/02/leetcode_keyboard.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: word = \"HAPPY\"\nOutput: 6\nExplanation: Using two fingers, one optimal way to type \"HAPPY\" is:\nFinger 1 on letter 'H' -> cost = 0\nFinger 1 on letter 'A' -> cost = Distance from letter 'H' to letter 'A' = 2\nFinger 2 on letter 'P' -> cost = 0\nFinger 2 on letter 'P' -> cost = Distance from letter 'P' to letter 'P' = 0\nFinger 1 on letter 'Y' -> cost = Distance from letter 'A' to letter 'Y' = 4\nTotal distance = 6",
      "images": [
        "https://assets.leetcode.com/uploads/2020/01/02/leetcode_keyboard.png"
      ]
    }
  ],
  "constraints": [
    "2 <= word.length <= 300",
    "word consists of uppercase English letters."
  ],
  "follow_ups": [],
  "hints": [
    "Use dynamic programming.",
    "dp[i][j][k]: smallest movements when you have one finger on i-th char and the other one on j-th char already having written k first characters from word."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimumDistance(string word) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimumDistance(String word) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumDistance(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumDistance(self, word: str) -> int:\n        ",
    "c": "int minimumDistance(char* word) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimumDistance(string word) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} word\n * @return {number}\n */\nvar minimumDistance = function(word) {\n    \n};",
    "typescript": "function minimumDistance(word: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $word\n     * @return Integer\n     */\n    function minimumDistance($word) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumDistance(_ word: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumDistance(word: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumDistance(String word) {\n    \n  }\n}",
    "golang": "func minimumDistance(word string) int {\n    \n}",
    "ruby": "# @param {String} word\n# @return {Integer}\ndef minimum_distance(word)\n    \nend",
    "scala": "object Solution {\n    def minimumDistance(word: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_distance(word: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-distance word)\n  (-> string? exact-integer?)\n  )",
    "erlang": "-spec minimum_distance(Word :: unicode:unicode_binary()) -> integer().\nminimum_distance(Word) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_distance(word :: String.t) :: integer\n  def minimum_distance(word) do\n    \n  end\nend"
  }
}
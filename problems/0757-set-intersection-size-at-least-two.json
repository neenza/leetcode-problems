{
  "title": "Set Intersection Size At Least Two",
  "problem_id": "759",
  "frontend_id": "757",
  "difficulty": "Hard",
  "problem_slug": "set-intersection-size-at-least-two",
  "topics": [
    "Array",
    "Greedy",
    "Sorting"
  ],
  "description": "You are given a 2D integer array intervals where intervals[i] = [starti, endi] represents all the integers from starti to endi inclusively.\nA containing set is an array nums where each interval from intervals has at least two integers in nums.\nReturn the minimum possible size of a containing set.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: intervals = [[1,3],[3,7],[8,9]]\nOutput: 5\nExplanation: let nums = [2, 3, 4, 8, 9].\nIt can be shown that there cannot be any containing array of size 4.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: intervals = [[1,3],[1,4],[2,5],[3,5]]\nOutput: 3\nExplanation: let nums = [2, 3, 4].\nIt can be shown that there cannot be any containing array of size 2.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: intervals = [[1,2],[2,3],[2,4],[4,5]]\nOutput: 5\nExplanation: let nums = [1, 2, 3, 4, 5].\nIt can be shown that there cannot be any containing array of size 4.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= intervals.length <= 3000",
    "intervals[i].length == 2",
    "0 <= starti < endi <= 108"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int intersectionSizeTwo(vector<vector<int>>& intervals) {\n        \n    }\n};",
    "java": "class Solution {\n    public int intersectionSizeTwo(int[][] intervals) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def intersectionSizeTwo(self, intervals: List[List[int]]) -> int:\n        ",
    "c": "int intersectionSizeTwo(int** intervals, int intervalsSize, int* intervalsColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int IntersectionSizeTwo(int[][] intervals) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} intervals\n * @return {number}\n */\nvar intersectionSizeTwo = function(intervals) {\n    \n};",
    "typescript": "function intersectionSizeTwo(intervals: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @return Integer\n     */\n    function intersectionSizeTwo($intervals) {\n        \n    }\n}",
    "swift": "class Solution {\n    func intersectionSizeTwo(_ intervals: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun intersectionSizeTwo(intervals: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int intersectionSizeTwo(List<List<int>> intervals) {\n    \n  }\n}",
    "golang": "func intersectionSizeTwo(intervals [][]int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} intervals\n# @return {Integer}\ndef intersection_size_two(intervals)\n    \nend",
    "scala": "object Solution {\n    def intersectionSizeTwo(intervals: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn intersection_size_two(intervals: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (intersection-size-two intervals)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec intersection_size_two(Intervals :: [[integer()]]) -> integer().\nintersection_size_two(Intervals) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec intersection_size_two(intervals :: [[integer]]) :: integer\n  def intersection_size_two(intervals) do\n    \n  end\nend"
  }
}
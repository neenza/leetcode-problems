{
  "title": "Count Number of Pairs With Absolute Difference K",
  "problem_id": "2116",
  "frontend_id": "2006",
  "difficulty": "Easy",
  "problem_slug": "count-number-of-pairs-with-absolute-difference-k",
  "topics": [
    "Array",
    "Hash Table",
    "Counting"
  ],
  "description": "Given an integer array nums and an integer k, return the number of pairs (i, j) where i < j such that |nums[i] - nums[j]| == k.\nThe value of |x| is defined as:\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,2,1], k = 1\nOutput: 4\nExplanation: The pairs with an absolute difference of 1 are:\n- [1,2,2,1]\n- [1,2,2,1]\n- [1,2,2,1]\n- [1,2,2,1]",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,3], k = 3\nOutput: 0\nExplanation: There are no pairs with an absolute difference of 3.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [3,2,1,5,4], k = 2\nOutput: 3\nExplanation: The pairs with an absolute difference of 2 are:\n- [3,2,1,5,4]\n- [3,2,1,5,4]\n- [3,2,1,5,4]",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 200",
    "1 <= nums[i] <= 100",
    "1 <= k <= 99"
  ],
  "follow_ups": [],
  "hints": [
    "Can we check every possible pair?",
    "Can we use a nested for loop to solve this problem?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int countKDifference(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int countKDifference(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countKDifference(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countKDifference(self, nums: List[int], k: int) -> int:\n        ",
    "c": "int countKDifference(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int CountKDifference(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar countKDifference = function(nums, k) {\n    \n};",
    "typescript": "function countKDifference(nums: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function countKDifference($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countKDifference(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countKDifference(nums: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int countKDifference(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func countKDifference(nums []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef count_k_difference(nums, k)\n    \nend",
    "scala": "object Solution {\n    def countKDifference(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_k_difference(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (count-k-difference nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec count_k_difference(Nums :: [integer()], K :: integer()) -> integer().\ncount_k_difference(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_k_difference(nums :: [integer], k :: integer) :: integer\n  def count_k_difference(nums, k) do\n    \n  end\nend"
  }
}
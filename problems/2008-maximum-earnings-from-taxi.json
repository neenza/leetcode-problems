{
  "title": "Maximum Earnings From Taxi",
  "problem_id": "2118",
  "frontend_id": "2008",
  "difficulty": "Medium",
  "problem_slug": "maximum-earnings-from-taxi",
  "topics": [
    "Array",
    "Hash Table",
    "Binary Search",
    "Dynamic Programming",
    "Sorting"
  ],
  "description": "There are n points on a road you are driving your taxi on. The n points on the road are labeled from 1 to n in the direction you are going, and you want to drive from point 1 to point n to make money by picking up passengers. You cannot change the direction of the taxi.\nThe passengers are represented by a 0-indexed 2D integer array rides, where rides[i] = [starti, endi, tipi] denotes the ith passenger requesting a ride from point starti to point endi who is willing to give a tipi dollar tip.\nFor each passenger i you pick up, you earn endi - starti + tipi dollars. You may only drive at most one passenger at a time.\nGiven n and rides, return the maximum number of dollars you can earn by picking up the passengers optimally.\nNote: You may drop off a passenger and pick up a different passenger at the same point.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 5, rides = [[2,5,4],[1,5,1]]\nOutput: 7\nExplanation: We can pick up passenger 0 to earn 5 - 2 + 4 = 7 dollars.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 20, rides = [[1,6,1],[3,10,2],[10,12,3],[11,12,2],[12,15,2],[13,18,1]]\nOutput: 20\nExplanation: We will pick up the following passengers:\n- Drive passenger 1 from point 3 to point 10 for a profit of 10 - 3 + 2 = 9 dollars.\n- Drive passenger 2 from point 10 to point 12 for a profit of 12 - 10 + 3 = 5 dollars.\n- Drive passenger 5 from point 13 to point 18 for a profit of 18 - 13 + 1 = 6 dollars.\nWe earn 9 + 5 + 6 = 20 dollars in total.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 105",
    "1 <= rides.length <= 3 * 104",
    "rides[i].length == 3",
    "1 <= starti < endi <= n",
    "1 <= tipi <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "Can we sort the array to help us solve the problem?",
    "We can use dynamic programming to keep track of the maximum at each position."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long maxTaxiEarnings(int n, vector<vector<int>>& rides) {\n        \n    }\n};",
    "java": "class Solution {\n    public long maxTaxiEarnings(int n, int[][] rides) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxTaxiEarnings(self, n, rides):\n        \"\"\"\n        :type n: int\n        :type rides: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxTaxiEarnings(self, n: int, rides: List[List[int]]) -> int:\n        ",
    "c": "long long maxTaxiEarnings(int n, int** rides, int ridesSize, int* ridesColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public long MaxTaxiEarnings(int n, int[][] rides) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number[][]} rides\n * @return {number}\n */\nvar maxTaxiEarnings = function(n, rides) {\n    \n};",
    "typescript": "function maxTaxiEarnings(n: number, rides: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $rides\n     * @return Integer\n     */\n    function maxTaxiEarnings($n, $rides) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxTaxiEarnings(_ n: Int, _ rides: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxTaxiEarnings(n: Int, rides: Array<IntArray>): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxTaxiEarnings(int n, List<List<int>> rides) {\n    \n  }\n}",
    "golang": "func maxTaxiEarnings(n int, rides [][]int) int64 {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer[][]} rides\n# @return {Integer}\ndef max_taxi_earnings(n, rides)\n    \nend",
    "scala": "object Solution {\n    def maxTaxiEarnings(n: Int, rides: Array[Array[Int]]): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_taxi_earnings(n: i32, rides: Vec<Vec<i32>>) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (max-taxi-earnings n rides)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec max_taxi_earnings(N :: integer(), Rides :: [[integer()]]) -> integer().\nmax_taxi_earnings(N, Rides) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_taxi_earnings(n :: integer, rides :: [[integer]]) :: integer\n  def max_taxi_earnings(n, rides) do\n    \n  end\nend"
  }
}
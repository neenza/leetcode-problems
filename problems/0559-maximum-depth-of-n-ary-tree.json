{
  "title": "Maximum Depth of N-ary Tree",
  "problem_id": "774",
  "frontend_id": "559",
  "difficulty": "Easy",
  "problem_slug": "maximum-depth-of-n-ary-tree",
  "topics": [
    "Tree",
    "Depth-First Search",
    "Breadth-First Search"
  ],
  "description": "Given a n-ary tree, find its maximum depth.\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: root = [1,null,3,2,4,null,5,6]\nOutput: 3",
      "images": [
        "https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: 5",
      "images": [
        "https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png"
      ]
    }
  ],
  "constraints": [
    "The total number of nodes is in the range [0, 104].",
    "The depth of the n-ary tree is less than or equal to 1000."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> children;\n\n    Node() {}\n\n    Node(int _val) {\n        val = _val;\n    }\n\n    Node(int _val, vector<Node*> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    int maxDepth(Node* root) {\n        \n    }\n};",
    "java": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> children;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, List<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\n    public int maxDepth(Node root) {\n        \n    }\n}",
    "python": "\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\n\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val: Optional[int] = None, children: Optional[List['Node']] = None):\n        self.val = val\n        self.children = children\n\"\"\"\n\nclass Solution:\n    def maxDepth(self, root: 'Node') -> int:\n        ",
    "c": "/**\n * Definition for a Node.\n * struct Node {\n *     int val;\n *     int numChildren;\n *     struct Node** children;\n * };\n */\n\nint maxDepth(struct Node* root) {\n    \n}",
    "csharp": "/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public IList<Node> children;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, IList<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n}\n*/\n\npublic class Solution {\n    public int MaxDepth(Node root) {\n        \n    }\n}",
    "javascript": "/**\n * // Definition for a _Node.\n * function _Node(val,children) {\n *    this.val = val === undefined ? null : val;\n *    this.children = children === undefined ? null : children;\n * };\n */\n\n/**\n * @param {_Node|null} root\n * @return {number}\n */\nvar maxDepth = function(root) {\n    \n};",
    "typescript": "/**\n * Definition for _Node.\n * class _Node {\n *     val: number\n *     children: _Node[]\n * \n *     constructor(val?: number, children?: _Node[]) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.children = (children===undefined ? [] : children)\n *     }\n * }\n */\n\n\nfunction maxDepth(root: _Node | null): number {\n    \n};",
    "php": "/**\n * Definition for a Node.\n * class Node {\n *     public $val = null;\n *     public $children = null;\n *     function __construct($val = 0) {\n *         $this->val = $val;\n *         $this->children = array();\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Node $root\n     * @return integer\n     */\n    function maxDepth($root) {\n    \t\n    }\n}",
    "swift": "/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Int\n *     public var children: [Node]\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.children = []\n *     }\n * }\n */\n\nclass Solution {\n    func maxDepth(_ root: Node?) -> Int {\n        \n    }\n}",
    "kotlin": "/**\n * Definition for a Node.\n * class Node(var `val`: Int) {\n *     var children: List<Node?> = listOf()\n * }\n */\n\nclass Solution {\n    fun maxDepth(root: Node?): Int {\n        \n    }\n}",
    "golang": "/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Children []*Node\n * }\n */\n\nfunc maxDepth(root *Node) int {\n    \n}",
    "ruby": "# Definition for a Node.\n# class Node\n#     attr_accessor :val, :children\n#     def initialize(val)\n#         @val = val\n#         @children = []\n#     end\n# end\n\n# @param {Node} root\n# @return {int}\ndef maxDepth(root)\n    \nend",
    "scala": "/**\n * Definition for a Node.\n * class Node(var _value: Int) {\n *   var value: Int = _value\n *   var children: List[Node] = List()\n * }\n */\n\nobject Solution {\n    def maxDepth(root: Node): Int = {\n        \n    }\n}"
  }
}
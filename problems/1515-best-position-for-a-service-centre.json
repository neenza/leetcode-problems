{
  "title": "Best Position for a Service Centre",
  "problem_id": "1638",
  "frontend_id": "1515",
  "difficulty": "Hard",
  "problem_slug": "best-position-for-a-service-centre",
  "topics": [
    "Array",
    "Math",
    "Geometry",
    "Randomized"
  ],
  "description": "A delivery company wants to build a new service center in a new city. The company knows the positions of all the customers in this city on a 2D-Map and wants to build the new center in a position such that the sum of the euclidean distances to all customers is minimum.\nGiven an array positions where positions[i] = [xi, yi] is the position of the ith customer on the map, return the minimum sum of the euclidean distances to all customers.\nIn other words, you need to choose the position of the service center [xcentre, ycentre] such that the following formula is minimized:\nAnswers within 10-5 of the actual value will be accepted.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: positions = [[0,1],[1,0],[1,2],[2,1]]\nOutput: 4.00000\nExplanation: As shown, you can see that choosing [xcentre, ycentre] = [1, 1] will make the distance to each customer = 1, the sum of all distances is 4 which is the minimum possible we can achieve.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/06/25/q4_e1.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: positions = [[1,1],[3,3]]\nOutput: 2.82843\nExplanation: The minimum possible sum of distances = sqrt(2) + sqrt(2) = 2.82843",
      "images": [
        "https://assets.leetcode.com/uploads/2020/06/25/q4_e3.jpg"
      ]
    }
  ],
  "constraints": [
    "1 <= positions.length <= 50",
    "positions[i].length == 2",
    "0 <= xi, yi <= 100"
  ],
  "follow_ups": [],
  "hints": [
    "The problem can be reworded as, giving a set of points on a 2d-plane, return the geometric median.",
    "Loop over each triplet of points (positions[i], positions[j], positions[k]) where i < j < k, get the centre of the circle which goes throw the 3 points, check if all other points lie in this circle."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    double getMinDistSum(vector<vector<int>>& positions) {\n        \n    }\n};",
    "java": "class Solution {\n    public double getMinDistSum(int[][] positions) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def getMinDistSum(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: float\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def getMinDistSum(self, positions: List[List[int]]) -> float:\n        ",
    "c": "double getMinDistSum(int** positions, int positionsSize, int* positionsColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public double GetMinDistSum(int[][] positions) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} positions\n * @return {number}\n */\nvar getMinDistSum = function(positions) {\n    \n};",
    "typescript": "function getMinDistSum(positions: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $positions\n     * @return Float\n     */\n    function getMinDistSum($positions) {\n        \n    }\n}",
    "swift": "class Solution {\n    func getMinDistSum(_ positions: [[Int]]) -> Double {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun getMinDistSum(positions: Array<IntArray>): Double {\n        \n    }\n}",
    "dart": "class Solution {\n  double getMinDistSum(List<List<int>> positions) {\n    \n  }\n}",
    "golang": "func getMinDistSum(positions [][]int) float64 {\n    \n}",
    "ruby": "# @param {Integer[][]} positions\n# @return {Float}\ndef get_min_dist_sum(positions)\n    \nend",
    "scala": "object Solution {\n    def getMinDistSum(positions: Array[Array[Int]]): Double = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn get_min_dist_sum(positions: Vec<Vec<i32>>) -> f64 {\n        \n    }\n}",
    "racket": "(define/contract (get-min-dist-sum positions)\n  (-> (listof (listof exact-integer?)) flonum?)\n  )",
    "erlang": "-spec get_min_dist_sum(Positions :: [[integer()]]) -> float().\nget_min_dist_sum(Positions) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec get_min_dist_sum(positions :: [[integer]]) :: float\n  def get_min_dist_sum(positions) do\n    \n  end\nend"
  }
}
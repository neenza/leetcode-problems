{
  "title": "Shift 2D Grid",
  "problem_id": "1386",
  "frontend_id": "1260",
  "difficulty": "Easy",
  "problem_slug": "shift-2d-grid",
  "topics": [
    "Array",
    "Matrix",
    "Simulation"
  ],
  "description": "Given a 2D grid of size m x n and an integer k. You need to shift the grid k times.\nIn one shift operation:\nReturn the 2D grid after applying shift operation k times.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1\nOutput: [[9,1,2],[3,4,5],[6,7,8]]",
      "images": [
        "https://assets.leetcode.com/uploads/2019/11/05/e1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4\nOutput: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]",
      "images": [
        "https://assets.leetcode.com/uploads/2019/11/05/e2.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9\nOutput: [[1,2,3],[4,5,6],[7,8,9]]",
      "images": [
        "https://assets.leetcode.com/uploads/2019/11/05/e2.png"
      ]
    }
  ],
  "constraints": [
    "m == grid.length",
    "n == grid[i].length",
    "1 <= m <= 50",
    "1 <= n <= 50",
    "-1000 <= grid[i][j] <= 1000",
    "0 <= k <= 100"
  ],
  "follow_ups": [],
  "hints": [
    "Simulate step by step. move grid[i][j] to grid[i][j+1]. handle last column of the grid.",
    "Put the matrix row by row to a vector. take k % vector.length and move last k of the vector to the beginning. put the vector to the matrix back the same way."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<vector<int>> shiftGrid(vector<vector<int>>& grid, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<List<Integer>> shiftGrid(int[][] grid, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def shiftGrid(self, grid, k):\n        \"\"\"\n        :type grid: List[List[int]]\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def shiftGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:\n        ",
    "c": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** shiftGrid(int** grid, int gridSize, int* gridColSize, int k, int* returnSize, int** returnColumnSizes) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<IList<int>> ShiftGrid(int[][] grid, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} grid\n * @param {number} k\n * @return {number[][]}\n */\nvar shiftGrid = function(grid, k) {\n    \n};",
    "typescript": "function shiftGrid(grid: number[][], k: number): number[][] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @param Integer $k\n     * @return Integer[][]\n     */\n    function shiftGrid($grid, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func shiftGrid(_ grid: [[Int]], _ k: Int) -> [[Int]] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun shiftGrid(grid: Array<IntArray>, k: Int): List<List<Int>> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<List<int>> shiftGrid(List<List<int>> grid, int k) {\n    \n  }\n}",
    "golang": "func shiftGrid(grid [][]int, k int) [][]int {\n    \n}",
    "ruby": "# @param {Integer[][]} grid\n# @param {Integer} k\n# @return {Integer[][]}\ndef shift_grid(grid, k)\n    \nend",
    "scala": "object Solution {\n    def shiftGrid(grid: Array[Array[Int]], k: Int): List[List[Int]] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn shift_grid(grid: Vec<Vec<i32>>, k: i32) -> Vec<Vec<i32>> {\n        \n    }\n}",
    "racket": "(define/contract (shift-grid grid k)\n  (-> (listof (listof exact-integer?)) exact-integer? (listof (listof exact-integer?)))\n  )",
    "erlang": "-spec shift_grid(Grid :: [[integer()]], K :: integer()) -> [[integer()]].\nshift_grid(Grid, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec shift_grid(grid :: [[integer]], k :: integer) :: [[integer]]\n  def shift_grid(grid, k) do\n    \n  end\nend"
  }
}
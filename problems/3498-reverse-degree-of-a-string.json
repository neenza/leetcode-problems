{
  "title": "Reverse Degree of a String",
  "problem_id": "3811",
  "frontend_id": "3498",
  "difficulty": "Easy",
  "problem_slug": "reverse-degree-of-a-string",
  "topics": [
    "String",
    "Simulation"
  ],
  "description": "Given a string s, calculate its reverse degree.\nThe reverse degree is calculated as follows:\nReturn the reverse degree of s.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"abc\"\nOutput: 148\nExplanation:\nThe reversed degree is 26 + 50 + 72 = 148 .",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"zaza\"\nOutput: 160\nExplanation:\nThe reverse degree is 1 + 52 + 3 + 104 = 160 .",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 1000",
    "s contains only lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [
    "Simulate the operations as described."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int reverseDegree(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public int reverseDegree(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def reverseDegree(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def reverseDegree(self, s: str) -> int:\n        ",
    "c": "int reverseDegree(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public int ReverseDegree(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {number}\n */\nvar reverseDegree = function(s) {\n    \n};",
    "typescript": "function reverseDegree(s: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function reverseDegree($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func reverseDegree(_ s: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun reverseDegree(s: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int reverseDegree(String s) {\n    \n  }\n}",
    "golang": "func reverseDegree(s string) int {\n    \n}",
    "ruby": "# @param {String} s\n# @return {Integer}\ndef reverse_degree(s)\n    \nend",
    "scala": "object Solution {\n    def reverseDegree(s: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn reverse_degree(s: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (reverse-degree s)\n  (-> string? exact-integer?)\n  )",
    "erlang": "-spec reverse_degree(S :: unicode:unicode_binary()) -> integer().\nreverse_degree(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec reverse_degree(s :: String.t) :: integer\n  def reverse_degree(s) do\n    \n  end\nend"
  }
}
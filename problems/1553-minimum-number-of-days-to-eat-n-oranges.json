{
  "title": "Minimum Number of Days to Eat N Oranges",
  "problem_id": "1676",
  "frontend_id": "1553",
  "difficulty": "Hard",
  "problem_slug": "minimum-number-of-days-to-eat-n-oranges",
  "topics": [
    "Dynamic Programming",
    "Memoization"
  ],
  "description": "There are n oranges in the kitchen and you decided to eat some of these oranges every day as follows:\nYou can only choose one of the actions per day.\nGiven the integer n, return the minimum number of days to eat n oranges.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 10\nOutput: 4\nExplanation: You have 10 oranges.\nDay 1: Eat 1 orange,  10 - 1 = 9.  \nDay 2: Eat 6 oranges, 9 - 2*(9/3) = 9 - 6 = 3. (Since 9 is divisible by 3)\nDay 3: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. \nDay 4: Eat the last orange  1 - 1  = 0.\nYou need at least 4 days to eat the 10 oranges.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 6\nOutput: 3\nExplanation: You have 6 oranges.\nDay 1: Eat 3 oranges, 6 - 6/2 = 6 - 3 = 3. (Since 6 is divisible by 2).\nDay 2: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. (Since 3 is divisible by 3)\nDay 3: Eat the last orange  1 - 1  = 0.\nYou need at least 3 days to eat the 6 oranges.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 2 * 109"
  ],
  "follow_ups": [],
  "hints": [
    "In each step, choose between 2 options:\r\nminOranges = 1 + min( (n%2) + f(n/2), (n%3) + f(n/3) )\r\nwhere f(n) is the minimum number of days to eat n oranges."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minDays(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minDays(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minDays(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minDays(self, n: int) -> int:\n        ",
    "c": "int minDays(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinDays(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar minDays = function(n) {\n    \n};",
    "typescript": "function minDays(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function minDays($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minDays(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minDays(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minDays(int n) {\n    \n  }\n}",
    "golang": "func minDays(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef min_days(n)\n    \nend",
    "scala": "object Solution {\n    def minDays(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_days(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-days n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec min_days(N :: integer()) -> integer().\nmin_days(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_days(n :: integer) :: integer\n  def min_days(n) do\n    \n  end\nend"
  }
}
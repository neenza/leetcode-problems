{
  "title": "Path In Zigzag Labelled Binary Tree",
  "problem_id": "1194",
  "frontend_id": "1104",
  "difficulty": "Medium",
  "problem_slug": "path-in-zigzag-labelled-binary-tree",
  "topics": [
    "Math",
    "Tree",
    "Binary Tree"
  ],
  "description": "In an infinite binary tree where every node has two children, the nodes are labelled in row order.\nIn the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left.\nGiven the label of a node in this tree, return the labels in the path from the root of the tree to theÂ node with that label.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: label = 14\nOutput: [1,3,4,14]",
      "images": [
        "https://assets.leetcode.com/uploads/2019/06/24/tree.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: label = 26\nOutput: [1,2,6,10,26]",
      "images": [
        "https://assets.leetcode.com/uploads/2019/06/24/tree.png"
      ]
    }
  ],
  "constraints": [
    "1 <= label <= 10^6"
  ],
  "follow_ups": [],
  "hints": [
    "Based on the label of the current node, find what the label must be for the parent of that node."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> pathInZigZagTree(int label) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<Integer> pathInZigZagTree(int label) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def pathInZigZagTree(self, label):\n        \"\"\"\n        :type label: int\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def pathInZigZagTree(self, label: int) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* pathInZigZagTree(int label, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<int> PathInZigZagTree(int label) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} label\n * @return {number[]}\n */\nvar pathInZigZagTree = function(label) {\n    \n};",
    "typescript": "function pathInZigZagTree(label: number): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $label\n     * @return Integer[]\n     */\n    function pathInZigZagTree($label) {\n        \n    }\n}",
    "swift": "class Solution {\n    func pathInZigZagTree(_ label: Int) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun pathInZigZagTree(label: Int): List<Int> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> pathInZigZagTree(int label) {\n    \n  }\n}",
    "golang": "func pathInZigZagTree(label int) []int {\n    \n}",
    "ruby": "# @param {Integer} label\n# @return {Integer[]}\ndef path_in_zig_zag_tree(label)\n    \nend",
    "scala": "object Solution {\n    def pathInZigZagTree(label: Int): List[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn path_in_zig_zag_tree(label: i32) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (path-in-zig-zag-tree label)\n  (-> exact-integer? (listof exact-integer?))\n  )",
    "erlang": "-spec path_in_zig_zag_tree(Label :: integer()) -> [integer()].\npath_in_zig_zag_tree(Label) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec path_in_zig_zag_tree(label :: integer) :: [integer]\n  def path_in_zig_zag_tree(label) do\n    \n  end\nend"
  }
}
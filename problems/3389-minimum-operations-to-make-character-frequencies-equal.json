{
  "title": "Minimum Operations to Make Character Frequencies Equal",
  "problem_id": "3638",
  "frontend_id": "3389",
  "difficulty": "Hard",
  "problem_slug": "minimum-operations-to-make-character-frequencies-equal",
  "topics": [
    "Hash Table",
    "String",
    "Dynamic Programming",
    "Counting",
    "Enumeration"
  ],
  "description": "You are given a string s.\nA string t is called good if all characters of t occur the same number of times.\nYou can perform the following operations any number of times:\nNote that you cannot change 'z' to 'a' using the third operation.\nReturn the minimum number of operations required to make s good.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"acab\"\nOutput: 1\nExplanation:\nWe can make s good by deleting one occurrence of character 'a' .",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"wddw\"\nOutput: 0\nExplanation:\nWe do not need to perform any operations since s is initially good.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"aaabc\"\nOutput: 2\nExplanation:\nWe can make s good by applying these operations:",
      "images": []
    }
  ],
  "constraints": [
    "3 <= s.length <= 2Â * 104",
    "s contains only lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [
    "The order of the letters in the string is irrelevant.",
    "Compute an occurrence array <code>occ</code> where <code>occ[x]</code> is the number of occurrences of the <code>x<supth</sup></code> character of the alphabet. How do the described operations change <code>occ</code>?",
    "We have three types of operations: increase any <code>occ[x]</code> by 1, decrease any <code>occ[x]</code> by 1, or decrease any <code>occ[x]</code> by 1 and simultaneously increase <code>occ[x + 1]</code> by 1 at the same time. To make <code>s</code> good, we need to make <code>occ</code> good. <code>occ</code> is good if and only if every <code>occ[x]</code> equals either 0 or some constant <code>c</code>.",
    "If you know the value of <code>c</code>, how can you calculate the minimum operations required to make <code>occ</code> good?",
    "Observation 1: It is never optimal to apply the third type of operation (simultaneous decrease and increase) on two continuous elements <code>occ[x]</code> and <code>occ[x + 1]</code>. Instead, we can decrease <code>occ[x]</code> by 1 then increase <code>occ[x + 2]</code> by 1 to achieve the same effect.",
    "Observation 2: It is never optimal to increase an element of <code>occ</code> then decrease it, or vice versa.",
    "Use dynamic programming where <code>dp[i]</code> is the minimum number of operations required to make <code>occ[0..i]</code> good. You will need to use the above observations to come up with the transitions."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int makeStringGood(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public int makeStringGood(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def makeStringGood(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def makeStringGood(self, s: str) -> int:\n        ",
    "c": "int makeStringGood(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public int MakeStringGood(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {number}\n */\nvar makeStringGood = function(s) {\n    \n};",
    "typescript": "function makeStringGood(s: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function makeStringGood($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func makeStringGood(_ s: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun makeStringGood(s: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int makeStringGood(String s) {\n    \n  }\n}",
    "golang": "func makeStringGood(s string) int {\n    \n}",
    "ruby": "# @param {String} s\n# @return {Integer}\ndef make_string_good(s)\n    \nend",
    "scala": "object Solution {\n    def makeStringGood(s: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn make_string_good(s: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (make-string-good s)\n  (-> string? exact-integer?)\n  )",
    "erlang": "-spec make_string_good(S :: unicode:unicode_binary()) -> integer().\nmake_string_good(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec make_string_good(s :: String.t) :: integer\n  def make_string_good(s) do\n    \n  end\nend"
  }
}
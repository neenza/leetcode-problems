{
  "title": "Number of Students Doing Homework at a Given Time",
  "problem_id": "1560",
  "frontend_id": "1450",
  "difficulty": "Easy",
  "problem_slug": "number-of-students-doing-homework-at-a-given-time",
  "topics": [
    "Array"
  ],
  "description": "Given two integer arrays startTime and endTime and given an integer queryTime.\nThe ith student started doing their homework at the time startTime[i] and finished it at time endTime[i].\nReturn the number of students doing their homework at time queryTime. More formally, return the number of students where queryTime lays in the interval [startTime[i], endTime[i]] inclusive.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: startTime = [1,2,3], endTime = [3,2,7], queryTime = 4\nOutput: 1\nExplanation: We have 3 students where:\nThe first student started doing homework at time 1 and finished at time 3 and wasn't doing anything at time 4.\nThe second student started doing homework at time 2 and finished at time 2 and also wasn't doing anything at time 4.\nThe third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: startTime = [4], endTime = [4], queryTime = 4\nOutput: 1\nExplanation: The only student was doing their homework at the queryTime.",
      "images": []
    }
  ],
  "constraints": [
    "startTime.length == endTime.length",
    "1 <= startTime.length <= 100",
    "1 <= startTime[i] <= endTime[i] <= 1000",
    "1 <= queryTime <= 1000"
  ],
  "follow_ups": [],
  "hints": [
    "Imagine that startTime[i] and endTime[i] form an interval (i.e. [startTime[i], endTime[i]]).",
    "The answer is how many times the queryTime laid in those mentioned intervals."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int busyStudent(vector<int>& startTime, vector<int>& endTime, int queryTime) {\n        \n    }\n};",
    "java": "class Solution {\n    public int busyStudent(int[] startTime, int[] endTime, int queryTime) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def busyStudent(self, startTime, endTime, queryTime):\n        \"\"\"\n        :type startTime: List[int]\n        :type endTime: List[int]\n        :type queryTime: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) -> int:\n        ",
    "c": "int busyStudent(int* startTime, int startTimeSize, int* endTime, int endTimeSize, int queryTime) {\n    \n}",
    "csharp": "public class Solution {\n    public int BusyStudent(int[] startTime, int[] endTime, int queryTime) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} startTime\n * @param {number[]} endTime\n * @param {number} queryTime\n * @return {number}\n */\nvar busyStudent = function(startTime, endTime, queryTime) {\n    \n};",
    "typescript": "function busyStudent(startTime: number[], endTime: number[], queryTime: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $startTime\n     * @param Integer[] $endTime\n     * @param Integer $queryTime\n     * @return Integer\n     */\n    function busyStudent($startTime, $endTime, $queryTime) {\n        \n    }\n}",
    "swift": "class Solution {\n    func busyStudent(_ startTime: [Int], _ endTime: [Int], _ queryTime: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun busyStudent(startTime: IntArray, endTime: IntArray, queryTime: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int busyStudent(List<int> startTime, List<int> endTime, int queryTime) {\n    \n  }\n}",
    "golang": "func busyStudent(startTime []int, endTime []int, queryTime int) int {\n    \n}",
    "ruby": "# @param {Integer[]} start_time\n# @param {Integer[]} end_time\n# @param {Integer} query_time\n# @return {Integer}\ndef busy_student(start_time, end_time, query_time)\n    \nend",
    "scala": "object Solution {\n    def busyStudent(startTime: Array[Int], endTime: Array[Int], queryTime: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn busy_student(start_time: Vec<i32>, end_time: Vec<i32>, query_time: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (busy-student startTime endTime queryTime)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec busy_student(StartTime :: [integer()], EndTime :: [integer()], QueryTime :: integer()) -> integer().\nbusy_student(StartTime, EndTime, QueryTime) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec busy_student(start_time :: [integer], end_time :: [integer], query_time :: integer) :: integer\n  def busy_student(start_time, end_time, query_time) do\n    \n  end\nend"
  }
}
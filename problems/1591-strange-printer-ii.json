{
  "title": "Strange Printer II",
  "problem_id": "1696",
  "frontend_id": "1591",
  "difficulty": "Hard",
  "problem_slug": "strange-printer-ii",
  "topics": [
    "Array",
    "Graph",
    "Topological Sort",
    "Matrix"
  ],
  "description": "There is a strange printer with the following two special requirements:\nYou are given a m x n matrix targetGrid, where targetGrid[row][col] is the color in the position (row, col) of the grid.\nReturn true if it is possible to print the matrix targetGrid, otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]\nOutput: true",
      "images": [
        "https://assets.leetcode.com/uploads/2021/12/23/print1.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]\nOutput: true",
      "images": [
        "https://assets.leetcode.com/uploads/2021/12/23/print2.jpg"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: targetGrid = [[1,2,1],[2,1,2],[1,2,1]]\nOutput: false\nExplanation: It is impossible to form targetGrid because it is not allowed to print the same color in different turns.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/12/23/print2.jpg"
      ]
    }
  ],
  "constraints": [
    "m == targetGrid.length",
    "n == targetGrid[i].length",
    "1 <= m, n <= 60",
    "1 <= targetGrid[row][col] <= 60"
  ],
  "follow_ups": [],
  "hints": [
    "Try thinking in reverse. Given the grid, how can you tell if a colour was painted last?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool isPrintable(vector<vector<int>>& targetGrid) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean isPrintable(int[][] targetGrid) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def isPrintable(self, targetGrid):\n        \"\"\"\n        :type targetGrid: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def isPrintable(self, targetGrid: List[List[int]]) -> bool:\n        ",
    "c": "bool isPrintable(int** targetGrid, int targetGridSize, int* targetGridColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public bool IsPrintable(int[][] targetGrid) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} targetGrid\n * @return {boolean}\n */\nvar isPrintable = function(targetGrid) {\n    \n};",
    "typescript": "function isPrintable(targetGrid: number[][]): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $targetGrid\n     * @return Boolean\n     */\n    function isPrintable($targetGrid) {\n        \n    }\n}",
    "swift": "class Solution {\n    func isPrintable(_ targetGrid: [[Int]]) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun isPrintable(targetGrid: Array<IntArray>): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool isPrintable(List<List<int>> targetGrid) {\n    \n  }\n}",
    "golang": "func isPrintable(targetGrid [][]int) bool {\n    \n}",
    "ruby": "# @param {Integer[][]} target_grid\n# @return {Boolean}\ndef is_printable(target_grid)\n    \nend",
    "scala": "object Solution {\n    def isPrintable(targetGrid: Array[Array[Int]]): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn is_printable(target_grid: Vec<Vec<i32>>) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (is-printable targetGrid)\n  (-> (listof (listof exact-integer?)) boolean?)\n  )",
    "erlang": "-spec is_printable(TargetGrid :: [[integer()]]) -> boolean().\nis_printable(TargetGrid) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec is_printable(target_grid :: [[integer]]) :: boolean\n  def is_printable(target_grid) do\n    \n  end\nend"
  }
}
{
  "title": "Minimum Time to Finish the Race",
  "problem_id": "2295",
  "frontend_id": "2188",
  "difficulty": "Hard",
  "problem_slug": "minimum-time-to-finish-the-race",
  "topics": [
    "Array",
    "Dynamic Programming"
  ],
  "description": "You are given a 0-indexed 2D integer array tires where tires[i] = [fi, ri] indicates that the ith tire can finish its xth successive lap in fi * ri(x-1) seconds.\nYou are also given an integer changeTime and an integer numLaps.\nThe race consists of numLaps laps and you may start the race with any tire. You have an unlimited supply of each tire and after every lap, you may change to any given tire (including the current tire type) if you wait changeTime seconds.\nReturn the minimum time to finish the race.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: tires = [[2,3],[3,4]], changeTime = 5, numLaps = 4\nOutput: 21\nExplanation: \nLap 1: Start with tire 0 and finish the lap in 2 seconds.\nLap 2: Continue with tire 0 and finish the lap in 2 * 3 = 6 seconds.\nLap 3: Change tires to a new tire 0 for 5 seconds and then finish the lap in another 2 seconds.\nLap 4: Continue with tire 0 and finish the lap in 2 * 3 = 6 seconds.\nTotal time = 2 + 6 + 5 + 2 + 6 = 21 seconds.\nThe minimum time to complete the race is 21 seconds.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: tires = [[1,10],[2,2],[3,4]], changeTime = 6, numLaps = 5\nOutput: 25\nExplanation: \nLap 1: Start with tire 1 and finish the lap in 2 seconds.\nLap 2: Continue with tire 1 and finish the lap in 2 * 2 = 4 seconds.\nLap 3: Change tires to a new tire 1 for 6 seconds and then finish the lap in another 2 seconds.\nLap 4: Continue with tire 1 and finish the lap in 2 * 2 = 4 seconds.\nLap 5: Change tires to tire 0 for 6 seconds then finish the lap in another 1 second.\nTotal time = 2 + 4 + 6 + 2 + 4 + 6 + 1 = 25 seconds.\nThe minimum time to complete the race is 25 seconds.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= tires.length <= 105",
    "tires[i].length == 2",
    "1 <= fi, changeTime <= 105",
    "2 <= ri <= 105",
    "1 <= numLaps <= 1000"
  ],
  "follow_ups": [],
  "hints": [
    "What is the maximum number of times we would want to go around the track without changing tires?",
    "Can we precompute the minimum time to go around the track x times without changing tires?",
    "Can we use dynamic programming to solve this efficiently using the precomputed values?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimumFinishTime(vector<vector<int>>& tires, int changeTime, int numLaps) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimumFinishTime(int[][] tires, int changeTime, int numLaps) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumFinishTime(self, tires, changeTime, numLaps):\n        \"\"\"\n        :type tires: List[List[int]]\n        :type changeTime: int\n        :type numLaps: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumFinishTime(self, tires: List[List[int]], changeTime: int, numLaps: int) -> int:\n        ",
    "c": "int minimumFinishTime(int** tires, int tiresSize, int* tiresColSize, int changeTime, int numLaps) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimumFinishTime(int[][] tires, int changeTime, int numLaps) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} tires\n * @param {number} changeTime\n * @param {number} numLaps\n * @return {number}\n */\nvar minimumFinishTime = function(tires, changeTime, numLaps) {\n    \n};",
    "typescript": "function minimumFinishTime(tires: number[][], changeTime: number, numLaps: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $tires\n     * @param Integer $changeTime\n     * @param Integer $numLaps\n     * @return Integer\n     */\n    function minimumFinishTime($tires, $changeTime, $numLaps) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumFinishTime(_ tires: [[Int]], _ changeTime: Int, _ numLaps: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumFinishTime(tires: Array<IntArray>, changeTime: Int, numLaps: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumFinishTime(List<List<int>> tires, int changeTime, int numLaps) {\n    \n  }\n}",
    "golang": "func minimumFinishTime(tires [][]int, changeTime int, numLaps int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} tires\n# @param {Integer} change_time\n# @param {Integer} num_laps\n# @return {Integer}\ndef minimum_finish_time(tires, change_time, num_laps)\n    \nend",
    "scala": "object Solution {\n    def minimumFinishTime(tires: Array[Array[Int]], changeTime: Int, numLaps: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_finish_time(tires: Vec<Vec<i32>>, change_time: i32, num_laps: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-finish-time tires changeTime numLaps)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec minimum_finish_time(Tires :: [[integer()]], ChangeTime :: integer(), NumLaps :: integer()) -> integer().\nminimum_finish_time(Tires, ChangeTime, NumLaps) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_finish_time(tires :: [[integer]], change_time :: integer, num_laps :: integer) :: integer\n  def minimum_finish_time(tires, change_time, num_laps) do\n    \n  end\nend"
  }
}
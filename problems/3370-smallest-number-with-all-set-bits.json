{
  "title": "Smallest Number With All Set Bits",
  "problem_id": "3676",
  "frontend_id": "3370",
  "difficulty": "Easy",
  "problem_slug": "smallest-number-with-all-set-bits",
  "topics": [
    "Math",
    "Bit Manipulation"
  ],
  "description": "You are given a positive number n.\nReturn the smallest number x greater than or equal to n, such that the binary representation of x contains only set bits\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 5\nOutput: 7\nExplanation:\nThe binary representation of 7 is \"111\" .",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 10\nOutput: 15\nExplanation:\nThe binary representation of 15 is \"1111\" .",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 3\nOutput: 3\nExplanation:\nThe binary representation of 3 is \"11\" .",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 1000"
  ],
  "follow_ups": [],
  "hints": [
    "Find the strictly greater power of 2, and subtract 1 from it."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int smallestNumber(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int smallestNumber(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def smallestNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def smallestNumber(self, n: int) -> int:\n        ",
    "c": "int smallestNumber(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int SmallestNumber(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar smallestNumber = function(n) {\n    \n};",
    "typescript": "function smallestNumber(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function smallestNumber($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func smallestNumber(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun smallestNumber(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int smallestNumber(int n) {\n    \n  }\n}",
    "golang": "func smallestNumber(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef smallest_number(n)\n    \nend",
    "scala": "object Solution {\n    def smallestNumber(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn smallest_number(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (smallest-number n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec smallest_number(N :: integer()) -> integer().\nsmallest_number(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec smallest_number(n :: integer) :: integer\n  def smallest_number(n) do\n    \n  end\nend"
  }
}
{
  "title": "Cheapest Flights Within K Stops",
  "problem_id": "803",
  "frontend_id": "787",
  "difficulty": "Medium",
  "problem_slug": "cheapest-flights-within-k-stops",
  "topics": [
    "Dynamic Programming",
    "Depth-First Search",
    "Breadth-First Search",
    "Graph",
    "Heap (Priority Queue)",
    "Shortest Path"
  ],
  "description": "There are n cities connected by some number of flights. You are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a flight from city fromi to city toi with cost pricei.\nYou are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. If there is no such route, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1\nOutput: 700\nExplanation:\nThe graph is shown above.\nThe optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700.\nNote that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops.",
      "images": [
        "https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-3drawio.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1\nOutput: 200\nExplanation:\nThe graph is shown above.\nThe optimal path with at most 1 stop from city 0 to 2 is marked in red and has cost 100 + 100 = 200.",
      "images": [
        "https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-1drawio.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0\nOutput: 500\nExplanation:\nThe graph is shown above.\nThe optimal path with no stops from city 0 to 2 is marked in red and has cost 500.",
      "images": [
        "https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-2drawio.png"
      ]
    }
  ],
  "constraints": [
    "1 <= n <= 100",
    "0 <= flights.length <= (n * (n - 1) / 2)",
    "flights[i].length == 3",
    "0 <= fromi, toi < n",
    "fromi != toi",
    "1 <= pricei <= 104",
    "There will not be any multiple flights between two cities.",
    "0 <= src, dst, k < n",
    "src != dst"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findCheapestPrice(self, n, flights, src, dst, k):\n        \"\"\"\n        :type n: int\n        :type flights: List[List[int]]\n        :type src: int\n        :type dst: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, k: int) -> int:\n        ",
    "c": "int findCheapestPrice(int n, int** flights, int flightsSize, int* flightsColSize, int src, int dst, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int FindCheapestPrice(int n, int[][] flights, int src, int dst, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number[][]} flights\n * @param {number} src\n * @param {number} dst\n * @param {number} k\n * @return {number}\n */\nvar findCheapestPrice = function(n, flights, src, dst, k) {\n    \n};",
    "typescript": "function findCheapestPrice(n: number, flights: number[][], src: number, dst: number, k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $flights\n     * @param Integer $src\n     * @param Integer $dst\n     * @param Integer $k\n     * @return Integer\n     */\n    function findCheapestPrice($n, $flights, $src, $dst, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findCheapestPrice(_ n: Int, _ flights: [[Int]], _ src: Int, _ dst: Int, _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findCheapestPrice(n: Int, flights: Array<IntArray>, src: Int, dst: Int, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int findCheapestPrice(int n, List<List<int>> flights, int src, int dst, int k) {\n    \n  }\n}",
    "golang": "func findCheapestPrice(n int, flights [][]int, src int, dst int, k int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer[][]} flights\n# @param {Integer} src\n# @param {Integer} dst\n# @param {Integer} k\n# @return {Integer}\ndef find_cheapest_price(n, flights, src, dst, k)\n    \nend",
    "scala": "object Solution {\n    def findCheapestPrice(n: Int, flights: Array[Array[Int]], src: Int, dst: Int, k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_cheapest_price(n: i32, flights: Vec<Vec<i32>>, src: i32, dst: i32, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (find-cheapest-price n flights src dst k)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer? exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec find_cheapest_price(N :: integer(), Flights :: [[integer()]], Src :: integer(), Dst :: integer(), K :: integer()) -> integer().\nfind_cheapest_price(N, Flights, Src, Dst, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_cheapest_price(n :: integer, flights :: [[integer]], src :: integer, dst :: integer, k :: integer) :: integer\n  def find_cheapest_price(n, flights, src, dst, k) do\n    \n  end\nend"
  }
}
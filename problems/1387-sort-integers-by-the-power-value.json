{
  "title": "Sort Integers by The Power Value",
  "problem_id": "1488",
  "frontend_id": "1387",
  "difficulty": "Medium",
  "problem_slug": "sort-integers-by-the-power-value",
  "topics": [
    "Dynamic Programming",
    "Memoization",
    "Sorting"
  ],
  "description": "The power of an integer x is defined as the number of steps needed to transform x into 1 using the following steps:\nFor example, the power of x = 3 is 7 because 3 needs 7 steps to become 1 (3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1).\nGiven three integers lo, hi and k. The task is to sort all integers in the interval [lo, hi] by the power value in ascending order, if two or more integers have the same power value sort them by ascending order.\nReturn the kth integer in the range [lo, hi] sorted by the power value.\nNotice that for any integer x (lo <= x <= hi) it is guaranteed that x will transform into 1 using these steps and that the power of x is will fit in a 32-bit signed integer.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: lo = 12, hi = 15, k = 2\nOutput: 13\nExplanation: The power of 12 is 9 (12 --> 6 --> 3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1)\nThe power of 13 is 9\nThe power of 14 is 17\nThe power of 15 is 17\nThe interval sorted by the power value [12,13,14,15]. For k = 2 answer is the second element which is 13.\nNotice that 12 and 13 have the same power value and we sorted them in ascending order. Same for 14 and 15.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: lo = 7, hi = 11, k = 4\nOutput: 7\nExplanation: The power array corresponding to the interval [7, 8, 9, 10, 11] is [16, 3, 19, 6, 14].\nThe interval sorted by power is [8, 10, 11, 7, 9].\nThe fourth number in the sorted array is 7.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= lo <= hi <= 1000",
    "1 <= k <= hi - lo + 1"
  ],
  "follow_ups": [],
  "hints": [
    "Use dynamic programming to get the power of each integer of the intervals.",
    "Sort all the integers of the interval by the power value and return the k-th in the sorted list."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int getKth(int lo, int hi, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int getKth(int lo, int hi, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def getKth(self, lo, hi, k):\n        \"\"\"\n        :type lo: int\n        :type hi: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def getKth(self, lo: int, hi: int, k: int) -> int:\n        ",
    "c": "int getKth(int lo, int hi, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int GetKth(int lo, int hi, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} lo\n * @param {number} hi\n * @param {number} k\n * @return {number}\n */\nvar getKth = function(lo, hi, k) {\n    \n};",
    "typescript": "function getKth(lo: number, hi: number, k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $lo\n     * @param Integer $hi\n     * @param Integer $k\n     * @return Integer\n     */\n    function getKth($lo, $hi, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func getKth(_ lo: Int, _ hi: Int, _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun getKth(lo: Int, hi: Int, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int getKth(int lo, int hi, int k) {\n    \n  }\n}",
    "golang": "func getKth(lo int, hi int, k int) int {\n    \n}",
    "ruby": "# @param {Integer} lo\n# @param {Integer} hi\n# @param {Integer} k\n# @return {Integer}\ndef get_kth(lo, hi, k)\n    \nend",
    "scala": "object Solution {\n    def getKth(lo: Int, hi: Int, k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn get_kth(lo: i32, hi: i32, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (get-kth lo hi k)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec get_kth(Lo :: integer(), Hi :: integer(), K :: integer()) -> integer().\nget_kth(Lo, Hi, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec get_kth(lo :: integer, hi :: integer, k :: integer) :: integer\n  def get_kth(lo, hi, k) do\n    \n  end\nend"
  }
}
{
  "title": "Grid Illumination",
  "problem_id": "1043",
  "frontend_id": "1001",
  "difficulty": "Hard",
  "problem_slug": "grid-illumination",
  "topics": [
    "Array",
    "Hash Table"
  ],
  "description": "There is a 2D grid of size n x n where each cell of this grid has a lamp that is initially turned off.\nYou are given a 2D array of lamp positions lamps, where lamps[i] = [rowi, coli] indicates that the lamp at grid[rowi][coli] is turned on. Even if the same lamp is listed more than once, it is turned on.\nWhen a lamp is turned on, it illuminates its cell and all other cells in the same row, column, or diagonal.\nYou are also given another 2D array queries, where queries[j] = [rowj, colj]. For the jth query, determine whether grid[rowj][colj] is illuminated or not. After answering the jth query, turn off the lamp at grid[rowj][colj] and its 8 adjacent lamps if they exist. A lamp is adjacent if its cell shares either a side or corner with grid[rowj][colj].\nReturn an array of integers ans, where ans[j] should be 1 if the cell in the jth query was illuminated, or 0 if the lamp was not.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]\nOutput: [1,0]\nExplanation: We have the initial grid with all lamps turned off. In the above picture we see the grid after turning on the lamp at grid[0][0] then turning on the lamp at grid[4][4].\nThe 0th query asks if the lamp at grid[1][1] is illuminated or not (the blue square). It is illuminated, so set ans[0] = 1. Then, we turn off all lamps in the red square.\n\nThe 1st query asks if the lamp at grid[1][0] is illuminated or not (the blue square). It is not illuminated, so set ans[1] = 0. Then, we turn off all lamps in the red rectangle.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/08/19/illu_1.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,1]]\nOutput: [1,1]",
      "images": [
        "https://assets.leetcode.com/uploads/2020/08/19/illu_step2.jpg"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 5, lamps = [[0,0],[0,4]], queries = [[0,4],[0,1],[1,4]]\nOutput: [1,1,0]",
      "images": [
        "https://assets.leetcode.com/uploads/2020/08/19/illu_step2.jpg"
      ]
    }
  ],
  "constraints": [
    "1 <= n <= 109",
    "0 <= lamps.length <= 20000",
    "0 <= queries.length <= 20000",
    "lamps[i].length == 2",
    "0 <= rowi, coli < n",
    "queries[j].length == 2",
    "0 <= rowj, colj < n"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> gridIllumination(int n, vector<vector<int>>& lamps, vector<vector<int>>& queries) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] gridIllumination(int n, int[][] lamps, int[][] queries) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def gridIllumination(self, n, lamps, queries):\n        \"\"\"\n        :type n: int\n        :type lamps: List[List[int]]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def gridIllumination(self, n: int, lamps: List[List[int]], queries: List[List[int]]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* gridIllumination(int n, int** lamps, int lampsSize, int* lampsColSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] GridIllumination(int n, int[][] lamps, int[][] queries) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number[][]} lamps\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar gridIllumination = function(n, lamps, queries) {\n    \n};",
    "typescript": "function gridIllumination(n: number, lamps: number[][], queries: number[][]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $lamps\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function gridIllumination($n, $lamps, $queries) {\n        \n    }\n}",
    "swift": "class Solution {\n    func gridIllumination(_ n: Int, _ lamps: [[Int]], _ queries: [[Int]]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun gridIllumination(n: Int, lamps: Array<IntArray>, queries: Array<IntArray>): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> gridIllumination(int n, List<List<int>> lamps, List<List<int>> queries) {\n    \n  }\n}",
    "golang": "func gridIllumination(n int, lamps [][]int, queries [][]int) []int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer[][]} lamps\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef grid_illumination(n, lamps, queries)\n    \nend",
    "scala": "object Solution {\n    def gridIllumination(n: Int, lamps: Array[Array[Int]], queries: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn grid_illumination(n: i32, lamps: Vec<Vec<i32>>, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (grid-illumination n lamps queries)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof (listof exact-integer?)) (listof exact-integer?))\n  )",
    "erlang": "-spec grid_illumination(N :: integer(), Lamps :: [[integer()]], Queries :: [[integer()]]) -> [integer()].\ngrid_illumination(N, Lamps, Queries) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec grid_illumination(n :: integer, lamps :: [[integer]], queries :: [[integer]]) :: [integer]\n  def grid_illumination(n, lamps, queries) do\n    \n  end\nend"
  }
}
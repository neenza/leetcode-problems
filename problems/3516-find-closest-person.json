{
  "title": "Find Closest Person",
  "problem_id": "3830",
  "frontend_id": "3516",
  "difficulty": "Easy",
  "problem_slug": "find-closest-person",
  "topics": [
    "Math"
  ],
  "description": "You are given three integers x, y, and z, representing the positions of three people on a number line:\nBoth Person 1 and Person 2 move toward Person 3 at the same speed.\nDetermine which person reaches Person 3 first:\nReturn the result accordingly.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: x = 2, y = 7, z = 4\nOutput: 1\nExplanation:\nSince Person 1 reaches Person 3 first, the output is 1.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: x = 2, y = 5, z = 6\nOutput: 2\nExplanation:\nSince Person 2 reaches Person 3 first, the output is 2.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: x = 1, y = 5, z = 3\nOutput: 0\nExplanation:\nSince both Person 1 and Person 2 reach Person 3 at the same time, the output is 0.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= x, y, z <= 100"
  ],
  "follow_ups": [],
  "hints": [
    "Compare the distances from Persons 1 and 2 to Person 3 to determine the answer."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int findClosest(int x, int y, int z) {\n        \n    }\n};",
    "java": "class Solution {\n    public int findClosest(int x, int y, int z) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findClosest(self, x, y, z):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type z: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findClosest(self, x: int, y: int, z: int) -> int:\n        ",
    "c": "int findClosest(int x, int y, int z) {\n    \n}",
    "csharp": "public class Solution {\n    public int FindClosest(int x, int y, int z) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} x\n * @param {number} y\n * @param {number} z\n * @return {number}\n */\nvar findClosest = function(x, y, z) {\n    \n};",
    "typescript": "function findClosest(x: number, y: number, z: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @param Integer $y\n     * @param Integer $z\n     * @return Integer\n     */\n    function findClosest($x, $y, $z) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findClosest(_ x: Int, _ y: Int, _ z: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findClosest(x: Int, y: Int, z: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int findClosest(int x, int y, int z) {\n    \n  }\n}",
    "golang": "func findClosest(x int, y int, z int) int {\n    \n}",
    "ruby": "# @param {Integer} x\n# @param {Integer} y\n# @param {Integer} z\n# @return {Integer}\ndef find_closest(x, y, z)\n    \nend",
    "scala": "object Solution {\n    def findClosest(x: Int, y: Int, z: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_closest(x: i32, y: i32, z: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (find-closest x y z)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec find_closest(X :: integer(), Y :: integer(), Z :: integer()) -> integer().\nfind_closest(X, Y, Z) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_closest(x :: integer, y :: integer, z :: integer) :: integer\n  def find_closest(x, y, z) do\n    \n  end\nend"
  }
}
{
  "title": "Semi-Ordered Permutation",
  "problem_id": "2785",
  "frontend_id": "2717",
  "difficulty": "Easy",
  "problem_slug": "semi-ordered-permutation",
  "topics": [
    "Array",
    "Simulation"
  ],
  "description": "You are given a 0-indexed permutation of n integers nums.\nA permutation is called semi-ordered if the first number equals 1 and the last number equals n. You can perform the below operation as many times as you want until you make nums a semi-ordered permutation:\nReturn the minimum number of operations to make nums a semi-ordered permutation.\nA permutation is a sequence of integers from 1 to n of length n containing each number exactly once.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [2,1,4,3]\nOutput: 2\nExplanation: We can make the permutation semi-ordered using these sequence of operations: \n1 - swap i = 0 and j = 1. The permutation becomes [1,2,4,3].\n2 - swap i = 2 and j = 3. The permutation becomes [1,2,3,4].\nIt can be proved that there is no sequence of less than two operations that make nums a semi-ordered permutation.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [2,4,1,3]\nOutput: 3\nExplanation: We can make the permutation semi-ordered using these sequence of operations:\n1 - swap i = 1 and j = 2. The permutation becomes [2,1,4,3].\n2 - swap i = 0 and j = 1. The permutation becomes [1,2,4,3].\n3 - swap i = 2 and j = 3. The permutation becomes [1,2,3,4].\nIt can be proved that there is no sequence of less than three operations that make nums a semi-ordered permutation.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,3,4,2,5]\nOutput: 0\nExplanation: The permutation is already a semi-ordered permutation.",
      "images": []
    }
  ],
  "constraints": [
    "2 <= nums.length == n <= 50",
    "1 <= nums[i]Â <= 50",
    "nums is a permutation."
  ],
  "follow_ups": [],
  "hints": [
    "Find the index of elements 1 and n.",
    "Let x be the position of 1 and y be the position of n. the answer is x + (n-y-1) if x < y and x + (n-y-1) - 1 if x > y."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int semiOrderedPermutation(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int semiOrderedPermutation(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def semiOrderedPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def semiOrderedPermutation(self, nums: List[int]) -> int:\n        ",
    "c": "int semiOrderedPermutation(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int SemiOrderedPermutation(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar semiOrderedPermutation = function(nums) {\n    \n};",
    "typescript": "function semiOrderedPermutation(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function semiOrderedPermutation($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func semiOrderedPermutation(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun semiOrderedPermutation(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int semiOrderedPermutation(List<int> nums) {\n    \n  }\n}",
    "golang": "func semiOrderedPermutation(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef semi_ordered_permutation(nums)\n    \nend",
    "scala": "object Solution {\n    def semiOrderedPermutation(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn semi_ordered_permutation(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (semi-ordered-permutation nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec semi_ordered_permutation(Nums :: [integer()]) -> integer().\nsemi_ordered_permutation(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec semi_ordered_permutation(nums :: [integer]) :: integer\n  def semi_ordered_permutation(nums) do\n    \n  end\nend"
  }
}
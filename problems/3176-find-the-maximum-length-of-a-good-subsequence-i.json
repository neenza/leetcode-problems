{
  "title": "Find the Maximum Length of a Good Subsequence I",
  "problem_id": "3456",
  "frontend_id": "3176",
  "difficulty": "Medium",
  "problem_slug": "find-the-maximum-length-of-a-good-subsequence-i",
  "topics": [
    "Array",
    "Hash Table",
    "Dynamic Programming"
  ],
  "description": "You are given an integer array nums and a non-negative integer k. A sequence of integers seq is called good if there are at most k indices i in the range [0, seq.length - 2] such that seq[i] != seq[i + 1].\nReturn the maximum possible length of a good subsequence of nums.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,1,1,3], k = 2\nOutput: 4\nExplanation:\nThe maximum length subsequence is [ 1 , 2 , 1 , 1 ,3] .",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,2,3,4,5,1], k = 0\nOutput: 2\nExplanation:\nThe maximum length subsequence is [ 1 ,2,3,4,5, 1 ] .",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 500",
    "1 <= nums[i] <= 109",
    "0 <= k <= min(nums.length, 25)"
  ],
  "follow_ups": [],
  "hints": [
    "The absolute values in <code>nums</code> donâ€™t really matter. So we can remap the set of values to the range <code>[0, n - 1]</code>.",
    "Let <code>dp[i][j]</code> be the length of the longest subsequence till index <code>j</code> with at most <code>i</code> positions such that <code>seq[i] != seq[i + 1]</code>.",
    "For each value <code>x</code> from left to right, update <code>dp[i][x] = max(dp[i][x] + 1, dp[i - 1][y] + 1)</code>, where <code>y != x</code>."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maximumLength(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maximumLength(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maximumLength(self, nums: List[int], k: int) -> int:\n        ",
    "c": "int maximumLength(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaximumLength(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maximumLength = function(nums, k) {\n    \n};",
    "typescript": "function maximumLength(nums: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumLength($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maximumLength(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maximumLength(nums: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maximumLength(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func maximumLength(nums []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef maximum_length(nums, k)\n    \nend",
    "scala": "object Solution {\n    def maximumLength(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn maximum_length(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (maximum-length nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec maximum_length(Nums :: [integer()], K :: integer()) -> integer().\nmaximum_length(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec maximum_length(nums :: [integer], k :: integer) :: integer\n  def maximum_length(nums, k) do\n    \n  end\nend"
  }
}
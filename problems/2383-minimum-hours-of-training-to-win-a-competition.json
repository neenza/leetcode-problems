{
  "title": "Minimum Hours of Training to Win a Competition",
  "problem_id": "2459",
  "frontend_id": "2383",
  "difficulty": "Easy",
  "problem_slug": "minimum-hours-of-training-to-win-a-competition",
  "topics": [
    "Array",
    "Greedy"
  ],
  "description": "You are entering a competition, and are given two positive integers initialEnergy and initialExperience denoting your initial energy and initial experience respectively.\nYou are also given two 0-indexed integer arrays energy and experience, both of length n.\nYou will face n opponents in order. The energy and experience of the ith opponent is denoted by energy[i] and experience[i] respectively. When you face an opponent, you need to have both strictly greater experience and energy to defeat them and move to the next opponent if available.\nDefeating the ith opponent increases your experience by experience[i], but decreases your energy by energy[i].\nBefore starting the competition, you can train for some number of hours. After each hour of training, you can either choose to increase your initial experience by one, or increase your initial energy by one.\nReturn the minimum number of training hours required to defeat all n opponents.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: initialEnergy = 5, initialExperience = 3, energy = [1,4,3,2], experience = [2,6,3,1]\nOutput: 8\nExplanation: You can increase your energy to 11 after 6 hours of training, and your experience to 5 after 2 hours of training.\nYou face the opponents in the following order:\n- You have more energy and experience than the 0th opponent so you win.\n  Your energy becomes 11 - 1 = 10, and your experience becomes 5 + 2 = 7.\n- You have more energy and experience than the 1st opponent so you win.\n  Your energy becomes 10 - 4 = 6, and your experience becomes 7 + 6 = 13.\n- You have more energy and experience than the 2nd opponent so you win.\n  Your energy becomes 6 - 3 = 3, and your experience becomes 13 + 3 = 16.\n- You have more energy and experience than the 3rd opponent so you win.\n  Your energy becomes 3 - 2 = 1, and your experience becomes 16 + 1 = 17.\nYou did a total of 6 + 2 = 8 hours of training before the competition, so we return 8.\nIt can be proven that no smaller answer exists.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: initialEnergy = 2, initialExperience = 4, energy = [1], experience = [3]\nOutput: 0\nExplanation: You do not need any additional energy or experience to win the competition, so we return 0.",
      "images": []
    }
  ],
  "constraints": [
    "n == energy.length == experience.length",
    "1 <= n <= 100",
    "1 <= initialEnergy, initialExperience, energy[i], experience[i] <= 100"
  ],
  "follow_ups": [],
  "hints": [
    "Find the minimum number of training hours needed for the energy and experience separately, and sum the results.",
    "Try to increase the energy and experience until you find how much is enough to win the competition."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minNumberOfHours(int initialEnergy, int initialExperience, vector<int>& energy, vector<int>& experience) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minNumberOfHours(int initialEnergy, int initialExperience, int[] energy, int[] experience) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minNumberOfHours(self, initialEnergy, initialExperience, energy, experience):\n        \"\"\"\n        :type initialEnergy: int\n        :type initialExperience: int\n        :type energy: List[int]\n        :type experience: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minNumberOfHours(self, initialEnergy: int, initialExperience: int, energy: List[int], experience: List[int]) -> int:\n        ",
    "c": "int minNumberOfHours(int initialEnergy, int initialExperience, int* energy, int energySize, int* experience, int experienceSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinNumberOfHours(int initialEnergy, int initialExperience, int[] energy, int[] experience) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} initialEnergy\n * @param {number} initialExperience\n * @param {number[]} energy\n * @param {number[]} experience\n * @return {number}\n */\nvar minNumberOfHours = function(initialEnergy, initialExperience, energy, experience) {\n    \n};",
    "typescript": "function minNumberOfHours(initialEnergy: number, initialExperience: number, energy: number[], experience: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $initialEnergy\n     * @param Integer $initialExperience\n     * @param Integer[] $energy\n     * @param Integer[] $experience\n     * @return Integer\n     */\n    function minNumberOfHours($initialEnergy, $initialExperience, $energy, $experience) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minNumberOfHours(_ initialEnergy: Int, _ initialExperience: Int, _ energy: [Int], _ experience: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minNumberOfHours(initialEnergy: Int, initialExperience: Int, energy: IntArray, experience: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minNumberOfHours(int initialEnergy, int initialExperience, List<int> energy, List<int> experience) {\n    \n  }\n}",
    "golang": "func minNumberOfHours(initialEnergy int, initialExperience int, energy []int, experience []int) int {\n    \n}",
    "ruby": "# @param {Integer} initial_energy\n# @param {Integer} initial_experience\n# @param {Integer[]} energy\n# @param {Integer[]} experience\n# @return {Integer}\ndef min_number_of_hours(initial_energy, initial_experience, energy, experience)\n    \nend",
    "scala": "object Solution {\n    def minNumberOfHours(initialEnergy: Int, initialExperience: Int, energy: Array[Int], experience: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_number_of_hours(initial_energy: i32, initial_experience: i32, energy: Vec<i32>, experience: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-number-of-hours initialEnergy initialExperience energy experience)\n  (-> exact-integer? exact-integer? (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec min_number_of_hours(InitialEnergy :: integer(), InitialExperience :: integer(), Energy :: [integer()], Experience :: [integer()]) -> integer().\nmin_number_of_hours(InitialEnergy, InitialExperience, Energy, Experience) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_number_of_hours(initial_energy :: integer, initial_experience :: integer, energy :: [integer], experience :: [integer]) :: integer\n  def min_number_of_hours(initial_energy, initial_experience, energy, experience) do\n    \n  end\nend"
  }
}
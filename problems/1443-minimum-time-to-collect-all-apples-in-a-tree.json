{
  "title": "Minimum Time to Collect All Apples in a Tree",
  "problem_id": "1554",
  "frontend_id": "1443",
  "difficulty": "Medium",
  "problem_slug": "minimum-time-to-collect-all-apples-in-a-tree",
  "topics": [
    "Hash Table",
    "Tree",
    "Depth-First Search",
    "Breadth-First Search"
  ],
  "description": "Given an undirected tree consisting of n vertices numbered from 0 to n-1, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex.\nThe edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi. Additionally, there is a boolean array hasApple, where hasApple[i] = true means that vertex i has an apple; otherwise, it does not have any apple.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false]\nOutput: 8 \nExplanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/04/23/min_time_collect_apple_1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,false,true,false]\nOutput: 6\nExplanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/04/23/min_time_collect_apple_2.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,false,false,false,false,false]\nOutput: 0",
      "images": [
        "https://assets.leetcode.com/uploads/2020/04/23/min_time_collect_apple_2.png"
      ]
    }
  ],
  "constraints": [
    "1 <= n <= 105",
    "edges.length == n - 1",
    "edges[i].length == 2",
    "0 <= ai < bi <= n - 1",
    "hasApple.length == n"
  ],
  "follow_ups": [],
  "hints": [
    "Note that if a node u contains an apple then all edges in the path from the root to the node u have to be used forward and backward (2 times).",
    "Therefore use a depth-first search (DFS) to check if an edge will be used or not."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minTime(int n, vector<vector<int>>& edges, vector<bool>& hasApple) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minTime(int n, int[][] edges, List<Boolean> hasApple) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minTime(self, n, edges, hasApple):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type hasApple: List[bool]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minTime(self, n: int, edges: List[List[int]], hasApple: List[bool]) -> int:\n        ",
    "c": "int minTime(int n, int** edges, int edgesSize, int* edgesColSize, bool* hasApple, int hasAppleSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinTime(int n, int[][] edges, IList<bool> hasApple) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @param {boolean[]} hasApple\n * @return {number}\n */\nvar minTime = function(n, edges, hasApple) {\n    \n};",
    "typescript": "function minTime(n: number, edges: number[][], hasApple: boolean[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @param Boolean[] $hasApple\n     * @return Integer\n     */\n    function minTime($n, $edges, $hasApple) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minTime(_ n: Int, _ edges: [[Int]], _ hasApple: [Bool]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minTime(n: Int, edges: Array<IntArray>, hasApple: List<Boolean>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minTime(int n, List<List<int>> edges, List<bool> hasApple) {\n    \n  }\n}",
    "golang": "func minTime(n int, edges [][]int, hasApple []bool) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @param {Boolean[]} has_apple\n# @return {Integer}\ndef min_time(n, edges, has_apple)\n    \nend",
    "scala": "object Solution {\n    def minTime(n: Int, edges: Array[Array[Int]], hasApple: List[Boolean]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_time(n: i32, edges: Vec<Vec<i32>>, has_apple: Vec<bool>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-time n edges hasApple)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof boolean?) exact-integer?)\n  )",
    "erlang": "-spec min_time(N :: integer(), Edges :: [[integer()]], HasApple :: [boolean()]) -> integer().\nmin_time(N, Edges, HasApple) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_time(n :: integer, edges :: [[integer]], has_apple :: [boolean]) :: integer\n  def min_time(n, edges, has_apple) do\n    \n  end\nend"
  }
}
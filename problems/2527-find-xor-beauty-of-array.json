{
  "title": "Find Xor-Beauty of Array",
  "problem_id": "2621",
  "frontend_id": "2527",
  "difficulty": "Medium",
  "problem_slug": "find-xor-beauty-of-array",
  "topics": [
    "Array",
    "Math",
    "Bit Manipulation"
  ],
  "description": "You are given a 0-indexed integer array nums.\nThe effective value of three indices i, j, and k is defined as ((nums[i] | nums[j]) & nums[k]).\nThe xor-beauty of the array is the XORing of the effective values of all the possible triplets of indices (i, j, k) where 0 <= i, j, k < n.\nReturn the xor-beauty of nums.\nNote that:\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,4]\nOutput: 5\nExplanation: \nThe triplets and their corresponding effective values are listed below:\n- (0,0,0) with effective value ((1 | 1) & 1) = 1\n- (0,0,1) with effective value ((1 | 1) & 4) = 0\n- (0,1,0) with effective value ((1 | 4) & 1) = 1\n- (0,1,1) with effective value ((1 | 4) & 4) = 4\n- (1,0,0) with effective value ((4 | 1) & 1) = 1\n- (1,0,1) with effective value ((4 | 1) & 4) = 4\n- (1,1,0) with effective value ((4 | 4) & 1) = 0\n- (1,1,1) with effective value ((4 | 4) & 4) = 4 \nXor-beauty of array will be bitwise XOR of all beauties = 1 ^ 0 ^ 1 ^ 4 ^ 1 ^ 4 ^ 0 ^ 4 = 5.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [15,45,20,2,34,35,5,44,32,30]\nOutput: 34\nExplanation: The xor-beauty of the given array is 34.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.lengthÂ <= 105",
    "1 <= nums[i] <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "Try to simplify the given expression.",
    "Try constructing the answer bit by bit."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int xorBeauty(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int xorBeauty(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def xorBeauty(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def xorBeauty(self, nums: List[int]) -> int:\n        ",
    "c": "int xorBeauty(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int XorBeauty(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar xorBeauty = function(nums) {\n    \n};",
    "typescript": "function xorBeauty(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function xorBeauty($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func xorBeauty(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun xorBeauty(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int xorBeauty(List<int> nums) {\n    \n  }\n}",
    "golang": "func xorBeauty(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef xor_beauty(nums)\n    \nend",
    "scala": "object Solution {\n    def xorBeauty(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn xor_beauty(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (xor-beauty nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec xor_beauty(Nums :: [integer()]) -> integer().\nxor_beauty(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec xor_beauty(nums :: [integer]) :: integer\n  def xor_beauty(nums) do\n    \n  end\nend"
  }
}
{
  "title": "Add to Array-Form of Integer",
  "problem_id": "1031",
  "frontend_id": "989",
  "difficulty": "Easy",
  "problem_slug": "add-to-array-form-of-integer",
  "topics": [
    "Array",
    "Math"
  ],
  "description": "The array-form of an integer num is an array representing its digits in left to right order.\nGiven num, the array-form of an integer, and an integer k, return the array-form of the integer num + k.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: num = [1,2,0,0], k = 34\nOutput: [1,2,3,4]\nExplanation: 1200 + 34 = 1234",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: num = [2,7,4], k = 181\nOutput: [4,5,5]\nExplanation: 274 + 181 = 455",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: num = [2,1,5], k = 806\nOutput: [1,0,2,1]\nExplanation: 215 + 806 = 1021",
      "images": []
    }
  ],
  "constraints": [
    "1 <= num.length <= 104",
    "0 <= num[i] <= 9",
    "num does not contain any leading zeros except for the zero itself.",
    "1 <= k <= 104"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<Integer> addToArrayForm(int[] num, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def addToArrayForm(self, num, k):\n        \"\"\"\n        :type num: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* addToArrayForm(int* num, int numSize, int k, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<int> AddToArrayForm(int[] num, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n    \n};",
    "typescript": "function addToArrayForm(num: number[], k: number): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $num\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function addToArrayForm($num, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func addToArrayForm(_ num: [Int], _ k: Int) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun addToArrayForm(num: IntArray, k: Int): List<Int> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> addToArrayForm(List<int> num, int k) {\n    \n  }\n}",
    "golang": "func addToArrayForm(num []int, k int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} num\n# @param {Integer} k\n# @return {Integer[]}\ndef add_to_array_form(num, k)\n    \nend",
    "scala": "object Solution {\n    def addToArrayForm(num: Array[Int], k: Int): List[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn add_to_array_form(num: Vec<i32>, k: i32) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (add-to-array-form num k)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )",
    "erlang": "-spec add_to_array_form(Num :: [integer()], K :: integer()) -> [integer()].\nadd_to_array_form(Num, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec add_to_array_form(num :: [integer], k :: integer) :: [integer]\n  def add_to_array_form(num, k) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n---\n### Approach 1: Schoolbook Addition\n\n**Intuition**\n\nLet's add numbers in a schoolbook way, column by column.  For example, to add 123 and 912, we add 3+2, then 2+1, then 1+9.  Whenever our addition result is more than 10, we carry the 1 into the next column.  The result is 1035.\n\n**Algorithm**\n\nWe can do a variant of the above idea that is easier to implement - we put the entire addend in the first column from the right.\n\nContinuing the example of 123 + 912, we start with [1, 2, 3+912].  Then we perform the addition 3+912, leaving 915.  The 5 stays as the digit, while we 'carry' 910 into the next column which becomes 91.\n\nWe repeat this process with [1, 2+91, 5].  We have 93, where 3 stays and 90 is carried over as 9.  Again, we have [1+9, 3, 5] which transforms into [1, 0, 3, 5].**Complexity Analysis**\n\n* Time Complexity:  $$O(\\max(N, \\log K))$$ where $$N$$ is the length of `A`.\n\n* Space Complexity:  $$O(\\max(N, \\log K))$$."
}
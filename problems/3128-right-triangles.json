{
  "title": "Right Triangles",
  "problem_id": "3388",
  "frontend_id": "3128",
  "difficulty": "Medium",
  "problem_slug": "right-triangles",
  "topics": [
    "Array",
    "Hash Table",
    "Math",
    "Combinatorics",
    "Counting"
  ],
  "description": "You are given a 2D boolean matrix grid.\nA collection of 3 elements of grid is a right triangle if one of its elements is in the same row with another element and in the same column with the third element. The 3 elements may not be next to each other.\nReturn an integer that is the number of right triangles that can be made with 3 elements of grid such that all of them have a value of 1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: grid = [[0,1,0],[0,1,1],[0,1,0]]\nOutput: 2\nExplanation:\nThere are two right triangles with elements of the value 1. Notice that the blue ones do not form a right triangle because the 3 elements are in the same column.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: grid = [[1,0,0,0],[0,1,0,1],[1,0,0,0]]\nOutput: 0\nExplanation:\nThere are no right triangles with elements of the value 1. Â Notice that the blue ones do not form a right triangle.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: grid = [[1,0,1],[1,0,0],[1,0,0]]\nOutput: 2\nExplanation:\nThere are two right triangles with elements of the value 1.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= grid.length <= 1000",
    "1 <= grid[i].length <= 1000",
    "0 <= grid[i][j] <= 1"
  ],
  "follow_ups": [],
  "hints": [
    "If <code>grid[x][y]</code> is 1, it can form a right triangle with an element of <code>grid</code> with value 1 in the same row and an element of <code>grid</code> with value 1 in the same column.",
    "So we just need to count the number of 1s in each row and column.",
    "For each <code>x, y</code> with <code>grid[x][y] = 1</code> if there are <code>row[x]</code> 1s in the row <code>x</code> and <code>col[y]</code> 1s in column <code>y</code>, the answer should be added by <code>(row[x] - 1) * (col[y] - 1)</code>."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long numberOfRightTriangles(vector<vector<int>>& grid) {\n        \n    }\n};",
    "java": "class Solution {\n    public long numberOfRightTriangles(int[][] grid) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numberOfRightTriangles(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numberOfRightTriangles(self, grid: List[List[int]]) -> int:\n        ",
    "c": "long long numberOfRightTriangles(int** grid, int gridSize, int* gridColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public long NumberOfRightTriangles(int[][] grid) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar numberOfRightTriangles = function(grid) {\n    \n};",
    "typescript": "function numberOfRightTriangles(grid: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function numberOfRightTriangles($grid) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numberOfRightTriangles(_ grid: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numberOfRightTriangles(grid: Array<IntArray>): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int numberOfRightTriangles(List<List<int>> grid) {\n    \n  }\n}",
    "golang": "func numberOfRightTriangles(grid [][]int) int64 {\n    \n}",
    "ruby": "# @param {Integer[][]} grid\n# @return {Integer}\ndef number_of_right_triangles(grid)\n    \nend",
    "scala": "object Solution {\n    def numberOfRightTriangles(grid: Array[Array[Int]]): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn number_of_right_triangles(grid: Vec<Vec<i32>>) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (number-of-right-triangles grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec number_of_right_triangles(Grid :: [[integer()]]) -> integer().\nnumber_of_right_triangles(Grid) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec number_of_right_triangles(grid :: [[integer]]) :: integer\n  def number_of_right_triangles(grid) do\n    \n  end\nend"
  }
}
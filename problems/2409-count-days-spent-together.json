{
  "title": "Count Days Spent Together",
  "problem_id": "2496",
  "frontend_id": "2409",
  "difficulty": "Easy",
  "problem_slug": "count-days-spent-together",
  "topics": [
    "Math",
    "String"
  ],
  "description": "Alice and Bob are traveling to Rome for separate business meetings.\nYou are given 4 strings arriveAlice, leaveAlice, arriveBob, and leaveBob. Alice will be in the city from the dates arriveAlice to leaveAlice (inclusive), while Bob will be in the city from the dates arriveBob to leaveBob (inclusive). Each will be a 5-character string in the format \"MM-DD\", corresponding to the month and day of the date.\nReturn the total number of days that Alice and Bob are in Rome together.\nYou can assume that all dates occur in the same calendar year, which is not a leap year. Note that the number of days per month can be represented as: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31].\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: arriveAlice = \"08-15\", leaveAlice = \"08-18\", arriveBob = \"08-16\", leaveBob = \"08-19\"\nOutput: 3\nExplanation: Alice will be in Rome from August 15 to August 18. Bob will be in Rome from August 16 to August 19. They are both in Rome together on August 16th, 17th, and 18th, so the answer is 3.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: arriveAlice = \"10-01\", leaveAlice = \"10-31\", arriveBob = \"11-01\", leaveBob = \"12-31\"\nOutput: 0\nExplanation: There is no day when Alice and Bob are in Rome together, so we return 0.",
      "images": []
    }
  ],
  "constraints": [
    "All dates are provided in the format \"MM-DD\".",
    "Alice and Bob's arrival dates are earlier than or equal to their leaving dates.",
    "The given dates are valid dates of a non-leap year."
  ],
  "follow_ups": [],
  "hints": [
    "For a given day, determine if Alice or Bob or both are in Rome.",
    "Brute force all 365 days for both Alice and Bob."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int countDaysTogether(string arriveAlice, string leaveAlice, string arriveBob, string leaveBob) {\n        \n    }\n};",
    "java": "class Solution {\n    public int countDaysTogether(String arriveAlice, String leaveAlice, String arriveBob, String leaveBob) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countDaysTogether(self, arriveAlice, leaveAlice, arriveBob, leaveBob):\n        \"\"\"\n        :type arriveAlice: str\n        :type leaveAlice: str\n        :type arriveBob: str\n        :type leaveBob: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countDaysTogether(self, arriveAlice: str, leaveAlice: str, arriveBob: str, leaveBob: str) -> int:\n        ",
    "c": "int countDaysTogether(char* arriveAlice, char* leaveAlice, char* arriveBob, char* leaveBob) {\n    \n}",
    "csharp": "public class Solution {\n    public int CountDaysTogether(string arriveAlice, string leaveAlice, string arriveBob, string leaveBob) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} arriveAlice\n * @param {string} leaveAlice\n * @param {string} arriveBob\n * @param {string} leaveBob\n * @return {number}\n */\nvar countDaysTogether = function(arriveAlice, leaveAlice, arriveBob, leaveBob) {\n    \n};",
    "typescript": "function countDaysTogether(arriveAlice: string, leaveAlice: string, arriveBob: string, leaveBob: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $arriveAlice\n     * @param String $leaveAlice\n     * @param String $arriveBob\n     * @param String $leaveBob\n     * @return Integer\n     */\n    function countDaysTogether($arriveAlice, $leaveAlice, $arriveBob, $leaveBob) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countDaysTogether(_ arriveAlice: String, _ leaveAlice: String, _ arriveBob: String, _ leaveBob: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countDaysTogether(arriveAlice: String, leaveAlice: String, arriveBob: String, leaveBob: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int countDaysTogether(String arriveAlice, String leaveAlice, String arriveBob, String leaveBob) {\n    \n  }\n}",
    "golang": "func countDaysTogether(arriveAlice string, leaveAlice string, arriveBob string, leaveBob string) int {\n    \n}",
    "ruby": "# @param {String} arrive_alice\n# @param {String} leave_alice\n# @param {String} arrive_bob\n# @param {String} leave_bob\n# @return {Integer}\ndef count_days_together(arrive_alice, leave_alice, arrive_bob, leave_bob)\n    \nend",
    "scala": "object Solution {\n    def countDaysTogether(arriveAlice: String, leaveAlice: String, arriveBob: String, leaveBob: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_days_together(arrive_alice: String, leave_alice: String, arrive_bob: String, leave_bob: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (count-days-together arriveAlice leaveAlice arriveBob leaveBob)\n  (-> string? string? string? string? exact-integer?)\n  )",
    "erlang": "-spec count_days_together(ArriveAlice :: unicode:unicode_binary(), LeaveAlice :: unicode:unicode_binary(), ArriveBob :: unicode:unicode_binary(), LeaveBob :: unicode:unicode_binary()) -> integer().\ncount_days_together(ArriveAlice, LeaveAlice, ArriveBob, LeaveBob) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_days_together(arrive_alice :: String.t, leave_alice :: String.t, arrive_bob :: String.t, leave_bob :: String.t) :: integer\n  def count_days_together(arrive_alice, leave_alice, arrive_bob, leave_bob) do\n    \n  end\nend"
  }
}
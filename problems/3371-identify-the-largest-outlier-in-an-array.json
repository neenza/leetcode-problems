{
  "title": "Identify the Largest Outlier in an Array",
  "problem_id": "3594",
  "frontend_id": "3371",
  "difficulty": "Medium",
  "problem_slug": "identify-the-largest-outlier-in-an-array",
  "topics": [
    "Array",
    "Hash Table",
    "Counting",
    "Enumeration"
  ],
  "description": "You are given an integer array nums. This array contains n elements, where exactly n - 2 elements are special numbers. One of the remaining two elements is the sum of these special numbers, and the other is an outlier.\nAn outlier is defined as a number that is neither one of the original special numbers nor the element representing the sum of those numbers.\nNote that special numbers, the sum element, and the outlier must have distinct indices, but may share the same value.\nReturn the largest potential outlier in nums.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [2,3,5,10]\nOutput: 10\nExplanation:\nThe special numbers could be 2 and 3, thus making their sum 5 and the outlier 10.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [-2,-1,-3,-6,4]\nOutput: 4\nExplanation:\nThe special numbers could be -2, -1, and -3, thus making their sum -6 and the outlier 4.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,1,1,1,1,5,5]\nOutput: 5\nExplanation:\nThe special numbers could be 1, 1, 1, 1, and 1, thus making their sum 5 and the other 5 as the outlier.",
      "images": []
    }
  ],
  "constraints": [
    "3 <= nums.length <= 105",
    "-1000 <= nums[i] <= 1000",
    "The input is generated such that at least one potential outlier exists in nums."
  ],
  "follow_ups": [],
  "hints": [
    "What will be the value of array sum if we remove the outlier from it?",
    "Use hashmap to find occurrence of an element quickly."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int getLargestOutlier(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int getLargestOutlier(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def getLargestOutlier(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def getLargestOutlier(self, nums: List[int]) -> int:\n        ",
    "c": "int getLargestOutlier(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int GetLargestOutlier(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar getLargestOutlier = function(nums) {\n    \n};",
    "typescript": "function getLargestOutlier(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function getLargestOutlier($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func getLargestOutlier(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun getLargestOutlier(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int getLargestOutlier(List<int> nums) {\n    \n  }\n}",
    "golang": "func getLargestOutlier(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef get_largest_outlier(nums)\n    \nend",
    "scala": "object Solution {\n    def getLargestOutlier(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn get_largest_outlier(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (get-largest-outlier nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec get_largest_outlier(Nums :: [integer()]) -> integer().\nget_largest_outlier(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec get_largest_outlier(nums :: [integer]) :: integer\n  def get_largest_outlier(nums) do\n    \n  end\nend"
  }
}
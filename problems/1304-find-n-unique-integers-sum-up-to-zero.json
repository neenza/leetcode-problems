{
  "title": "Find N Unique Integers Sum up to Zero",
  "problem_id": "1426",
  "frontend_id": "1304",
  "difficulty": "Easy",
  "problem_slug": "find-n-unique-integers-sum-up-to-zero",
  "topics": [
    "Array",
    "Math"
  ],
  "description": "Given an integer n, return any array containing n unique integers such that they add up to 0.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 5\nOutput: [-7,-1,1,3,4]\nExplanation: These arrays also are accepted [-5,-1,1,2,3] , [-3,-1,2,-2,4].",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 3\nOutput: [-1,0,1]",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 1\nOutput: [0]",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 1000"
  ],
  "follow_ups": [],
  "hints": [
    "Return an array where the values are symmetric. (+x , -x).",
    "If n is odd, append value 0 in your returned array."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> sumZero(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] sumZero(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def sumZero(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def sumZero(self, n: int) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* sumZero(int n, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] SumZero(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number[]}\n */\nvar sumZero = function(n) {\n    \n};",
    "typescript": "function sumZero(n: number): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer[]\n     */\n    function sumZero($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func sumZero(_ n: Int) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun sumZero(n: Int): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> sumZero(int n) {\n    \n  }\n}",
    "golang": "func sumZero(n int) []int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer[]}\ndef sum_zero(n)\n    \nend",
    "scala": "object Solution {\n    def sumZero(n: Int): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn sum_zero(n: i32) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (sum-zero n)\n  (-> exact-integer? (listof exact-integer?))\n  )",
    "erlang": "-spec sum_zero(N :: integer()) -> [integer()].\nsum_zero(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec sum_zero(n :: integer) :: [integer]\n  def sum_zero(n) do\n    \n  end\nend"
  }
}
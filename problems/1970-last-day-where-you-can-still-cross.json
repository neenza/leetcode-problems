{
  "title": "Last Day Where You Can Still Cross",
  "problem_id": "2101",
  "frontend_id": "1970",
  "difficulty": "Hard",
  "problem_slug": "last-day-where-you-can-still-cross",
  "topics": [
    "Array",
    "Binary Search",
    "Depth-First Search",
    "Breadth-First Search",
    "Union Find",
    "Matrix"
  ],
  "description": "There is a 1-based binary matrix where 0 represents land and 1 represents water. You are given integers row and col representing the number of rows and columns in the matrix, respectively.\nInitially on day 0, the entire matrix is land. However, each day a new cell becomes flooded with water. You are given a 1-based 2D array cells, where cells[i] = [ri, ci] represents that on the ith day, the cell on the rith row and cith column (1-based coordinates) will be covered with water (i.e., changed to 1).\nYou want to find the last day that it is possible to walk from the top to the bottom by only walking on land cells. You can start from any cell in the top row and end at any cell in the bottom row. You can only travel in the four cardinal directions (left, right, up, and down).\nReturn the last day where it is possible to walk from the top to the bottom by only walking on land cells.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: row = 2, col = 2, cells = [[1,1],[2,1],[1,2],[2,2]]\nOutput: 2\nExplanation: The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 2.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/07/27/1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: row = 2, col = 2, cells = [[1,1],[1,2],[2,1],[2,2]]\nOutput: 1\nExplanation: The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 1.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/07/27/2.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: row = 3, col = 3, cells = [[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]\nOutput: 3\nExplanation: The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 3.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/07/27/3.png"
      ]
    }
  ],
  "constraints": [
    "2 <= row, col <= 2 * 104",
    "4 <= row * col <= 2 * 104",
    "cells.length == row * col",
    "1 <= ri <= row",
    "1 <= ci <= col",
    "All the values of cells are unique."
  ],
  "follow_ups": [],
  "hints": [
    "What graph algorithm allows us to find whether a path exists?",
    "Can we use binary search to help us solve the problem?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int latestDayToCross(int row, int col, vector<vector<int>>& cells) {\n        \n    }\n};",
    "java": "class Solution {\n    public int latestDayToCross(int row, int col, int[][] cells) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def latestDayToCross(self, row, col, cells):\n        \"\"\"\n        :type row: int\n        :type col: int\n        :type cells: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def latestDayToCross(self, row: int, col: int, cells: List[List[int]]) -> int:\n        ",
    "c": "int latestDayToCross(int row, int col, int** cells, int cellsSize, int* cellsColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int LatestDayToCross(int row, int col, int[][] cells) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} row\n * @param {number} col\n * @param {number[][]} cells\n * @return {number}\n */\nvar latestDayToCross = function(row, col, cells) {\n    \n};",
    "typescript": "function latestDayToCross(row: number, col: number, cells: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $row\n     * @param Integer $col\n     * @param Integer[][] $cells\n     * @return Integer\n     */\n    function latestDayToCross($row, $col, $cells) {\n        \n    }\n}",
    "swift": "class Solution {\n    func latestDayToCross(_ row: Int, _ col: Int, _ cells: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun latestDayToCross(row: Int, col: Int, cells: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int latestDayToCross(int row, int col, List<List<int>> cells) {\n    \n  }\n}",
    "golang": "func latestDayToCross(row int, col int, cells [][]int) int {\n    \n}",
    "ruby": "# @param {Integer} row\n# @param {Integer} col\n# @param {Integer[][]} cells\n# @return {Integer}\ndef latest_day_to_cross(row, col, cells)\n    \nend",
    "scala": "object Solution {\n    def latestDayToCross(row: Int, col: Int, cells: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn latest_day_to_cross(row: i32, col: i32, cells: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (latest-day-to-cross row col cells)\n  (-> exact-integer? exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec latest_day_to_cross(Row :: integer(), Col :: integer(), Cells :: [[integer()]]) -> integer().\nlatest_day_to_cross(Row, Col, Cells) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec latest_day_to_cross(row :: integer, col :: integer, cells :: [[integer]]) :: integer\n  def latest_day_to_cross(row, col, cells) do\n    \n  end\nend"
  }
}
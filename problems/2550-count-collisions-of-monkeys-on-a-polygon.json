{
  "title": "Count Collisions of Monkeys on a Polygon",
  "problem_id": "2680",
  "frontend_id": "2550",
  "difficulty": "Medium",
  "problem_slug": "count-collisions-of-monkeys-on-a-polygon",
  "topics": [
    "Math",
    "Recursion"
  ],
  "description": "There is a regular convex polygon with n vertices. The vertices are labeled from 0 to n - 1 in a clockwise direction, and each vertex has exactly one monkey. The following figure shows a convex polygon of 6 vertices.\nSimultaneously, each monkey moves to a neighboring vertex. A collision happens if at least two monkeys reside on the same vertex after the movement or intersect on an edge.\nReturn the number of ways the monkeys can move so that at least one collision happens. Since the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 3\nOutput: 6\nExplanation:\nThere are 8 total possible movements. Two ways such that they collide at some point are:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 4\nOutput: 14",
      "images": []
    }
  ],
  "constraints": [
    "3 <= n <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "Try counting the number of ways in which the monkeys will not collide."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int monkeyMove(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int monkeyMove(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def monkeyMove(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def monkeyMove(self, n: int) -> int:\n        ",
    "c": "int monkeyMove(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int MonkeyMove(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar monkeyMove = function(n) {\n    \n};",
    "typescript": "function monkeyMove(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function monkeyMove($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func monkeyMove(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun monkeyMove(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int monkeyMove(int n) {\n    \n  }\n}",
    "golang": "func monkeyMove(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef monkey_move(n)\n    \nend",
    "scala": "object Solution {\n    def monkeyMove(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn monkey_move(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (monkey-move n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec monkey_move(N :: integer()) -> integer().\nmonkey_move(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec monkey_move(n :: integer) :: integer\n  def monkey_move(n) do\n    \n  end\nend"
  }
}
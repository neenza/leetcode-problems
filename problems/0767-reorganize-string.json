{
  "title": "Reorganize String",
  "problem_id": "778",
  "frontend_id": "767",
  "difficulty": "Medium",
  "problem_slug": "reorganize-string",
  "topics": [
    "Hash Table",
    "String",
    "Greedy",
    "Sorting",
    "Heap (Priority Queue)",
    "Counting"
  ],
  "description": "Given a string s, rearrange the characters of s so that any two adjacent characters are not the same.\nReturn any possible rearrangement of s or return \"\" if not possible.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"aab\"\nOutput: \"aba\"",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"aaab\"\nOutput: \"\"",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 500",
    "s consists of lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [
    "Alternate placing the most common letters."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string reorganizeString(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public String reorganizeString(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def reorganizeString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def reorganizeString(self, s: str) -> str:\n        ",
    "c": "char* reorganizeString(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public string ReorganizeString(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {string}\n */\nvar reorganizeString = function(s) {\n    \n};",
    "typescript": "function reorganizeString(s: string): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function reorganizeString($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func reorganizeString(_ s: String) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun reorganizeString(s: String): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String reorganizeString(String s) {\n    \n  }\n}",
    "golang": "func reorganizeString(s string) string {\n    \n}",
    "ruby": "# @param {String} s\n# @return {String}\ndef reorganize_string(s)\n    \nend",
    "scala": "object Solution {\n    def reorganizeString(s: String): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn reorganize_string(s: String) -> String {\n        \n    }\n}",
    "racket": "(define/contract (reorganize-string s)\n  (-> string? string?)\n  )",
    "erlang": "-spec reorganize_string(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nreorganize_string(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec reorganize_string(s :: String.t) :: String.t\n  def reorganize_string(s) do\n    \n  end\nend"
  }
}
{
  "title": "Pseudo-Palindromic Paths in a Binary Tree",
  "problem_id": "1568",
  "frontend_id": "1457",
  "difficulty": "Medium",
  "problem_slug": "pseudo-palindromic-paths-in-a-binary-tree",
  "topics": [
    "Bit Manipulation",
    "Tree",
    "Depth-First Search",
    "Breadth-First Search",
    "Binary Tree"
  ],
  "description": "Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome.\nReturn the number of pseudo-palindromic paths going from the root node to leaf nodes.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: root = [2,3,1,3,1,null,1]\nOutput: 2 \nExplanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome).",
      "images": [
        "https://assets.leetcode.com/uploads/2020/05/06/palindromic_paths_1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: root = [2,1,1,1,3,null,null,null,null,null,1]\nOutput: 1 \nExplanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the green path [2,1,1], the path [2,1,3,1], and the path [2,1]. Among these paths only the green path is pseudo-palindromic since [2,1,1] can be rearranged in [1,2,1] (palindrome).",
      "images": [
        "https://assets.leetcode.com/uploads/2020/05/07/palindromic_paths_2.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: root = [9]\nOutput: 1",
      "images": [
        "https://assets.leetcode.com/uploads/2020/05/07/palindromic_paths_2.png"
      ]
    }
  ],
  "constraints": [
    "The number of nodes in the tree is in the range [1, 105].",
    "1 <= Node.val <= 9"
  ],
  "follow_ups": [],
  "hints": [
    "Note that the node values of a path form a palindrome if at most one digit has an odd frequency (parity).",
    "Use a Depth First Search (DFS) keeping the frequency (parity) of the digits. Once you are in a leaf node check if at most one digit has an odd frequency (parity)."
  ],
  "code_snippets": {
    "cpp": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int pseudoPalindromicPaths (TreeNode* root) {\n        \n    }\n};",
    "java": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int pseudoPalindromicPaths (TreeNode root) {\n        \n    }\n}",
    "python": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pseudoPalindromicPaths (self, root):\n        \"\"\"\n        :type root: Optional[TreeNode]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pseudoPalindromicPaths (self, root: Optional[TreeNode]) -> int:\n        ",
    "c": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nint pseudoPalindromicPaths (struct TreeNode* root) {\n    \n}",
    "csharp": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\npublic class Solution {\n    public int PseudoPalindromicPaths (TreeNode root) {\n        \n    }\n}",
    "javascript": "/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar pseudoPalindromicPaths  = function(root) {\n    \n};",
    "typescript": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction pseudoPalindromicPaths (root: TreeNode | null): number {\n    \n};",
    "php": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     public $val = null;\n *     public $left = null;\n *     public $right = null;\n *     function __construct($val = 0, $left = null, $right = null) {\n *         $this->val = $val;\n *         $this->left = $left;\n *         $this->right = $right;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param TreeNode $root\n     * @return Integer\n     */\n    function pseudoPalindromicPaths ($root) {\n        \n    }\n}",
    "swift": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\n *         self.val = val\n *         self.left = left\n *         self.right = right\n *     }\n * }\n */\nclass Solution {\n    func pseudoPalindromicPaths (_ root: TreeNode?) -> Int {\n        \n    }\n}",
    "kotlin": "/**\n * Example:\n * var ti = TreeNode(5)\n * var v = ti.`val`\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun pseudoPalindromicPaths (root: TreeNode?): Int {\n        \n    }\n}",
    "dart": "/**\n * Definition for a binary tree node.\n * class TreeNode {\n *   int val;\n *   TreeNode? left;\n *   TreeNode? right;\n *   TreeNode([this.val = 0, this.left, this.right]);\n * }\n */\nclass Solution {\n  int pseudoPalindromicPaths (TreeNode? root) {\n    \n  }\n}",
    "golang": "/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc pseudoPalindromicPaths (root *TreeNode) int {\n    \n}",
    "ruby": "# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val = 0, left = nil, right = nil)\n#         @val = val\n#         @left = left\n#         @right = right\n#     end\n# end\n# @param {TreeNode} root\n# @return {Integer}\ndef pseudo_palindromic_paths (root)\n    \nend",
    "scala": "/**\n * Definition for a binary tree node.\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\n *   var value: Int = _value\n *   var left: TreeNode = _left\n *   var right: TreeNode = _right\n * }\n */\nobject Solution {\n    def pseudoPalindromicPaths (root: TreeNode): Int = {\n        \n    }\n}",
    "rust": "// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn pseudo_palindromic_paths (root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n        \n    }\n}",
    "racket": "; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n\n(define/contract (pseudo-palindromic-paths  root)\n  (-> (or/c tree-node? #f) exact-integer?)\n  )",
    "erlang": "%% Definition for a binary tree node.\n%%\n%% -record(tree_node, {val = 0 :: integer(),\n%%                     left = null  :: 'null' | #tree_node{},\n%%                     right = null :: 'null' | #tree_node{}}).\n\n-spec pseudo_palindromic_paths (Root :: #tree_node{} | null) -> integer().\npseudo_palindromic_paths (Root) ->\n  .",
    "elixir": "# Definition for a binary tree node.\n#\n# defmodule TreeNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           left: TreeNode.t() | nil,\n#           right: TreeNode.t() | nil\n#         }\n#   defstruct val: 0, left: nil, right: nil\n# end\n\ndefmodule Solution do\n  @spec pseudo_palindromic_paths (root :: TreeNode.t | nil) :: integer\n  def pseudo_palindromic_paths (root) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n\n--- \n\n### Overview\n\n**Two subproblems**\n\nThe problem consists of two subproblems:\n\n- Traverse the tree to build all root-to-leaf paths.\n\n- For each root-to-leaf path, check if it's a pseudo-palindromic path or not.\n\n![diff](../Figures/1457/split.png)\n*Figure 1. Two subproblems.*\n\n\n**How to traverse the tree to build all root-to-leaf paths**\n\nThere are three DFS ways to traverse the tree: preorder, postorder and inorder. Please check two minutes picture explanation if you don't remember them quite well: [here is the Python version](https://leetcode.com/problems/binary-tree-inorder-traversal/discuss/283746/all-dfs-traversals-preorder-inorder-postorder-in-python-in-1-line) and [here is the Java version](https://leetcode.com/problems/binary-tree-inorder-traversal/discuss/328601/all-dfs-traversals-preorder-postorder-inorder-in-java-in-5-lines).\n\n![diff](../Figures/1457/dfs.png)\n*Figure 2. The nodes are enumerated in the order of visits. To compare different DFS strategies, follow `1-2-3-4-5` direction.*\n\n\n> Root-to-leaf traversal is so-called _DFS preorder traversal_. To implement it, one has to follow the straightforward strategy Root->Left->Right. \n\n> There are three ways to implement preorder traversal: iterative, recursive, and Morris. Here we're going to implement the first two.\n\nIterative and recursive approaches here do the job in one pass, but they both need up to $$\\mathcal{O}(H)$$ space to keep the stack, where $$H$$ is a tree height.\n\n**How to check if the path is pseudo-palindromic or not**\n\n> It's quite evident that the path is pseudo-palindromic if it has at most one digit with an odd frequency.\n\nHow to check that?\n\nThe straightforward way is to save each root-to-leaf path into a list and then check each digit for parity.This method requires keeping each root-to-leaf path, and that becomes space-consuming for the large trees. To save space, let's compute the parity on the fly using bitwise operators. \n\n> The idea is to keep the frequency of digit `1` in the first bit, `2` in the second bit, etc: `path ^= (1 << node.val)`. \n\n[Left shift operator]((https://wiki.python.org/moin/BitwiseOperators)) is used to define the bit, and [XOR operator](https://leetcode.com/problems/single-number-ii/solution/) - to compute the digit frequency.\n\n![diff](../Figures/1457/xor.png)\n*Figure 3. XOR of zero and a bit results in that bit. XOR of two equal bits (even if they are zeros) results in a zero. Hence, one could see the bit in a path only if it appears an odd number of times.*Now, to ensure that at most one digit has an odd frequency, one has to check that `path` is a [power of two](https://leetcode.com/problems/power-of-two/solution/), _i.e._, at most one bit is set to one. That could be done by turning off (= setting to 0) the rightmost 1-bit: `path & (path - 1) == 0`. You might want to check the article [Power of Two](https://leetcode.com/problems/power-of-two/solution/) for the detailed explanation of this bitwise trick.\n\n![diff](../Figures/1457/turn_off.png)\n*Figure 4. `x & (x - 1)` is a way to set the rightmost 1-bit to zero, _i.e._, `x & (x - 1) == 0` for the power of two. To subtract 1 means to change the rightmost 1-bit to 0 and to set all the lower bits to 1. Now AND operator: the rightmost 1-bit will be turned off because `1 & 0 = 0`, and all the lower bits as well.*---\n### Approach 1: Iterative Preorder Traversal.\n\n**Intuition**\n\nNote: The visual below shows how a stack is used for an inorder traversal. The algorithm and implementation use a preorder traversal. These are both methods for depth-first search, and the only difference is the order in which the nodes are handled.\n\n!?!../Documents/1457_LIS.json:1000,310!?!\n\nHere we implement standard iterative preorder traversal with the stack:\n\n- Initialize the counter to zero.\n\n- Push root into the stack.\n\n- While the stack is not empty:\n\n    - Pop out a node from the stack and update the current number.\n    \n    - If the node is a leaf, update the root-to-leaf path, check it for being pseudo-palindromic, and update the count.\n    \n    - Push right and left child nodes into the stack.\n    \n- Return count.  \n\n**Implementation**\n\nNote, that [Javadocs recommends using ArrayDeque, and not Stack as a stack implementation](https://docs.oracle.com/javase/8/docs/api/java/util/ArrayDeque.html).**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(N)$$ since one has to visit each node, where $$N$$ is a number of nodes. \n    \n* Space complexity: up to $$\\mathcal{O}(H)$$ to keep the stack, where $$H$$ is a tree height.---\n### Approach 2: Recursive Preorder Traversal.\n\nIterative approach 1 could be converted into a recursive one.\n\nRecursive preorder traversal is extremely simple: follow Root->Left->Right direction, _i.e._, do all the business with the node (_i.e._, update the current path and the counter), and then do the recursive calls for the left and right child nodes.\n\nP.S. Here is the difference between _preorder_ and the other DFS recursive traversals. \n\n![diff](../Figures/1457/dfs.png)\n*Figure 5. The nodes are enumerated in the order of visits. To compare different DFS strategies, follow `1-2-3-4-5` direction.*\n\n\n**Implementation****Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(N)$$ since one has to visit each node, check if at most one digit has an odd frequency.\n    \n* Space complexity: up to $$\\mathcal{O}(H)$$ to keep the recursion stack, where $$H$$ is a tree height.---\n### Further Reading\n\nThe problem could be solved in constant space using the Morris inorder traversal algorithm, as it was done in [Sum Root-to-Leaf Numbers](https://leetcode.com/problems/sum-root-to-leaf-numbers/solution/). It is unlikely that one can come up with a Morris Traversal solution during an interview, but it is worth knowing anyway.\n\n\n---"
}
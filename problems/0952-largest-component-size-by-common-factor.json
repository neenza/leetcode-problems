{
  "title": "Largest Component Size by Common Factor",
  "problem_id": "989",
  "frontend_id": "952",
  "difficulty": "Hard",
  "problem_slug": "largest-component-size-by-common-factor",
  "topics": [
    "Array",
    "Hash Table",
    "Math",
    "Union Find",
    "Number Theory"
  ],
  "description": "You are given an integer array of unique positive integers nums. Consider the following graph:\nReturn the size of the largest connected component in the graph.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [4,6,15,35]\nOutput: 4",
      "images": [
        "https://assets.leetcode.com/uploads/2018/12/01/ex1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [20,50,9,63]\nOutput: 2",
      "images": [
        "https://assets.leetcode.com/uploads/2018/12/01/ex2.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [2,3,6,7,4,12,21,39]\nOutput: 8",
      "images": [
        "https://assets.leetcode.com/uploads/2018/12/01/ex3.png"
      ]
    }
  ],
  "constraints": [
    "1 <= nums.length <= 2 * 104",
    "1 <= nums[i] <= 105",
    "All the values of nums are unique."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int largestComponentSize(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int largestComponentSize(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def largestComponentSize(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def largestComponentSize(self, nums: List[int]) -> int:\n        ",
    "c": "int largestComponentSize(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int LargestComponentSize(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar largestComponentSize = function(nums) {\n    \n};",
    "typescript": "function largestComponentSize(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function largestComponentSize($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func largestComponentSize(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun largestComponentSize(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int largestComponentSize(List<int> nums) {\n    \n  }\n}",
    "golang": "func largestComponentSize(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef largest_component_size(nums)\n    \nend",
    "scala": "object Solution {\n    def largestComponentSize(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn largest_component_size(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (largest-component-size nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec largest_component_size(Nums :: [integer()]) -> integer().\nlargest_component_size(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec largest_component_size(nums :: [integer]) :: integer\n  def largest_component_size(nums) do\n    \n  end\nend"
  }
}
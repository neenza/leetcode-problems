{
  "title": "Maximum Element-Sum of a Complete Subset of Indices",
  "problem_id": "3047",
  "frontend_id": "2862",
  "difficulty": "Hard",
  "problem_slug": "maximum-element-sum-of-a-complete-subset-of-indices",
  "topics": [
    "Array",
    "Math",
    "Number Theory"
  ],
  "description": "You are given a 1-indexed array nums. Your task is to select a complete subset from nums where every pair of selected indices multiplied is a perfect square,. i. e. if you select ai and aj, i * j must be a perfect square.\nReturn the sum of the complete subset with the maximum sum.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [8,7,3,5,7,2,4,9]\nOutput: 16\nExplanation:\nWe select elements at indices 2 and 8 and 2 * 8 is a perfect square.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [8,10,3,8,1,13,7,9,4]\nOutput: 20\nExplanation:\nWe select elements at indices 1, 4, and 9. 1 * 4 , 1 * 9 , 4 * 9 are perfect squares.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n == nums.length <= 104",
    "1 <= nums[i] <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "Define <strong>P(x)</strong> as the product of primes <strong>p</strong> with odd exponents in <strong>x</strong>'s factorization. Examples: For <code>x = 18</code>, factorization <code>2<sup>1</sup> × 3<sup>2</sup></code>, <strong>P(18) = 2</strong>; for <code>x = 45</code>, factorization <code>3<sup>2</sup> × 5<sup>1</sup></code>, <strong>P(45) = 5</strong>; for <code>x = 50</code>, factorization <code>2<sup>1</sup> × 5<sup>2</sup></code>, <strong>P(50) = 2</strong>; for <code>x = 210</code>, factorization <code>2<sup>1</sup> × 3<sup>1</sup> × 5<sup>1</sup> × 7<sup>1</sup></code>, <strong>P(210) = 210</strong>.",
    "If <code>P(i) = P(j)</code>, <code>nums[i]</code> and <code>nums[j]</code> can be grouped together.",
    "Pick the group with the largest sum."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long maximumSum(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public long maximumSum(List<Integer> nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maximumSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maximumSum(self, nums: List[int]) -> int:\n        ",
    "c": "long long maximumSum(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public long MaximumSum(IList<int> nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumSum = function(nums) {\n    \n};",
    "typescript": "function maximumSum(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximumSum($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maximumSum(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maximumSum(nums: List<Int>): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int maximumSum(List<int> nums) {\n    \n  }\n}",
    "golang": "func maximumSum(nums []int) int64 {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef maximum_sum(nums)\n    \nend",
    "scala": "object Solution {\n    def maximumSum(nums: List[Int]): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn maximum_sum(nums: Vec<i32>) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (maximum-sum nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec maximum_sum(Nums :: [integer()]) -> integer().\nmaximum_sum(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec maximum_sum(nums :: [integer]) :: integer\n  def maximum_sum(nums) do\n    \n  end\nend"
  }
}
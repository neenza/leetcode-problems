{
  "title": "Find All Anagrams in a String",
  "problem_id": "438",
  "frontend_id": "438",
  "difficulty": "Medium",
  "problem_slug": "find-all-anagrams-in-a-string",
  "topics": [
    "Hash Table",
    "String",
    "Sliding Window"
  ],
  "description": "Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"cbaebabacd\", p = \"abc\"\nOutput: [0,6]\nExplanation:\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"abab\", p = \"ab\"\nOutput: [0,1,2]\nExplanation:\nThe substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\nThe substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\nThe substring with start index = 2 is \"ab\", which is an anagram of \"ab\".",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length, p.length <= 3 * 104",
    "s and p consist of lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> findAnagrams(string s, string p) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<Integer> findAnagrams(String s, String p) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findAnagrams(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findAnagrams(char* s, char* p, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<int> FindAnagrams(string s, string p) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @param {string} p\n * @return {number[]}\n */\nvar findAnagrams = function(s, p) {\n    \n};",
    "typescript": "function findAnagrams(s: string, p: string): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $p\n     * @return Integer[]\n     */\n    function findAnagrams($s, $p) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findAnagrams(_ s: String, _ p: String) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findAnagrams(s: String, p: String): List<Int> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> findAnagrams(String s, String p) {\n    \n  }\n}",
    "golang": "func findAnagrams(s string, p string) []int {\n    \n}",
    "ruby": "# @param {String} s\n# @param {String} p\n# @return {Integer[]}\ndef find_anagrams(s, p)\n    \nend",
    "scala": "object Solution {\n    def findAnagrams(s: String, p: String): List[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_anagrams(s: String, p: String) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (find-anagrams s p)\n  (-> string? string? (listof exact-integer?))\n  )",
    "erlang": "-spec find_anagrams(S :: unicode:unicode_binary(), P :: unicode:unicode_binary()) -> [integer()].\nfind_anagrams(S, P) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_anagrams(s :: String.t, p :: String.t) :: [integer]\n  def find_anagrams(s, p) do\n    \n  end\nend"
  }
}
{
  "title": "Check If All 1's Are at Least Length K Places Away",
  "problem_id": "1548",
  "frontend_id": "1437",
  "difficulty": "Easy",
  "problem_slug": "check-if-all-1s-are-at-least-length-k-places-away",
  "topics": [
    "Array"
  ],
  "description": "Given an binary array nums and an integer k, return true if all 1's are at least k places away from each other, otherwise return false.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,0,0,0,1,0,0,1], k = 2\nOutput: true\nExplanation: Each of the 1s are at least 2 places away from each other.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/04/15/sample_1_1791.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,0,0,1,0,1], k = 2\nOutput: false\nExplanation: The second 1 and third 1 are only one apart from each other.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/04/15/sample_2_1791.png"
      ]
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "0 <= k <= nums.length",
    "nums[i] is 0 or 1"
  ],
  "follow_ups": [],
  "hints": [
    "Each time you find a number 1, check whether or not it is K or more places away from the next one. If it's not, return false."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool kLengthApart(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean kLengthApart(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def kLengthApart(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        ",
    "c": "bool kLengthApart(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public bool KLengthApart(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */\nvar kLengthApart = function(nums, k) {\n    \n};",
    "typescript": "function kLengthApart(nums: number[], k: number): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Boolean\n     */\n    function kLengthApart($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func kLengthApart(_ nums: [Int], _ k: Int) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun kLengthApart(nums: IntArray, k: Int): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool kLengthApart(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func kLengthApart(nums []int, k int) bool {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Boolean}\ndef k_length_apart(nums, k)\n    \nend",
    "scala": "object Solution {\n    def kLengthApart(nums: Array[Int], k: Int): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn k_length_apart(nums: Vec<i32>, k: i32) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (k-length-apart nums k)\n  (-> (listof exact-integer?) exact-integer? boolean?)\n  )",
    "erlang": "-spec k_length_apart(Nums :: [integer()], K :: integer()) -> boolean().\nk_length_apart(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec k_length_apart(nums :: [integer], k :: integer) :: boolean\n  def k_length_apart(nums, k) do\n    \n  end\nend"
  }
}
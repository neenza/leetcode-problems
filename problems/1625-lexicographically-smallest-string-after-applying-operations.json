{
  "title": "Lexicographically Smallest String After Applying Operations",
  "problem_id": "1747",
  "frontend_id": "1625",
  "difficulty": "Medium",
  "problem_slug": "lexicographically-smallest-string-after-applying-operations",
  "topics": [
    "String",
    "Depth-First Search",
    "Breadth-First Search",
    "Enumeration"
  ],
  "description": "You are given a string s of even length consisting of digits from 0 to 9, and two integers a and b.\nYou can apply either of the following two operations any number of times and in any order on s:\nReturn the lexicographically smallest string you can obtain by applying the above operations any number of times on s.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, \"0158\" is lexicographically smaller than \"0190\" because the first position they differ is at the third letter, and '5' comes before '9'.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"5525\", a = 9, b = 2\nOutput: \"2050\"\nExplanation: We can apply the following operations:\nStart:  \"5525\"\nRotate: \"2555\"\nAdd:    \"2454\"\nAdd:    \"2353\"\nRotate: \"5323\"\nAdd:    \"5222\"\nAdd:    \"5121\"\nRotate: \"2151\"\nAdd:    \"2050\"​​​​​\nThere is no way to obtain a string that is lexicographically smaller than \"2050\".",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"74\", a = 5, b = 1\nOutput: \"24\"\nExplanation: We can apply the following operations:\nStart:  \"74\"\nRotate: \"47\"\n​​​​​​​Add:    \"42\"\n​​​​​​​Rotate: \"24\"​​​​​​​​​​​​\nThere is no way to obtain a string that is lexicographically smaller than \"24\".",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"0011\", a = 4, b = 2\nOutput: \"0011\"\nExplanation: There are no sequence of operations that will give us a lexicographically smaller string than \"0011\".",
      "images": []
    }
  ],
  "constraints": [
    "2 <= s.length <= 100",
    "s.length is even.",
    "s consists of digits from 0 to 9 only.",
    "1 <= a <= 9",
    "1 <= b <= s.length - 1"
  ],
  "follow_ups": [],
  "hints": [
    "Since the length of s is even, the total number of possible sequences is at most 10 * 10 * s.length.",
    "You can generate all possible sequences and take their minimum.",
    "Keep track of already generated sequences so they are not processed again."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string findLexSmallestString(string s, int a, int b) {\n        \n    }\n};",
    "java": "class Solution {\n    public String findLexSmallestString(String s, int a, int b) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findLexSmallestString(self, s, a, b):\n        \"\"\"\n        :type s: str\n        :type a: int\n        :type b: int\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findLexSmallestString(self, s: str, a: int, b: int) -> str:\n        ",
    "c": "char* findLexSmallestString(char* s, int a, int b) {\n    \n}",
    "csharp": "public class Solution {\n    public string FindLexSmallestString(string s, int a, int b) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @param {number} a\n * @param {number} b\n * @return {string}\n */\nvar findLexSmallestString = function(s, a, b) {\n    \n};",
    "typescript": "function findLexSmallestString(s: string, a: number, b: number): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $a\n     * @param Integer $b\n     * @return String\n     */\n    function findLexSmallestString($s, $a, $b) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findLexSmallestString(_ s: String, _ a: Int, _ b: Int) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findLexSmallestString(s: String, a: Int, b: Int): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String findLexSmallestString(String s, int a, int b) {\n    \n  }\n}",
    "golang": "func findLexSmallestString(s string, a int, b int) string {\n    \n}",
    "ruby": "# @param {String} s\n# @param {Integer} a\n# @param {Integer} b\n# @return {String}\ndef find_lex_smallest_string(s, a, b)\n    \nend",
    "scala": "object Solution {\n    def findLexSmallestString(s: String, a: Int, b: Int): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_lex_smallest_string(s: String, a: i32, b: i32) -> String {\n        \n    }\n}",
    "racket": "(define/contract (find-lex-smallest-string s a b)\n  (-> string? exact-integer? exact-integer? string?)\n  )",
    "erlang": "-spec find_lex_smallest_string(S :: unicode:unicode_binary(), A :: integer(), B :: integer()) -> unicode:unicode_binary().\nfind_lex_smallest_string(S, A, B) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_lex_smallest_string(s :: String.t, a :: integer, b :: integer) :: String.t\n  def find_lex_smallest_string(s, a, b) do\n    \n  end\nend"
  }
}
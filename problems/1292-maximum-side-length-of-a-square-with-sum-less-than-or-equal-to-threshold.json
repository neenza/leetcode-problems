{
  "title": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
  "problem_id": "1413",
  "frontend_id": "1292",
  "difficulty": "Medium",
  "problem_slug": "maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold",
  "topics": [
    "Array",
    "Binary Search",
    "Matrix",
    "Prefix Sum"
  ],
  "description": "Given a m x n matrix mat and an integer threshold, return the maximum side-length of a square with a sum less than or equal to threshold or return 0 if there is no such square.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4\nOutput: 2\nExplanation: The maximum side length of square with sum less than 4 is 2 as shown.",
      "images": [
        "https://assets.leetcode.com/uploads/2019/12/05/e1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1\nOutput: 0",
      "images": [
        "https://assets.leetcode.com/uploads/2019/12/05/e1.png"
      ]
    }
  ],
  "constraints": [
    "m == mat.length",
    "n == mat[i].length",
    "1 <= m, n <= 300",
    "0 <= mat[i][j] <= 104",
    "0 <= threshold <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "Store prefix sum of all grids in another 2D array.",
    "Try all possible solutions and if you cannot find one return -1.",
    "If x is a valid answer then any y < x is also valid answer. Use binary search to find answer."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxSideLength(vector<vector<int>>& mat, int threshold) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxSideLength(int[][] mat, int threshold) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxSideLength(self, mat, threshold):\n        \"\"\"\n        :type mat: List[List[int]]\n        :type threshold: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxSideLength(self, mat: List[List[int]], threshold: int) -> int:\n        ",
    "c": "int maxSideLength(int** mat, int matSize, int* matColSize, int threshold) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxSideLength(int[][] mat, int threshold) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} mat\n * @param {number} threshold\n * @return {number}\n */\nvar maxSideLength = function(mat, threshold) {\n    \n};",
    "typescript": "function maxSideLength(mat: number[][], threshold: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $mat\n     * @param Integer $threshold\n     * @return Integer\n     */\n    function maxSideLength($mat, $threshold) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxSideLength(_ mat: [[Int]], _ threshold: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxSideLength(mat: Array<IntArray>, threshold: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxSideLength(List<List<int>> mat, int threshold) {\n    \n  }\n}",
    "golang": "func maxSideLength(mat [][]int, threshold int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} mat\n# @param {Integer} threshold\n# @return {Integer}\ndef max_side_length(mat, threshold)\n    \nend",
    "scala": "object Solution {\n    def maxSideLength(mat: Array[Array[Int]], threshold: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_side_length(mat: Vec<Vec<i32>>, threshold: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-side-length mat threshold)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec max_side_length(Mat :: [[integer()]], Threshold :: integer()) -> integer().\nmax_side_length(Mat, Threshold) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_side_length(mat :: [[integer]], threshold :: integer) :: integer\n  def max_side_length(mat, threshold) do\n    \n  end\nend"
  }
}
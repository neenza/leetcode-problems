{
  "title": "Number of Squareful Arrays",
  "problem_id": "1038",
  "frontend_id": "996",
  "difficulty": "Hard",
  "problem_slug": "number-of-squareful-arrays",
  "topics": [
    "Array",
    "Hash Table",
    "Math",
    "Dynamic Programming",
    "Backtracking",
    "Bit Manipulation",
    "Bitmask"
  ],
  "description": "An array is squareful if the sum of every pair of adjacent elements is a perfect square.\nGiven an integer array nums, return the number of permutations of nums that are squareful.\nTwo permutations perm1 and perm2 are different if there is some index i such that perm1[i] != perm2[i].\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,17,8]\nOutput: 2\nExplanation: [1,8,17] and [17,8,1] are the valid permutations.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [2,2,2]\nOutput: 1",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 12",
    "0 <= nums[i] <= 109"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int numSquarefulPerms(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int numSquarefulPerms(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numSquarefulPerms(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numSquarefulPerms(self, nums: List[int]) -> int:\n        ",
    "c": "int numSquarefulPerms(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int NumSquarefulPerms(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar numSquarefulPerms = function(nums) {\n    \n};",
    "typescript": "function numSquarefulPerms(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function numSquarefulPerms($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numSquarefulPerms(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numSquarefulPerms(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int numSquarefulPerms(List<int> nums) {\n    \n  }\n}",
    "golang": "func numSquarefulPerms(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef num_squareful_perms(nums)\n    \nend",
    "scala": "object Solution {\n    def numSquarefulPerms(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn num_squareful_perms(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (num-squareful-perms nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec num_squareful_perms(Nums :: [integer()]) -> integer().\nnum_squareful_perms(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec num_squareful_perms(nums :: [integer]) :: integer\n  def num_squareful_perms(nums) do\n    \n  end\nend"
  }
}
{
  "title": "Path Existence Queries in a Graph I",
  "problem_id": "3838",
  "frontend_id": "3532",
  "difficulty": "Medium",
  "problem_slug": "path-existence-queries-in-a-graph-i",
  "topics": [
    "Array",
    "Hash Table",
    "Binary Search",
    "Union Find",
    "Graph"
  ],
  "description": "You are given an integer n representing the number of nodes in a graph, labeled from 0 to n - 1.\nYou are also given an integer array nums of length n sorted in non-decreasing order, and an integer maxDiff.\nAn undirected edge exists between nodes i and j if the absolute difference between nums[i] and nums[j] is at most maxDiff (i.e., |nums[i] - nums[j]| <= maxDiff).\nYou are also given a 2D integer array queries. For each queries[i] = [ui, vi], determine whether there exists a path between nodes ui and vi.\nReturn a boolean array answer, where answer[i] is true if there exists a path between ui and vi in the ith query and false otherwise.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 2, nums = [1,3], maxDiff = 1, queries = [[0,0],[0,1]]\nOutput: [true,false]\nExplanation:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 4, nums = [2,5,6,8], maxDiff = 2, queries = [[0,1],[0,2],[1,3],[2,3]]\nOutput: [false,false,true,true]\nExplanation:\nThe resulting graph is:\n",
      "images": [
        "https://assets.leetcode.com/uploads/2025/03/25/screenshot-2025-03-26-at-122249.png"
      ]
    }
  ],
  "constraints": [
    "1 <= n == nums.length <= 105",
    "0 <= nums[i] <= 105",
    "nums is sorted in non-decreasing order.",
    "0 <= maxDiff <= 105",
    "1 <= queries.length <= 105",
    "queries[i] == [ui, vi]",
    "0 <= ui, vi < n"
  ],
  "follow_ups": [],
  "hints": [
    "How do the connected components look? Do they appear in segments (i.e., are they continuous)?",
    "Preprocess the connected components."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<bool> pathExistenceQueries(int n, vector<int>& nums, int maxDiff, vector<vector<int>>& queries) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean[] pathExistenceQueries(int n, int[] nums, int maxDiff, int[][] queries) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def pathExistenceQueries(self, n, nums, maxDiff, queries):\n        \"\"\"\n        :type n: int\n        :type nums: List[int]\n        :type maxDiff: int\n        :type queries: List[List[int]]\n        :rtype: List[bool]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def pathExistenceQueries(self, n: int, nums: List[int], maxDiff: int, queries: List[List[int]]) -> List[bool]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nbool* pathExistenceQueries(int n, int* nums, int numsSize, int maxDiff, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public bool[] PathExistenceQueries(int n, int[] nums, int maxDiff, int[][] queries) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number[]} nums\n * @param {number} maxDiff\n * @param {number[][]} queries\n * @return {boolean[]}\n */\nvar pathExistenceQueries = function(n, nums, maxDiff, queries) {\n    \n};",
    "typescript": "function pathExistenceQueries(n: number, nums: number[], maxDiff: number, queries: number[][]): boolean[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[] $nums\n     * @param Integer $maxDiff\n     * @param Integer[][] $queries\n     * @return Boolean[]\n     */\n    function pathExistenceQueries($n, $nums, $maxDiff, $queries) {\n        \n    }\n}",
    "swift": "class Solution {\n    func pathExistenceQueries(_ n: Int, _ nums: [Int], _ maxDiff: Int, _ queries: [[Int]]) -> [Bool] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun pathExistenceQueries(n: Int, nums: IntArray, maxDiff: Int, queries: Array<IntArray>): BooleanArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<bool> pathExistenceQueries(int n, List<int> nums, int maxDiff, List<List<int>> queries) {\n    \n  }\n}",
    "golang": "func pathExistenceQueries(n int, nums []int, maxDiff int, queries [][]int) []bool {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer[]} nums\n# @param {Integer} max_diff\n# @param {Integer[][]} queries\n# @return {Boolean[]}\ndef path_existence_queries(n, nums, max_diff, queries)\n    \nend",
    "scala": "object Solution {\n    def pathExistenceQueries(n: Int, nums: Array[Int], maxDiff: Int, queries: Array[Array[Int]]): Array[Boolean] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn path_existence_queries(n: i32, nums: Vec<i32>, max_diff: i32, queries: Vec<Vec<i32>>) -> Vec<bool> {\n        \n    }\n}",
    "racket": "(define/contract (path-existence-queries n nums maxDiff queries)\n  (-> exact-integer? (listof exact-integer?) exact-integer? (listof (listof exact-integer?)) (listof boolean?))\n  )",
    "erlang": "-spec path_existence_queries(N :: integer(), Nums :: [integer()], MaxDiff :: integer(), Queries :: [[integer()]]) -> [boolean()].\npath_existence_queries(N, Nums, MaxDiff, Queries) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec path_existence_queries(n :: integer, nums :: [integer], max_diff :: integer, queries :: [[integer]]) :: [boolean]\n  def path_existence_queries(n, nums, max_diff, queries) do\n    \n  end\nend"
  }
}
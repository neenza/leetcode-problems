{
  "title": "Count Good Triplets",
  "problem_id": "1656",
  "frontend_id": "1534",
  "difficulty": "Easy",
  "problem_slug": "count-good-triplets",
  "topics": [
    "Array",
    "Enumeration"
  ],
  "description": "Given an array of integers arr, and three integers a, b and c. You need to find the number of good triplets.\nA triplet (arr[i], arr[j], arr[k]) is good if the following conditions are true:\nWhere |x| denotes the absolute value of x.\nReturn the number of good triplets.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3\r\nOutput: 4\r\nExplanation: There are 4 good triplets: [(3,0,1), (3,0,1), (3,1,1), (0,1,1)].",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: arr = [1,1,2,2,3], a = 0, b = 0, c = 1\r\nOutput: 0\r\nExplanation: No triplet satisfies all conditions.",
      "images": []
    }
  ],
  "constraints": [
    "3 <= arr.length <= 100",
    "0 <= arr[i] <= 1000",
    "0 <= a, b, c <= 1000"
  ],
  "follow_ups": [],
  "hints": [
    "Notice that the constraints are small enough for a brute force solution to pass.",
    "Loop through all triplets, and count the ones that are good."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int countGoodTriplets(vector<int>& arr, int a, int b, int c) {\n        \n    }\n};",
    "java": "class Solution {\n    public int countGoodTriplets(int[] arr, int a, int b, int c) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countGoodTriplets(self, arr, a, b, c):\n        \"\"\"\n        :type arr: List[int]\n        :type a: int\n        :type b: int\n        :type c: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        ",
    "c": "\n\nint countGoodTriplets(int* arr, int arrSize, int a, int b, int c){\n\n}",
    "csharp": "public class Solution {\n    public int CountGoodTriplets(int[] arr, int a, int b, int c) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} arr\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @return {number}\n */\nvar countGoodTriplets = function(arr, a, b, c) {\n    \n};",
    "typescript": "function countGoodTriplets(arr: number[], a: number, b: number, c: number): number {\n\n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @param Integer $a\n     * @param Integer $b\n     * @param Integer $c\n     * @return Integer\n     */\n    function countGoodTriplets($arr, $a, $b, $c) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countGoodTriplets(_ arr: [Int], _ a: Int, _ b: Int, _ c: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countGoodTriplets(arr: IntArray, a: Int, b: Int, c: Int): Int {\n        \n    }\n}",
    "golang": "func countGoodTriplets(arr []int, a int, b int, c int) int {\n    \n}",
    "ruby": "# @param {Integer[]} arr\n# @param {Integer} a\n# @param {Integer} b\n# @param {Integer} c\n# @return {Integer}\ndef count_good_triplets(arr, a, b, c)\n    \nend",
    "scala": "object Solution {\n    def countGoodTriplets(arr: Array[Int], a: Int, b: Int, c: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_good_triplets(arr: Vec<i32>, a: i32, b: i32, c: i32) -> i32 {\n        \n    }\n}"
  },
  "solution": "[TOC]\n\n## Solution\n\n---\n\n### Approach 1: Enumeration\n\n#### Intuition\n\nUsing $O(n^3)$ loops to enumerate all $(i, j, k)$ in sequence, where $0 \\leq i < j < k < {\\rm arr.length}$, for each set of $(i, j, k)$, determine whether ${\\rm arr}[i]$, ${\\rm arr}[j]$, and ${\\rm arr}[k]$ satisfy the condition.\n\nFinally, calculate the total number of all triplets that meet the conditions.\n\n#### Implementation#### Complexity Analysis\n\nLet $n$ be the length of the array $\\textit{arr}$.\n\n* Time complexity: $O(n^3)$\n\nWe need a triple loop to judge whether all the triplets meet the conditions.\n\n* Space complexity: $O(1)$\n\nOnly a few additional variables are needed.\n\n### Approach 2: Optimized enumeration\n\n#### Intuition\n\nWe consider using the $O(n^2)$ enumeration of binary pairs $(j,k)$ satisfying $|\\rm arr[j]-\\rm arr[k]|\\le b$, and count how many $i$ satisfy the condition in this pair. Given the constraints on $i$ from the question, $|\\rm arr[i]-\\rm arr[j]|\\le a \\ \\&\\&\\ |\\rm arr[i]-\\rm arr[k]|\\le c$, we can expand the absolute values to obtain that the values that meet the conditions must be the intersection of the two intervals $[\\rm arr[j]-a,\\rm arr[j]+a]$ and $[\\rm arr[k]-c,\\rm arr[k]+c]$, which we denote as $[l,r]$. Therefore, when enumerating the binary tuple $(j,k)$, we only need to quickly count the number of $i$ that satisfy $i#### Complexity Analysis\n\nLet $n$ be the length of the array $\\textit{arr}$, $S$ is the upper limit of the array values, here it is $1000$.\n\n* Time complexity: $O(n^2+nS)$\n\nSince we have maintained a prefix sum array $\\rm sum$ of the frequency array $\\rm arr[i]$, for a pair $(j,k)$, we can get the answer in $O(1)$ as $\\rm sum[r]-\\rm sum[l-1]$. We only need a double loop to enumerate all the binary tuples.\n\n* Space complexity: $O(S)$\n\nWe need $O(S)$ space to maintain the prefix sum array of the frequency of $\\rm arr[i]$."
}
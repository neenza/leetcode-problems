{
  "title": "Restore The Array",
  "problem_id": "1517",
  "frontend_id": "1416",
  "difficulty": "Hard",
  "problem_slug": "restore-the-array",
  "topics": [
    "String",
    "Dynamic Programming"
  ],
  "description": "A program was supposed to print an array of integers. The program forgot to print whitespaces and the array is printed as a string of digits s and all we know is that all integers in the array were in the range [1, k] and there are no leading zeros in the array.\nGiven the string s and the integer k, return the number of the possible arrays that can be printed as s using the mentioned program. Since the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"1000\", k = 10000\nOutput: 1\nExplanation: The only possible array is [1000]",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"1000\", k = 10\nOutput: 0\nExplanation: There cannot be an array that was printed this way and has all integer >= 1 and <= 10.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"1317\", k = 2000\nOutput: 8\nExplanation: Possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 105",
    "s consists of only digits and does not contain leading zeros.",
    "1 <= k <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "Use dynamic programming. Build an array dp where dp[i] is the number of ways you can divide the string starting from index i to the end.",
    "Keep in mind that the answer is modulo 10^9 + 7 and take the mod for each operation."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int numberOfArrays(string s, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int numberOfArrays(String s, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numberOfArrays(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numberOfArrays(self, s: str, k: int) -> int:\n        ",
    "c": "int numberOfArrays(char* s, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int NumberOfArrays(string s, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar numberOfArrays = function(s, k) {\n    \n};",
    "typescript": "function numberOfArrays(s: string, k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function numberOfArrays($s, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numberOfArrays(_ s: String, _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numberOfArrays(s: String, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int numberOfArrays(String s, int k) {\n    \n  }\n}",
    "golang": "func numberOfArrays(s string, k int) int {\n    \n}",
    "ruby": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef number_of_arrays(s, k)\n    \nend",
    "scala": "object Solution {\n    def numberOfArrays(s: String, k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn number_of_arrays(s: String, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (number-of-arrays s k)\n  (-> string? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec number_of_arrays(S :: unicode:unicode_binary(), K :: integer()) -> integer().\nnumber_of_arrays(S, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec number_of_arrays(s :: String.t, k :: integer) :: integer\n  def number_of_arrays(s, k) do\n    \n  end\nend"
  }
}
{
  "title": "Add Strings",
  "problem_id": "415",
  "frontend_id": "415",
  "difficulty": "Easy",
  "problem_slug": "add-strings",
  "topics": [
    "Math",
    "String",
    "Simulation"
  ],
  "description": "Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.\nYou must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: num1 = \"11\", num2 = \"123\"\nOutput: \"134\"",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: num1 = \"456\", num2 = \"77\"\nOutput: \"533\"",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: num1 = \"0\", num2 = \"0\"\nOutput: \"0\"",
      "images": []
    }
  ],
  "constraints": [
    "1 <= num1.length, num2.length <= 104",
    "num1 and num2 consist of only digits.",
    "num1 and num2 don't have any leading zeros except for the zero itself."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string addStrings(string num1, string num2) {\n        \n    }\n};",
    "java": "class Solution {\n    public String addStrings(String num1, String num2) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def addStrings(self, num1: str, num2: str) -> str:\n        ",
    "c": "char* addStrings(char* num1, char* num2) {\n    \n}",
    "csharp": "public class Solution {\n    public string AddStrings(string num1, string num2) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} num1\n * @param {string} num2\n * @return {string}\n */\nvar addStrings = function(num1, num2) {\n    \n};",
    "typescript": "function addStrings(num1: string, num2: string): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $num1\n     * @param String $num2\n     * @return String\n     */\n    function addStrings($num1, $num2) {\n        \n    }\n}",
    "swift": "class Solution {\n    func addStrings(_ num1: String, _ num2: String) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun addStrings(num1: String, num2: String): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String addStrings(String num1, String num2) {\n    \n  }\n}",
    "golang": "func addStrings(num1 string, num2 string) string {\n    \n}",
    "ruby": "# @param {String} num1\n# @param {String} num2\n# @return {String}\ndef add_strings(num1, num2)\n    \nend",
    "scala": "object Solution {\n    def addStrings(num1: String, num2: String): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn add_strings(num1: String, num2: String) -> String {\n        \n    }\n}",
    "racket": "(define/contract (add-strings num1 num2)\n  (-> string? string? string?)\n  )",
    "erlang": "-spec add_strings(Num1 :: unicode:unicode_binary(), Num2 :: unicode:unicode_binary()) -> unicode:unicode_binary().\nadd_strings(Num1, Num2) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec add_strings(num1 :: String.t, num2 :: String.t) :: String.t\n  def add_strings(num1, num2) do\n    \n  end\nend"
  }
}
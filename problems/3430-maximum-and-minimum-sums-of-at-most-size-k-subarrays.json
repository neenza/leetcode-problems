{
  "title": "Maximum and Minimum Sums of at Most Size K Subarrays",
  "problem_id": "3725",
  "frontend_id": "3430",
  "difficulty": "Hard",
  "problem_slug": "maximum-and-minimum-sums-of-at-most-size-k-subarrays",
  "topics": [
    "Array",
    "Math",
    "Stack",
    "Monotonic Stack"
  ],
  "description": "You are given an integer array nums and a positive integer k. Return the sum of the maximum and minimum elements of all subarrays with at most k elements.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,3], k = 2\nOutput: 20\nExplanation:\nThe subarrays of nums with at most 2 elements are:\nThe output would be 20.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,-3,1], k = 2\nOutput: -6\nExplanation:\nThe subarrays of nums with at most 2 elements are:\nThe output would be -6.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 80000",
    "1 <= k <= nums.length",
    "-106 <= nums[i] <= 106"
  ],
  "follow_ups": [],
  "hints": [
    "Use a monotonic stack.",
    "How can we calculate the number of subarrays where an element is the largest?",
    "Enforce the condition on size too."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long minMaxSubarraySum(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public long minMaxSubarraySum(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minMaxSubarraySum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minMaxSubarraySum(self, nums: List[int], k: int) -> int:\n        ",
    "c": "long long minMaxSubarraySum(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public long MinMaxSubarraySum(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minMaxSubarraySum = function(nums, k) {\n    \n};",
    "typescript": "function minMaxSubarraySum(nums: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minMaxSubarraySum($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minMaxSubarraySum(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minMaxSubarraySum(nums: IntArray, k: Int): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int minMaxSubarraySum(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func minMaxSubarraySum(nums []int, k int) int64 {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef min_max_subarray_sum(nums, k)\n    \nend",
    "scala": "object Solution {\n    def minMaxSubarraySum(nums: Array[Int], k: Int): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_max_subarray_sum(nums: Vec<i32>, k: i32) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (min-max-subarray-sum nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec min_max_subarray_sum(Nums :: [integer()], K :: integer()) -> integer().\nmin_max_subarray_sum(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_max_subarray_sum(nums :: [integer], k :: integer) :: integer\n  def min_max_subarray_sum(nums, k) do\n    \n  end\nend"
  }
}
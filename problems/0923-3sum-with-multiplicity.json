{
  "title": "3Sum With Multiplicity",
  "problem_id": "959",
  "frontend_id": "923",
  "difficulty": "Medium",
  "problem_slug": "3sum-with-multiplicity",
  "topics": [
    "Array",
    "Hash Table",
    "Two Pointers",
    "Sorting",
    "Counting"
  ],
  "description": "Given an integer array arr, and an integer target, return the number of tuples i, j, k such that i < j < k and arr[i] + arr[j] + arr[k] == target.\nAs the answer can be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: arr = [1,1,2,2,3,3,4,4,5,5], target = 8\nOutput: 20\nExplanation: \nEnumerating by the values (arr[i], arr[j], arr[k]):\n(1, 2, 5) occurs 8 times;\n(1, 3, 4) occurs 8 times;\n(2, 2, 4) occurs 2 times;\n(2, 3, 3) occurs 2 times.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: arr = [1,1,2,2,2,2], target = 5\nOutput: 12\nExplanation: \narr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times:\nWe choose one 1 from [1,1] in 2 ways,\nand two 2s from [2,2,2,2] in 6 ways.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: arr = [2,1,3], target = 6\nOutput: 1\nExplanation: (1, 2, 3) occured one time in the array so we return 1.",
      "images": []
    }
  ],
  "constraints": [
    "3 <= arr.length <= 3000",
    "0 <= arr[i] <= 100",
    "0 <= target <= 300"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int threeSumMulti(vector<int>& arr, int target) {\n        \n    }\n};",
    "java": "class Solution {\n    public int threeSumMulti(int[] arr, int target) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def threeSumMulti(self, arr, target):\n        \"\"\"\n        :type arr: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def threeSumMulti(self, arr: List[int], target: int) -> int:\n        ",
    "c": "int threeSumMulti(int* arr, int arrSize, int target) {\n    \n}",
    "csharp": "public class Solution {\n    public int ThreeSumMulti(int[] arr, int target) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} arr\n * @param {number} target\n * @return {number}\n */\nvar threeSumMulti = function(arr, target) {\n    \n};",
    "typescript": "function threeSumMulti(arr: number[], target: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @param Integer $target\n     * @return Integer\n     */\n    function threeSumMulti($arr, $target) {\n        \n    }\n}",
    "swift": "class Solution {\n    func threeSumMulti(_ arr: [Int], _ target: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun threeSumMulti(arr: IntArray, target: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int threeSumMulti(List<int> arr, int target) {\n    \n  }\n}",
    "golang": "func threeSumMulti(arr []int, target int) int {\n    \n}",
    "ruby": "# @param {Integer[]} arr\n# @param {Integer} target\n# @return {Integer}\ndef three_sum_multi(arr, target)\n    \nend",
    "scala": "object Solution {\n    def threeSumMulti(arr: Array[Int], target: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn three_sum_multi(arr: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (three-sum-multi arr target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec three_sum_multi(Arr :: [integer()], Target :: integer()) -> integer().\nthree_sum_multi(Arr, Target) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec three_sum_multi(arr :: [integer], target :: integer) :: integer\n  def three_sum_multi(arr, target) do\n    \n  end\nend"
  }
}
{
  "title": "Method Chaining",
  "problem_id": "3063",
  "frontend_id": "2891",
  "difficulty": "Easy",
  "problem_slug": "method-chaining",
  "topics": [],
  "description": "Write a solution to list the names of animals that weigh strictly more than 100 kilograms.\nReturn the animals sorted by weight in descending order.\nThe result format is in the following example.\nExample 1:\nIn Pandas, method chaining enables us to perform operations on a DataFrame without breaking up each operation into a separate line or creating multiple temporary variables.\nCan you complete this task in just one line of code using method chaining?",
  "examples": [
    {
      "example_num": 1,
      "example_text": "DataFrame animals\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| name        | object |\n| species     | object |\n| age         | int    |\n| weight      | int    |\n+-------------+--------+",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: \nDataFrame animals:\n+----------+---------+-----+--------+\n| name     | species | age | weight |\n+----------+---------+-----+--------+\n| Tatiana  | Snake   | 98  | 464    |\n| Khaled   | Giraffe | 50  | 41     |\n| Alex     | Leopard | 6   | 328    |\n| Jonathan | Monkey  | 45  | 463    |\n| Stefan   | Bear    | 100 | 50     |\n| Tommy    | Panda   | 26  | 349    |\n+----------+---------+-----+--------+\nOutput: \n+----------+\n| name     |\n+----------+\n| Tatiana  |\n| Jonathan |\n| Tommy    |\n| Alex     |\n+----------+\nExplanation: \nAll animals weighing more than 100 should be included in the results table.\nTatiana's weight is 464, Jonathan's weight is 463, Tommy's weight is 349, and Alex's weight is 328.\nThe results should be sorted in descending order of weight.",
      "images": []
    }
  ],
  "constraints": [],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "pythondata": "import pandas as pd\n\ndef findHeavyAnimals(animals: pd.DataFrame) -> pd.DataFrame:\n    "
  },
  "solution": "[TOC]\n\n## Solution\n--- \n### Overview\nList the names of animals that weigh strictly more than 100 kilograms, sorted by weight in descending order.\n\n**Key Concepts:**\n\n1. **DataFrame Manipulation with pandas**:\n    - **DataFrame**: A two-dimensional, size-mutable, and heterogeneous tabular data structure from the pandas library. Allows for various operations like filtering, sorting, and column selection.\n    \n2. **Filtering Data**:\n    - **Boolean Indexing**: Using boolean conditions to filter rows from a DataFrame. In this problem, we use this technique to select animals that weigh more than 100 kilograms.\n\n3. **Sorting Data**:\n    - **sort_values() Method**: A pandas DataFrame method used to sort the data based on one or more columns. In this problem, we sort the animals by their weight in descending order.\n\n4. **Column Selection**:\n    - **Subset Selection**: After filtering and sorting, we select a subset of columns from the DataFrame. In this case, we choose only the 'name' column to produce the final list of animal names.\n\n5. **Method Chaining**:\n    - **Chaining Operations**: Performing multiple operations on a DataFrame in a single line by connecting methods with dots. This is a powerful feature in pandas, which can make code concise but might be complex to read for newcomers.\n\n6. **Python Functions**:\n    - **Function Definition**: We define a function `findHeavyAnimals` to encapsulate our solution and make it reusable. This function takes a DataFrame as an argument and returns another DataFrame as a result.\n### Intuition\n\nIn the following implementation guide we begin with the initial given DataFrame `animals`:namespeciesageweightTatianaSnake98464KhaledGiraffe5041AlexLeopard6328JonathanMonkey45463StefanBear10050TommyPanda26349**Method Chaining Explanation**:\n\n1. **Filtering Operation**:\n   We begin by filtering the animals that weigh more than 100 kilograms.\n   ```python\n   filtered_animals = animals[animals['weight'] > 100]\n   ```\n - `animals['weight'] > 100`: This is a boolean indexing operation. For each row in the DataFrame, it checks if the value in the `weight` column is greater than 100. This produces a boolean (`True` or `False`) series.\n - `animals[...]`: By placing our boolean series inside the DataFrame's indexing brackets, we filter out the rows where the condition is `True`.\n- After this operation, only rows with animals weighing more than 100 kilograms remain in our DataFrame.namespeciesageweightTatianaSnake98464AlexLeopard6328JonathanMonkey45463TommyPanda263492. **Sorting Operation**:\n   Next, we sort these animals based on their weight in descending order.\n   ```python\n   sorted_animals = filtered_animals.sort_values(by='weight', ascending=False)\n   ```\n - `sort_values()`: This is a method applied to DataFrames that allows for sorting based on column values.\n - `by='weight'`: We specify that we want to sort based on the `weight` column.\n - `ascending=False`: By setting this argument to `False`, we indicate that we want the sorting to be in descending order (from the heaviest to lightest).namespeciesageweightTatianaSnake98464JonathanMonkey45463TommyPanda26349AlexLeopard63283. **Selecting the `name` column**:\n   Finally, from the sorted DataFrame, we select only the names.\n   ```python\n   names = sorted_animals[['name']]\n   ```\n - After sorting the rows based on the weight, we're only interested in the `name` column for our final result. By using double square brackets `[['name']]`, we select only this column. The double brackets ensure that the result is a DataFrame and not a Series.nameTatianaJonathanTommyAlex**Visualization of Steps 1-3:**\n![fig](../Figures/3307/3307-1.png)\n\nThe below code approaches the problem without method chaining. \n```python\ndef findHeavyAnimals(animals: pd.DataFrame) -> pd.DataFrame:\n    filtered_animals = animals[animals['weight'] > 100]\n    sorted_animals = filtered_animals.sort_values(by='weight', ascending=False)\n    names = sorted_animals[['name']]\n    return names\n```\n\nMethod chaining is useful for creating concise code, but it's crucial to understand each step in the chain for debugging or further development.\n\n### Implementation"
}
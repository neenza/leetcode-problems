{
  "title": "Count Odd Numbers in an Interval Range",
  "problem_id": "1630",
  "frontend_id": "1523",
  "difficulty": "Easy",
  "problem_slug": "count-odd-numbers-in-an-interval-range",
  "topics": [
    "Math"
  ],
  "description": "Given two non-negative integers low and high. Return the count of odd numbers between low and high (inclusive).\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: low = 3, high = 7\r\nOutput: 3\r\nExplanation: The odd numbers between 3 and 7 are [3,5,7].",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: low = 8, high = 10\r\nOutput: 1\r\nExplanation: The odd numbers between 8 and 10 are [9].",
      "images": []
    }
  ],
  "constraints": [
    "0 <= low <= high <= 10^9"
  ],
  "follow_ups": [],
  "hints": [
    "If the range (high - low + 1) is even, the number of even and odd numbers in this range will be the same.",
    "If the range (high - low + 1) is odd, the solution will depend on the parity of high and low."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int countOdds(int low, int high) {\n        \n    }\n};",
    "java": "class Solution {\n    public int countOdds(int low, int high) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countOdds(self, low, high):\n        \"\"\"\n        :type low: int\n        :type high: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countOdds(self, low: int, high: int) -> int:\n        ",
    "c": "\n\nint countOdds(int low, int high){\n\n}",
    "csharp": "public class Solution {\n    public int CountOdds(int low, int high) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} low\n * @param {number} high\n * @return {number}\n */\nvar countOdds = function(low, high) {\n    \n};",
    "typescript": "function countOdds(low: number, high: number): number {\n\n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $low\n     * @param Integer $high\n     * @return Integer\n     */\n    function countOdds($low, $high) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countOdds(_ low: Int, _ high: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countOdds(low: Int, high: Int): Int {\n        \n    }\n}",
    "golang": "func countOdds(low int, high int) int {\n    \n}",
    "ruby": "# @param {Integer} low\n# @param {Integer} high\n# @return {Integer}\ndef count_odds(low, high)\n    \nend",
    "scala": "object Solution {\n    def countOdds(low: Int, high: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_odds(low: i32, high: i32) -> i32 {\n        \n    }\n}"
  }
}
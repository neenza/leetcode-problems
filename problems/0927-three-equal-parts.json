{
  "title": "Three Equal Parts",
  "problem_id": "963",
  "frontend_id": "927",
  "difficulty": "Hard",
  "problem_slug": "three-equal-parts",
  "topics": [
    "Array",
    "Math"
  ],
  "description": "You are given an array arr which consists of only zeros and ones, divide the array into three non-empty parts such that all of these parts represent the same binary value.\nIf it is possible, return any [i, j] with i + 1 < j, such that:\nIf it is not possible, return [-1, -1].\nNote that the entire part is used when considering what binary value it represents. For example, [1,1,0] represents 6 in decimal, not 3. Also, leading zeros are allowed, so [0,1,1] and [1,1] represent the same value.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: arr = [1,0,1,0,1]\nOutput: [0,3]",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: arr = [1,1,0,1,1]\nOutput: [-1,-1]",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: arr = [1,1,0,0,1]\nOutput: [0,2]",
      "images": []
    }
  ],
  "constraints": [
    "3 <= arr.length <= 3 * 104",
    "arr[i] is 0 or 1"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> threeEqualParts(vector<int>& arr) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] threeEqualParts(int[] arr) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def threeEqualParts(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def threeEqualParts(self, arr: List[int]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* threeEqualParts(int* arr, int arrSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] ThreeEqualParts(int[] arr) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} arr\n * @return {number[]}\n */\nvar threeEqualParts = function(arr) {\n    \n};",
    "typescript": "function threeEqualParts(arr: number[]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer[]\n     */\n    function threeEqualParts($arr) {\n        \n    }\n}",
    "swift": "class Solution {\n    func threeEqualParts(_ arr: [Int]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun threeEqualParts(arr: IntArray): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> threeEqualParts(List<int> arr) {\n    \n  }\n}",
    "golang": "func threeEqualParts(arr []int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} arr\n# @return {Integer[]}\ndef three_equal_parts(arr)\n    \nend",
    "scala": "object Solution {\n    def threeEqualParts(arr: Array[Int]): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn three_equal_parts(arr: Vec<i32>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (three-equal-parts arr)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )",
    "erlang": "-spec three_equal_parts(Arr :: [integer()]) -> [integer()].\nthree_equal_parts(Arr) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec three_equal_parts(arr :: [integer]) :: [integer]\n  def three_equal_parts(arr) do\n    \n  end\nend"
  }
}
{
  "title": "Minesweeper",
  "problem_id": "529",
  "frontend_id": "529",
  "difficulty": "Medium",
  "problem_slug": "minesweeper",
  "topics": [
    "Array",
    "Depth-First Search",
    "Breadth-First Search",
    "Matrix"
  ],
  "description": "Let's play the minesweeper game (Wikipedia, online game)!\nYou are given an m x n char matrix board representing the game board where:\nYou are also given an integer array click where click = [clickr, clickc] represents the next click position among all the unrevealed squares ('M' or 'E').\nReturn the board after revealing this position according to the following rules:\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: board = [[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"M\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"]], click = [3,0]\nOutput: [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]",
      "images": [
        "https://assets.leetcode.com/uploads/2023/08/09/untitled.jpeg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: board = [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]], click = [1,2]\nOutput: [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"X\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]",
      "images": [
        "https://assets.leetcode.com/uploads/2023/08/09/untitled-2.jpeg"
      ]
    }
  ],
  "constraints": [
    "m == board.length",
    "n == board[i].length",
    "1 <= m, n <= 50",
    "board[i][j] is either 'M', 'E', 'B', or a digit from '1' to '8'.",
    "click.length == 2",
    "0 <= clickr < m",
    "0 <= clickc < n",
    "board[clickr][clickc] is either 'M' or 'E'."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<vector<char>> updateBoard(vector<vector<char>>& board, vector<int>& click) {\n        \n    }\n};",
    "java": "class Solution {\n    public char[][] updateBoard(char[][] board, int[] click) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def updateBoard(self, board, click):\n        \"\"\"\n        :type board: List[List[str]]\n        :type click: List[int]\n        :rtype: List[List[str]]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def updateBoard(self, board: List[List[str]], click: List[int]) -> List[List[str]]:\n        ",
    "c": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar** updateBoard(char** board, int boardSize, int* boardColSize, int* click, int clickSize, int* returnSize, int** returnColumnSizes) {\n    \n}",
    "csharp": "public class Solution {\n    public char[][] UpdateBoard(char[][] board, int[] click) {\n        \n    }\n}",
    "javascript": "/**\n * @param {character[][]} board\n * @param {number[]} click\n * @return {character[][]}\n */\nvar updateBoard = function(board, click) {\n    \n};",
    "typescript": "function updateBoard(board: string[][], click: number[]): string[][] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @param Integer[] $click\n     * @return String[][]\n     */\n    function updateBoard($board, $click) {\n        \n    }\n}",
    "swift": "class Solution {\n    func updateBoard(_ board: [[Character]], _ click: [Int]) -> [[Character]] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun updateBoard(board: Array<CharArray>, click: IntArray): Array<CharArray> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<List<String>> updateBoard(List<List<String>> board, List<int> click) {\n    \n  }\n}",
    "golang": "func updateBoard(board [][]byte, click []int) [][]byte {\n    \n}",
    "ruby": "# @param {Character[][]} board\n# @param {Integer[]} click\n# @return {Character[][]}\ndef update_board(board, click)\n    \nend",
    "scala": "object Solution {\n    def updateBoard(board: Array[Array[Char]], click: Array[Int]): Array[Array[Char]] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn update_board(board: Vec<Vec<char>>, click: Vec<i32>) -> Vec<Vec<char>> {\n        \n    }\n}",
    "racket": "(define/contract (update-board board click)\n  (-> (listof (listof char?)) (listof exact-integer?) (listof (listof char?)))\n  )",
    "erlang": "-spec update_board(Board :: [[char()]], Click :: [integer()]) -> [[char()]].\nupdate_board(Board, Click) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec update_board(board :: [[char]], click :: [integer]) :: [[char]]\n  def update_board(board, click) do\n    \n  end\nend"
  }
}
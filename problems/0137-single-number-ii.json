{
  "title": "Single Number II",
  "problem_id": "137",
  "frontend_id": "137",
  "difficulty": "Medium",
  "problem_slug": "single-number-ii",
  "topics": [
    "Array",
    "Bit Manipulation"
  ],
  "description": "Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.\nYou must implement a solution with a linear runtime complexity and use only constant extra space.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [2,2,3,2]\nOutput: 3",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [0,1,0,1,0,1,99]\nOutput: 99",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 3 * 104",
    "-231 <= nums[i] <= 231 - 1",
    "Each element in nums appears exactly three times except for one element which appears once."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int singleNumber(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        ",
    "c": "int singleNumber(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int SingleNumber(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function(nums) {\n    \n};",
    "typescript": "function singleNumber(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function singleNumber($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func singleNumber(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun singleNumber(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int singleNumber(List<int> nums) {\n    \n  }\n}",
    "golang": "func singleNumber(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef single_number(nums)\n    \nend",
    "scala": "object Solution {\n    def singleNumber(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn single_number(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (single-number nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec single_number(Nums :: [integer()]) -> integer().\nsingle_number(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec single_number(nums :: [integer]) :: integer\n  def single_number(nums) do\n    \n  end\nend"
  }
}
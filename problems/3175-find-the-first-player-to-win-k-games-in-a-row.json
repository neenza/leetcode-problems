{
  "title": "Find The First Player to win K Games in a Row",
  "problem_id": "3413",
  "frontend_id": "3175",
  "difficulty": "Medium",
  "problem_slug": "find-the-first-player-to-win-k-games-in-a-row",
  "topics": [
    "Array",
    "Simulation"
  ],
  "description": "A competition consists of n players numbered from 0 to n - 1.\nYou are given an integer array skills of size n and a positive integer k, where skills[i] is the skill level of player i. All integers in skills are unique.\nAll players are standing in a queue in order from player 0 to player n - 1.\nThe competition process is as follows:\nThe winner of the competition is the first player who wins k games in a row.\nReturn the initial index of the winning player.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: skills = [4,2,6,3,9], k = 2\nOutput: 2\nExplanation:\nInitially, the queue of players is [0,1,2,3,4] . The following process happens:\nPlayer 2 won k = 2 games in a row, so the winner is player 2.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: skills = [2,5,4], k = 3\nOutput: 1\nExplanation:\nInitially, the queue of players is [0,1,2] . The following process happens:\nPlayer 1 won k = 3 games in a row, so the winner is player 1.",
      "images": []
    }
  ],
  "constraints": [
    "n == skills.length",
    "2 <= n <= 105",
    "1 <= k <= 109",
    "1 <= skills[i] <= 106",
    "All integers in skills are unique."
  ],
  "follow_ups": [],
  "hints": [
    "Suppose that <code>k â‰¥ n</code>, there is exactly one player who can win <code>k</code> games in a row. Who is it?",
    "In case <code>k < n</code>, you can simulate the competition process described."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int findWinningPlayer(vector<int>& skills, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int findWinningPlayer(int[] skills, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findWinningPlayer(self, skills, k):\n        \"\"\"\n        :type skills: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findWinningPlayer(self, skills: List[int], k: int) -> int:\n        ",
    "c": "int findWinningPlayer(int* skills, int skillsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int FindWinningPlayer(int[] skills, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} skills\n * @param {number} k\n * @return {number}\n */\nvar findWinningPlayer = function(skills, k) {\n    \n};",
    "typescript": "function findWinningPlayer(skills: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $skills\n     * @param Integer $k\n     * @return Integer\n     */\n    function findWinningPlayer($skills, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findWinningPlayer(_ skills: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findWinningPlayer(skills: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int findWinningPlayer(List<int> skills, int k) {\n    \n  }\n}",
    "golang": "func findWinningPlayer(skills []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} skills\n# @param {Integer} k\n# @return {Integer}\ndef find_winning_player(skills, k)\n    \nend",
    "scala": "object Solution {\n    def findWinningPlayer(skills: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_winning_player(skills: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (find-winning-player skills k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec find_winning_player(Skills :: [integer()], K :: integer()) -> integer().\nfind_winning_player(Skills, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_winning_player(skills :: [integer], k :: integer) :: integer\n  def find_winning_player(skills, k) do\n    \n  end\nend"
  }
}
{
  "title": "Design Task Manager",
  "problem_id": "3678",
  "frontend_id": "3408",
  "difficulty": "Medium",
  "problem_slug": "design-task-manager",
  "topics": [
    "Hash Table",
    "Design",
    "Heap (Priority Queue)",
    "Ordered Set"
  ],
  "description": "There is a task management system that allows users to manage their tasks, each associated with a priority. The system should efficiently handle adding, modifying, executing, and removing tasks.\nImplement the TaskManager class:\nNote that a user may be assigned multiple tasks.\nExample 1:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: [\"TaskManager\", \"add\", \"edit\", \"execTop\", \"rmv\", \"add\", \"execTop\"] [[[[1, 101, 10], [2, 102, 20], [3, 103, 15]]], [4, 104, 5], [102, 8], [], [101], [5, 105, 15], []]\nOutput: [null, null, null, 3, null, null, 5]\nExplanation",
      "images": []
    }
  ],
  "constraints": [
    "1 <= tasks.length <= 105",
    "0 <= userId <= 105",
    "0 <= taskId <= 105",
    "0 <= priority <= 109",
    "0 <= newPriority <= 109",
    "At most 2 * 105 calls will be made in total to add, edit, rmv, and execTop methods.",
    "The input is generated such that taskId will be valid."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class TaskManager {\npublic:\n    TaskManager(vector<vector<int>>& tasks) {\n        \n    }\n    \n    void add(int userId, int taskId, int priority) {\n        \n    }\n    \n    void edit(int taskId, int newPriority) {\n        \n    }\n    \n    void rmv(int taskId) {\n        \n    }\n    \n    int execTop() {\n        \n    }\n};\n\n/**\n * Your TaskManager object will be instantiated and called as such:\n * TaskManager* obj = new TaskManager(tasks);\n * obj->add(userId,taskId,priority);\n * obj->edit(taskId,newPriority);\n * obj->rmv(taskId);\n * int param_4 = obj->execTop();\n */",
    "java": "class TaskManager {\n\n    public TaskManager(List<List<Integer>> tasks) {\n        \n    }\n    \n    public void add(int userId, int taskId, int priority) {\n        \n    }\n    \n    public void edit(int taskId, int newPriority) {\n        \n    }\n    \n    public void rmv(int taskId) {\n        \n    }\n    \n    public int execTop() {\n        \n    }\n}\n\n/**\n * Your TaskManager object will be instantiated and called as such:\n * TaskManager obj = new TaskManager(tasks);\n * obj.add(userId,taskId,priority);\n * obj.edit(taskId,newPriority);\n * obj.rmv(taskId);\n * int param_4 = obj.execTop();\n */",
    "python": "class TaskManager(object):\n\n    def __init__(self, tasks):\n        \"\"\"\n        :type tasks: List[List[int]]\n        \"\"\"\n        \n\n    def add(self, userId, taskId, priority):\n        \"\"\"\n        :type userId: int\n        :type taskId: int\n        :type priority: int\n        :rtype: None\n        \"\"\"\n        \n\n    def edit(self, taskId, newPriority):\n        \"\"\"\n        :type taskId: int\n        :type newPriority: int\n        :rtype: None\n        \"\"\"\n        \n\n    def rmv(self, taskId):\n        \"\"\"\n        :type taskId: int\n        :rtype: None\n        \"\"\"\n        \n\n    def execTop(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your TaskManager object will be instantiated and called as such:\n# obj = TaskManager(tasks)\n# obj.add(userId,taskId,priority)\n# obj.edit(taskId,newPriority)\n# obj.rmv(taskId)\n# param_4 = obj.execTop()",
    "python3": "class TaskManager:\n\n    def __init__(self, tasks: List[List[int]]):\n        \n\n    def add(self, userId: int, taskId: int, priority: int) -> None:\n        \n\n    def edit(self, taskId: int, newPriority: int) -> None:\n        \n\n    def rmv(self, taskId: int) -> None:\n        \n\n    def execTop(self) -> int:\n        \n\n\n# Your TaskManager object will be instantiated and called as such:\n# obj = TaskManager(tasks)\n# obj.add(userId,taskId,priority)\n# obj.edit(taskId,newPriority)\n# obj.rmv(taskId)\n# param_4 = obj.execTop()",
    "c": "\n\n\ntypedef struct {\n    \n} TaskManager;\n\n\nTaskManager* taskManagerCreate(int** tasks, int tasksSize, int* tasksColSize) {\n    \n}\n\nvoid taskManagerAdd(TaskManager* obj, int userId, int taskId, int priority) {\n    \n}\n\nvoid taskManagerEdit(TaskManager* obj, int taskId, int newPriority) {\n    \n}\n\nvoid taskManagerRmv(TaskManager* obj, int taskId) {\n    \n}\n\nint taskManagerExecTop(TaskManager* obj) {\n    \n}\n\nvoid taskManagerFree(TaskManager* obj) {\n    \n}\n\n/**\n * Your TaskManager struct will be instantiated and called as such:\n * TaskManager* obj = taskManagerCreate(tasks, tasksSize, tasksColSize);\n * taskManagerAdd(obj, userId, taskId, priority);\n \n * taskManagerEdit(obj, taskId, newPriority);\n \n * taskManagerRmv(obj, taskId);\n \n * int param_4 = taskManagerExecTop(obj);\n \n * taskManagerFree(obj);\n*/",
    "csharp": "public class TaskManager {\n\n    public TaskManager(IList<IList<int>> tasks) {\n        \n    }\n    \n    public void Add(int userId, int taskId, int priority) {\n        \n    }\n    \n    public void Edit(int taskId, int newPriority) {\n        \n    }\n    \n    public void Rmv(int taskId) {\n        \n    }\n    \n    public int ExecTop() {\n        \n    }\n}\n\n/**\n * Your TaskManager object will be instantiated and called as such:\n * TaskManager obj = new TaskManager(tasks);\n * obj.Add(userId,taskId,priority);\n * obj.Edit(taskId,newPriority);\n * obj.Rmv(taskId);\n * int param_4 = obj.ExecTop();\n */",
    "javascript": "/**\n * @param {number[][]} tasks\n */\nvar TaskManager = function(tasks) {\n    \n};\n\n/** \n * @param {number} userId \n * @param {number} taskId \n * @param {number} priority\n * @return {void}\n */\nTaskManager.prototype.add = function(userId, taskId, priority) {\n    \n};\n\n/** \n * @param {number} taskId \n * @param {number} newPriority\n * @return {void}\n */\nTaskManager.prototype.edit = function(taskId, newPriority) {\n    \n};\n\n/** \n * @param {number} taskId\n * @return {void}\n */\nTaskManager.prototype.rmv = function(taskId) {\n    \n};\n\n/**\n * @return {number}\n */\nTaskManager.prototype.execTop = function() {\n    \n};\n\n/** \n * Your TaskManager object will be instantiated and called as such:\n * var obj = new TaskManager(tasks)\n * obj.add(userId,taskId,priority)\n * obj.edit(taskId,newPriority)\n * obj.rmv(taskId)\n * var param_4 = obj.execTop()\n */",
    "typescript": "class TaskManager {\n    constructor(tasks: number[][]) {\n        \n    }\n\n    add(userId: number, taskId: number, priority: number): void {\n        \n    }\n\n    edit(taskId: number, newPriority: number): void {\n        \n    }\n\n    rmv(taskId: number): void {\n        \n    }\n\n    execTop(): number {\n        \n    }\n}\n\n/**\n * Your TaskManager object will be instantiated and called as such:\n * var obj = new TaskManager(tasks)\n * obj.add(userId,taskId,priority)\n * obj.edit(taskId,newPriority)\n * obj.rmv(taskId)\n * var param_4 = obj.execTop()\n */",
    "php": "class TaskManager {\n    /**\n     * @param Integer[][] $tasks\n     */\n    function __construct($tasks) {\n        \n    }\n  \n    /**\n     * @param Integer $userId\n     * @param Integer $taskId\n     * @param Integer $priority\n     * @return NULL\n     */\n    function add($userId, $taskId, $priority) {\n        \n    }\n  \n    /**\n     * @param Integer $taskId\n     * @param Integer $newPriority\n     * @return NULL\n     */\n    function edit($taskId, $newPriority) {\n        \n    }\n  \n    /**\n     * @param Integer $taskId\n     * @return NULL\n     */\n    function rmv($taskId) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function execTop() {\n        \n    }\n}\n\n/**\n * Your TaskManager object will be instantiated and called as such:\n * $obj = TaskManager($tasks);\n * $obj->add($userId, $taskId, $priority);\n * $obj->edit($taskId, $newPriority);\n * $obj->rmv($taskId);\n * $ret_4 = $obj->execTop();\n */",
    "swift": "\nclass TaskManager {\n\n    init(_ tasks: [[Int]]) {\n        \n    }\n    \n    func add(_ userId: Int, _ taskId: Int, _ priority: Int) {\n        \n    }\n    \n    func edit(_ taskId: Int, _ newPriority: Int) {\n        \n    }\n    \n    func rmv(_ taskId: Int) {\n        \n    }\n    \n    func execTop() -> Int {\n        \n    }\n}\n\n/**\n * Your TaskManager object will be instantiated and called as such:\n * let obj = TaskManager(tasks)\n * obj.add(userId, taskId, priority)\n * obj.edit(taskId, newPriority)\n * obj.rmv(taskId)\n * let ret_4: Int = obj.execTop()\n */",
    "kotlin": "class TaskManager(tasks: List<List<Int>>) {\n\n    fun add(userId: Int, taskId: Int, priority: Int) {\n        \n    }\n\n    fun edit(taskId: Int, newPriority: Int) {\n        \n    }\n\n    fun rmv(taskId: Int) {\n        \n    }\n\n    fun execTop(): Int {\n        \n    }\n\n}\n\n/**\n * Your TaskManager object will be instantiated and called as such:\n * var obj = TaskManager(tasks)\n * obj.add(userId,taskId,priority)\n * obj.edit(taskId,newPriority)\n * obj.rmv(taskId)\n * var param_4 = obj.execTop()\n */",
    "dart": "class TaskManager {\n\n  TaskManager(List<List<int>> tasks) {\n    \n  }\n  \n  void add(int userId, int taskId, int priority) {\n    \n  }\n  \n  void edit(int taskId, int newPriority) {\n    \n  }\n  \n  void rmv(int taskId) {\n    \n  }\n  \n  int execTop() {\n    \n  }\n}\n\n/**\n * Your TaskManager object will be instantiated and called as such:\n * TaskManager obj = TaskManager(tasks);\n * obj.add(userId,taskId,priority);\n * obj.edit(taskId,newPriority);\n * obj.rmv(taskId);\n * int param4 = obj.execTop();\n */",
    "golang": "type TaskManager struct {\n    \n}\n\n\nfunc Constructor(tasks [][]int) TaskManager {\n    \n}\n\n\nfunc (this *TaskManager) Add(userId int, taskId int, priority int)  {\n    \n}\n\n\nfunc (this *TaskManager) Edit(taskId int, newPriority int)  {\n    \n}\n\n\nfunc (this *TaskManager) Rmv(taskId int)  {\n    \n}\n\n\nfunc (this *TaskManager) ExecTop() int {\n    \n}\n\n\n/**\n * Your TaskManager object will be instantiated and called as such:\n * obj := Constructor(tasks);\n * obj.Add(userId,taskId,priority);\n * obj.Edit(taskId,newPriority);\n * obj.Rmv(taskId);\n * param_4 := obj.ExecTop();\n */",
    "ruby": "class TaskManager\n\n=begin\n    :type tasks: Integer[][]\n=end\n    def initialize(tasks)\n        \n    end\n\n\n=begin\n    :type user_id: Integer\n    :type task_id: Integer\n    :type priority: Integer\n    :rtype: Void\n=end\n    def add(user_id, task_id, priority)\n        \n    end\n\n\n=begin\n    :type task_id: Integer\n    :type new_priority: Integer\n    :rtype: Void\n=end\n    def edit(task_id, new_priority)\n        \n    end\n\n\n=begin\n    :type task_id: Integer\n    :rtype: Void\n=end\n    def rmv(task_id)\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def exec_top()\n        \n    end\n\n\nend\n\n# Your TaskManager object will be instantiated and called as such:\n# obj = TaskManager.new(tasks)\n# obj.add(user_id, task_id, priority)\n# obj.edit(task_id, new_priority)\n# obj.rmv(task_id)\n# param_4 = obj.exec_top()",
    "scala": "class TaskManager(_tasks: List[List[Int]]) {\n\n    def add(userId: Int, taskId: Int, priority: Int): Unit = {\n        \n    }\n\n    def edit(taskId: Int, newPriority: Int): Unit = {\n        \n    }\n\n    def rmv(taskId: Int): Unit = {\n        \n    }\n\n    def execTop(): Int = {\n        \n    }\n\n}\n\n/**\n * Your TaskManager object will be instantiated and called as such:\n * val obj = new TaskManager(tasks)\n * obj.add(userId,taskId,priority)\n * obj.edit(taskId,newPriority)\n * obj.rmv(taskId)\n * val param_4 = obj.execTop()\n */",
    "rust": "struct TaskManager {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl TaskManager {\n\n    fn new(tasks: Vec<Vec<i32>>) -> Self {\n        \n    }\n    \n    fn add(&self, user_id: i32, task_id: i32, priority: i32) {\n        \n    }\n    \n    fn edit(&self, task_id: i32, new_priority: i32) {\n        \n    }\n    \n    fn rmv(&self, task_id: i32) {\n        \n    }\n    \n    fn exec_top(&self) -> i32 {\n        \n    }\n}\n\n/**\n * Your TaskManager object will be instantiated and called as such:\n * let obj = TaskManager::new(tasks);\n * obj.add(userId, taskId, priority);\n * obj.edit(taskId, newPriority);\n * obj.rmv(taskId);\n * let ret_4: i32 = obj.exec_top();\n */",
    "racket": "(define task-manager%\n  (class object%\n    (super-new)\n    \n    ; tasks : (listof (listof exact-integer?))\n    (init-field\n      tasks)\n    \n    ; add : exact-integer? exact-integer? exact-integer? -> void?\n    (define/public (add user-id task-id priority)\n      )\n    ; edit : exact-integer? exact-integer? -> void?\n    (define/public (edit task-id new-priority)\n      )\n    ; rmv : exact-integer? -> void?\n    (define/public (rmv task-id)\n      )\n    ; exec-top : -> exact-integer?\n    (define/public (exec-top)\n      )))\n\n;; Your task-manager% object will be instantiated and called as such:\n;; (define obj (new task-manager% [tasks tasks]))\n;; (send obj add user-id task-id priority)\n;; (send obj edit task-id new-priority)\n;; (send obj rmv task-id)\n;; (define param_4 (send obj exec-top))",
    "erlang": "-spec task_manager_init_(Tasks :: [[integer()]]) -> any().\ntask_manager_init_(Tasks) ->\n  .\n\n-spec task_manager_add(UserId :: integer(), TaskId :: integer(), Priority :: integer()) -> any().\ntask_manager_add(UserId, TaskId, Priority) ->\n  .\n\n-spec task_manager_edit(TaskId :: integer(), NewPriority :: integer()) -> any().\ntask_manager_edit(TaskId, NewPriority) ->\n  .\n\n-spec task_manager_rmv(TaskId :: integer()) -> any().\ntask_manager_rmv(TaskId) ->\n  .\n\n-spec task_manager_exec_top() -> integer().\ntask_manager_exec_top() ->\n  .\n\n\n%% Your functions will be called as such:\n%% task_manager_init_(Tasks),\n%% task_manager_add(UserId, TaskId, Priority),\n%% task_manager_edit(TaskId, NewPriority),\n%% task_manager_rmv(TaskId),\n%% Param_4 = task_manager_exec_top(),\n\n%% task_manager_init_ will be called before every test case, in which you can do some necessary initializations.",
    "elixir": "defmodule TaskManager do\n  @spec init_(tasks :: [[integer]]) :: any\n  def init_(tasks) do\n    \n  end\n\n  @spec add(user_id :: integer, task_id :: integer, priority :: integer) :: any\n  def add(user_id, task_id, priority) do\n    \n  end\n\n  @spec edit(task_id :: integer, new_priority :: integer) :: any\n  def edit(task_id, new_priority) do\n    \n  end\n\n  @spec rmv(task_id :: integer) :: any\n  def rmv(task_id) do\n    \n  end\n\n  @spec exec_top() :: integer\n  def exec_top() do\n    \n  end\nend\n\n# Your functions will be called as such:\n# TaskManager.init_(tasks)\n# TaskManager.add(user_id, task_id, priority)\n# TaskManager.edit(task_id, new_priority)\n# TaskManager.rmv(task_id)\n# param_4 = TaskManager.exec_top()\n\n# TaskManager.init_ will be called before every test case, in which you can do some necessary initializations."
  }
}
{
  "title": "Subsequences with a Unique Middle Mode I",
  "problem_id": "3700",
  "frontend_id": "3395",
  "difficulty": "Hard",
  "problem_slug": "subsequences-with-a-unique-middle-mode-i",
  "topics": [
    "Array",
    "Hash Table",
    "Math",
    "Combinatorics"
  ],
  "description": "Given an integer array nums, find the number of subsequences of size 5 ofÂ nums with a unique middle mode.\nSince the answer may be very large, return it modulo 109 + 7.\nA mode of a sequence of numbers is defined as the element that appears the maximum number of times in the sequence.\nA sequence of numbers contains a unique mode if it has only one mode.\nA sequence of numbers seq of size 5 contains a unique middle mode if the middle element (seq[2]) is a unique mode.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,1,1,1,1,1]\nOutput: 6\nExplanation:\n[1, 1, 1, 1, 1] is the only subsequence of size 5 that can be formed, and it has a unique middle mode of 1. This subsequence can be formed in 6 different ways, so the output is 6.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,2,2,3,3,4]\nOutput: 4\nExplanation:\n[1, 2, 2, 3, 4] and [1, 2, 3, 3, 4] each have a unique middle mode because the number at index 2 has the greatest frequency in the subsequence. [1, 2, 2, 3, 3] does not have a unique middle mode because 2 and 3 appear twice.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [0,1,2,3,4,5,6,7,8]\nOutput: 0\nExplanation:\nThere is no subsequence of length 5 with a unique middle mode.",
      "images": []
    }
  ],
  "constraints": [
    "5 <= nums.length <= 1000",
    "-109 <= nums[i] <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "For each index, find the number of subsequences for which it is the unique middle mode. What combinations of values can the two numbers on the left and the right take?",
    "For example, we can have exactly 1 element on the left equal to the middle and all other elements differ. What other combinations are acceptable?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int subsequencesWithMiddleMode(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int subsequencesWithMiddleMode(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def subsequencesWithMiddleMode(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def subsequencesWithMiddleMode(self, nums: List[int]) -> int:\n        ",
    "c": "int subsequencesWithMiddleMode(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int SubsequencesWithMiddleMode(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar subsequencesWithMiddleMode = function(nums) {\n    \n};",
    "typescript": "function subsequencesWithMiddleMode(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function subsequencesWithMiddleMode($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func subsequencesWithMiddleMode(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun subsequencesWithMiddleMode(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int subsequencesWithMiddleMode(List<int> nums) {\n    \n  }\n}",
    "golang": "func subsequencesWithMiddleMode(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef subsequences_with_middle_mode(nums)\n    \nend",
    "scala": "object Solution {\n    def subsequencesWithMiddleMode(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn subsequences_with_middle_mode(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (subsequences-with-middle-mode nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec subsequences_with_middle_mode(Nums :: [integer()]) -> integer().\nsubsequences_with_middle_mode(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec subsequences_with_middle_mode(nums :: [integer]) :: integer\n  def subsequences_with_middle_mode(nums) do\n    \n  end\nend"
  }
}
{
  "title": "Trionic Array II",
  "problem_id": "3956",
  "frontend_id": "3640",
  "difficulty": "Hard",
  "problem_slug": "trionic-array-ii",
  "topics": [],
  "description": "You are given an integer array nums of length n.\nA trionic subarray is a contiguous subarray nums[l...r] (with 0 <= l < r < n) for which there exist indices l < p < q < r such that:\nReturn the maximum sum of any trionic subarray in nums.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [0,-2,-1,-3,0,2,-1]\nOutput: -4\nExplanation:\nPick l = 1 , p = 2 , q = 3 , r = 5 :",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,4,2,7]\nOutput: 14\nExplanation:\nPick l = 0 , p = 1 , q = 2 , r = 3 :",
      "images": []
    }
  ],
  "constraints": [
    "4 <= n = nums.length <= 105",
    "-109 <= nums[i] <= 109",
    "It is guaranteed that at least one trionic subarray exists."
  ],
  "follow_ups": [],
  "hints": [
    "Use dynamic programming",
    "Let four arrays <code>dp0...dp3</code> where <code>dpk[i]</code> is the max sum of a subarray ending at <code>i</code> after finishing <code>k</code> of the four phases (start -> inc -> dec -> inc)",
    "Process each <code>i>0</code>",
    "If <code>nums[i]>nums[i‑1]</code>, set <code>dp1[i]=max(dp1[i‑1]+nums[i], dp0[i‑1]+nums[i])</code>, <code>dp3[i]=max(dp3[i‑1]+nums[i], dp2[i‑1]+nums[i])</code>",
    "If <code>nums[i]<nums[i‑1]</code>, set <code>dp2[i]=max(dp2[i‑1]+nums[i], dp1[i‑1]+nums[i])</code>",
    "Always carry over <code>dp0[i]=dp0[i‑1]+nums[i]</code> when <code>nums[i]>nums[i‑1]</code>",
    "Return the maximum value in <code>dp3</code>"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long maxSumTrionic(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public long maxSumTrionic(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxSumTrionic(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxSumTrionic(self, nums: List[int]) -> int:\n        ",
    "c": "long long maxSumTrionic(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public long MaxSumTrionic(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSumTrionic = function(nums) {\n    \n};",
    "typescript": "function maxSumTrionic(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxSumTrionic($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxSumTrionic(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxSumTrionic(nums: IntArray): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxSumTrionic(List<int> nums) {\n    \n  }\n}",
    "golang": "func maxSumTrionic(nums []int) int64 {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_sum_trionic(nums)\n    \nend",
    "scala": "object Solution {\n    def maxSumTrionic(nums: Array[Int]): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_sum_trionic(nums: Vec<i32>) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (max-sum-trionic nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec max_sum_trionic(Nums :: [integer()]) -> integer().\nmax_sum_trionic(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_sum_trionic(nums :: [integer]) :: integer\n  def max_sum_trionic(nums) do\n    \n  end\nend"
  }
}
{
  "title": "Jewels and Stones",
  "problem_id": "782",
  "frontend_id": "771",
  "difficulty": "Easy",
  "problem_slug": "jewels-and-stones",
  "topics": [
    "Hash Table",
    "String"
  ],
  "description": "You're given strings jewels representing the types of stones that are jewels, and stones representing the stones you have. Each character in stones is a type of stone you have. You want to know how many of the stones you have are also jewels.\nLetters are case sensitive, so \"a\" is considered a different type of stone from \"A\".\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: jewels = \"aA\", stones = \"aAAbbbb\"\nOutput: 3",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: jewels = \"z\", stones = \"ZZ\"\nOutput: 0",
      "images": []
    }
  ],
  "constraints": [
    "1 <= jewels.length, stones.length <= 50",
    "jewels and stones consist of only English letters.",
    "All the characters of jewels are unique."
  ],
  "follow_ups": [],
  "hints": [
    "For each stone, check if it is a jewel."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int numJewelsInStones(string jewels, string stones) {\n        \n    }\n};",
    "java": "class Solution {\n    public int numJewelsInStones(String jewels, String stones) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numJewelsInStones(self, jewels, stones):\n        \"\"\"\n        :type jewels: str\n        :type stones: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numJewelsInStones(self, jewels: str, stones: str) -> int:\n        ",
    "c": "int numJewelsInStones(char* jewels, char* stones) {\n    \n}",
    "csharp": "public class Solution {\n    public int NumJewelsInStones(string jewels, string stones) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} jewels\n * @param {string} stones\n * @return {number}\n */\nvar numJewelsInStones = function(jewels, stones) {\n    \n};",
    "typescript": "function numJewelsInStones(jewels: string, stones: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $jewels\n     * @param String $stones\n     * @return Integer\n     */\n    function numJewelsInStones($jewels, $stones) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numJewelsInStones(_ jewels: String, _ stones: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numJewelsInStones(jewels: String, stones: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int numJewelsInStones(String jewels, String stones) {\n    \n  }\n}",
    "golang": "func numJewelsInStones(jewels string, stones string) int {\n    \n}",
    "ruby": "# @param {String} jewels\n# @param {String} stones\n# @return {Integer}\ndef num_jewels_in_stones(jewels, stones)\n    \nend",
    "scala": "object Solution {\n    def numJewelsInStones(jewels: String, stones: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn num_jewels_in_stones(jewels: String, stones: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (num-jewels-in-stones jewels stones)\n  (-> string? string? exact-integer?)\n  )",
    "erlang": "-spec num_jewels_in_stones(Jewels :: unicode:unicode_binary(), Stones :: unicode:unicode_binary()) -> integer().\nnum_jewels_in_stones(Jewels, Stones) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec num_jewels_in_stones(jewels :: String.t, stones :: String.t) :: integer\n  def num_jewels_in_stones(jewels, stones) do\n    \n  end\nend"
  }
}
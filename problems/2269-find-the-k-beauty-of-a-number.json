{
  "title": "Find the K-Beauty of a Number",
  "problem_id": "1430",
  "frontend_id": "2269",
  "difficulty": "Easy",
  "problem_slug": "find-the-k-beauty-of-a-number",
  "topics": [
    "Math",
    "String",
    "Sliding Window"
  ],
  "description": "The k-beauty of an integer num is defined as the number of substrings of num when it is read as a string that meet the following conditions:\nGiven integers num and k, return the k-beauty of num.\nNote:\nA substring is a contiguous sequence of characters in a string.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: num = 240, k = 2\nOutput: 2\nExplanation: The following are the substrings of num of length k:\n- \"24\" from \"240\": 24 is a divisor of 240.\n- \"40\" from \"240\": 40 is a divisor of 240.\nTherefore, the k-beauty is 2.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: num = 430043, k = 2\nOutput: 2\nExplanation: The following are the substrings of num of length k:\n- \"43\" from \"430043\": 43 is a divisor of 430043.\n- \"30\" from \"430043\": 30 is not a divisor of 430043.\n- \"00\" from \"430043\": 0 is not a divisor of 430043.\n- \"04\" from \"430043\": 4 is not a divisor of 430043.\n- \"43\" from \"430043\": 43 is a divisor of 430043.\nTherefore, the k-beauty is 2.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= num <= 109",
    "1 <= k <= num.length (taking num as a string)"
  ],
  "follow_ups": [],
  "hints": [
    "We should check all the substrings of num with a length of k and see if it is a divisor of num.",
    "We can more easily obtain the substrings by converting num into a string and converting back to an integer to check for divisibility."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int divisorSubstrings(int num, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int divisorSubstrings(int num, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def divisorSubstrings(self, num, k):\n        \"\"\"\n        :type num: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def divisorSubstrings(self, num: int, k: int) -> int:\n        ",
    "c": "int divisorSubstrings(int num, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int DivisorSubstrings(int num, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} num\n * @param {number} k\n * @return {number}\n */\nvar divisorSubstrings = function(num, k) {\n    \n};",
    "typescript": "function divisorSubstrings(num: number, k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @param Integer $k\n     * @return Integer\n     */\n    function divisorSubstrings($num, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func divisorSubstrings(_ num: Int, _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun divisorSubstrings(num: Int, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int divisorSubstrings(int num, int k) {\n    \n  }\n}",
    "golang": "func divisorSubstrings(num int, k int) int {\n    \n}",
    "ruby": "# @param {Integer} num\n# @param {Integer} k\n# @return {Integer}\ndef divisor_substrings(num, k)\n    \nend",
    "scala": "object Solution {\n    def divisorSubstrings(num: Int, k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn divisor_substrings(num: i32, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (divisor-substrings num k)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec divisor_substrings(Num :: integer(), K :: integer()) -> integer().\ndivisor_substrings(Num, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec divisor_substrings(num :: integer, k :: integer) :: integer\n  def divisor_substrings(num, k) do\n    \n  end\nend"
  }
}
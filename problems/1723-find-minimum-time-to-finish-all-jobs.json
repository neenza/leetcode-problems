{
  "title": "Find Minimum Time to Finish All Jobs",
  "problem_id": "1825",
  "frontend_id": "1723",
  "difficulty": "Hard",
  "problem_slug": "find-minimum-time-to-finish-all-jobs",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Backtracking",
    "Bit Manipulation",
    "Bitmask"
  ],
  "description": "You are given an integer array jobs, where jobs[i] is the amount of time it takes to complete the ith job.\nThere are k workers that you can assign jobs to. Each job should be assigned to exactly one worker. The working time of a worker is the sum of the time it takes to complete all jobs assigned to them. Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.\nReturn the minimum possible maximum working time of any assignment.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: jobs = [3,2,3], k = 3\nOutput: 3\nExplanation: By assigning each person one job, the maximum time is 3.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: jobs = [1,2,4,7,8], k = 2\nOutput: 11\nExplanation: Assign the jobs the following way:\nWorker 1: 1, 2, 8 (working time = 1 + 2 + 8 = 11)\nWorker 2: 4, 7 (working time = 4 + 7 = 11)\nThe maximum working time is 11.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= k <= jobs.length <= 12",
    "1 <= jobs[i] <= 107"
  ],
  "follow_ups": [],
  "hints": [
    "We can select a subset of tasks and assign it to a worker then solve the subproblem on the remaining tasks"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimumTimeRequired(vector<int>& jobs, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimumTimeRequired(int[] jobs, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumTimeRequired(self, jobs, k):\n        \"\"\"\n        :type jobs: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumTimeRequired(self, jobs: List[int], k: int) -> int:\n        ",
    "c": "int minimumTimeRequired(int* jobs, int jobsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimumTimeRequired(int[] jobs, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} jobs\n * @param {number} k\n * @return {number}\n */\nvar minimumTimeRequired = function(jobs, k) {\n    \n};",
    "typescript": "function minimumTimeRequired(jobs: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $jobs\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumTimeRequired($jobs, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumTimeRequired(_ jobs: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumTimeRequired(jobs: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumTimeRequired(List<int> jobs, int k) {\n    \n  }\n}",
    "golang": "func minimumTimeRequired(jobs []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} jobs\n# @param {Integer} k\n# @return {Integer}\ndef minimum_time_required(jobs, k)\n    \nend",
    "scala": "object Solution {\n    def minimumTimeRequired(jobs: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_time_required(jobs: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-time-required jobs k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec minimum_time_required(Jobs :: [integer()], K :: integer()) -> integer().\nminimum_time_required(Jobs, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_time_required(jobs :: [integer], k :: integer) :: integer\n  def minimum_time_required(jobs, k) do\n    \n  end\nend"
  }
}
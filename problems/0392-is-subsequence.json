{
  "title": "Is Subsequence",
  "problem_id": "392",
  "frontend_id": "392",
  "difficulty": "Easy",
  "problem_slug": "is-subsequence",
  "topics": [
    "Two Pointers",
    "String",
    "Dynamic Programming"
  ],
  "description": "Given two strings s and t, return true if s is a subsequence of t, or false otherwise.\nA subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"abc\", t = \"ahbgdc\"\nOutput: true",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"axc\", t = \"ahbgdc\"\nOutput: false",
      "images": []
    }
  ],
  "constraints": [
    "0 <= s.length <= 100",
    "0 <= t.length <= 104",
    "s and t consist only of lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool isSubsequence(string s, string t) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean isSubsequence(String s, String t) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        ",
    "c": "bool isSubsequence(char* s, char* t) {\n    \n}",
    "csharp": "public class Solution {\n    public bool IsSubsequence(string s, string t) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @param {string} t\n * @return {boolean}\n */\nvar isSubsequence = function(s, t) {\n    \n};",
    "typescript": "function isSubsequence(s: string, t: string): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return Boolean\n     */\n    function isSubsequence($s, $t) {\n        \n    }\n}",
    "swift": "class Solution {\n    func isSubsequence(_ s: String, _ t: String) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun isSubsequence(s: String, t: String): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool isSubsequence(String s, String t) {\n    \n  }\n}",
    "golang": "func isSubsequence(s string, t string) bool {\n    \n}",
    "ruby": "# @param {String} s\n# @param {String} t\n# @return {Boolean}\ndef is_subsequence(s, t)\n    \nend",
    "scala": "object Solution {\n    def isSubsequence(s: String, t: String): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn is_subsequence(s: String, t: String) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (is-subsequence s t)\n  (-> string? string? boolean?)\n  )",
    "erlang": "-spec is_subsequence(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> boolean().\nis_subsequence(S, T) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec is_subsequence(s :: String.t, t :: String.t) :: boolean\n  def is_subsequence(s, t) do\n    \n  end\nend"
  }
}
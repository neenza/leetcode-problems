{
  "title": "Beautiful Towers I",
  "problem_id": "3114",
  "frontend_id": "2865",
  "difficulty": "Medium",
  "problem_slug": "beautiful-towers-i",
  "topics": [
    "Array",
    "Stack",
    "Monotonic Stack"
  ],
  "description": "You are given an array heights of n integers representing the number of bricks in n consecutive towers. Your task is to remove some bricks to form a mountain-shaped tower arrangement. In this arrangement, the tower heights are non-decreasing, reaching a maximum peak value with one or multiple consecutive towers and then non-increasing.\nReturn the maximum possible sum of heights of a mountain-shaped tower arrangement.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: heights = [5,3,4,1,1]\nOutput: 13\nExplanation:\nWe remove some bricks to make heights = [5,3,3,1,1] , the peak is at index 0.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: heights = [6,5,3,9,2,7]\nOutput: 22\nExplanation:\nWe remove some bricks to make heights = [3,3,3,9,2,2] , the peak is at index 3.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: heights = [3,2,5,5,2,3]\nOutput: 18\nExplanation:\nWe remove some bricks to make heights = [2,2,5,5,2,2] , the peak is at index 2 or 3.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n == heights.length <= 103",
    "1 <= heights[i] <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "Try all the possible indices <code>i</code> as the peak.",
    "If <code>i</code> is the peak, <code>i-1<sup>th</sup></code> element, and <code>heights[j] = min(heights[j], heights[j + 1])</code> for <code>0 <= j < i </code>",
    "If <code>i</code> is the peak, start from <code>i+1<sup>th</sup></code> element, heights[j] = min(heights[j], heights[j - 1]) for <code>i < j < heights.size()</code>"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long maximumSumOfHeights(vector<int>& heights) {\n        \n    }\n};",
    "java": "class Solution {\n    public long maximumSumOfHeights(int[] heights) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maximumSumOfHeights(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maximumSumOfHeights(self, heights: List[int]) -> int:\n        ",
    "c": "long long maximumSumOfHeights(int* heights, int heightsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public long MaximumSumOfHeights(int[] heights) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} heights\n * @return {number}\n */\nvar maximumSumOfHeights = function(heights) {\n    \n};",
    "typescript": "function maximumSumOfHeights(heights: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $heights\n     * @return Integer\n     */\n    function maximumSumOfHeights($heights) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maximumSumOfHeights(_ heights: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maximumSumOfHeights(heights: IntArray): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int maximumSumOfHeights(List<int> heights) {\n    \n  }\n}",
    "golang": "func maximumSumOfHeights(heights []int) int64 {\n    \n}",
    "ruby": "# @param {Integer[]} heights\n# @return {Integer}\ndef maximum_sum_of_heights(heights)\n    \nend",
    "scala": "object Solution {\n    def maximumSumOfHeights(heights: Array[Int]): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn maximum_sum_of_heights(heights: Vec<i32>) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (maximum-sum-of-heights heights)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec maximum_sum_of_heights(Heights :: [integer()]) -> integer().\nmaximum_sum_of_heights(Heights) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec maximum_sum_of_heights(heights :: [integer]) :: integer\n  def maximum_sum_of_heights(heights) do\n    \n  end\nend"
  }
}
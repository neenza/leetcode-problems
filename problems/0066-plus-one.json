{
  "title": "Plus One",
  "problem_id": "66",
  "frontend_id": "66",
  "difficulty": "Easy",
  "problem_slug": "plus-one",
  "topics": [
    "Array",
    "Math"
  ],
  "description": "You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.\nIncrement the large integer by one and return the resulting array of digits.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: digits = [1,2,3]\nOutput: [1,2,4]\nExplanation: The array represents the integer 123.\nIncrementing by one gives 123 + 1 = 124.\nThus, the result should be [1,2,4].",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: digits = [4,3,2,1]\nOutput: [4,3,2,2]\nExplanation: The array represents the integer 4321.\nIncrementing by one gives 4321 + 1 = 4322.\nThus, the result should be [4,3,2,2].",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: digits = [9]\nOutput: [1,0]\nExplanation: The array represents the integer 9.\nIncrementing by one gives 9 + 1 = 10.\nThus, the result should be [1,0].",
      "images": []
    }
  ],
  "constraints": [
    "1 <= digits.length <= 100",
    "0 <= digits[i] <= 9",
    "digits does not contain any leading 0's."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] plusOne(int[] digits) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def plusOne(self, digits: List[int]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* plusOne(int* digits, int digitsSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] PlusOne(int[] digits) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} digits\n * @return {number[]}\n */\nvar plusOne = function(digits) {\n    \n};",
    "typescript": "function plusOne(digits: number[]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $digits\n     * @return Integer[]\n     */\n    function plusOne($digits) {\n        \n    }\n}",
    "swift": "class Solution {\n    func plusOne(_ digits: [Int]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun plusOne(digits: IntArray): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> plusOne(List<int> digits) {\n    \n  }\n}",
    "golang": "func plusOne(digits []int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} digits\n# @return {Integer[]}\ndef plus_one(digits)\n    \nend",
    "scala": "object Solution {\n    def plusOne(digits: Array[Int]): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn plus_one(digits: Vec<i32>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (plus-one digits)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )",
    "erlang": "-spec plus_one(Digits :: [integer()]) -> [integer()].\nplus_one(Digits) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec plus_one(digits :: [integer]) :: [integer]\n  def plus_one(digits) do\n    \n  end\nend"
  }
}
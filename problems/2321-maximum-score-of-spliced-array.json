{
  "title": "Maximum Score Of Spliced Array",
  "problem_id": "1348",
  "frontend_id": "2321",
  "difficulty": "Hard",
  "problem_slug": "maximum-score-of-spliced-array",
  "topics": [
    "Array",
    "Dynamic Programming"
  ],
  "description": "You are given two 0-indexed integer arrays nums1 and nums2, both of length n.\nYou can choose two integers left and right where 0 <= left <= right < n and swap the subarray nums1[left...right] with the subarray nums2[left...right].\nYou may choose to apply the mentioned operation once or not do anything.\nThe score of the arrays is the maximum of sum(nums1) and sum(nums2), where sum(arr) is the sum of all the elements in the array arr.\nReturn the maximum possible score.\nA subarray is a contiguous sequence of elements within an array. arr[left...right] denotes the subarray that contains the elements of nums between indices left and right (inclusive).\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums1 = [60,60,60], nums2 = [10,90,10]\nOutput: 210\nExplanation: Choosing left = 1 and right = 1, we have nums1 = [60,90,60] and nums2 = [10,60,10].\nThe score is max(sum(nums1), sum(nums2)) = max(210, 80) = 210.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums1 = [20,40,20,70,30], nums2 = [50,20,50,40,20]\nOutput: 220\nExplanation: Choosing left = 3, right = 4, we have nums1 = [20,40,20,40,20] and nums2 = [50,20,50,70,30].\nThe score is max(sum(nums1), sum(nums2)) = max(140, 220) = 220.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums1 = [7,11,13], nums2 = [1,1,1]\nOutput: 31\nExplanation: We choose not to swap any subarray.\nThe score is max(sum(nums1), sum(nums2)) = max(31, 3) = 31.",
      "images": []
    }
  ],
  "constraints": [
    "n == nums1.length == nums2.length",
    "1 <= n <= 105",
    "1 <= nums1[i], nums2[i] <= 104"
  ],
  "follow_ups": [],
  "hints": [
    "Think on Dynamic Programming.",
    "First assume you will be taking the array a and choose some subarray from b",
    "Suppose the DP is DP(pos, state). pos is the current position you are in. state is one of {0,1,2}, where 0 means taking the array a, 1 means we are taking the subarray b, and 2 means we are again taking the array a. We need to handle the transitions carefully."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maximumsSplicedArray(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maximumsSplicedArray(int[] nums1, int[] nums2) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maximumsSplicedArray(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maximumsSplicedArray(self, nums1: List[int], nums2: List[int]) -> int:\n        ",
    "c": "int maximumsSplicedArray(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaximumsSplicedArray(int[] nums1, int[] nums2) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar maximumsSplicedArray = function(nums1, nums2) {\n    \n};",
    "typescript": "function maximumsSplicedArray(nums1: number[], nums2: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function maximumsSplicedArray($nums1, $nums2) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maximumsSplicedArray(_ nums1: [Int], _ nums2: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maximumsSplicedArray(nums1: IntArray, nums2: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maximumsSplicedArray(List<int> nums1, List<int> nums2) {\n    \n  }\n}",
    "golang": "func maximumsSplicedArray(nums1 []int, nums2 []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef maximums_spliced_array(nums1, nums2)\n    \nend",
    "scala": "object Solution {\n    def maximumsSplicedArray(nums1: Array[Int], nums2: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn maximums_spliced_array(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (maximums-spliced-array nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec maximums_spliced_array(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\nmaximums_spliced_array(Nums1, Nums2) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec maximums_spliced_array(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def maximums_spliced_array(nums1, nums2) do\n    \n  end\nend"
  }
}
{
  "title": "Percentage of Users Attended a Contest",
  "problem_id": "1773",
  "frontend_id": "1633",
  "difficulty": "Easy",
  "problem_slug": "percentage-of-users-attended-a-contest",
  "topics": [
    "Database"
  ],
  "description": "Table: Users\nTable: Register\nWrite a solution to find the percentage of the users registered in each contest rounded to two decimals.\nReturn the result table ordered by percentage in descending order. In case of a tie, order it by contest_id in ascending order.\nThe result format is in the following example.\nExample 1:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| user_id     | int     |\n| user_name   | varchar |\n+-------------+---------+\nuser_id is the primary key (column with unique values) for this table.\nEach row of this table contains the name and the id of a user.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| contest_id  | int     |\n| user_id     | int     |\n+-------------+---------+\n(contest_id, user_id) is the primary key (combination of columns with unique values) for this table.\nEach row of this table contains the id of a user and the contest they registered into.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: \nUsers table:\n+---------+-----------+\n| user_id | user_name |\n+---------+-----------+\n| 6       | Alice     |\n| 2       | Bob       |\n| 7       | Alex      |\n+---------+-----------+\nRegister table:\n+------------+---------+\n| contest_id | user_id |\n+------------+---------+\n| 215        | 6       |\n| 209        | 2       |\n| 208        | 2       |\n| 210        | 6       |\n| 208        | 6       |\n| 209        | 7       |\n| 209        | 6       |\n| 215        | 7       |\n| 208        | 7       |\n| 210        | 2       |\n| 207        | 2       |\n| 210        | 7       |\n+------------+---------+\nOutput: \n+------------+------------+\n| contest_id | percentage |\n+------------+------------+\n| 208        | 100.0      |\n| 209        | 100.0      |\n| 210        | 100.0      |\n| 215        | 66.67      |\n| 207        | 33.33      |\n+------------+------------+\nExplanation: \nAll the users registered in contests 208, 209, and 210. The percentage is 100% and we sort them in the answer table by contest_id in ascending order.\nAlice and Alex registered in contest 215 and the percentage is ((2/3) * 100) = 66.67%\nBob registered in contest 207 and the percentage is ((1/3) * 100) = 33.33%",
      "images": []
    }
  ],
  "constraints": [],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "mysql": "# Write your MySQL query statement below\n",
    "mssql": "/* Write your T-SQL query statement below */\n",
    "oraclesql": "/* Write your PL/SQL query statement below */\n",
    "pythondata": "import pandas as pd\n\ndef users_percentage(users: pd.DataFrame, register: pd.DataFrame) -> pd.DataFrame:\n    ",
    "postgresql": "-- Write your PostgreSQL query statement below\n"
  },
  "solution": "[TOC]\n\n# Solution\n\n---\n\n## pandas\n\n### Approach: Calculating User Participation Percentage Without Merging DataFrames\n\nThe pandas solution for calculating the percentage of users who registered for each contest is distinguished by its efficiency and simplicity, as it avoids the need to merge DataFrames. This method involves grouping, unique count aggregation, and percentage calculation directly on the relevant DataFrame. By counting the unique users registered for each contest and calculating these counts as a percentage of the total number of users, the process ensures an accurate representation of user participation across contests. The percentages are then formatted to two decimal places for clarity. This streamlined approach not only simplifies the analysis but also enhances performance by eliminating unnecessary DataFrame merging. The data is sorted by participation percentage and, in case of a tie, by `contest_id`, providing a clear and efficient overview of user engagement with each contest.\n\n**Visualization of Approach:**\n\n![fig](../Figures/1633/1633-1.gif)\n\n#### Intuition\n\nLet's review the intuition behind each step given the following input DataFrames:\n\nUsers DataFrame (`users`):\n\n| user_id | user_name |\n| ------- | --------- |\n| 6       | Alice     |\n| 2       | Bob       |\n| 7       | Alex      |Register DataFrame (`register`):\n\n| contest_id | user_id |\n| ---------- | ------- |\n| 215        | 6       |\n| 209        | 2       |\n| 208        | 2       |\n| 210        | 6       |\n| 208        | 6       |\n| 209        | 7       |1. **Calculating the Total Number of Unique Users**\n\n- Determine the unique count of `user_id` in the `users` DataFrame to understand the total user base.\n- This will be used later to calculate percentage of users in each contest.\n\n```python\ntotal_users = users[\"user_id\"].nunique()\n```\n\n`total_users = 3`\n\n2. **Grouping and Counting Unique Users per Contest**\n\n- Group the `register` DataFrame by `contest_id` and count unique `user_id` instances to find out how many unique users registered for each contest.\n  \n```python\nregister_grouped = (\n    register.groupby(\"contest_id\")[\"user_id\"]\n    .nunique()\n    .reset_index(name=\"count_unique_users\")\n)\n```\n\n`register_grouped`:\n\n| contest_id | count_unique_users |\n|------------|--------------------|\n| 207        | 1                  |\n| 208        | 3                  |\n| 209        | 3                  |\n| 210        | 3                  |\n| 215        | 2                  |3. **Calculating the Percentage**\n\n- Divide the count of unique users per contest by the total number of users to get the participation percentage, then multiply by 100 to convert it into a percentage format.\n\n```python\nregister_grouped[\"percentage\"] = (\n    register_grouped[\"count_unique_users\"] / total_users\n) * 100\n```\n\n`register_grouped`:\n\n| contest_id | count_unique_users | percentage |\n|------------|--------------------|------------|\n| 207        | 1                  | 33.333333  |\n| 208        | 3                  | 100.000000 |\n| 209        | 3                  | 100.000000 |\n| 210        | 3                  | 100.000000 |\n| 215        | 2                  | 66.666667  |4. **Round Results**\n\n- Round the percentage to two decimal places, as requested in the problem statement.\n\n```python\nregister_grouped[\"percentage\"] = register_grouped[\"percentage\"].round(2)\n```\n\n`register_grouped`:\n\n| contest_id | count_unique_users | percentage |\n|------------|--------------------|------------|\n| 207        | 1                  | 33.33      |\n| 208        | 3                  | 100.00     |\n| 209        | 3                  | 100.00     |\n| 210        | 3                  | 100.00     |\n| 215        | 2                  | 66.67      |5. **Sort Results**\n\n- Sort the results by `percentage` in descending order and `contest_id` in ascending order for cases where percentages are equal.\n  \n```python\nregister_grouped = register_grouped.sort_values(\n    by=[\"percentage\", \"contest_id\"], ascending=[False, True]\n)\n```\n\n`final_df`:\n\n| contest_id | count_unique_users | percentage |\n|------------|--------------------|------------|\n| 208        | 3                  | 100.00     |\n| 209        | 3                  | 100.00     |\n| 210        | 3                  | 100.00     |\n| 215        | 2                  | 66.67      |\n| 207        | 1                  | 33.33      |6. **Select Final Columns**\n\n- Select only the `contest_id` and `percentage` columns.\n\n```python\nfinal_df = register_grouped[[\"contest_id\", \"percentage\"]]\n```\n\n`final_df`:\n\n| contest_id | percentage |\n| ---------- | ---------- |\n| 208        | 100        |\n| 209        | 100        |\n| 210        | 100        |\n| 215        | 66.67      |\n| 207        | 33.33      |#### Implementation---\n\n## Database\n\n### Approach: Percentage Calculation with Aggregation\n\nThe SQL solution involves a direct approach to calculate the percentage of users registered for each contest. Using a combination of `GROUP BY`, aggregate functions, and a subquery, the solution computes the count of distinct users per contest, divides this by the total count of users to get a percentage, and rounds the result to two decimal places. The output is then ordered by percentage in descending order and, for identical percentages, by `contest_id` in ascending order.\n\n#### Intuition\n\nLet's break down the SQL query step by step and explain the intuition behind each part:\n\n1. **Aggregate and Count Unique Users per Contest**\n\n- Use the `GROUP BY` clause on `contest_id` to aggregate registrations and count distinct `user_id` for each contest.\n\n```sql\nSELECT \n  contest_id, \n  COUNT(DISTINCT user_id) AS unique_users\nFROM \n  Register\nGROUP BY \n  contest_id\n```\n\n2. **Calculate the Total Number of Users**\n\n- A subquery within the `SELECT` statement calculates the total number of users by counting entries in the `Users` table.\n\n```sql\n(SELECT COUNT(user_id) FROM Users)\n```\n\n3. **Percentage Calculation**\n\n- The count of distinct users per contest is then divided by the total user count, multiplied by 100, and rounded to two decimal places to derive the percentage.\n\n```sql\nROUND(\n  COUNT(DISTINCT user_id) * 100.0 / (SELECT COUNT(user_id) FROM Users), \n  2\n) AS percentage\n```\n\n4. **Ordering the Results**\n\n- The final step involves ordering the results by `percentage` in a descending manner and by `contest_id` in ascending order for equal percentages.\n\n```sql\nORDER BY \n  percentage DESC, \n  contest_id ASC;\n```\n\n#### Implementation\n\n\n```mysql []\nSELECT \n  contest_id, -- The ID of the contest\n  ROUND(\n    COUNT(DISTINCT user_id) * 100 / ( -- Calculate the percentage of users\n      SELECT \n        COUNT(user_id) -- Total number of unique users\n      FROM \n        Users\n    ), \n    2\n  ) AS percentage -- The percentage of users registered for each contest, rounded to 2 decimal places\nFROM \n  Register -- The table containing registration information\nGROUP BY \n  contest_id -- Group the data by contest ID\nORDER BY \n  percentage DESC, -- Order the results by percentage in descending order\n  contest_id; -- Then order by contest ID for ties\n\n```"
}
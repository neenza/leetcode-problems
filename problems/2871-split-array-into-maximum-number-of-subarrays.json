{
  "title": "Split Array Into Maximum Number of Subarrays",
  "problem_id": "3080",
  "frontend_id": "2871",
  "difficulty": "Medium",
  "problem_slug": "split-array-into-maximum-number-of-subarrays",
  "topics": [
    "Array",
    "Greedy",
    "Bit Manipulation"
  ],
  "description": "You are given an array nums consisting of non-negative integers.\nWe define the score of subarray nums[l..r] such that l <= r as nums[l] AND nums[l + 1] AND ... AND nums[r] where AND is the bitwise AND operation.\nConsider splitting the array into one or more subarrays such that the following conditions are satisfied:\nReturn the maximum number of subarrays in a split that satisfies the conditions above.\nA subarray is a contiguous part of an array.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,0,2,0,1,2]\nOutput: 3\nExplanation: We can split the array into the following subarrays:\n- [1,0]. The score of this subarray is 1 AND 0 = 0.\n- [2,0]. The score of this subarray is 2 AND 0 = 0.\n- [1,2]. The score of this subarray is 1 AND 2 = 0.\nThe sum of scores is 0 + 0 + 0 = 0, which is the minimum possible score that we can obtain.\nIt can be shown that we cannot split the array into more than 3 subarrays with a total score of 0. So we return 3.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [5,7,1,3]\nOutput: 1\nExplanation: We can split the array into one subarray: [5,7,1,3] with a score of 1, which is the minimum possible score that we can obtain.\nIt can be shown that we cannot split the array into more than 1 subarray with a total score of 1. So we return 1.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "0 <= nums[i] <= 106"
  ],
  "follow_ups": [],
  "hints": [
    "The minimum score will always be the bitwise <code>AND</code> of all elements of the array.",
    "If the minimum score is not equal to <code>0</code>, the only possible split will be to keep all elements in one subarray.",
    "Otherwise, all of the subarrays should have a score of <code>0</code>, we can greedily split the array while trying to make each subarray as small as possible."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxSubarrays(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxSubarrays(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxSubarrays(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxSubarrays(self, nums: List[int]) -> int:\n        ",
    "c": "int maxSubarrays(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxSubarrays(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSubarrays = function(nums) {\n    \n};",
    "typescript": "function maxSubarrays(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxSubarrays($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxSubarrays(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxSubarrays(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxSubarrays(List<int> nums) {\n    \n  }\n}",
    "golang": "func maxSubarrays(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_subarrays(nums)\n    \nend",
    "scala": "object Solution {\n    def maxSubarrays(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_subarrays(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-subarrays nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec max_subarrays(Nums :: [integer()]) -> integer().\nmax_subarrays(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_subarrays(nums :: [integer]) :: integer\n  def max_subarrays(nums) do\n    \n  end\nend"
  }
}
{
  "title": "Base 7",
  "problem_id": "504",
  "frontend_id": "504",
  "difficulty": "Easy",
  "problem_slug": "base-7",
  "topics": [
    "Math",
    "String"
  ],
  "description": "Given an integer num, return a string of its base 7 representation.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: num = 100\nOutput: \"202\"",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: num = -7\nOutput: \"-10\"",
      "images": []
    }
  ],
  "constraints": [
    "-107 <= num <= 107"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string convertToBase7(int num) {\n        \n    }\n};",
    "java": "class Solution {\n    public String convertToBase7(int num) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def convertToBase7(self, num: int) -> str:\n        ",
    "c": "char* convertToBase7(int num) {\n    \n}",
    "csharp": "public class Solution {\n    public string ConvertToBase7(int num) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} num\n * @return {string}\n */\nvar convertToBase7 = function(num) {\n    \n};",
    "typescript": "function convertToBase7(num: number): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return String\n     */\n    function convertToBase7($num) {\n        \n    }\n}",
    "swift": "class Solution {\n    func convertToBase7(_ num: Int) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun convertToBase7(num: Int): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String convertToBase7(int num) {\n    \n  }\n}",
    "golang": "func convertToBase7(num int) string {\n    \n}",
    "ruby": "# @param {Integer} num\n# @return {String}\ndef convert_to_base7(num)\n    \nend",
    "scala": "object Solution {\n    def convertToBase7(num: Int): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn convert_to_base7(num: i32) -> String {\n        \n    }\n}",
    "racket": "(define/contract (convert-to-base7 num)\n  (-> exact-integer? string?)\n  )",
    "erlang": "-spec convert_to_base7(Num :: integer()) -> unicode:unicode_binary().\nconvert_to_base7(Num) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec convert_to_base7(num :: integer) :: String.t\n  def convert_to_base7(num) do\n    \n  end\nend"
  }
}
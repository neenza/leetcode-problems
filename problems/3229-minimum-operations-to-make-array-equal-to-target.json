{
  "title": "Minimum Operations to Make Array Equal to Target",
  "problem_id": "3454",
  "frontend_id": "3229",
  "difficulty": "Hard",
  "problem_slug": "minimum-operations-to-make-array-equal-to-target",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Stack",
    "Greedy",
    "Monotonic Stack"
  ],
  "description": "You are given two positive integer arrays nums and target, of the same length.\nIn a single operation, you can select any subarray of nums and increment each element within that subarray by 1 or decrement each element within that subarray by 1.\nReturn the minimum number of operations required to make nums equal to the array target.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [3,5,1,2], target = [4,6,2,4]\nOutput: 2\nExplanation:\nWe will perform the following operations to make nums equal to target : - Increment nums[0..3] by 1, nums = [4,6,2,3] . - Increment nums[3..3] by 1, nums = [4,6,2,4] .",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,3,2], target = [2,1,4]\nOutput: 5\nExplanation:\nWe will perform the following operations to make nums equal to target : - Increment nums[0..0] by 1, nums = [2,3,2] . - Decrement nums[1..1] by 1, nums = [2,2,2] . - Decrement nums[1..1] by 1, nums = [2,1,2] . - Increment nums[2..2] by 1, nums = [2,1,3] . - Increment nums[2..2] by 1, nums = [2,1,4] .",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length == target.length <= 105",
    "1 <= nums[i], target[i] <= 108"
  ],
  "follow_ups": [],
  "hints": [
    "Change <code>nums'[i] = nums[i] - target[i]</code>, so our goal is to make <code>nums'</code> into all 0s.",
    "Divide and conquer."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        \n    }\n};",
    "java": "class Solution {\n    public long minimumOperations(int[] nums, int[] target) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumOperations(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumOperations(self, nums: List[int], target: List[int]) -> int:\n        ",
    "c": "long long minimumOperations(int* nums, int numsSize, int* target, int targetSize) {\n    \n}",
    "csharp": "public class Solution {\n    public long MinimumOperations(int[] nums, int[] target) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number[]} target\n * @return {number}\n */\nvar minimumOperations = function(nums, target) {\n    \n};",
    "typescript": "function minimumOperations(nums: number[], target: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $target\n     * @return Integer\n     */\n    function minimumOperations($nums, $target) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumOperations(_ nums: [Int], _ target: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumOperations(nums: IntArray, target: IntArray): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumOperations(List<int> nums, List<int> target) {\n    \n  }\n}",
    "golang": "func minimumOperations(nums []int, target []int) int64 {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer[]} target\n# @return {Integer}\ndef minimum_operations(nums, target)\n    \nend",
    "scala": "object Solution {\n    def minimumOperations(nums: Array[Int], target: Array[Int]): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_operations(nums: Vec<i32>, target: Vec<i32>) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-operations nums target)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec minimum_operations(Nums :: [integer()], Target :: [integer()]) -> integer().\nminimum_operations(Nums, Target) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_operations(nums :: [integer], target :: [integer]) :: integer\n  def minimum_operations(nums, target) do\n    \n  end\nend"
  }
}
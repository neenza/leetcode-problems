{
  "title": "Maximum Number of Groups Getting Fresh Donuts",
  "problem_id": "1924",
  "frontend_id": "1815",
  "difficulty": "Hard",
  "problem_slug": "maximum-number-of-groups-getting-fresh-donuts",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Bit Manipulation",
    "Memoization",
    "Bitmask"
  ],
  "description": "There is a donuts shop that bakes donuts in batches of batchSize. They have a rule where they must serve all of the donuts of a batch before serving any donuts of the next batch. You are given an integer batchSize and an integer array groups, where groups[i] denotes that there is a group of groups[i] customers that will visit the shop. Each customer will get exactly one donut.\nWhen a group visits the shop, all customers of the group must be served before serving any of the following groups. A group will be happy if they all get fresh donuts. That is, the first customer of the group does not receive a donut that was left over from the previous group.\nYou can freely rearrange the ordering of the groups. Return the maximum possible number of happy groups after rearranging the groups.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: batchSize = 3, groups = [1,2,3,4,5,6]\nOutput: 4\nExplanation: You can arrange the groups as [6,2,4,5,1,3]. Then the 1st, 2nd, 4th, and 6th groups will be happy.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: batchSize = 4, groups = [1,3,2,5,2,2,1,6]\nOutput: 4",
      "images": []
    }
  ],
  "constraints": [
    "1 <= batchSize <= 9",
    "1 <= groups.length <= 30",
    "1 <= groups[i] <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "The maximum number of happy groups is the maximum number of partitions you can split the groups into such that the sum of group sizes in each partition is 0 mod batchSize. At most one partition is allowed to have a different remainder (the first group will get fresh donuts anyway).",
    "Suppose you have an array freq of length k where freq[i] = number of groups of size i mod batchSize. How can you utilize this in a dp solution?",
    "Make a DP state dp[freq][r] that represents \"the maximum number of partitions you can form given the current freq and current remainder r\". You can hash the freq array to store it more easily in the dp table.",
    "For each i from 0 to batchSize-1, the next DP state is dp[freq`][(r+i)%batchSize] where freq` is freq but with freq[i] decremented by 1. Take the largest of all of the next states and store it in ans. If r == 0, then return ans+1 (because you can form a new partition), otherwise return ans (continuing the current partition)."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxHappyGroups(int batchSize, vector<int>& groups) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxHappyGroups(int batchSize, int[] groups) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxHappyGroups(self, batchSize, groups):\n        \"\"\"\n        :type batchSize: int\n        :type groups: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxHappyGroups(self, batchSize: int, groups: List[int]) -> int:\n        ",
    "c": "int maxHappyGroups(int batchSize, int* groups, int groupsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxHappyGroups(int batchSize, int[] groups) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} batchSize\n * @param {number[]} groups\n * @return {number}\n */\nvar maxHappyGroups = function(batchSize, groups) {\n    \n};",
    "typescript": "function maxHappyGroups(batchSize: number, groups: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $batchSize\n     * @param Integer[] $groups\n     * @return Integer\n     */\n    function maxHappyGroups($batchSize, $groups) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxHappyGroups(_ batchSize: Int, _ groups: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxHappyGroups(batchSize: Int, groups: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxHappyGroups(int batchSize, List<int> groups) {\n    \n  }\n}",
    "golang": "func maxHappyGroups(batchSize int, groups []int) int {\n    \n}",
    "ruby": "# @param {Integer} batch_size\n# @param {Integer[]} groups\n# @return {Integer}\ndef max_happy_groups(batch_size, groups)\n    \nend",
    "scala": "object Solution {\n    def maxHappyGroups(batchSize: Int, groups: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_happy_groups(batch_size: i32, groups: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-happy-groups batchSize groups)\n  (-> exact-integer? (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec max_happy_groups(BatchSize :: integer(), Groups :: [integer()]) -> integer().\nmax_happy_groups(BatchSize, Groups) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_happy_groups(batch_size :: integer, groups :: [integer]) :: integer\n  def max_happy_groups(batch_size, groups) do\n    \n  end\nend"
  }
}
{
  "title": "Maximal Rectangle",
  "problem_id": "85",
  "frontend_id": "85",
  "difficulty": "Hard",
  "problem_slug": "maximal-rectangle",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Stack",
    "Matrix",
    "Monotonic Stack"
  ],
  "description": "Given a rows x colsÂ binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 6\nExplanation: The maximal rectangle is shown in the above picture.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/09/14/maximal.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: matrix = [[\"0\"]]\nOutput: 0",
      "images": [
        "https://assets.leetcode.com/uploads/2020/09/14/maximal.jpg"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: matrix = [[\"1\"]]\nOutput: 1",
      "images": [
        "https://assets.leetcode.com/uploads/2020/09/14/maximal.jpg"
      ]
    }
  ],
  "constraints": [
    "rows == matrix.length",
    "cols == matrix[i].length",
    "1 <= row, cols <= 200",
    "matrix[i][j] is '0' or '1'."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maximalRectangle(vector<vector<char>>& matrix) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maximalRectangle(char[][] matrix) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        ",
    "c": "int maximalRectangle(char** matrix, int matrixSize, int* matrixColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaximalRectangle(char[][] matrix) {\n        \n    }\n}",
    "javascript": "/**\n * @param {character[][]} matrix\n * @return {number}\n */\nvar maximalRectangle = function(matrix) {\n    \n};",
    "typescript": "function maximalRectangle(matrix: string[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String[][] $matrix\n     * @return Integer\n     */\n    function maximalRectangle($matrix) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maximalRectangle(_ matrix: [[Character]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maximalRectangle(matrix: Array<CharArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maximalRectangle(List<List<String>> matrix) {\n    \n  }\n}",
    "golang": "func maximalRectangle(matrix [][]byte) int {\n    \n}",
    "ruby": "# @param {Character[][]} matrix\n# @return {Integer}\ndef maximal_rectangle(matrix)\n    \nend",
    "scala": "object Solution {\n    def maximalRectangle(matrix: Array[Array[Char]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn maximal_rectangle(matrix: Vec<Vec<char>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (maximal-rectangle matrix)\n  (-> (listof (listof char?)) exact-integer?)\n  )",
    "erlang": "-spec maximal_rectangle(Matrix :: [[char()]]) -> integer().\nmaximal_rectangle(Matrix) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec maximal_rectangle(matrix :: [[char]]) :: integer\n  def maximal_rectangle(matrix) do\n    \n  end\nend"
  }
}
{
  "title": "Reward Top K Students",
  "problem_id": "2603",
  "frontend_id": "2512",
  "difficulty": "Medium",
  "problem_slug": "reward-top-k-students",
  "topics": [
    "Array",
    "Hash Table",
    "String",
    "Sorting",
    "Heap (Priority Queue)"
  ],
  "description": "You are given two string arrays positive_feedback and negative_feedback, containing the words denoting positive and negative feedback, respectively. Note that no word is both positive and negative.\nInitially every student has 0 points. Each positive word in a feedback report increases the points of a student by 3, whereas each negative word decreases the points by 1.\nYou are given n feedback reports, represented by a 0-indexed string array report and a 0-indexed integer array student_id, where student_id[i] represents the ID of the student who has received the feedback report report[i]. The ID of each student is unique.\nGiven an integer k, return the top k students after ranking them in non-increasing order by their points. In case more than one student has the same points, the one with the lower ID ranks higher.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: positive_feedback = [\"smart\",\"brilliant\",\"studious\"], negative_feedback = [\"not\"], report = [\"this student is studious\",\"the student is smart\"], student_id = [1,2], k = 2\nOutput: [1,2]\nExplanation: \nBoth the students have 1 positive feedback and 3 points but since student 1 has a lower ID he ranks higher.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: positive_feedback = [\"smart\",\"brilliant\",\"studious\"], negative_feedback = [\"not\"], report = [\"this student is not studious\",\"the student is smart\"], student_id = [1,2], k = 2\nOutput: [2,1]\nExplanation: \n- The student with ID 1 has 1 positive feedback and 1 negative feedback, so he has 3-1=2 points. \n- The student with ID 2 has 1 positive feedback, so he has 3 points. \nSince student 2 has more points, [2,1] is returned.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= positive_feedback.length, negative_feedback.length <= 104",
    "1 <= positive_feedback[i].length, negative_feedback[j].length <= 100",
    "Both positive_feedback[i] and negative_feedback[j] consists of lowercase English letters.",
    "No word is present in both positive_feedback and negative_feedback.",
    "n == report.length == student_id.length",
    "1 <= n <= 104",
    "report[i] consists of lowercase English letters and spaces ' '.",
    "There is a single space between consecutive words of report[i].",
    "1 <= report[i].length <= 100",
    "1 <= student_id[i] <= 109",
    "All the values of student_id[i] are unique.",
    "1 <= k <= n"
  ],
  "follow_ups": [],
  "hints": [
    "Hash the positive and negative feedback words separately.",
    "Calculate the points for each student’s feedback.",
    "Sort the students accordingly to find the top <em>k</em> among them."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> topStudents(vector<string>& positive_feedback, vector<string>& negative_feedback, vector<string>& report, vector<int>& student_id, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<Integer> topStudents(String[] positive_feedback, String[] negative_feedback, String[] report, int[] student_id, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def topStudents(self, positive_feedback, negative_feedback, report, student_id, k):\n        \"\"\"\n        :type positive_feedback: List[str]\n        :type negative_feedback: List[str]\n        :type report: List[str]\n        :type student_id: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def topStudents(self, positive_feedback: List[str], negative_feedback: List[str], report: List[str], student_id: List[int], k: int) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* topStudents(char** positive_feedback, int positive_feedbackSize, char** negative_feedback, int negative_feedbackSize, char** report, int reportSize, int* student_id, int student_idSize, int k, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<int> TopStudents(string[] positive_feedback, string[] negative_feedback, string[] report, int[] student_id, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string[]} positive_feedback\n * @param {string[]} negative_feedback\n * @param {string[]} report\n * @param {number[]} student_id\n * @param {number} k\n * @return {number[]}\n */\nvar topStudents = function(positive_feedback, negative_feedback, report, student_id, k) {\n    \n};",
    "typescript": "function topStudents(positive_feedback: string[], negative_feedback: string[], report: string[], student_id: number[], k: number): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String[] $positive_feedback\n     * @param String[] $negative_feedback\n     * @param String[] $report\n     * @param Integer[] $student_id\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function topStudents($positive_feedback, $negative_feedback, $report, $student_id, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func topStudents(_ positive_feedback: [String], _ negative_feedback: [String], _ report: [String], _ student_id: [Int], _ k: Int) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun topStudents(positive_feedback: Array<String>, negative_feedback: Array<String>, report: Array<String>, student_id: IntArray, k: Int): List<Int> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> topStudents(List<String> positive_feedback, List<String> negative_feedback, List<String> report, List<int> student_id, int k) {\n    \n  }\n}",
    "golang": "func topStudents(positive_feedback []string, negative_feedback []string, report []string, student_id []int, k int) []int {\n    \n}",
    "ruby": "# @param {String[]} positive_feedback\n# @param {String[]} negative_feedback\n# @param {String[]} report\n# @param {Integer[]} student_id\n# @param {Integer} k\n# @return {Integer[]}\ndef top_students(positive_feedback, negative_feedback, report, student_id, k)\n    \nend",
    "scala": "object Solution {\n    def topStudents(positive_feedback: Array[String], negative_feedback: Array[String], report: Array[String], student_id: Array[Int], k: Int): List[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn top_students(positive_feedback: Vec<String>, negative_feedback: Vec<String>, report: Vec<String>, student_id: Vec<i32>, k: i32) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (top-students positive_feedback negative_feedback report student_id k)\n  (-> (listof string?) (listof string?) (listof string?) (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )",
    "erlang": "-spec top_students(Positive_feedback :: [unicode:unicode_binary()], Negative_feedback :: [unicode:unicode_binary()], Report :: [unicode:unicode_binary()], Student_id :: [integer()], K :: integer()) -> [integer()].\ntop_students(Positive_feedback, Negative_feedback, Report, Student_id, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec top_students(positive_feedback :: [String.t], negative_feedback :: [String.t], report :: [String.t], student_id :: [integer], k :: integer) :: [integer]\n  def top_students(positive_feedback, negative_feedback, report, student_id, k) do\n    \n  end\nend"
  }
}
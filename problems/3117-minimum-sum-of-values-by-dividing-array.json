{
  "title": "Minimum Sum of Values by Dividing Array",
  "problem_id": "3364",
  "frontend_id": "3117",
  "difficulty": "Hard",
  "problem_slug": "minimum-sum-of-values-by-dividing-array",
  "topics": [
    "Array",
    "Binary Search",
    "Dynamic Programming",
    "Bit Manipulation",
    "Segment Tree",
    "Queue"
  ],
  "description": "You are given two arrays nums and andValues of length n and m respectively.\nThe value of an array is equal to the last element of that array.\nYou have to divide nums into m disjoint contiguous subarrays such that for the ith subarray [li, ri], the bitwise AND of the subarray elements is equal to andValues[i], in other words, nums[li] & nums[li + 1] & ... & nums[ri] == andValues[i] for all 1 <= i <= m, where & represents the bitwise AND operator.\nReturn the minimum possible sum of the values of the m subarrays nums is divided into. If it is not possible to divide nums into m subarrays satisfying these conditions, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,4,3,3,2], andValues = [0,3,3,2]\nOutput: 12\nExplanation:\nThe only possible way to divide nums is:\nThe sum of the values for these subarrays is 4 + 3 + 3 + 2 = 12 .",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [2,3,5,7,7,7,5], andValues = [0,7,5]\nOutput: 17\nExplanation:\nThere are three ways to divide nums :\nThe minimum possible sum of the values is 17 .",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,2,3,4], andValues = [2]\nOutput: -1\nExplanation:\nThe bitwise AND of the entire array nums is 0 . As there is no possible way to divide nums into a single subarray to have the bitwise AND of elements 2 , return -1 .",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n == nums.length <= 104",
    "1 <= m == andValues.length <= min(n, 10)",
    "1 <= nums[i] < 105",
    "0 <= andValues[j] < 105"
  ],
  "follow_ups": [],
  "hints": [
    "Let <code>dp[i][j]</code> be the optimal answer to split  <code>nums[0..(i - 1)]</code> into the first <code>j</code> andValues.",
    "<code>dp[i][j] = min(dp[(i - z)][j - 1]) + nums[i - 1]</code> over all <code>x <= z <= y</code> and <code>dp[0][0] = 0</code>, where <code>x</code> and <code>y</code> are the longest and shortest subarrays ending with <code>nums[i - 1]</code> and the bitwise-and of all the values in it is <code>andValues[j - 1]</code>.",
    "The answer is <code>dp[n][m]</code>.",
    "To calculate <code>x</code> and <code>y</code>, we can use binary search (or sliding window). Note that the more values we have, the smaller the <code>AND</code> value is.",
    "To calculate the result, we need to support RMQ (range minimum query). Segment tree is one way to do it in <code>O(log(n))</code>. But we can use Monotonic Queue since the ranges are indeed “sliding to right” which can be reduced to the classical minimum value in sliding window problem, for a <code>O(n)</code> solution."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimumValueSum(vector<int>& nums, vector<int>& andValues) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimumValueSum(int[] nums, int[] andValues) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumValueSum(self, nums, andValues):\n        \"\"\"\n        :type nums: List[int]\n        :type andValues: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumValueSum(self, nums: List[int], andValues: List[int]) -> int:\n        ",
    "c": "int minimumValueSum(int* nums, int numsSize, int* andValues, int andValuesSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimumValueSum(int[] nums, int[] andValues) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number[]} andValues\n * @return {number}\n */\nvar minimumValueSum = function(nums, andValues) {\n    \n};",
    "typescript": "function minimumValueSum(nums: number[], andValues: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $andValues\n     * @return Integer\n     */\n    function minimumValueSum($nums, $andValues) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumValueSum(_ nums: [Int], _ andValues: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumValueSum(nums: IntArray, andValues: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumValueSum(List<int> nums, List<int> andValues) {\n    \n  }\n}",
    "golang": "func minimumValueSum(nums []int, andValues []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer[]} and_values\n# @return {Integer}\ndef minimum_value_sum(nums, and_values)\n    \nend",
    "scala": "object Solution {\n    def minimumValueSum(nums: Array[Int], andValues: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_value_sum(nums: Vec<i32>, and_values: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-value-sum nums andValues)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec minimum_value_sum(Nums :: [integer()], AndValues :: [integer()]) -> integer().\nminimum_value_sum(Nums, AndValues) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_value_sum(nums :: [integer], and_values :: [integer]) :: integer\n  def minimum_value_sum(nums, and_values) do\n    \n  end\nend"
  }
}
{
  "title": "Delete Columns to Make Sorted",
  "problem_id": "981",
  "frontend_id": "944",
  "difficulty": "Easy",
  "problem_slug": "delete-columns-to-make-sorted",
  "topics": [
    "Array",
    "String"
  ],
  "description": "You are given an array of n strings strs, all of the same length.\nThe strings can be arranged such that there is one on each line, making a grid.\nYou want to delete the columns that are not sorted lexicographically. In the above example (0-indexed), columns 0 ('a', 'b', 'c') and 2 ('c', 'e', 'e') are sorted, while column 1 ('b', 'c', 'a') is not, so you would delete column 1.\nReturn the number of columns that you will delete.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "abc\nbce\ncae",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: strs = [\"cba\",\"daf\",\"ghi\"]\nOutput: 1\nExplanation: The grid looks as follows:\n  cba\n  daf\n  ghi\nColumns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: strs = [\"a\",\"b\"]\nOutput: 0\nExplanation: The grid looks as follows:\n  a\n  b\nColumn 0 is the only column and is sorted, so you will not delete any columns.",
      "images": []
    },
    {
      "example_num": 4,
      "example_text": "Input: strs = [\"zyx\",\"wvu\",\"tsr\"]\nOutput: 3\nExplanation: The grid looks as follows:\n  zyx\n  wvu\n  tsr\nAll 3 columns are not sorted, so you will delete all 3.",
      "images": []
    }
  ],
  "constraints": [
    "n == strs.length",
    "1 <= n <= 100",
    "1 <= strs[i].length <= 1000",
    "strs[i] consists of lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minDeletionSize(vector<string>& strs) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minDeletionSize(String[] strs) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minDeletionSize(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minDeletionSize(self, strs: List[str]) -> int:\n        ",
    "c": "int minDeletionSize(char** strs, int strsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinDeletionSize(string[] strs) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string[]} strs\n * @return {number}\n */\nvar minDeletionSize = function(strs) {\n    \n};",
    "typescript": "function minDeletionSize(strs: string[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String[] $strs\n     * @return Integer\n     */\n    function minDeletionSize($strs) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minDeletionSize(_ strs: [String]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minDeletionSize(strs: Array<String>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minDeletionSize(List<String> strs) {\n    \n  }\n}",
    "golang": "func minDeletionSize(strs []string) int {\n    \n}",
    "ruby": "# @param {String[]} strs\n# @return {Integer}\ndef min_deletion_size(strs)\n    \nend",
    "scala": "object Solution {\n    def minDeletionSize(strs: Array[String]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_deletion_size(strs: Vec<String>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-deletion-size strs)\n  (-> (listof string?) exact-integer?)\n  )",
    "erlang": "-spec min_deletion_size(Strs :: [unicode:unicode_binary()]) -> integer().\nmin_deletion_size(Strs) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_deletion_size(strs :: [String.t]) :: integer\n  def min_deletion_size(strs) do\n    \n  end\nend"
  }
}
{
  "title": "Minimum Cost to Merge Stones",
  "problem_id": "1042",
  "frontend_id": "1000",
  "difficulty": "Hard",
  "problem_slug": "minimum-cost-to-merge-stones",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Prefix Sum"
  ],
  "description": "There are n piles of stones arranged in a row. The ith pile has stones[i] stones.\nA move consists of merging exactly k consecutive piles into one pile, and the cost of this move is equal to the total number of stones in these k piles.\nReturn the minimum cost to merge all piles of stones into one pile. If it is impossible, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: stones = [3,2,4,1], k = 2\nOutput: 20\nExplanation: We start with [3, 2, 4, 1].\nWe merge [3, 2] for a cost of 5, and we are left with [5, 4, 1].\nWe merge [4, 1] for a cost of 5, and we are left with [5, 5].\nWe merge [5, 5] for a cost of 10, and we are left with [10].\nThe total cost was 20, and this is the minimum possible.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: stones = [3,2,4,1], k = 3\nOutput: -1\nExplanation: After any merge operation, there are 2 piles left, and we can't merge anymore.  So the task is impossible.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: stones = [3,5,1,2,6], k = 3\nOutput: 25\nExplanation: We start with [3, 5, 1, 2, 6].\nWe merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6].\nWe merge [3, 8, 6] for a cost of 17, and we are left with [17].\nThe total cost was 25, and this is the minimum possible.",
      "images": []
    }
  ],
  "constraints": [
    "n == stones.length",
    "1 <= n <= 30",
    "1 <= stones[i] <= 100",
    "2 <= k <= 30"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int mergeStones(vector<int>& stones, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int mergeStones(int[] stones, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def mergeStones(self, stones, k):\n        \"\"\"\n        :type stones: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def mergeStones(self, stones: List[int], k: int) -> int:\n        ",
    "c": "int mergeStones(int* stones, int stonesSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int MergeStones(int[] stones, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} stones\n * @param {number} k\n * @return {number}\n */\nvar mergeStones = function(stones, k) {\n    \n};",
    "typescript": "function mergeStones(stones: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $stones\n     * @param Integer $k\n     * @return Integer\n     */\n    function mergeStones($stones, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func mergeStones(_ stones: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun mergeStones(stones: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int mergeStones(List<int> stones, int k) {\n    \n  }\n}",
    "golang": "func mergeStones(stones []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} stones\n# @param {Integer} k\n# @return {Integer}\ndef merge_stones(stones, k)\n    \nend",
    "scala": "object Solution {\n    def mergeStones(stones: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn merge_stones(stones: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (merge-stones stones k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec merge_stones(Stones :: [integer()], K :: integer()) -> integer().\nmerge_stones(Stones, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec merge_stones(stones :: [integer], k :: integer) :: integer\n  def merge_stones(stones, k) do\n    \n  end\nend"
  }
}
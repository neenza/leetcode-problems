{
  "title": "Apply Operations to Make Two Strings Equal",
  "problem_id": "3033",
  "frontend_id": "2896",
  "difficulty": "Medium",
  "problem_slug": "apply-operations-to-make-two-strings-equal",
  "topics": [
    "String",
    "Dynamic Programming"
  ],
  "description": "You are given two 0-indexed binary strings s1 and s2, both of length n, and a positive integer x.\nYou can perform any of the following operations on the string s1 any number of times:\nReturn the minimum cost needed to make the strings s1 and s2 equal, or return -1 if it is impossible.\nNote that flipping a character means changing it from 0 to 1 or vice-versa.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s1 = \"1100011000\", s2 = \"0101001010\", x = 2\nOutput: 4\nExplanation: We can do the following operations:\n- Choose i = 3 and apply the second operation. The resulting string is s1 = \"1101111000\".\n- Choose i = 4 and apply the second operation. The resulting string is s1 = \"1101001000\".\n- Choose i = 0 and j = 8 and apply the first operation. The resulting string is s1 = \"0101001010\" = s2.\nThe total cost is 1 + 1 + 2 = 4. It can be shown that it is the minimum cost possible.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s1 = \"10110\", s2 = \"00011\", x = 4\nOutput: -1\nExplanation: It is not possible to make the two strings equal.",
      "images": []
    }
  ],
  "constraints": [
    "n == s1.length == s2.length",
    "1 <= n, x <= 500",
    "s1 and s2 consist only of the characters '0' and '1'."
  ],
  "follow_ups": [],
  "hints": [
    "Save all the indices that have different characters on <code>s1</code> and <code>s2</code> into a list, and work only with this list.",
    "Try to use dynamic programming on this list to solve the problem. What will be the states and transitions of this dp?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minOperations(string s1, string s2, int x) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minOperations(String s1, String s2, int x) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minOperations(self, s1, s2, x):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type x: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minOperations(self, s1: str, s2: str, x: int) -> int:\n        ",
    "c": "int minOperations(char* s1, char* s2, int x) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinOperations(string s1, string s2, int x) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s1\n * @param {string} s2\n * @param {number} x\n * @return {number}\n */\nvar minOperations = function(s1, s2, x) {\n    \n};",
    "typescript": "function minOperations(s1: string, s2: string, x: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @param Integer $x\n     * @return Integer\n     */\n    function minOperations($s1, $s2, $x) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minOperations(_ s1: String, _ s2: String, _ x: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minOperations(s1: String, s2: String, x: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minOperations(String s1, String s2, int x) {\n    \n  }\n}",
    "golang": "func minOperations(s1 string, s2 string, x int) int {\n    \n}",
    "ruby": "# @param {String} s1\n# @param {String} s2\n# @param {Integer} x\n# @return {Integer}\ndef min_operations(s1, s2, x)\n    \nend",
    "scala": "object Solution {\n    def minOperations(s1: String, s2: String, x: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_operations(s1: String, s2: String, x: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-operations s1 s2 x)\n  (-> string? string? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec min_operations(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary(), X :: integer()) -> integer().\nmin_operations(S1, S2, X) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_operations(s1 :: String.t, s2 :: String.t, x :: integer) :: integer\n  def min_operations(s1, s2, x) do\n    \n  end\nend"
  }
}
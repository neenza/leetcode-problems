{
  "title": "Detect Pattern of Length M Repeated K or More Times",
  "problem_id": "1689",
  "frontend_id": "1566",
  "difficulty": "Easy",
  "problem_slug": "detect-pattern-of-length-m-repeated-k-or-more-times",
  "topics": [
    "Array",
    "Enumeration"
  ],
  "description": "Given an array of positive integers arr, find a pattern of length m that is repeated k or more times.\nA pattern is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times consecutively without overlapping. A pattern is defined by its length and the number of repetitions.\nReturn true if there exists a pattern of length m that is repeated k or more times, otherwise return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: arr = [1,2,4,4,4,4], m = 1, k = 3\nOutput: true\nExplanation: The pattern (4) of length 1 is repeated 4 consecutive times. Notice that pattern can be repeated k or more times but not less.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: arr = [1,2,1,2,1,1,1,3], m = 2, k = 2\nOutput: true\nExplanation: The pattern (1,2) of length 2 is repeated 2 consecutive times. Another valid pattern (2,1) is also repeated 2 times.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: arr = [1,2,1,2,1,3], m = 2, k = 3\nOutput: false\nExplanation: The pattern (1,2) is of length 2 but is repeated only 2 times. There is no pattern of length 2 that is repeated 3 or more times.",
      "images": []
    }
  ],
  "constraints": [
    "2 <= arr.length <= 100",
    "1 <= arr[i] <= 100",
    "1 <= m <= 100",
    "2 <= k <= 100"
  ],
  "follow_ups": [],
  "hints": [
    "Use a three-layer loop to check all possible patterns by iterating through all possible starting positions, all indexes less than m, and if the character at the index is repeated k times."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool containsPattern(vector<int>& arr, int m, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean containsPattern(int[] arr, int m, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def containsPattern(self, arr, m, k):\n        \"\"\"\n        :type arr: List[int]\n        :type m: int\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:\n        ",
    "c": "bool containsPattern(int* arr, int arrSize, int m, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public bool ContainsPattern(int[] arr, int m, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} arr\n * @param {number} m\n * @param {number} k\n * @return {boolean}\n */\nvar containsPattern = function(arr, m, k) {\n    \n};",
    "typescript": "function containsPattern(arr: number[], m: number, k: number): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @param Integer $m\n     * @param Integer $k\n     * @return Boolean\n     */\n    function containsPattern($arr, $m, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func containsPattern(_ arr: [Int], _ m: Int, _ k: Int) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun containsPattern(arr: IntArray, m: Int, k: Int): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool containsPattern(List<int> arr, int m, int k) {\n    \n  }\n}",
    "golang": "func containsPattern(arr []int, m int, k int) bool {\n    \n}",
    "ruby": "# @param {Integer[]} arr\n# @param {Integer} m\n# @param {Integer} k\n# @return {Boolean}\ndef contains_pattern(arr, m, k)\n    \nend",
    "scala": "object Solution {\n    def containsPattern(arr: Array[Int], m: Int, k: Int): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn contains_pattern(arr: Vec<i32>, m: i32, k: i32) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (contains-pattern arr m k)\n  (-> (listof exact-integer?) exact-integer? exact-integer? boolean?)\n  )",
    "erlang": "-spec contains_pattern(Arr :: [integer()], M :: integer(), K :: integer()) -> boolean().\ncontains_pattern(Arr, M, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec contains_pattern(arr :: [integer], m :: integer, k :: integer) :: boolean\n  def contains_pattern(arr, m, k) do\n    \n  end\nend"
  }
}
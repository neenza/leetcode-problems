{
  "title": "Smallest Number in Infinite Set",
  "problem_id": "2413",
  "frontend_id": "2336",
  "difficulty": "Medium",
  "problem_slug": "smallest-number-in-infinite-set",
  "topics": [
    "Hash Table",
    "Design",
    "Heap (Priority Queue)",
    "Ordered Set"
  ],
  "description": "You have a set which contains all positive integers [1, 2, 3, 4, 5, ...].\nImplement the SmallestInfiniteSet class:\nExample 1:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input\n[\"SmallestInfiniteSet\", \"addBack\", \"popSmallest\", \"popSmallest\", \"popSmallest\", \"addBack\", \"popSmallest\", \"popSmallest\", \"popSmallest\"]\n[[], [2], [], [], [], [1], [], [], []]\nOutput\n[null, null, 1, 2, 3, null, 1, 4, 5]\n\nExplanation\nSmallestInfiniteSet smallestInfiniteSet = new SmallestInfiniteSet();\nsmallestInfiniteSet.addBack(2);    // 2 is already in the set, so no change is made.\nsmallestInfiniteSet.popSmallest(); // return 1, since 1 is the smallest number, and remove it from the set.\nsmallestInfiniteSet.popSmallest(); // return 2, and remove it from the set.\nsmallestInfiniteSet.popSmallest(); // return 3, and remove it from the set.\nsmallestInfiniteSet.addBack(1);    // 1 is added back to the set.\nsmallestInfiniteSet.popSmallest(); // return 1, since 1 was added back to the set and\n                                   // is the smallest number, and remove it from the set.\nsmallestInfiniteSet.popSmallest(); // return 4, and remove it from the set.\nsmallestInfiniteSet.popSmallest(); // return 5, and remove it from the set.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= num <= 1000",
    "At most 1000 calls will be made in total to popSmallest and addBack."
  ],
  "follow_ups": [],
  "hints": [
    "Based on the constraints, what is the maximum element that can possibly be popped?",
    "Maintain whether elements are in or not in the set. How many elements do we consider?"
  ],
  "code_snippets": {
    "cpp": "class SmallestInfiniteSet {\npublic:\n    SmallestInfiniteSet() {\n        \n    }\n    \n    int popSmallest() {\n        \n    }\n    \n    void addBack(int num) {\n        \n    }\n};\n\n/**\n * Your SmallestInfiniteSet object will be instantiated and called as such:\n * SmallestInfiniteSet* obj = new SmallestInfiniteSet();\n * int param_1 = obj->popSmallest();\n * obj->addBack(num);\n */",
    "java": "class SmallestInfiniteSet {\n\n    public SmallestInfiniteSet() {\n        \n    }\n    \n    public int popSmallest() {\n        \n    }\n    \n    public void addBack(int num) {\n        \n    }\n}\n\n/**\n * Your SmallestInfiniteSet object will be instantiated and called as such:\n * SmallestInfiniteSet obj = new SmallestInfiniteSet();\n * int param_1 = obj.popSmallest();\n * obj.addBack(num);\n */",
    "python": "class SmallestInfiniteSet(object):\n\n    def __init__(self):\n        \n\n    def popSmallest(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n    def addBack(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: None\n        \"\"\"\n        \n\n\n# Your SmallestInfiniteSet object will be instantiated and called as such:\n# obj = SmallestInfiniteSet()\n# param_1 = obj.popSmallest()\n# obj.addBack(num)",
    "python3": "class SmallestInfiniteSet:\n\n    def __init__(self):\n        \n\n    def popSmallest(self) -> int:\n        \n\n    def addBack(self, num: int) -> None:\n        \n\n\n# Your SmallestInfiniteSet object will be instantiated and called as such:\n# obj = SmallestInfiniteSet()\n# param_1 = obj.popSmallest()\n# obj.addBack(num)",
    "c": "\n\n\ntypedef struct {\n    \n} SmallestInfiniteSet;\n\n\nSmallestInfiniteSet* smallestInfiniteSetCreate() {\n    \n}\n\nint smallestInfiniteSetPopSmallest(SmallestInfiniteSet* obj) {\n    \n}\n\nvoid smallestInfiniteSetAddBack(SmallestInfiniteSet* obj, int num) {\n    \n}\n\nvoid smallestInfiniteSetFree(SmallestInfiniteSet* obj) {\n    \n}\n\n/**\n * Your SmallestInfiniteSet struct will be instantiated and called as such:\n * SmallestInfiniteSet* obj = smallestInfiniteSetCreate();\n * int param_1 = smallestInfiniteSetPopSmallest(obj);\n \n * smallestInfiniteSetAddBack(obj, num);\n \n * smallestInfiniteSetFree(obj);\n*/",
    "csharp": "public class SmallestInfiniteSet {\n\n    public SmallestInfiniteSet() {\n        \n    }\n    \n    public int PopSmallest() {\n        \n    }\n    \n    public void AddBack(int num) {\n        \n    }\n}\n\n/**\n * Your SmallestInfiniteSet object will be instantiated and called as such:\n * SmallestInfiniteSet obj = new SmallestInfiniteSet();\n * int param_1 = obj.PopSmallest();\n * obj.AddBack(num);\n */",
    "javascript": "\nvar SmallestInfiniteSet = function() {\n    \n};\n\n/**\n * @return {number}\n */\nSmallestInfiniteSet.prototype.popSmallest = function() {\n    \n};\n\n/** \n * @param {number} num\n * @return {void}\n */\nSmallestInfiniteSet.prototype.addBack = function(num) {\n    \n};\n\n/** \n * Your SmallestInfiniteSet object will be instantiated and called as such:\n * var obj = new SmallestInfiniteSet()\n * var param_1 = obj.popSmallest()\n * obj.addBack(num)\n */",
    "typescript": "class SmallestInfiniteSet {\n    constructor() {\n        \n    }\n\n    popSmallest(): number {\n        \n    }\n\n    addBack(num: number): void {\n        \n    }\n}\n\n/**\n * Your SmallestInfiniteSet object will be instantiated and called as such:\n * var obj = new SmallestInfiniteSet()\n * var param_1 = obj.popSmallest()\n * obj.addBack(num)\n */",
    "php": "class SmallestInfiniteSet {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function popSmallest() {\n        \n    }\n  \n    /**\n     * @param Integer $num\n     * @return NULL\n     */\n    function addBack($num) {\n        \n    }\n}\n\n/**\n * Your SmallestInfiniteSet object will be instantiated and called as such:\n * $obj = SmallestInfiniteSet();\n * $ret_1 = $obj->popSmallest();\n * $obj->addBack($num);\n */",
    "swift": "\nclass SmallestInfiniteSet {\n\n    init() {\n        \n    }\n    \n    func popSmallest() -> Int {\n        \n    }\n    \n    func addBack(_ num: Int) {\n        \n    }\n}\n\n/**\n * Your SmallestInfiniteSet object will be instantiated and called as such:\n * let obj = SmallestInfiniteSet()\n * let ret_1: Int = obj.popSmallest()\n * obj.addBack(num)\n */",
    "kotlin": "class SmallestInfiniteSet() {\n\n    fun popSmallest(): Int {\n        \n    }\n\n    fun addBack(num: Int) {\n        \n    }\n\n}\n\n/**\n * Your SmallestInfiniteSet object will be instantiated and called as such:\n * var obj = SmallestInfiniteSet()\n * var param_1 = obj.popSmallest()\n * obj.addBack(num)\n */",
    "dart": "class SmallestInfiniteSet {\n\n  SmallestInfiniteSet() {\n    \n  }\n  \n  int popSmallest() {\n    \n  }\n  \n  void addBack(int num) {\n    \n  }\n}\n\n/**\n * Your SmallestInfiniteSet object will be instantiated and called as such:\n * SmallestInfiniteSet obj = SmallestInfiniteSet();\n * int param1 = obj.popSmallest();\n * obj.addBack(num);\n */",
    "golang": "type SmallestInfiniteSet struct {\n    \n}\n\n\nfunc Constructor() SmallestInfiniteSet {\n    \n}\n\n\nfunc (this *SmallestInfiniteSet) PopSmallest() int {\n    \n}\n\n\nfunc (this *SmallestInfiniteSet) AddBack(num int)  {\n    \n}\n\n\n/**\n * Your SmallestInfiniteSet object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.PopSmallest();\n * obj.AddBack(num);\n */",
    "ruby": "class SmallestInfiniteSet\n    def initialize()\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def pop_smallest()\n        \n    end\n\n\n=begin\n    :type num: Integer\n    :rtype: Void\n=end\n    def add_back(num)\n        \n    end\n\n\nend\n\n# Your SmallestInfiniteSet object will be instantiated and called as such:\n# obj = SmallestInfiniteSet.new()\n# param_1 = obj.pop_smallest()\n# obj.add_back(num)",
    "scala": "class SmallestInfiniteSet() {\n\n    def popSmallest(): Int = {\n        \n    }\n\n    def addBack(num: Int): Unit = {\n        \n    }\n\n}\n\n/**\n * Your SmallestInfiniteSet object will be instantiated and called as such:\n * val obj = new SmallestInfiniteSet()\n * val param_1 = obj.popSmallest()\n * obj.addBack(num)\n */",
    "rust": "struct SmallestInfiniteSet {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl SmallestInfiniteSet {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn pop_smallest(&self) -> i32 {\n        \n    }\n    \n    fn add_back(&self, num: i32) {\n        \n    }\n}\n\n/**\n * Your SmallestInfiniteSet object will be instantiated and called as such:\n * let obj = SmallestInfiniteSet::new();\n * let ret_1: i32 = obj.pop_smallest();\n * obj.add_back(num);\n */",
    "racket": "(define smallest-infinite-set%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; pop-smallest : -> exact-integer?\n    (define/public (pop-smallest)\n      )\n    ; add-back : exact-integer? -> void?\n    (define/public (add-back num)\n      )))\n\n;; Your smallest-infinite-set% object will be instantiated and called as such:\n;; (define obj (new smallest-infinite-set%))\n;; (define param_1 (send obj pop-smallest))\n;; (send obj add-back num)",
    "erlang": "-spec smallest_infinite_set_init_() -> any().\nsmallest_infinite_set_init_() ->\n  .\n\n-spec smallest_infinite_set_pop_smallest() -> integer().\nsmallest_infinite_set_pop_smallest() ->\n  .\n\n-spec smallest_infinite_set_add_back(Num :: integer()) -> any().\nsmallest_infinite_set_add_back(Num) ->\n  .\n\n\n%% Your functions will be called as such:\n%% smallest_infinite_set_init_(),\n%% Param_1 = smallest_infinite_set_pop_smallest(),\n%% smallest_infinite_set_add_back(Num),\n\n%% smallest_infinite_set_init_ will be called before every test case, in which you can do some necessary initializations.",
    "elixir": "defmodule SmallestInfiniteSet do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec pop_smallest() :: integer\n  def pop_smallest() do\n    \n  end\n\n  @spec add_back(num :: integer) :: any\n  def add_back(num) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# SmallestInfiniteSet.init_()\n# param_1 = SmallestInfiniteSet.pop_smallest()\n# SmallestInfiniteSet.add_back(num)\n\n# SmallestInfiniteSet.init_ will be called before every test case, in which you can do some necessary initializations."
  }
}
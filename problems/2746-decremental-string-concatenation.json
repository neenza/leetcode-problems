{
  "title": "Decremental String Concatenation",
  "problem_id": "2854",
  "frontend_id": "2746",
  "difficulty": "Medium",
  "problem_slug": "decremental-string-concatenation",
  "topics": [
    "Array",
    "String",
    "Dynamic Programming"
  ],
  "description": "You are given a 0-indexed array words containing n strings.\nLet's define a join operation join(x, y) between two strings x and y as concatenating them into xy. However, if the last character of x is equal to the first character of y, one of them is deleted.\nFor example join(\"ab\", \"ba\") = \"aba\" and join(\"ab\", \"cde\") = \"abcde\".\nYou are to perform n - 1 join operations. Let str0 = words[0]. Starting from i = 1 up to i = n - 1, for the ith operation, you can do one of the following:\nYour task is to minimize the length of strn - 1.\nReturn an integer denoting the minimum possible length of strn - 1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: words = [\"aa\",\"ab\",\"bc\"]\nOutput: 4\nExplanation: In this example, we can perform join operations in the following order to minimize the length of str2: \nstr0 = \"aa\"\nstr1 = join(str0, \"ab\") = \"aab\"\nstr2 = join(str1, \"bc\") = \"aabc\" \nIt can be shown that the minimum possible length of str2 is 4.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: words = [\"ab\",\"b\"]\nOutput: 2\nExplanation: In this example, str0 = \"ab\", there are two ways to get str1: \njoin(str0, \"b\") = \"ab\" or join(\"b\", str0) = \"bab\". \nThe first string, \"ab\", has the minimum length. Hence, the answer is 2.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: words = [\"aaa\",\"c\",\"aba\"]\nOutput: 6\nExplanation: In this example, we can perform join operations in the following order to minimize the length of str2: \nstr0 = \"aaa\"\nstr1 = join(str0, \"c\") = \"aaac\"\nstr2 = join(\"aba\", str1) = \"abaaac\"\nIt can be shown that the minimum possible length of str2 is 6.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= words.length <= 1000",
    "1 <= words[i].length <= 50",
    "Each character in words[i] is an English lowercase letter"
  ],
  "follow_ups": [],
  "hints": [
    "Use dynamic programming with memoization.",
    "Notice that the first and last characters of a string are sufficient to determine the length of its concatenation with any other string.",
    "Define dp[i][first][last] as the shortest concatenation length of the first i words starting with a character first and ending with a character last. Convert characters to their ASCII codes if your programming language cannot implicitly convert them to array indices."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimizeConcatenatedLength(vector<string>& words) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimizeConcatenatedLength(String[] words) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimizeConcatenatedLength(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimizeConcatenatedLength(self, words: List[str]) -> int:\n        ",
    "c": "int minimizeConcatenatedLength(char** words, int wordsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimizeConcatenatedLength(string[] words) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string[]} words\n * @return {number}\n */\nvar minimizeConcatenatedLength = function(words) {\n    \n};",
    "typescript": "function minimizeConcatenatedLength(words: string[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return Integer\n     */\n    function minimizeConcatenatedLength($words) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimizeConcatenatedLength(_ words: [String]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimizeConcatenatedLength(words: Array<String>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimizeConcatenatedLength(List<String> words) {\n    \n  }\n}",
    "golang": "func minimizeConcatenatedLength(words []string) int {\n    \n}",
    "ruby": "# @param {String[]} words\n# @return {Integer}\ndef minimize_concatenated_length(words)\n    \nend",
    "scala": "object Solution {\n    def minimizeConcatenatedLength(words: Array[String]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimize_concatenated_length(words: Vec<String>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimize-concatenated-length words)\n  (-> (listof string?) exact-integer?)\n  )",
    "erlang": "-spec minimize_concatenated_length(Words :: [unicode:unicode_binary()]) -> integer().\nminimize_concatenated_length(Words) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimize_concatenated_length(words :: [String.t]) :: integer\n  def minimize_concatenated_length(words) do\n    \n  end\nend"
  }
}
{
  "title": "My Calendar I",
  "problem_id": "729",
  "frontend_id": "729",
  "difficulty": "Medium",
  "problem_slug": "my-calendar-i",
  "topics": [
    "Array",
    "Binary Search",
    "Design",
    "Segment Tree",
    "Ordered Set"
  ],
  "description": "You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a double booking.\nA double booking happens when two events have some non-empty intersection (i.e., some moment is common to both events.).\nThe event can be represented as a pair of integers startTime and endTime that represents a booking on the half-open interval [startTime, endTime), the range of real numbers x such that startTime <= x < endTime.\nImplement the MyCalendar class:\nExample 1:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input\n[\"MyCalendar\", \"book\", \"book\", \"book\"]\n[[], [10, 20], [15, 25], [20, 30]]\nOutput\n[null, true, false, true]\n\nExplanation\nMyCalendar myCalendar = new MyCalendar();\nmyCalendar.book(10, 20); // return True\nmyCalendar.book(15, 25); // return False, It can not be booked because time 15 is already booked by another event.\nmyCalendar.book(20, 30); // return True, The event can be booked, as the first event takes every time less than 20, but not including 20.",
      "images": []
    }
  ],
  "constraints": [
    "0 <= start < end <= 109",
    "At most 1000 calls will be made to book."
  ],
  "follow_ups": [],
  "hints": [
    "Store the events as a sorted list of intervals.  If none of the events conflict, then the new event can be added."
  ],
  "code_snippets": {
    "cpp": "class MyCalendar {\npublic:\n    MyCalendar() {\n        \n    }\n    \n    bool book(int startTime, int endTime) {\n        \n    }\n};\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * MyCalendar* obj = new MyCalendar();\n * bool param_1 = obj->book(startTime,endTime);\n */",
    "java": "class MyCalendar {\n\n    public MyCalendar() {\n        \n    }\n    \n    public boolean book(int startTime, int endTime) {\n        \n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * MyCalendar obj = new MyCalendar();\n * boolean param_1 = obj.book(startTime,endTime);\n */",
    "python": "class MyCalendar(object):\n\n    def __init__(self):\n        \n\n    def book(self, startTime, endTime):\n        \"\"\"\n        :type startTime: int\n        :type endTime: int\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your MyCalendar object will be instantiated and called as such:\n# obj = MyCalendar()\n# param_1 = obj.book(startTime,endTime)",
    "python3": "class MyCalendar:\n\n    def __init__(self):\n        \n\n    def book(self, startTime: int, endTime: int) -> bool:\n        \n\n\n# Your MyCalendar object will be instantiated and called as such:\n# obj = MyCalendar()\n# param_1 = obj.book(startTime,endTime)",
    "c": "\n\n\ntypedef struct {\n    \n} MyCalendar;\n\n\nMyCalendar* myCalendarCreate() {\n    \n}\n\nbool myCalendarBook(MyCalendar* obj, int startTime, int endTime) {\n    \n}\n\nvoid myCalendarFree(MyCalendar* obj) {\n    \n}\n\n/**\n * Your MyCalendar struct will be instantiated and called as such:\n * MyCalendar* obj = myCalendarCreate();\n * bool param_1 = myCalendarBook(obj, startTime, endTime);\n \n * myCalendarFree(obj);\n*/",
    "csharp": "public class MyCalendar {\n\n    public MyCalendar() {\n        \n    }\n    \n    public bool Book(int startTime, int endTime) {\n        \n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * MyCalendar obj = new MyCalendar();\n * bool param_1 = obj.Book(startTime,endTime);\n */",
    "javascript": "\nvar MyCalendar = function() {\n    \n};\n\n/** \n * @param {number} startTime \n * @param {number} endTime\n * @return {boolean}\n */\nMyCalendar.prototype.book = function(startTime, endTime) {\n    \n};\n\n/** \n * Your MyCalendar object will be instantiated and called as such:\n * var obj = new MyCalendar()\n * var param_1 = obj.book(startTime,endTime)\n */",
    "typescript": "class MyCalendar {\n    constructor() {\n        \n    }\n\n    book(startTime: number, endTime: number): boolean {\n        \n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * var obj = new MyCalendar()\n * var param_1 = obj.book(startTime,endTime)\n */",
    "php": "class MyCalendar {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $startTime\n     * @param Integer $endTime\n     * @return Boolean\n     */\n    function book($startTime, $endTime) {\n        \n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * $obj = MyCalendar();\n * $ret_1 = $obj->book($startTime, $endTime);\n */",
    "swift": "\nclass MyCalendar {\n\n    init() {\n        \n    }\n    \n    func book(_ startTime: Int, _ endTime: Int) -> Bool {\n        \n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * let obj = MyCalendar()\n * let ret_1: Bool = obj.book(startTime, endTime)\n */",
    "kotlin": "class MyCalendar() {\n\n    fun book(startTime: Int, endTime: Int): Boolean {\n        \n    }\n\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * var obj = MyCalendar()\n * var param_1 = obj.book(startTime,endTime)\n */",
    "dart": "class MyCalendar {\n\n  MyCalendar() {\n    \n  }\n  \n  bool book(int startTime, int endTime) {\n    \n  }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * MyCalendar obj = MyCalendar();\n * bool param1 = obj.book(startTime,endTime);\n */",
    "golang": "type MyCalendar struct {\n    \n}\n\n\nfunc Constructor() MyCalendar {\n    \n}\n\n\nfunc (this *MyCalendar) Book(startTime int, endTime int) bool {\n    \n}\n\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Book(startTime,endTime);\n */",
    "ruby": "class MyCalendar\n    def initialize()\n        \n    end\n\n\n=begin\n    :type start_time: Integer\n    :type end_time: Integer\n    :rtype: Boolean\n=end\n    def book(start_time, end_time)\n        \n    end\n\n\nend\n\n# Your MyCalendar object will be instantiated and called as such:\n# obj = MyCalendar.new()\n# param_1 = obj.book(start_time, end_time)",
    "scala": "class MyCalendar() {\n\n    def book(startTime: Int, endTime: Int): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * val obj = new MyCalendar()\n * val param_1 = obj.book(startTime,endTime)\n */",
    "rust": "struct MyCalendar {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyCalendar {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn book(&self, start_time: i32, end_time: i32) -> bool {\n        \n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * let obj = MyCalendar::new();\n * let ret_1: bool = obj.book(startTime, endTime);\n */",
    "racket": "(define my-calendar%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; book : exact-integer? exact-integer? -> boolean?\n    (define/public (book start-time end-time)\n      )))\n\n;; Your my-calendar% object will be instantiated and called as such:\n;; (define obj (new my-calendar%))\n;; (define param_1 (send obj book start-time end-time))",
    "erlang": "-spec my_calendar_init_() -> any().\nmy_calendar_init_() ->\n  .\n\n-spec my_calendar_book(StartTime :: integer(), EndTime :: integer()) -> boolean().\nmy_calendar_book(StartTime, EndTime) ->\n  .\n\n\n%% Your functions will be called as such:\n%% my_calendar_init_(),\n%% Param_1 = my_calendar_book(StartTime, EndTime),\n\n%% my_calendar_init_ will be called before every test case, in which you can do some necessary initializations.",
    "elixir": "defmodule MyCalendar do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec book(start_time :: integer, end_time :: integer) :: boolean\n  def book(start_time, end_time) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# MyCalendar.init_()\n# param_1 = MyCalendar.book(start_time, end_time)\n\n# MyCalendar.init_ will be called before every test case, in which you can do some necessary initializations."
  },
  "solution": "[TOC]\n\n### Overview\n\nThe primary challenge in this problem is to find a proper data structure and an efficient algorithm to maintain all valid events, including **querying** potentially conflicting existing events and **inserting** new valid events.\n\nIn this solution article, we first start with a straightforward idea of brute force to warm up, then one step forward, we improve the naive approach to keep all existing events in sorted order and reduce the time complexity.\n\n### Approach #1: Brute Force\n\n**Intuition**\n\nWhen booking a new event `[start, end)`, check if every current event conflicts with the new event. If none of them do, we can book the event.\n\n**Algorithm**\n\nWe will maintain a list of interval *events* (not necessarily sorted). Evidently, two events `[s1, e1)` and `[s2, e2)` do *not* conflict if and only if one of them starts after the other one ends: either `e1 <= s2` OR `e2 <= s1`. By De Morgan's laws, this means the events conflict when `s1 < e2` AND `s2 < e1`.\n\n**Implementation****Complexity Analysis**\n\nLet $$N$$ be the number of events booked.\n\n* Time Complexity: $$O(N^2)$$. For each new event, we process every previous event to decide whether the new event can be booked. This leads to $$\\sum_k^N O(k) = O(N^2)$$ complexity.\n\n* Space Complexity: $$O(N)$$, the size of the `calendar`.\n\n---\n\n### Approach #2: Sorted List + Binary Search\n\n**Intuition**\n\nIf we maintained our events in *sorted* order, we could check whether an event could be booked in $$O(\\log N)$$ time (where $$N$$ is the number of events already booked) by binary searching for where the event should be placed. We would also have to insert the event in our sorted structure.\n\n**Algorithm**\n\n1. Initialize with an empty sorted list data structure `calendar`.\n2. For every new interval`[start, end)` in `book()` invokation, we check if there is a conflict on each side with neighboring intervals.\n    1. Lookup the first index `idx`, which maps to an element `[s1,e1)` in `calendar` and `s > start`, and this step can be conducted by binary search (see [this explore card](https://leetcode.com/explore/learn/card/binary-search/)) as we keep `calendar` in sorted order by starting points of intervals. (Notice that there may not be such an `idx` because `start` >= all kept intervals. In this case, we don't need to check the following step)\n    2. Check if `end > s1`. If yes, `[start, end)` and `[s1,e1)` must be overlapped, `[start, end)` is illegal, and we should return false for the invokation now.\n    3. Roll back to the index `idx-1`, which maps to an element `[s2,e2)` in `calendar` and `s1` is the largest staring points that satisfy `s1 <= start`. (Similarly, notice that there may be no element at `idx-1` because `idx` is the 0-th index. In this case, we don't need to check the following step either)\n    4. Check if `e2 > start`. If yes, `[s2,e2)` and `[start, end)` must be overlapped, `[start, end)` is illegal, and we should return false for the invokation now.\n    5. If `[start, end)` passes all checkings above, we insert this valid interval at `idx` in `calendar`.\n\n**Implementation**\n\nWe need a data structure that keeps elements sorted and supports fast insertion. \n- In Java, a [`TreeMap`](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/TreeMap.html) is the perfect candidate. \n- In C++, we can use `set` container and [`lower_bound` method](https://cplusplus.com/reference/set/set/lower_bound/).\n- In Python, we can keep a [`SortedList`](https://grantjenks.com/docs/sortedcontainers/sortedlist.html).**Complexity Analysis**\n\nLike Approach 1, let $$N$$ be the number of events booked.\n\n* Time Complexity: $$O(N \\log N)$$. For each new event, we search that the event is legal in $$O(\\log N)$$ time, then insert it in $$O(\\log N)$$ time.\n\n* Space Complexity: $$O(N)$$, the size of the data structures used.\n\n> Note: In practice, for Python, if you use `bisect.insort()` or `list.insert()` to add new events to a built-in list as `calendar`, it will result in a time complexity as $$O(N)$$ instead of $$O(\\log N)$$ for each insertion operation (see [the docs](https://docs.python.org/3/library/bisect.html#bisect.insort)). However, due to the built-in instruction optimization in `list.insert()` and the constraint of $$N \\le 1000$$ in this problem, this $$O(N^2)$$ solution may somehow show a better performance in runtime. But we won't provide this solution code here because the time complexity matters."
}
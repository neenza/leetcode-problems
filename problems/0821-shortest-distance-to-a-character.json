{
  "title": "Shortest Distance to a Character",
  "problem_id": "841",
  "frontend_id": "821",
  "difficulty": "Easy",
  "problem_slug": "shortest-distance-to-a-character",
  "topics": [
    "Array",
    "Two Pointers",
    "String"
  ],
  "description": "Given a string s and a character c that occurs in s, return an array of integers answer where answer.length == s.length and answer[i] is the distance from index i to the closest occurrence of character c in s.\nThe distance between two indices i and j is abs(i - j), where abs is the absolute value function.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"loveleetcode\", c = \"e\"\nOutput: [3,2,1,0,1,0,0,1,2,2,1,0]\nExplanation: The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).\nThe closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.\nThe closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 2.\nFor index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.\nThe closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"aaab\", c = \"b\"\nOutput: [3,2,1,0]",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 104",
    "s[i] and c are lowercase English letters.",
    "It is guaranteed that c occurs at least once in s."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] shortestToChar(String s, char c) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def shortestToChar(self, s, c):\n        \"\"\"\n        :type s: str\n        :type c: str\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def shortestToChar(self, s: str, c: str) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* shortestToChar(char* s, char c, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] ShortestToChar(string s, char c) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @param {character} c\n * @return {number[]}\n */\nvar shortestToChar = function(s, c) {\n    \n};",
    "typescript": "function shortestToChar(s: string, c: string): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $c\n     * @return Integer[]\n     */\n    function shortestToChar($s, $c) {\n        \n    }\n}",
    "swift": "class Solution {\n    func shortestToChar(_ s: String, _ c: Character) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun shortestToChar(s: String, c: Char): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> shortestToChar(String s, String c) {\n    \n  }\n}",
    "golang": "func shortestToChar(s string, c byte) []int {\n    \n}",
    "ruby": "# @param {String} s\n# @param {Character} c\n# @return {Integer[]}\ndef shortest_to_char(s, c)\n    \nend",
    "scala": "object Solution {\n    def shortestToChar(s: String, c: Char): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn shortest_to_char(s: String, c: char) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (shortest-to-char s c)\n  (-> string? char? (listof exact-integer?))\n  )",
    "erlang": "-spec shortest_to_char(S :: unicode:unicode_binary(), C :: char()) -> [integer()].\nshortest_to_char(S, C) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec shortest_to_char(s :: String.t, c :: char) :: [integer]\n  def shortest_to_char(s, c) do\n    \n  end\nend"
  }
}
{
  "title": "Valid Mountain Array",
  "problem_id": "978",
  "frontend_id": "941",
  "difficulty": "Easy",
  "problem_slug": "valid-mountain-array",
  "topics": [
    "Array"
  ],
  "description": "Given an array of integers arr, return true if and only if it is a valid mountain array.\nRecall that arr is a mountain array if and only if:\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: arr = [2,1]\nOutput: false",
      "images": [
        "https://assets.leetcode.com/uploads/2019/10/20/hint_valid_mountain_array.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: arr = [3,5,5]\nOutput: false",
      "images": [
        "https://assets.leetcode.com/uploads/2019/10/20/hint_valid_mountain_array.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: arr = [0,3,2,1]\nOutput: true",
      "images": [
        "https://assets.leetcode.com/uploads/2019/10/20/hint_valid_mountain_array.png"
      ]
    }
  ],
  "constraints": [
    "1 <= arr.length <= 104",
    "0 <= arr[i] <= 104"
  ],
  "follow_ups": [],
  "hints": [
    "It's very easy to keep track of a monotonically increasing or decreasing ordering of elements. You just need to be able to determine the start of the valley in the mountain and from that point onwards, it should be a valley i.e. no mini-hills after that. Use this information in regards to the values in the array and you will be able to come up with a straightforward solution."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool validMountainArray(vector<int>& arr) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean validMountainArray(int[] arr) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def validMountainArray(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def validMountainArray(self, arr: List[int]) -> bool:\n        ",
    "c": "\n\nbool validMountainArray(int* arr, int arrSize){\n\n}",
    "csharp": "public class Solution {\n    public bool ValidMountainArray(int[] arr) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} arr\n * @return {boolean}\n */\nvar validMountainArray = function(arr) {\n    \n};",
    "typescript": "function validMountainArray(arr: number[]): boolean {\n\n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Boolean\n     */\n    function validMountainArray($arr) {\n        \n    }\n}",
    "swift": "class Solution {\n    func validMountainArray(_ arr: [Int]) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun validMountainArray(arr: IntArray): Boolean {\n        \n    }\n}",
    "golang": "func validMountainArray(arr []int) bool {\n    \n}",
    "ruby": "# @param {Integer[]} arr\n# @return {Boolean}\ndef valid_mountain_array(arr)\n    \nend",
    "scala": "object Solution {\n    def validMountainArray(arr: Array[Int]): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn valid_mountain_array(arr: Vec<i32>) -> bool {\n        \n    }\n}"
  }
}
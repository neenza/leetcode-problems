{
  "title": "Number of Orders in the Backlog",
  "problem_id": "1928",
  "frontend_id": "1801",
  "difficulty": "Medium",
  "problem_slug": "number-of-orders-in-the-backlog",
  "topics": [
    "Array",
    "Heap (Priority Queue)",
    "Simulation"
  ],
  "description": "You are given a 2D integer array orders, where each orders[i] = [pricei, amounti, orderTypei] denotes that amounti orders have been placed of type orderTypei at the price pricei. The orderTypei is:\nNote that orders[i] represents a batch of amounti independent orders with the same price and order type. All orders represented by orders[i] will be placed before all orders represented by orders[i+1] for all valid i.\nThere is a backlog that consists of orders that have not been executed. The backlog is initially empty. When an order is placed, the following happens:\nReturn the total amount of orders in the backlog after placing all the orders from the input. Since this number can be large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]\r\nOutput: 6\r\nExplanation: Here is what happens with the orders:\r\n- 5 orders of type buy with price 10 are placed. There are no sell orders, so the 5 orders are added to the backlog.\r\n- 2 orders of type sell with price 15 are placed. There are no buy orders with prices larger than or equal to 15, so the 2 orders are added to the backlog.\r\n- 1 order of type sell with price 25 is placed. There are no buy orders with prices larger than or equal to 25 in the backlog, so this order is added to the backlog.\r\n- 4 orders of type buy with price 30 are placed. The first 2 orders are matched with the 2 sell orders of the least price, which is 15 and these 2 sell orders are removed from the backlog. The 3rd order is matched with the sell order of the least price, which is 25 and this sell order is removed from the backlog. Then, there are no more sell orders in the backlog, so the 4th order is added to the backlog.\r\nFinally, the backlog has 5 buy orders with price 10, and 1 buy order with price 30. So the total number of orders in the backlog is 6.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/03/11/ex1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]\r\nOutput: 999999984\r\nExplanation: Here is what happens with the orders:\r\n- 109 orders of type sell with price 7 are placed. There are no buy orders, so the 109 orders are added to the backlog.\r\n- 3 orders of type buy with price 15 are placed. They are matched with the 3 sell orders with the least price which is 7, and those 3 sell orders are removed from the backlog.\r\n- 999999995 orders of type buy with price 5 are placed. The least price of a sell order is 7, so the 999999995 orders are added to the backlog.\r\n- 1 order of type sell with price 5 is placed. It is matched with the buy order of the highest price, which is 5, and that buy order is removed from the backlog.\r\nFinally, the backlog has (1000000000-3) sell orders with price 7, and (999999995-1) buy orders with price 5. So the total number of orders = 1999999991, which is equal to 999999984 % (109 + 7).",
      "images": [
        "https://assets.leetcode.com/uploads/2021/03/11/ex2.png"
      ]
    }
  ],
  "constraints": [
    "1 <= orders.length <= 105",
    "orders[i].length == 3",
    "1 <= pricei, amounti <= 109",
    "orderTypei is either 0 or 1."
  ],
  "follow_ups": [],
  "hints": [
    "Store the backlog buy and sell orders in two heaps, the buy orders in a max heap by price and the sell orders in a min heap by price.",
    "Store the orders in batches and update the fields according to new incoming orders. Each batch should only take 1 \"slot\" in the heap."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int getNumberOfBacklogOrders(vector<vector<int>>& orders) {\n        \n    }\n};",
    "java": "class Solution {\n    public int getNumberOfBacklogOrders(int[][] orders) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def getNumberOfBacklogOrders(self, orders):\n        \"\"\"\n        :type orders: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def getNumberOfBacklogOrders(self, orders: List[List[int]]) -> int:\n        ",
    "c": "\n\nint getNumberOfBacklogOrders(int** orders, int ordersSize, int* ordersColSize){\n\n}",
    "csharp": "public class Solution {\n    public int GetNumberOfBacklogOrders(int[][] orders) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} orders\n * @return {number}\n */\nvar getNumberOfBacklogOrders = function(orders) {\n    \n};",
    "typescript": "function getNumberOfBacklogOrders(orders: number[][]): number {\n\n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $orders\n     * @return Integer\n     */\n    function getNumberOfBacklogOrders($orders) {\n        \n    }\n}",
    "swift": "class Solution {\n    func getNumberOfBacklogOrders(_ orders: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun getNumberOfBacklogOrders(orders: Array<IntArray>): Int {\n        \n    }\n}",
    "golang": "func getNumberOfBacklogOrders(orders [][]int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} orders\n# @return {Integer}\ndef get_number_of_backlog_orders(orders)\n    \nend",
    "scala": "object Solution {\n    def getNumberOfBacklogOrders(orders: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn get_number_of_backlog_orders(orders: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (get-number-of-backlog-orders orders)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n\n  )"
  }
}
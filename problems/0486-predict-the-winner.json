{
  "title": "Predict the Winner",
  "problem_id": "486",
  "frontend_id": "486",
  "difficulty": "Medium",
  "problem_slug": "predict-the-winner",
  "topics": [
    "Array",
    "Math",
    "Dynamic Programming",
    "Recursion",
    "Game Theory"
  ],
  "description": "You are given an integer array nums. Two players are playing a game with this array: player 1 and player 2.\nPlayer 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of 0. At each turn, the player takes one of the numbers from either end of the array (i.e., nums[0] or nums[nums.length - 1]) which reduces the size of the array by 1. The player adds the chosen number to their score. The game ends when there are no more elements in the array.\nReturn true if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return true. You may assume that both players are playing optimally.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,5,2]\nOutput: false\nExplanation: Initially, player 1 can choose between 1 and 2. \nIf he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). \nSo, final score of player 1 is 1 + 2 = 3, and player 2 is 5. \nHence, player 1 will never be the winner and you need to return false.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,5,233,7]\nOutput: true\nExplanation: Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.\nFinally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 20",
    "0 <= nums[i] <= 107"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool predictTheWinner(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean predictTheWinner(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def predictTheWinner(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def predictTheWinner(self, nums: List[int]) -> bool:\n        ",
    "c": "bool predictTheWinner(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public bool PredictTheWinner(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar predictTheWinner = function(nums) {\n    \n};",
    "typescript": "function predictTheWinner(nums: number[]): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function predictTheWinner($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func predictTheWinner(_ nums: [Int]) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun predictTheWinner(nums: IntArray): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool predictTheWinner(List<int> nums) {\n    \n  }\n}",
    "golang": "func predictTheWinner(nums []int) bool {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Boolean}\ndef predict_the_winner(nums)\n    \nend",
    "scala": "object Solution {\n    def predictTheWinner(nums: Array[Int]): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn predict_the_winner(nums: Vec<i32>) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (predict-the-winner nums)\n  (-> (listof exact-integer?) boolean?)\n  )",
    "erlang": "-spec predict_the_winner(Nums :: [integer()]) -> boolean().\npredict_the_winner(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec predict_the_winner(nums :: [integer]) :: boolean\n  def predict_the_winner(nums) do\n    \n  end\nend"
  }
}
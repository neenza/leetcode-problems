{
  "title": "Integer to Roman",
  "problem_id": "12",
  "frontend_id": "12",
  "difficulty": "Medium",
  "problem_slug": "integer-to-roman",
  "topics": [
    "Hash Table",
    "Math",
    "String"
  ],
  "description": "Seven different symbols represent Roman numerals with the following values:\nRoman numerals are formed by appending the conversions of decimal place values from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules:\nGiven an integer, convert it to a Roman numeral.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "3000 = MMM as 1000 (M) + 1000 (M) + 1000 (M)\n 700 = DCC as 500 (D) + 100 (C) + 100 (C)\n  40 = XL as 10 (X) less of 50 (L)\n   9 = IX as 1 (I) less of 10 (X)\nNote: 49 is not 1 (I) less of 50 (L) because the conversion is based on decimal places",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "50 = L\n 8 = VIII",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "1000 = M\n 900 = CM\n  90 = XC\n   4 = IV",
      "images": []
    }
  ],
  "constraints": [
    "1 <= num <= 3999"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string intToRoman(int num) {\n        \n    }\n};",
    "java": "class Solution {\n    public String intToRoman(int num) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def intToRoman(self, num: int) -> str:\n        ",
    "c": "char* intToRoman(int num) {\n    \n}",
    "csharp": "public class Solution {\n    public string IntToRoman(int num) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} num\n * @return {string}\n */\nvar intToRoman = function(num) {\n    \n};",
    "typescript": "function intToRoman(num: number): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return String\n     */\n    function intToRoman($num) {\n        \n    }\n}",
    "swift": "class Solution {\n    func intToRoman(_ num: Int) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun intToRoman(num: Int): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String intToRoman(int num) {\n    \n  }\n}",
    "golang": "func intToRoman(num int) string {\n    \n}",
    "ruby": "# @param {Integer} num\n# @return {String}\ndef int_to_roman(num)\n    \nend",
    "scala": "object Solution {\n    def intToRoman(num: Int): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn int_to_roman(num: i32) -> String {\n        \n    }\n}",
    "racket": "(define/contract (int-to-roman num)\n  (-> exact-integer? string?)\n  )",
    "erlang": "-spec int_to_roman(Num :: integer()) -> unicode:unicode_binary().\nint_to_roman(Num) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec int_to_roman(num :: integer) :: String.t\n  def int_to_roman(num) do\n    \n  end\nend"
  }
}
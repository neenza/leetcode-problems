{
  "title": "Sliding Subarray Beauty",
  "problem_id": "2751",
  "frontend_id": "2653",
  "difficulty": "Medium",
  "problem_slug": "sliding-subarray-beauty",
  "topics": [
    "Array",
    "Hash Table",
    "Sliding Window"
  ],
  "description": "Given an integer array nums containing n integers, find the beauty of each subarray of size k.\nThe beauty of a subarray is the xth smallest integer in the subarray if it is negative, or 0 if there are fewer than x negative integers.\nReturn an integer array containing n - k + 1 integers, which denote the beauty of the subarrays in order from the first index in the array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,-1,-3,-2,3], k = 3, x = 2\nOutput: [-1,-2,-2]\nExplanation: There are 3 subarrays with size k = 3. \nThe first subarray is [1, -1, -3] and the 2nd smallest negative integer is -1. \nThe second subarray is [-1, -3, -2] and the 2nd smallest negative integer is -2. \nThe third subarray is [-3, -2, 3] and the 2nd smallest negative integer is -2.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [-1,-2,-3,-4,-5], k = 2, x = 2\nOutput: [-1,-2,-3,-4]\nExplanation: There are 4 subarrays with size k = 2.\nFor [-1, -2], the 2nd smallest negative integer is -1.\nFor [-2, -3], the 2nd smallest negative integer is -2.\nFor [-3, -4], the 2nd smallest negative integer is -3.\nFor [-4, -5], the 2nd smallest negative integer is -4.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [-3,1,2,-3,0,-3], k = 2, x = 1\nOutput: [-3,0,-3,-3,-3]\nExplanation: There are 5 subarrays with size k = 2.\nFor [-3, 1], the 1st smallest negative integer is -3.\nFor [1, 2], there is no negative integer so the beauty is 0.\nFor [2, -3], the 1st smallest negative integer is -3.\nFor [-3, 0], the 1st smallest negative integer is -3.\nFor [0, -3], the 1st smallest negative integer is -3.",
      "images": []
    }
  ],
  "constraints": [
    "n == nums.length",
    "1 <= n <= 105",
    "1 <= k <= n",
    "1 <= x <= k",
    "-50 <= nums[i] <= 50"
  ],
  "follow_ups": [],
  "hints": [
    "Try to maintain the frequency of negative numbers in the current window of size k.",
    "The x^th smallest negative integer can be gotten by iterating through the frequencies of the numbers in order."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> getSubarrayBeauty(vector<int>& nums, int k, int x) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] getSubarrayBeauty(int[] nums, int k, int x) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def getSubarrayBeauty(self, nums, k, x):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :type x: int\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def getSubarrayBeauty(self, nums: List[int], k: int, x: int) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* getSubarrayBeauty(int* nums, int numsSize, int k, int x, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] GetSubarrayBeauty(int[] nums, int k, int x) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @param {number} x\n * @return {number[]}\n */\nvar getSubarrayBeauty = function(nums, k, x) {\n    \n};",
    "typescript": "function getSubarrayBeauty(nums: number[], k: number, x: number): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @param Integer $x\n     * @return Integer[]\n     */\n    function getSubarrayBeauty($nums, $k, $x) {\n        \n    }\n}",
    "swift": "class Solution {\n    func getSubarrayBeauty(_ nums: [Int], _ k: Int, _ x: Int) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun getSubarrayBeauty(nums: IntArray, k: Int, x: Int): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> getSubarrayBeauty(List<int> nums, int k, int x) {\n    \n  }\n}",
    "golang": "func getSubarrayBeauty(nums []int, k int, x int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @param {Integer} x\n# @return {Integer[]}\ndef get_subarray_beauty(nums, k, x)\n    \nend",
    "scala": "object Solution {\n    def getSubarrayBeauty(nums: Array[Int], k: Int, x: Int): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn get_subarray_beauty(nums: Vec<i32>, k: i32, x: i32) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (get-subarray-beauty nums k x)\n  (-> (listof exact-integer?) exact-integer? exact-integer? (listof exact-integer?))\n  )",
    "erlang": "-spec get_subarray_beauty(Nums :: [integer()], K :: integer(), X :: integer()) -> [integer()].\nget_subarray_beauty(Nums, K, X) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec get_subarray_beauty(nums :: [integer], k :: integer, x :: integer) :: [integer]\n  def get_subarray_beauty(nums, k, x) do\n    \n  end\nend"
  }
}
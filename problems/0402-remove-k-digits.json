{
  "title": "Remove K Digits",
  "problem_id": "402",
  "frontend_id": "402",
  "difficulty": "Medium",
  "problem_slug": "remove-k-digits",
  "topics": [
    "String",
    "Stack",
    "Greedy",
    "Monotonic Stack"
  ],
  "description": "Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: num = \"1432219\", k = 3\nOutput: \"1219\"\nExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: num = \"10200\", k = 1\nOutput: \"200\"\nExplanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: num = \"10\", k = 2\nOutput: \"0\"\nExplanation: Remove all the digits from the number and it is left with nothing which is 0.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= k <= num.length <= 105",
    "num consists of only digits.",
    "num does not have any leading zeros except for the zero itself."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string removeKdigits(string num, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public String removeKdigits(String num, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def removeKdigits(self, num, k):\n        \"\"\"\n        :type num: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def removeKdigits(self, num: str, k: int) -> str:\n        ",
    "c": "char* removeKdigits(char* num, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public string RemoveKdigits(string num, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} num\n * @param {number} k\n * @return {string}\n */\nvar removeKdigits = function(num, k) {\n    \n};",
    "typescript": "function removeKdigits(num: string, k: number): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $num\n     * @param Integer $k\n     * @return String\n     */\n    function removeKdigits($num, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func removeKdigits(_ num: String, _ k: Int) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun removeKdigits(num: String, k: Int): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String removeKdigits(String num, int k) {\n    \n  }\n}",
    "golang": "func removeKdigits(num string, k int) string {\n    \n}",
    "ruby": "# @param {String} num\n# @param {Integer} k\n# @return {String}\ndef remove_kdigits(num, k)\n    \nend",
    "scala": "object Solution {\n    def removeKdigits(num: String, k: Int): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn remove_kdigits(num: String, k: i32) -> String {\n        \n    }\n}",
    "racket": "(define/contract (remove-kdigits num k)\n  (-> string? exact-integer? string?)\n  )",
    "erlang": "-spec remove_kdigits(Num :: unicode:unicode_binary(), K :: integer()) -> unicode:unicode_binary().\nremove_kdigits(Num, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec remove_kdigits(num :: String.t, k :: integer) :: String.t\n  def remove_kdigits(num, k) do\n    \n  end\nend"
  }
}
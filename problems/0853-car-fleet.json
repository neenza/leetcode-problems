{
  "title": "Car Fleet",
  "problem_id": "883",
  "frontend_id": "853",
  "difficulty": "Medium",
  "problem_slug": "car-fleet",
  "topics": [
    "Array",
    "Stack",
    "Sorting",
    "Monotonic Stack"
  ],
  "description": "There are n cars at given miles away from the starting mile 0, traveling to reach the mile target.\nYou are given two integer arraysÂ position and speed, both of length n, where position[i] is the starting mile of the ith car and speed[i] is the speed of the ith car in miles per hour.\nA car cannot pass another car, but it can catch up and then travel next to it at the speed of the slower car.\nA car fleet is a car or cars driving next to each other. The speed of the car fleet is the minimum speed of any car in the fleet.\nIf a car catches up to a car fleet at the mile target, it will still be considered as part of the car fleet.\nReturn the number of car fleets that will arrive at the destination.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]\nOutput: 3\nExplanation:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: target = 10, position = [3], speed = [3]\nOutput: 1\nExplanation:",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: target = 100, position = [0,2,4], speed = [4,2,1]\nOutput: 1\nExplanation:",
      "images": []
    }
  ],
  "constraints": [
    "n == position.length == speed.length",
    "1 <= n <= 105",
    "0 < target <= 106",
    "0 <= position[i] < target",
    "All the values of position are unique.",
    "0 < speed[i] <= 106"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int carFleet(int target, vector<int>& position, vector<int>& speed) {\n        \n    }\n};",
    "java": "class Solution {\n    public int carFleet(int target, int[] position, int[] speed) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def carFleet(self, target, position, speed):\n        \"\"\"\n        :type target: int\n        :type position: List[int]\n        :type speed: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def carFleet(self, target: int, position: List[int], speed: List[int]) -> int:\n        ",
    "c": "int carFleet(int target, int* position, int positionSize, int* speed, int speedSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int CarFleet(int target, int[] position, int[] speed) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} target\n * @param {number[]} position\n * @param {number[]} speed\n * @return {number}\n */\nvar carFleet = function(target, position, speed) {\n    \n};",
    "typescript": "function carFleet(target: number, position: number[], speed: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $target\n     * @param Integer[] $position\n     * @param Integer[] $speed\n     * @return Integer\n     */\n    function carFleet($target, $position, $speed) {\n        \n    }\n}",
    "swift": "class Solution {\n    func carFleet(_ target: Int, _ position: [Int], _ speed: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun carFleet(target: Int, position: IntArray, speed: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int carFleet(int target, List<int> position, List<int> speed) {\n    \n  }\n}",
    "golang": "func carFleet(target int, position []int, speed []int) int {\n    \n}",
    "ruby": "# @param {Integer} target\n# @param {Integer[]} position\n# @param {Integer[]} speed\n# @return {Integer}\ndef car_fleet(target, position, speed)\n    \nend",
    "scala": "object Solution {\n    def carFleet(target: Int, position: Array[Int], speed: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn car_fleet(target: i32, position: Vec<i32>, speed: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (car-fleet target position speed)\n  (-> exact-integer? (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec car_fleet(Target :: integer(), Position :: [integer()], Speed :: [integer()]) -> integer().\ncar_fleet(Target, Position, Speed) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec car_fleet(target :: integer, position :: [integer], speed :: [integer]) :: integer\n  def car_fleet(target, position, speed) do\n    \n  end\nend"
  }
}
{
  "title": "N-Queens II",
  "problem_id": "52",
  "frontend_id": "52",
  "difficulty": "Hard",
  "problem_slug": "n-queens-ii",
  "topics": [
    "Backtracking"
  ],
  "description": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\nGiven an integer n, return the number of distinct solutions to theÂ n-queens puzzle.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 4\nOutput: 2\nExplanation: There are two distinct solutions to the 4-queens puzzle as shown.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/11/13/queens.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 1\nOutput: 1",
      "images": [
        "https://assets.leetcode.com/uploads/2020/11/13/queens.jpg"
      ]
    }
  ],
  "constraints": [
    "1 <= n <= 9"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int totalNQueens(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int totalNQueens(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def totalNQueens(self, n: int) -> int:\n        ",
    "c": "int totalNQueens(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int TotalNQueens(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar totalNQueens = function(n) {\n    \n};",
    "typescript": "function totalNQueens(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function totalNQueens($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func totalNQueens(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun totalNQueens(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int totalNQueens(int n) {\n    \n  }\n}",
    "golang": "func totalNQueens(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef total_n_queens(n)\n    \nend",
    "scala": "object Solution {\n    def totalNQueens(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn total_n_queens(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (total-n-queens n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec total_n_queens(N :: integer()) -> integer().\ntotal_n_queens(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec total_n_queens(n :: integer) :: integer\n  def total_n_queens(n) do\n    \n  end\nend"
  }
}
{
  "title": "Maximum Points You Can Obtain from Cards",
  "problem_id": "1538",
  "frontend_id": "1423",
  "difficulty": "Medium",
  "problem_slug": "maximum-points-you-can-obtain-from-cards",
  "topics": [
    "Array",
    "Sliding Window",
    "Prefix Sum"
  ],
  "description": "There are several cards arranged in a row, and each card has an associated number of points. The points are given in the integer array cardPoints.\nIn one step, you can take one card from the beginning or from the end of the row. You have to take exactly k cards.\nYour score is the sum of the points of the cards you have taken.\nGiven the integer array cardPoints and the integer k, return the maximum score you can obtain.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: cardPoints = [1,2,3,4,5,6,1], k = 3\nOutput: 12\nExplanation: After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: cardPoints = [2,2,2], k = 2\nOutput: 4\nExplanation: Regardless of which two cards you take, your score will always be 4.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: cardPoints = [9,7,7,9,7,7,9], k = 7\nOutput: 55\nExplanation: You have to take all the cards. Your score is the sum of points of all cards.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= cardPoints.length <= 105",
    "1 <= cardPoints[i] <= 104",
    "1 <= k <= cardPoints.length"
  ],
  "follow_ups": [],
  "hints": [
    "Let the sum of all points be total_pts. You need to remove a sub-array from cardPoints with length n - k.",
    "Keep a window of size n - k over the array. The answer is max(answer, total_pts - sumOfCurrentWindow)"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxScore(vector<int>& cardPoints, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxScore(int[] cardPoints, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxScore(self, cardPoints, k):\n        \"\"\"\n        :type cardPoints: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxScore(self, cardPoints: List[int], k: int) -> int:\n        ",
    "c": "int maxScore(int* cardPoints, int cardPointsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxScore(int[] cardPoints, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} cardPoints\n * @param {number} k\n * @return {number}\n */\nvar maxScore = function(cardPoints, k) {\n    \n};",
    "typescript": "function maxScore(cardPoints: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $cardPoints\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxScore($cardPoints, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxScore(_ cardPoints: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxScore(cardPoints: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxScore(List<int> cardPoints, int k) {\n    \n  }\n}",
    "golang": "func maxScore(cardPoints []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} card_points\n# @param {Integer} k\n# @return {Integer}\ndef max_score(card_points, k)\n    \nend",
    "scala": "object Solution {\n    def maxScore(cardPoints: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_score(card_points: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-score cardPoints k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec max_score(CardPoints :: [integer()], K :: integer()) -> integer().\nmax_score(CardPoints, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_score(card_points :: [integer], k :: integer) :: integer\n  def max_score(card_points, k) do\n    \n  end\nend"
  }
}
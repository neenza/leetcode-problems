{
  "title": "Interval List Intersections",
  "problem_id": "1028",
  "frontend_id": "986",
  "difficulty": "Medium",
  "problem_slug": "interval-list-intersections",
  "topics": [
    "Array",
    "Two Pointers",
    "Line Sweep"
  ],
  "description": "You are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj]. Each list of intervals is pairwise disjoint and in sorted order.\nReturn the intersection of these two interval lists.\nA closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.\nThe intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of [1, 3] and [2, 4] is [2, 3].\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]\nOutput: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]",
      "images": [
        "https://assets.leetcode.com/uploads/2019/01/30/interval1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: firstList = [[1,3],[5,9]], secondList = []\nOutput: []",
      "images": [
        "https://assets.leetcode.com/uploads/2019/01/30/interval1.png"
      ]
    }
  ],
  "constraints": [
    "0 <= firstList.length, secondList.length <= 1000",
    "firstList.length + secondList.length >= 1",
    "0 <= starti < endi <= 109",
    "endi < starti+1",
    "0 <= startj < endj <= 109",
    "endj < startj+1"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<vector<int>> intervalIntersection(vector<vector<int>>& firstList, vector<vector<int>>& secondList) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[][] intervalIntersection(int[][] firstList, int[][] secondList) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def intervalIntersection(self, firstList, secondList):\n        \"\"\"\n        :type firstList: List[List[int]]\n        :type secondList: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def intervalIntersection(self, firstList: List[List[int]], secondList: List[List[int]]) -> List[List[int]]:\n        ",
    "c": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** intervalIntersection(int** firstList, int firstListSize, int* firstListColSize, int** secondList, int secondListSize, int* secondListColSize, int* returnSize, int** returnColumnSizes) {\n    \n}",
    "csharp": "public class Solution {\n    public int[][] IntervalIntersection(int[][] firstList, int[][] secondList) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} firstList\n * @param {number[][]} secondList\n * @return {number[][]}\n */\nvar intervalIntersection = function(firstList, secondList) {\n    \n};",
    "typescript": "function intervalIntersection(firstList: number[][], secondList: number[][]): number[][] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $firstList\n     * @param Integer[][] $secondList\n     * @return Integer[][]\n     */\n    function intervalIntersection($firstList, $secondList) {\n        \n    }\n}",
    "swift": "class Solution {\n    func intervalIntersection(_ firstList: [[Int]], _ secondList: [[Int]]) -> [[Int]] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun intervalIntersection(firstList: Array<IntArray>, secondList: Array<IntArray>): Array<IntArray> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<List<int>> intervalIntersection(List<List<int>> firstList, List<List<int>> secondList) {\n    \n  }\n}",
    "golang": "func intervalIntersection(firstList [][]int, secondList [][]int) [][]int {\n    \n}",
    "ruby": "# @param {Integer[][]} first_list\n# @param {Integer[][]} second_list\n# @return {Integer[][]}\ndef interval_intersection(first_list, second_list)\n    \nend",
    "scala": "object Solution {\n    def intervalIntersection(firstList: Array[Array[Int]], secondList: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn interval_intersection(first_list: Vec<Vec<i32>>, second_list: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}",
    "racket": "(define/contract (interval-intersection firstList secondList)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )",
    "erlang": "-spec interval_intersection(FirstList :: [[integer()]], SecondList :: [[integer()]]) -> [[integer()]].\ninterval_intersection(FirstList, SecondList) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec interval_intersection(first_list :: [[integer]], second_list :: [[integer]]) :: [[integer]]\n  def interval_intersection(first_list, second_list) do\n    \n  end\nend"
  }
}
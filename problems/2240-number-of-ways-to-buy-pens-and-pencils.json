{
  "title": "Number of Ways to Buy Pens and Pencils",
  "problem_id": "2351",
  "frontend_id": "2240",
  "difficulty": "Medium",
  "problem_slug": "number-of-ways-to-buy-pens-and-pencils",
  "topics": [
    "Math",
    "Enumeration"
  ],
  "description": "You are given an integer total indicating the amount of money you have. You are also given two integers cost1 and cost2 indicating the price of a pen and pencil respectively. You can spend part or all of your money to buy multiple quantities (or none) of each kind of writing utensil.\nReturn the number of distinct ways you can buy some number of pens and pencils.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: total = 20, cost1 = 10, cost2 = 5\nOutput: 9\nExplanation: The price of a pen is 10 and the price of a pencil is 5.\n- If you buy 0 pens, you can buy 0, 1, 2, 3, or 4 pencils.\n- If you buy 1 pen, you can buy 0, 1, or 2 pencils.\n- If you buy 2 pens, you cannot buy any pencils.\nThe total number of ways to buy pens and pencils is 5 + 3 + 1 = 9.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: total = 5, cost1 = 10, cost2 = 10\nOutput: 1\nExplanation: The price of both pens and pencils are 10, which cost more than total, so you cannot buy any writing utensils. Therefore, there is only 1 way: buy 0 pens and 0 pencils.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= total, cost1, cost2 <= 106"
  ],
  "follow_ups": [],
  "hints": [
    "Fix the number of pencils purchased and calculate the number of ways to buy pens.",
    "Sum up the number of ways to buy pens for each amount of pencils purchased to get the answer."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long waysToBuyPensPencils(int total, int cost1, int cost2) {\n        \n    }\n};",
    "java": "class Solution {\n    public long waysToBuyPensPencils(int total, int cost1, int cost2) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def waysToBuyPensPencils(self, total, cost1, cost2):\n        \"\"\"\n        :type total: int\n        :type cost1: int\n        :type cost2: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def waysToBuyPensPencils(self, total: int, cost1: int, cost2: int) -> int:\n        ",
    "c": "long long waysToBuyPensPencils(int total, int cost1, int cost2) {\n    \n}",
    "csharp": "public class Solution {\n    public long WaysToBuyPensPencils(int total, int cost1, int cost2) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} total\n * @param {number} cost1\n * @param {number} cost2\n * @return {number}\n */\nvar waysToBuyPensPencils = function(total, cost1, cost2) {\n    \n};",
    "typescript": "function waysToBuyPensPencils(total: number, cost1: number, cost2: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $total\n     * @param Integer $cost1\n     * @param Integer $cost2\n     * @return Integer\n     */\n    function waysToBuyPensPencils($total, $cost1, $cost2) {\n        \n    }\n}",
    "swift": "class Solution {\n    func waysToBuyPensPencils(_ total: Int, _ cost1: Int, _ cost2: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun waysToBuyPensPencils(total: Int, cost1: Int, cost2: Int): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int waysToBuyPensPencils(int total, int cost1, int cost2) {\n    \n  }\n}",
    "golang": "func waysToBuyPensPencils(total int, cost1 int, cost2 int) int64 {\n    \n}",
    "ruby": "# @param {Integer} total\n# @param {Integer} cost1\n# @param {Integer} cost2\n# @return {Integer}\ndef ways_to_buy_pens_pencils(total, cost1, cost2)\n    \nend",
    "scala": "object Solution {\n    def waysToBuyPensPencils(total: Int, cost1: Int, cost2: Int): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn ways_to_buy_pens_pencils(total: i32, cost1: i32, cost2: i32) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (ways-to-buy-pens-pencils total cost1 cost2)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec ways_to_buy_pens_pencils(Total :: integer(), Cost1 :: integer(), Cost2 :: integer()) -> integer().\nways_to_buy_pens_pencils(Total, Cost1, Cost2) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec ways_to_buy_pens_pencils(total :: integer, cost1 :: integer, cost2 :: integer) :: integer\n  def ways_to_buy_pens_pencils(total, cost1, cost2) do\n    \n  end\nend"
  }
}
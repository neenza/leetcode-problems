{
  "title": "Prime Palindrome",
  "problem_id": "897",
  "frontend_id": "866",
  "difficulty": "Medium",
  "problem_slug": "prime-palindrome",
  "topics": [
    "Math",
    "Number Theory"
  ],
  "description": "Given an integer n, return the smallest prime palindrome greater than or equal to n.\nAn integer is prime if it has exactly two divisors: 1 and itself. Note that 1 is not a prime number.\nAn integer is a palindrome if it reads the same from left to right as it does from right to left.\nThe test cases are generated so that the answer always exists and is in the range [2, 2 * 108].\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 6\nOutput: 7",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 8\nOutput: 11",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 13\nOutput: 101",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 108"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int primePalindrome(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int primePalindrome(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def primePalindrome(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def primePalindrome(self, n: int) -> int:\n        ",
    "c": "int primePalindrome(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int PrimePalindrome(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar primePalindrome = function(n) {\n    \n};",
    "typescript": "function primePalindrome(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function primePalindrome($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func primePalindrome(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun primePalindrome(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int primePalindrome(int n) {\n    \n  }\n}",
    "golang": "func primePalindrome(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef prime_palindrome(n)\n    \nend",
    "scala": "object Solution {\n    def primePalindrome(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn prime_palindrome(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (prime-palindrome n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec prime_palindrome(N :: integer()) -> integer().\nprime_palindrome(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec prime_palindrome(n :: integer) :: integer\n  def prime_palindrome(n) do\n    \n  end\nend"
  }
}
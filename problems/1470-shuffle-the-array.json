{
  "title": "Shuffle the Array",
  "problem_id": "1580",
  "frontend_id": "1470",
  "difficulty": "Easy",
  "problem_slug": "shuffle-the-array",
  "topics": [
    "Array"
  ],
  "description": "Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].\nReturn the array in the form [x1,y1,x2,y2,...,xn,yn].\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [2,5,1,3,4,7], n = 3\r\nOutput: [2,3,5,4,1,7] \r\nExplanation: Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,2,3,4,4,3,2,1], n = 4\r\nOutput: [1,4,2,3,3,2,4,1]",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,1,2,2], n = 2\r\nOutput: [1,2,1,2]",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 500",
    "nums.length == 2n",
    "1 <= nums[i] <= 10^3"
  ],
  "follow_ups": [],
  "hints": [
    "Use two pointers to create the new array of 2n elements. The first starting at the beginning and the other starting at (n+1)th position. Alternate between them and create the new array."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> shuffle(vector<int>& nums, int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] shuffle(int[] nums, int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def shuffle(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def shuffle(self, nums: List[int], n: int) -> List[int]:\n        ",
    "c": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* shuffle(int* nums, int numsSize, int n, int* returnSize){\n\n}",
    "csharp": "public class Solution {\n    public int[] Shuffle(int[] nums, int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} n\n * @return {number[]}\n */\nvar shuffle = function(nums, n) {\n    \n};",
    "typescript": "function shuffle(nums: number[], n: number): number[] {\n\n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $n\n     * @return Integer[]\n     */\n    function shuffle($nums, $n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func shuffle(_ nums: [Int], _ n: Int) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun shuffle(nums: IntArray, n: Int): IntArray {\n        \n    }\n}",
    "golang": "func shuffle(nums []int, n int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} n\n# @return {Integer[]}\ndef shuffle(nums, n)\n    \nend",
    "scala": "object Solution {\n    def shuffle(nums: Array[Int], n: Int): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn shuffle(nums: Vec<i32>, n: i32) -> Vec<i32> {\n        \n    }\n}"
  }
}
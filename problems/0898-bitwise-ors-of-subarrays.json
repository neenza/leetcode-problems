{
  "title": "Bitwise ORs of Subarrays",
  "problem_id": "934",
  "frontend_id": "898",
  "difficulty": "Medium",
  "problem_slug": "bitwise-ors-of-subarrays",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Bit Manipulation"
  ],
  "description": "Given an integer array arr, return the number of distinct bitwise ORs of all the non-empty subarrays of arr.\nThe bitwise OR of a subarray is the bitwise OR of each integer in the subarray. The bitwise OR of a subarray of one integer is that integer.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: arr = [0]\nOutput: 1\nExplanation: There is only one possible result: 0.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: arr = [1,1,2]\nOutput: 3\nExplanation: The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].\nThese yield the results 1, 1, 2, 1, 3, 3.\nThere are 3 unique values, so the answer is 3.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: arr = [1,2,4]\nOutput: 6\nExplanation: The possible results are 1, 2, 3, 4, 6, and 7.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= arr.length <= 5 * 104",
    "0 <= arr[i] <= 109"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int subarrayBitwiseORs(vector<int>& arr) {\n        \n    }\n};",
    "java": "class Solution {\n    public int subarrayBitwiseORs(int[] arr) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def subarrayBitwiseORs(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def subarrayBitwiseORs(self, arr: List[int]) -> int:\n        ",
    "c": "int subarrayBitwiseORs(int* arr, int arrSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int SubarrayBitwiseORs(int[] arr) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} arr\n * @return {number}\n */\nvar subarrayBitwiseORs = function(arr) {\n    \n};",
    "typescript": "function subarrayBitwiseORs(arr: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @return Integer\n     */\n    function subarrayBitwiseORs($arr) {\n        \n    }\n}",
    "swift": "class Solution {\n    func subarrayBitwiseORs(_ arr: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun subarrayBitwiseORs(arr: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int subarrayBitwiseORs(List<int> arr) {\n    \n  }\n}",
    "golang": "func subarrayBitwiseORs(arr []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} arr\n# @return {Integer}\ndef subarray_bitwise_o_rs(arr)\n    \nend",
    "scala": "object Solution {\n    def subarrayBitwiseORs(arr: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn subarray_bitwise_o_rs(arr: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (subarray-bitwise-o-rs arr)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec subarray_bitwise_o_rs(Arr :: [integer()]) -> integer().\nsubarray_bitwise_o_rs(Arr) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec subarray_bitwise_o_rs(arr :: [integer]) :: integer\n  def subarray_bitwise_o_rs(arr) do\n    \n  end\nend"
  }
}
{
  "title": "Minimum Time to Break Locks I",
  "problem_id": "3649",
  "frontend_id": "3376",
  "difficulty": "Medium",
  "problem_slug": "minimum-time-to-break-locks-i",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Backtracking",
    "Bit Manipulation",
    "Depth-First Search",
    "Bitmask"
  ],
  "description": "Bob is stuck in a dungeon and must break n locks, each requiring some amount of energy to break. The required energy for each lock is stored in an array called strength where strength[i] indicates the energy needed to break the ith lock.\nTo break a lock, Bob uses a sword with the following characteristics:\nYour task is to determine the minimum time in minutes required for Bob to break all n locks and escape the dungeon.\nReturn the minimum time required for Bob to break all n locks.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: strength = [3,4,1], k = 1\nOutput: 4\nExplanation:\nThe locks cannot be broken in less than 4 minutes; thus, the answer is 4.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: strength = [2,5,4], k = 2\nOutput: 5\nExplanation:\nThe locks cannot be broken in less than 5 minutes; thus, the answer is 5.",
      "images": []
    }
  ],
  "constraints": [
    "n == strength.length",
    "1 <= n <= 8",
    "1 <= K <= 10",
    "1 <= strength[i] <= 106"
  ],
  "follow_ups": [],
  "hints": [
    "Try all <code>n!</code> permutation ways of breaking the locks."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int findMinimumTime(vector<int>& strength, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int findMinimumTime(List<Integer> strength, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findMinimumTime(self, strength, k):\n        \"\"\"\n        :type strength: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findMinimumTime(self, strength: List[int], k: int) -> int:\n        ",
    "c": "int findMinimumTime(int* strength, int strengthSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int FindMinimumTime(IList<int> strength, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} strength\n * @param {number} k\n * @return {number}\n */\nvar findMinimumTime = function(strength, k) {\n    \n};",
    "typescript": "function findMinimumTime(strength: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $strength\n     * @param Integer $k\n     * @return Integer\n     */\n    function findMinimumTime($strength, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findMinimumTime(_ strength: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findMinimumTime(strength: List<Int>, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int findMinimumTime(List<int> strength, int k) {\n    \n  }\n}",
    "golang": "func findMinimumTime(strength []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} strength\n# @param {Integer} k\n# @return {Integer}\ndef find_minimum_time(strength, k)\n    \nend",
    "scala": "object Solution {\n    def findMinimumTime(strength: List[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_minimum_time(strength: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (find-minimum-time strength k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec find_minimum_time(Strength :: [integer()], K :: integer()) -> integer().\nfind_minimum_time(Strength, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_minimum_time(strength :: [integer], k :: integer) :: integer\n  def find_minimum_time(strength, k) do\n    \n  end\nend"
  }
}
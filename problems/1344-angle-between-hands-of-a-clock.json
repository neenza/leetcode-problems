{
  "title": "Angle Between Hands of a Clock",
  "problem_id": "1446",
  "frontend_id": "1344",
  "difficulty": "Medium",
  "problem_slug": "angle-between-hands-of-a-clock",
  "topics": [
    "Math"
  ],
  "description": "Given two numbers, hour and minutes, return the smaller angle (in degrees) formed between the hour and the minute hand.\nAnswers within 10-5 of the actual value will be accepted as correct.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: hour = 12, minutes = 30\nOutput: 165",
      "images": [
        "https://assets.leetcode.com/uploads/2019/12/26/sample_1_1673.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: hour = 3, minutes = 30\nOutput: 75",
      "images": [
        "https://assets.leetcode.com/uploads/2019/12/26/sample_2_1673.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: hour = 3, minutes = 15\nOutput: 7.5",
      "images": [
        "https://assets.leetcode.com/uploads/2019/12/26/sample_3_1673.png"
      ]
    }
  ],
  "constraints": [
    "1 <= hour <= 12",
    "0 <= minutes <= 59"
  ],
  "follow_ups": [],
  "hints": [
    "The tricky part is determining how the minute hand affects the position of the hour hand.",
    "Calculate the angles separately then find the difference."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    double angleClock(int hour, int minutes) {\n        \n    }\n};",
    "java": "class Solution {\n    public double angleClock(int hour, int minutes) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def angleClock(self, hour, minutes):\n        \"\"\"\n        :type hour: int\n        :type minutes: int\n        :rtype: float\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def angleClock(self, hour: int, minutes: int) -> float:\n        ",
    "c": "double angleClock(int hour, int minutes) {\n    \n}",
    "csharp": "public class Solution {\n    public double AngleClock(int hour, int minutes) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} hour\n * @param {number} minutes\n * @return {number}\n */\nvar angleClock = function(hour, minutes) {\n    \n};",
    "typescript": "function angleClock(hour: number, minutes: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $hour\n     * @param Integer $minutes\n     * @return Float\n     */\n    function angleClock($hour, $minutes) {\n        \n    }\n}",
    "swift": "class Solution {\n    func angleClock(_ hour: Int, _ minutes: Int) -> Double {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun angleClock(hour: Int, minutes: Int): Double {\n        \n    }\n}",
    "dart": "class Solution {\n  double angleClock(int hour, int minutes) {\n    \n  }\n}",
    "golang": "func angleClock(hour int, minutes int) float64 {\n    \n}",
    "ruby": "# @param {Integer} hour\n# @param {Integer} minutes\n# @return {Float}\ndef angle_clock(hour, minutes)\n    \nend",
    "scala": "object Solution {\n    def angleClock(hour: Int, minutes: Int): Double = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn angle_clock(hour: i32, minutes: i32) -> f64 {\n        \n    }\n}",
    "racket": "(define/contract (angle-clock hour minutes)\n  (-> exact-integer? exact-integer? flonum?)\n  )",
    "erlang": "-spec angle_clock(Hour :: integer(), Minutes :: integer()) -> float().\nangle_clock(Hour, Minutes) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec angle_clock(hour :: integer, minutes :: integer) :: float\n  def angle_clock(hour, minutes) do\n    \n  end\nend"
  }
}
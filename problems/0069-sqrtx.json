{
  "title": "Sqrt(x)",
  "problem_id": "69",
  "frontend_id": "69",
  "difficulty": "Easy",
  "problem_slug": "sqrtx",
  "topics": [
    "Math",
    "Binary Search"
  ],
  "description": "Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.\nYou must not use any built-in exponent function or operator.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: x = 4\nOutput: 2\nExplanation: The square root of 4 is 2, so we return 2.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: x = 8\nOutput: 2\nExplanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.",
      "images": []
    }
  ],
  "constraints": [
    "0 <= x <= 231 - 1"
  ],
  "follow_ups": [],
  "hints": [
    "Try exploring all integers. (Credits: @annujoshi)",
    "Use the sorted property of integers to reduced the search space. (Credits: @annujoshi)"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int mySqrt(int x) {\n        \n    }\n};",
    "java": "class Solution {\n    public int mySqrt(int x) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        ",
    "c": "int mySqrt(int x) {\n    \n}",
    "csharp": "public class Solution {\n    public int MySqrt(int x) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} x\n * @return {number}\n */\nvar mySqrt = function(x) {\n    \n};",
    "typescript": "function mySqrt(x: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Integer\n     */\n    function mySqrt($x) {\n        \n    }\n}",
    "swift": "class Solution {\n    func mySqrt(_ x: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun mySqrt(x: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int mySqrt(int x) {\n    \n  }\n}",
    "golang": "func mySqrt(x int) int {\n    \n}",
    "ruby": "# @param {Integer} x\n# @return {Integer}\ndef my_sqrt(x)\n    \nend",
    "scala": "object Solution {\n    def mySqrt(x: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn my_sqrt(x: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (my-sqrt x)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec my_sqrt(X :: integer()) -> integer().\nmy_sqrt(X) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec my_sqrt(x :: integer) :: integer\n  def my_sqrt(x) do\n    \n  end\nend"
  }
}
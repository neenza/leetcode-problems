{
  "title": "Minimum Equal Sum of Two Arrays After Replacing Zeros",
  "problem_id": "3171",
  "frontend_id": "2918",
  "difficulty": "Medium",
  "problem_slug": "minimum-equal-sum-of-two-arrays-after-replacing-zeros",
  "topics": [
    "Array",
    "Greedy"
  ],
  "description": "You are given two arrays nums1 and nums2 consisting of positive integers.\nYou have to replace all the 0's in both arrays with strictly positive integers such that the sum of elements of both arrays becomes equal.\nReturn the minimum equal sum you can obtain, or -1 if it is impossible.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums1 = [3,2,0,1,0], nums2 = [6,5,0]\nOutput: 12\nExplanation: We can replace 0's in the following way:\n- Replace the two 0's in nums1 with the values 2 and 4. The resulting array is nums1 = [3,2,2,1,4].\n- Replace the 0 in nums2 with the value 1. The resulting array is nums2 = [6,5,1].\nBoth arrays have an equal sum of 12. It can be shown that it is the minimum sum we can obtain.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums1 = [2,0,2,0], nums2 = [1,4]\nOutput: -1\nExplanation: It is impossible to make the sum of both arrays equal.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums1.length, nums2.length <= 105",
    "0 <= nums1[i], nums2[i] <= 106"
  ],
  "follow_ups": [],
  "hints": [
    "Consider we replace all the 0’s with 1’s on both arrays, the answer will be <code>-1</code> if there was no <code>0</code> in the array with the smaller sum of elements.",
    "Otherwise, how can you update the value of exactly one of these <code>1</code>’s to make the sum of the two arrays equal?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long minSum(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};",
    "java": "class Solution {\n    public long minSum(int[] nums1, int[] nums2) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minSum(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minSum(self, nums1: List[int], nums2: List[int]) -> int:\n        ",
    "c": "long long minSum(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}",
    "csharp": "public class Solution {\n    public long MinSum(int[] nums1, int[] nums2) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar minSum = function(nums1, nums2) {\n    \n};",
    "typescript": "function minSum(nums1: number[], nums2: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function minSum($nums1, $nums2) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minSum(_ nums1: [Int], _ nums2: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minSum(nums1: IntArray, nums2: IntArray): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int minSum(List<int> nums1, List<int> nums2) {\n    \n  }\n}",
    "golang": "func minSum(nums1 []int, nums2 []int) int64 {\n    \n}",
    "ruby": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef min_sum(nums1, nums2)\n    \nend",
    "scala": "object Solution {\n    def minSum(nums1: Array[Int], nums2: Array[Int]): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_sum(nums1: Vec<i32>, nums2: Vec<i32>) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (min-sum nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec min_sum(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\nmin_sum(Nums1, Nums2) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_sum(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def min_sum(nums1, nums2) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n\n--- \n\n### Approach: Minimum Sum Matching\n\n#### Intuition\n\nThe task requires us to replace all $0$s in the two arrays with positive integers and make their sums equal. It is not difficult to imagine that replacing all $0$s in an array with $1$s will make the sum of its elements as small as possible.\n\nLet $\\textit{sum}_1$ and $\\textit{sum}_2$ be the sums of $\\textit{nums}_1$ and $\\textit{nums}_2$, respectively. Let $\\textit{zero}_1$ and $\\textit{zero}_2$ be the number of zeros in the two arrays. The minimum sums that the two arrays can reach are $\\textit{sum}_1 + \\textit{zero}_1$ and $\\textit{sum}_2 + \\textit{zero}_2$, respectively.\n\nWhen there is at least one $0$ in both arrays, a solution always exists, and the minimum possible equal sum is $\\max(\\textit{sum}_1 + \\textit{zero}_1, \\textit{sum}_2 + \\textit{zero}_2)$. However, if there are no $0$s in one of the arrays, and the minimum possible sum of the other array exceeds the fixed sum of this array, then it is impossible to make the sums equal, so we return $-1$.\n\n#### Implementation#### Complexity Analysis\n\nLet $n$ and $m$ be the lengths of $\\textit{nums}_1$ and $\\textit{nums}_2$, respectively.\n\n- Time complexity: $O(n + m)$.\n\nWe need to traverse both arrays once.\n\n- Space complexity: $O(1)$.\n\nOnly a few additional variables are needed."
}
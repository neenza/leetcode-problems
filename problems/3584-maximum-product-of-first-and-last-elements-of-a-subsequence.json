{
  "title": "Maximum Product of First and Last Elements of a Subsequence",
  "problem_id": "3755",
  "frontend_id": "3584",
  "difficulty": "Medium",
  "problem_slug": "maximum-product-of-first-and-last-elements-of-a-subsequence",
  "topics": [
    "Array",
    "Two Pointers"
  ],
  "description": "You are given an integer array nums and an integer m.\nReturn the maximum product of the first and last elements of any subsequence of nums of size m.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [-1,-9,2,3,-2,-3,1], m = 1\nOutput: 81\nExplanation:\nThe subsequence [-9] has the largest product of the first and last elements: -9 * -9 = 81 . Therefore, the answer is 81.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,3,-5,5,6,-4], m = 3\nOutput: 20\nExplanation:\nThe subsequence [-5, 6, -4] has the largest product of the first and last elements.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [2,-1,2,-6,5,2,-5,7], m = 2\nOutput: 35\nExplanation:\nThe subsequence [5, 7] has the largest product of the first and last elements.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "-105 <= nums[i] <= 105",
    "1 <= m <= nums.length"
  ],
  "follow_ups": [],
  "hints": [
    "We can select nums[i] as the first element of the subsequence, and the last one can be any of nums[i + m - 1], nums[i + m], ..., nums[n - 1].",
    "If we select the first element from the largest i, the suffix just gets longer, and we can update the minimum and maximum values dynamically."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long maximumProduct(vector<int>& nums, int m) {\n        \n    }\n};",
    "java": "class Solution {\n    public long maximumProduct(int[] nums, int m) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maximumProduct(self, nums, m):\n        \"\"\"\n        :type nums: List[int]\n        :type m: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maximumProduct(self, nums: List[int], m: int) -> int:\n        ",
    "c": "long long maximumProduct(int* nums, int numsSize, int m) {\n    \n}",
    "csharp": "public class Solution {\n    public long MaximumProduct(int[] nums, int m) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} m\n * @return {number}\n */\nvar maximumProduct = function(nums, m) {\n    \n};",
    "typescript": "function maximumProduct(nums: number[], m: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $m\n     * @return Integer\n     */\n    function maximumProduct($nums, $m) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maximumProduct(_ nums: [Int], _ m: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maximumProduct(nums: IntArray, m: Int): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int maximumProduct(List<int> nums, int m) {\n    \n  }\n}",
    "golang": "func maximumProduct(nums []int, m int) int64 {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} m\n# @return {Integer}\ndef maximum_product(nums, m)\n    \nend",
    "scala": "object Solution {\n    def maximumProduct(nums: Array[Int], m: Int): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn maximum_product(nums: Vec<i32>, m: i32) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (maximum-product nums m)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec maximum_product(Nums :: [integer()], M :: integer()) -> integer().\nmaximum_product(Nums, M) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec maximum_product(nums :: [integer], m :: integer) :: integer\n  def maximum_product(nums, m) do\n    \n  end\nend"
  }
}
{
  "title": "Sum of Unique Elements",
  "problem_id": "1848",
  "frontend_id": "1748",
  "difficulty": "Easy",
  "problem_slug": "sum-of-unique-elements",
  "topics": [
    "Array",
    "Hash Table",
    "Counting"
  ],
  "description": "You are given an integer array nums. The unique elements of an array are the elements that appear exactly once in the array.\nReturn the sum of all the unique elements of nums.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,3,2]\nOutput: 4\nExplanation: The unique elements are [1,3], and the sum is 4.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,1,1,1,1]\nOutput: 0\nExplanation: There are no unique elements, and the sum is 0.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,2,3,4,5]\nOutput: 15\nExplanation: The unique elements are [1,2,3,4,5], and the sum is 15.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 100",
    "1 <= nums[i] <= 100"
  ],
  "follow_ups": [],
  "hints": [
    "Use a dictionary to count the frequency of each number."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int sumOfUnique(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int sumOfUnique(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def sumOfUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def sumOfUnique(self, nums: List[int]) -> int:\n        ",
    "c": "int sumOfUnique(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int SumOfUnique(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar sumOfUnique = function(nums) {\n    \n};",
    "typescript": "function sumOfUnique(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function sumOfUnique($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func sumOfUnique(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun sumOfUnique(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int sumOfUnique(List<int> nums) {\n    \n  }\n}",
    "golang": "func sumOfUnique(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef sum_of_unique(nums)\n    \nend",
    "scala": "object Solution {\n    def sumOfUnique(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn sum_of_unique(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (sum-of-unique nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec sum_of_unique(Nums :: [integer()]) -> integer().\nsum_of_unique(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec sum_of_unique(nums :: [integer]) :: integer\n  def sum_of_unique(nums) do\n    \n  end\nend"
  }
}
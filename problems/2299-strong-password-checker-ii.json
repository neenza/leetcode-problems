{
  "title": "Strong Password Checker II",
  "problem_id": "2391",
  "frontend_id": "2299",
  "difficulty": "Easy",
  "problem_slug": "strong-password-checker-ii",
  "topics": [
    "String"
  ],
  "description": "A password is said to be strong if it satisfies all the following criteria:\nGiven a string password, return true if it is a strong password. Otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: password = \"IloveLe3tcode!\"\nOutput: true\nExplanation: The password meets all the requirements. Therefore, we return true.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: password = \"Me+You--IsMyDream\"\nOutput: false\nExplanation: The password does not contain a digit and also contains 2 of the same character in adjacent positions. Therefore, we return false.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: password = \"1aB!\"\nOutput: false\nExplanation: The password does not meet the length requirement. Therefore, we return false.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= password.length <= 100",
    "password consists of letters, digits, and special characters: \"!@#$%^&*()-+\"."
  ],
  "follow_ups": [],
  "hints": [
    "You can use a boolean flag to define certain types of characters seen in the string.",
    "In the end, check if all boolean flags have ended up True, and do not forget to check the \"adjacent\" and \"length\" criteria."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool strongPasswordCheckerII(string password) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean strongPasswordCheckerII(String password) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def strongPasswordCheckerII(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def strongPasswordCheckerII(self, password: str) -> bool:\n        ",
    "c": "bool strongPasswordCheckerII(char* password) {\n    \n}",
    "csharp": "public class Solution {\n    public bool StrongPasswordCheckerII(string password) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} password\n * @return {boolean}\n */\nvar strongPasswordCheckerII = function(password) {\n    \n};",
    "typescript": "function strongPasswordCheckerII(password: string): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $password\n     * @return Boolean\n     */\n    function strongPasswordCheckerII($password) {\n        \n    }\n}",
    "swift": "class Solution {\n    func strongPasswordCheckerII(_ password: String) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun strongPasswordCheckerII(password: String): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool strongPasswordCheckerII(String password) {\n    \n  }\n}",
    "golang": "func strongPasswordCheckerII(password string) bool {\n    \n}",
    "ruby": "# @param {String} password\n# @return {Boolean}\ndef strong_password_checker_ii(password)\n    \nend",
    "scala": "object Solution {\n    def strongPasswordCheckerII(password: String): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn strong_password_checker_ii(password: String) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (strong-password-checker-ii password)\n  (-> string? boolean?)\n  )",
    "erlang": "-spec strong_password_checker_ii(Password :: unicode:unicode_binary()) -> boolean().\nstrong_password_checker_ii(Password) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec strong_password_checker_ii(password :: String.t) :: boolean\n  def strong_password_checker_ii(password) do\n    \n  end\nend"
  }
}
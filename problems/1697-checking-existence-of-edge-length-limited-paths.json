{
  "title": "Checking Existence of Edge Length Limited Paths",
  "problem_id": "1815",
  "frontend_id": "1697",
  "difficulty": "Hard",
  "problem_slug": "checking-existence-of-edge-length-limited-paths",
  "topics": [
    "Array",
    "Two Pointers",
    "Union Find",
    "Graph",
    "Sorting"
  ],
  "description": "An undirected graph of n nodes is defined by edgeList, where edgeList[i] = [ui, vi, disi] denotes an edge between nodes ui and vi with distance disi. Note that there may be multiple edges between two nodes.\nGiven an array queries, where queries[j] = [pj, qj, limitj], your task is to determine for each queries[j] whether there is a path between pj and qj such that each edge on the path has a distance strictly less than limitj .\nReturn a boolean array answer, where answer.length == queries.length and the jth value of answer is true if there is a path for queries[j] is true, and false otherwise.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 3, edgeList = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1,2],[0,2,5]]\nOutput: [false,true]\nExplanation: The above figure shows the given graph. Note that there are two overlapping edges between 0 and 1 with distances 2 and 16.\nFor the first query, between 0 and 1 there is no path where each distance is less than 2, thus we return false for this query.\nFor the second query, there is a path (0 -> 1 -> 2) of two edges with distances less than 5, thus we return true for this query.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/12/08/h.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 5, edgeList = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4,14],[1,4,13]]\nOutput: [true,false]\nExplanation: The above figure shows the given graph.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/12/08/q.png"
      ]
    }
  ],
  "constraints": [
    "2 <= n <= 105",
    "1 <= edgeList.length, queries.length <= 105",
    "edgeList[i].length == 3",
    "queries[j].length == 3",
    "0 <= ui, vi, pj, qj <= n - 1",
    "ui != vi",
    "pj != qj",
    "1 <= disi, limitj <= 109",
    "There may be multiple edges between two nodes."
  ],
  "follow_ups": [],
  "hints": [
    "All the queries are given in advance. Is there a way you can reorder the queries to avoid repeated computations?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<bool> distanceLimitedPathsExist(int n, vector<vector<int>>& edgeList, vector<vector<int>>& queries) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean[] distanceLimitedPathsExist(int n, int[][] edgeList, int[][] queries) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def distanceLimitedPathsExist(self, n, edgeList, queries):\n        \"\"\"\n        :type n: int\n        :type edgeList: List[List[int]]\n        :type queries: List[List[int]]\n        :rtype: List[bool]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def distanceLimitedPathsExist(self, n: int, edgeList: List[List[int]], queries: List[List[int]]) -> List[bool]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nbool* distanceLimitedPathsExist(int n, int** edgeList, int edgeListSize, int* edgeListColSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public bool[] DistanceLimitedPathsExist(int n, int[][] edgeList, int[][] queries) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number[][]} edgeList\n * @param {number[][]} queries\n * @return {boolean[]}\n */\nvar distanceLimitedPathsExist = function(n, edgeList, queries) {\n    \n};",
    "typescript": "function distanceLimitedPathsExist(n: number, edgeList: number[][], queries: number[][]): boolean[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edgeList\n     * @param Integer[][] $queries\n     * @return Boolean[]\n     */\n    function distanceLimitedPathsExist($n, $edgeList, $queries) {\n        \n    }\n}",
    "swift": "class Solution {\n    func distanceLimitedPathsExist(_ n: Int, _ edgeList: [[Int]], _ queries: [[Int]]) -> [Bool] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun distanceLimitedPathsExist(n: Int, edgeList: Array<IntArray>, queries: Array<IntArray>): BooleanArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<bool> distanceLimitedPathsExist(int n, List<List<int>> edgeList, List<List<int>> queries) {\n    \n  }\n}",
    "golang": "func distanceLimitedPathsExist(n int, edgeList [][]int, queries [][]int) []bool {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer[][]} edge_list\n# @param {Integer[][]} queries\n# @return {Boolean[]}\ndef distance_limited_paths_exist(n, edge_list, queries)\n    \nend",
    "scala": "object Solution {\n    def distanceLimitedPathsExist(n: Int, edgeList: Array[Array[Int]], queries: Array[Array[Int]]): Array[Boolean] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn distance_limited_paths_exist(n: i32, edge_list: Vec<Vec<i32>>, queries: Vec<Vec<i32>>) -> Vec<bool> {\n        \n    }\n}",
    "racket": "(define/contract (distance-limited-paths-exist n edgeList queries)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof (listof exact-integer?)) (listof boolean?))\n  )",
    "erlang": "-spec distance_limited_paths_exist(N :: integer(), EdgeList :: [[integer()]], Queries :: [[integer()]]) -> [boolean()].\ndistance_limited_paths_exist(N, EdgeList, Queries) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec distance_limited_paths_exist(n :: integer, edge_list :: [[integer]], queries :: [[integer]]) :: [boolean]\n  def distance_limited_paths_exist(n, edge_list, queries) do\n    \n  end\nend"
  }
}
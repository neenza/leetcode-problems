{
  "title": "Resulting String After Adjacent Removals",
  "problem_id": "3860",
  "frontend_id": "3561",
  "difficulty": "Medium",
  "problem_slug": "resulting-string-after-adjacent-removals",
  "topics": [
    "String",
    "Stack",
    "Simulation"
  ],
  "description": "You are given a string s consisting of lowercase English letters.\nYou must repeatedly perform the following operation while the string s has at least two consecutive characters:\nReturn the resulting string after no more operations can be performed.\nNote: Consider the alphabet as circular, thus 'a' and 'z' are consecutive.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"abc\"\nOutput: \"c\"\nExplanation:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"adcb\"\nOutput: \"\"\nExplanation:",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"zadb\"\nOutput: \"db\"\nExplanation:",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 105",
    "s consists only of lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [
    "Traverse the string from left to right and use a stack to perform the removals."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string resultingString(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public String resultingString(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def resultingString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def resultingString(self, s: str) -> str:\n        ",
    "c": "char* resultingString(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public string ResultingString(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {string}\n */\nvar resultingString = function(s) {\n    \n};",
    "typescript": "function resultingString(s: string): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function resultingString($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func resultingString(_ s: String) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun resultingString(s: String): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String resultingString(String s) {\n    \n  }\n}",
    "golang": "func resultingString(s string) string {\n    \n}",
    "ruby": "# @param {String} s\n# @return {String}\ndef resulting_string(s)\n    \nend",
    "scala": "object Solution {\n    def resultingString(s: String): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn resulting_string(s: String) -> String {\n        \n    }\n}",
    "racket": "(define/contract (resulting-string s)\n  (-> string? string?)\n  )",
    "erlang": "-spec resulting_string(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nresulting_string(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec resulting_string(s :: String.t) :: String.t\n  def resulting_string(s) do\n    \n  end\nend"
  }
}
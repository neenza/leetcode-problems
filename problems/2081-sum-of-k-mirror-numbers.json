{
  "title": "Sum of k-Mirror Numbers",
  "problem_id": "2202",
  "frontend_id": "2081",
  "difficulty": "Hard",
  "problem_slug": "sum-of-k-mirror-numbers",
  "topics": [
    "Math",
    "Enumeration"
  ],
  "description": "A k-mirror number is a positive integer without leading zeros that reads the same both forward and backward in base-10 as well as in base-k.\nGiven the base k and the number n, return the sum of the n smallest k-mirror numbers.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: k = 2, n = 5\nOutput: 25\nExplanation:\nThe 5 smallest 2-mirror numbers and their representations in base-2 are listed as follows:\n  base-10    base-2\n    1          1\n    3          11\n    5          101\n    7          111\n    9          1001\nTheir sum = 1 + 3 + 5 + 7 + 9 = 25.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: k = 3, n = 7\nOutput: 499\nExplanation:\nThe 7 smallest 3-mirror numbers are and their representations in base-3 are listed as follows:\n  base-10    base-3\n    1          1\n    2          2\n    4          11\n    8          22\n    121        11111\n    151        12121\n    212        21212\nTheir sum = 1 + 2 + 4 + 8 + 121 + 151 + 212 = 499.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: k = 7, n = 17\nOutput: 20379000\nExplanation: The 17 smallest 7-mirror numbers are:\n1, 2, 3, 4, 5, 6, 8, 121, 171, 242, 292, 16561, 65656, 2137312, 4602064, 6597956, 6958596",
      "images": []
    }
  ],
  "constraints": [
    "2 <= k <= 9",
    "1 <= n <= 30"
  ],
  "follow_ups": [],
  "hints": [
    "Since we need to reduce search space, instead of checking if every number is a palindrome in base-10, can we try to \"generate\" the palindromic numbers?",
    "If you are provided with a d digit number, how can you generate a palindrome with 2*d or 2*d - 1 digit?",
    "Try brute-forcing and checking if the palindrome you generated is a \"k-Mirror\" number."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long kMirror(int k, int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public long kMirror(int k, int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def kMirror(self, k, n):\n        \"\"\"\n        :type k: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def kMirror(self, k: int, n: int) -> int:\n        ",
    "c": "long long kMirror(int k, int n) {\n    \n}",
    "csharp": "public class Solution {\n    public long KMirror(int k, int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} k\n * @param {number} n\n * @return {number}\n */\nvar kMirror = function(k, n) {\n    \n};",
    "typescript": "function kMirror(k: number, n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @param Integer $n\n     * @return Integer\n     */\n    function kMirror($k, $n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func kMirror(_ k: Int, _ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun kMirror(k: Int, n: Int): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int kMirror(int k, int n) {\n    \n  }\n}",
    "golang": "func kMirror(k int, n int) int64 {\n    \n}",
    "ruby": "# @param {Integer} k\n# @param {Integer} n\n# @return {Integer}\ndef k_mirror(k, n)\n    \nend",
    "scala": "object Solution {\n    def kMirror(k: Int, n: Int): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn k_mirror(k: i32, n: i32) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (k-mirror k n)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec k_mirror(K :: integer(), N :: integer()) -> integer().\nk_mirror(K, N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec k_mirror(k :: integer, n :: integer) :: integer\n  def k_mirror(k, n) do\n    \n  end\nend"
  },
  "solution": "### Approach 1: Enumeration With Optimization\n\n#### Intuition\n\nThe most straightforward method that comes to mind is to incrementally check each number starting from $1$. For each number $i$, if $i$ is a palindrome and its $k$-ary representation is also a palindrome, we add $i$ to the answer. Once we have found $n$ such numbers, we can stop the search and return the result.\n\nHowever, this approach exceeds the time limit. For example, when $k = 7$, the $30$th number that satisfies the condition is $64454545446 \\approx 6 \\times 10^{10}$. Even though checking whether a number meets the conditions takes $O(1)$ time, scanning up to $64454545446$ still takes far too long.\n\nTo improve efficiency, we can consider a binary searchâ€“style approach. Since $i$ itself must be a palindrome, we can construct $i$ by first generating the first half of the digits, denoted as $i'$, then reversing $i'$ and appending it to itself to form $i$. This \"halving\" strategy ensures that $i$ is always a palindrome, significantly reducing the search space. For instance, to cover all numbers up to $10^{10}$, the brute-force method would examine up to $10^{10}$ numbers, but the halving method only needs to generate $O(\\sqrt{10^{10}}) = O(10^5)$ palindromes.\n\nWhen constructing $i$ from $i'$, we must consider both odd-length and even-length palindromes. For example, if $i' = 123$, we can form either $12321$ (odd length, with the middle digit reused) or $123321$ (even length, by fully reversing $i'$ and appending it).\n\nTo enumerate values of $i$, we also incrementally enumerate values of $i'$. For the same $i'$, the even-length palindrome will always be greater than the corresponding odd-length one, so we process them as follows:\n\n- Define the range of $i'$, typically as $[10^k, 10^{k+1})$ for some $k$.\n\n- Incrementally generate odd-length palindromes from $i'$ and check if they meet the requirements.\n\n- Then generate even-length palindromes from $i'$ and check if they meet the requirements.\n\nIn this way, we ensure that the search over $i$ proceeds in increasing order.\n\n#### Implementation#### Complexity analysis\n\n- Time complexity: $O(\\sqrt{10^{10}}) \\approx O(1)$.\n  \n  For a given $n$ and $k$, it is difficult to determine the range of the $n$th $k$-mirror number. In this problem, the worst case is when $n = 30$, $k = 7$, and the corresponding number is $64454545446$.\n\n- Space complexity: $O(\\log n)$.\n  \n  Digit storage requires $O(\\log n)$ space.\n\n### Approach 2: Preprocessing\n\n#### Intuition\n\nWe can preprocess the first 30 $k$-mirror digits for $k = 2, 3, \\cdots, 9$ and directly sum them to return the answer.\n\n#### Implementation#### Complexity analysis\n\n- Time complexity: $O(1)$.\n\n- Space complexity: $O(1)$."
}
{
  "title": "Search Insert Position",
  "problem_id": "35",
  "frontend_id": "35",
  "difficulty": "Easy",
  "problem_slug": "search-insert-position",
  "topics": [
    "Array",
    "Binary Search"
  ],
  "description": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\nYou must write an algorithm with O(log n) runtime complexity.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,3,5,6], target = 5\nOutput: 2",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,3,5,6], target = 2\nOutput: 1",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,3,5,6], target = 7\nOutput: 4",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 104",
    "-104 <= nums[i] <= 104",
    "nums contains distinct values sorted in ascending order.",
    "-104 <= target <= 104"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int searchInsert(vector<int>& nums, int target) {\n        \n    }\n};",
    "java": "class Solution {\n    public int searchInsert(int[] nums, int target) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        ",
    "c": "int searchInsert(int* nums, int numsSize, int target) {\n    \n}",
    "csharp": "public class Solution {\n    public int SearchInsert(int[] nums, int target) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar searchInsert = function(nums, target) {\n    \n};",
    "typescript": "function searchInsert(nums: number[], target: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function searchInsert($nums, $target) {\n        \n    }\n}",
    "swift": "class Solution {\n    func searchInsert(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun searchInsert(nums: IntArray, target: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int searchInsert(List<int> nums, int target) {\n    \n  }\n}",
    "golang": "func searchInsert(nums []int, target int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef search_insert(nums, target)\n    \nend",
    "scala": "object Solution {\n    def searchInsert(nums: Array[Int], target: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn search_insert(nums: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (search-insert nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec search_insert(Nums :: [integer()], Target :: integer()) -> integer().\nsearch_insert(Nums, Target) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec search_insert(nums :: [integer], target :: integer) :: integer\n  def search_insert(nums, target) do\n    \n  end\nend"
  }
}
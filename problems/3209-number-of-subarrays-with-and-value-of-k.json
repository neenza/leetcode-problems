{
  "title": "Number of Subarrays With AND Value of K",
  "problem_id": "3466",
  "frontend_id": "3209",
  "difficulty": "Hard",
  "problem_slug": "number-of-subarrays-with-and-value-of-k",
  "topics": [
    "Array",
    "Binary Search",
    "Bit Manipulation",
    "Segment Tree"
  ],
  "description": "Given an array of integers nums and an integer k, return the number of subarrays of nums where the bitwise AND of the elements of the subarray equals k.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,1,1], k = 1\nOutput: 6\nExplanation:\nAll subarrays contain only 1's.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,1,2], k = 1\nOutput: 3\nExplanation:\nSubarrays having an AND value of 1 are: [ 1 ,1,2] , [1, 1 ,2] , [ 1,1 ,2] .",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,2,3], k = 2\nOutput: 2\nExplanation:\nSubarrays having an AND value of 2 are: [1, 2 ,3] , [1, 2,3 ] .",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "0 <= nums[i], k <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "Let’s say we want to count the number of pairs <code>(l, r)</code> such that <code>nums[l] & nums[l + 1] & … & nums[r] == k</code>.",
    "Fix the left index <code>l</code>.",
    "Note that if you increase <code>r</code> for a fixed <code>l</code>, then the AND value of the subarray either decreases or remains unchanged.",
    "Therefore, consider using binary search.",
    "To calculate the AND value of a subarray, use sparse tables."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public long countSubarrays(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countSubarrays(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        ",
    "c": "long long countSubarrays(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public long CountSubarrays(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar countSubarrays = function(nums, k) {\n    \n};",
    "typescript": "function countSubarrays(nums: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function countSubarrays($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countSubarrays(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countSubarrays(nums: IntArray, k: Int): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int countSubarrays(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func countSubarrays(nums []int, k int) int64 {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef count_subarrays(nums, k)\n    \nend",
    "scala": "object Solution {\n    def countSubarrays(nums: Array[Int], k: Int): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_subarrays(nums: Vec<i32>, k: i32) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (count-subarrays nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec count_subarrays(Nums :: [integer()], K :: integer()) -> integer().\ncount_subarrays(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_subarrays(nums :: [integer], k :: integer) :: integer\n  def count_subarrays(nums, k) do\n    \n  end\nend"
  }
}
{
  "title": "Minimum Path Sum",
  "problem_id": "64",
  "frontend_id": "64",
  "difficulty": "Medium",
  "problem_slug": "minimum-path-sum",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Matrix"
  ],
  "description": "Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\nNote: You can only move either down or right at any point in time.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: grid = [[1,3,1],[1,5,1],[4,2,1]]\nOutput: 7\nExplanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: grid = [[1,2,3],[4,5,6]]\nOutput: 12",
      "images": [
        "https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg"
      ]
    }
  ],
  "constraints": [
    "m == grid.length",
    "n == grid[i].length",
    "1 <= m, n <= 200",
    "0 <= grid[i][j] <= 200"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minPathSum(vector<vector<int>>& grid) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minPathSum(int[][] grid) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minPathSum(self, grid: List[List[int]]) -> int:\n        ",
    "c": "int minPathSum(int** grid, int gridSize, int* gridColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinPathSum(int[][] grid) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minPathSum = function(grid) {\n    \n};",
    "typescript": "function minPathSum(grid: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function minPathSum($grid) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minPathSum(_ grid: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minPathSum(grid: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minPathSum(List<List<int>> grid) {\n    \n  }\n}",
    "golang": "func minPathSum(grid [][]int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} grid\n# @return {Integer}\ndef min_path_sum(grid)\n    \nend",
    "scala": "object Solution {\n    def minPathSum(grid: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_path_sum(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-path-sum grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec min_path_sum(Grid :: [[integer()]]) -> integer().\nmin_path_sum(Grid) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_path_sum(grid :: [[integer]]) :: integer\n  def min_path_sum(grid) do\n    \n  end\nend"
  }
}
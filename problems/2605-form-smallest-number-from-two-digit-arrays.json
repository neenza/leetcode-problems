{
  "title": "Form Smallest Number From Two Digit Arrays",
  "problem_id": "2668",
  "frontend_id": "2605",
  "difficulty": "Easy",
  "problem_slug": "form-smallest-number-from-two-digit-arrays",
  "topics": [
    "Array",
    "Hash Table",
    "Enumeration"
  ],
  "description": "Example 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums1 = [4,1,3], nums2 = [5,7]\nOutput: 15\nExplanation: The number 15 contains the digit 1 from nums1 and the digit 5 from nums2. It can be proven that 15 is the smallest number we can have.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums1 = [3,5,2,6], nums2 = [3,1,7]\nOutput: 3\nExplanation: The number 3 contains the digit 3 which exists in both arrays.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums1.length, nums2.length <= 9",
    "1 <= nums1[i], nums2[i] <= 9",
    "All digits in each array are unique."
  ],
  "follow_ups": [],
  "hints": [
    "How many digits will the resulting number have at most?",
    "The resulting number will have either one or two digits. Try to find when each case is possible."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minNumber(int[] nums1, int[] nums2) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minNumber(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\n        ",
    "c": "int minNumber(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinNumber(int[] nums1, int[] nums2) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar minNumber = function(nums1, nums2) {\n    \n};",
    "typescript": "function minNumber(nums1: number[], nums2: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function minNumber($nums1, $nums2) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minNumber(_ nums1: [Int], _ nums2: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minNumber(nums1: IntArray, nums2: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minNumber(List<int> nums1, List<int> nums2) {\n    \n  }\n}",
    "golang": "func minNumber(nums1 []int, nums2 []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef min_number(nums1, nums2)\n    \nend",
    "scala": "object Solution {\n    def minNumber(nums1: Array[Int], nums2: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_number(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-number nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec min_number(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\nmin_number(Nums1, Nums2) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_number(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def min_number(nums1, nums2) do\n    \n  end\nend"
  }
}
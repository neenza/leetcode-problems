{
  "title": "Maximum Total Reward Using Operations I",
  "problem_id": "3442",
  "frontend_id": "3180",
  "difficulty": "Medium",
  "problem_slug": "maximum-total-reward-using-operations-i",
  "topics": [
    "Array",
    "Dynamic Programming"
  ],
  "description": "You are given an integer array rewardValues of length n, representing the values of rewards.\nInitially, your total reward x is 0, and all indices are unmarked. You are allowed to perform the following operation any number of times:\nReturn an integer denoting the maximum total reward you can collect by performing the operations optimally.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: rewardValues = [1,1,3,3]\nOutput: 4\nExplanation:\nDuring the operations, we can choose to mark the indices 0 and 2 in order, and the total reward will be 4, which is the maximum.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: rewardValues = [1,6,4,3,2]\nOutput: 11\nExplanation:\nMark the indices 0, 2, and 1 in order. The total reward will then be 11, which is the maximum.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= rewardValues.length <= 2000",
    "1 <= rewardValues[i] <= 2000"
  ],
  "follow_ups": [],
  "hints": [
    "Sort the rewards array first.",
    "If we decide to apply some rewards, it's always optimal to apply them in order.",
    "Let <code>dp[i][j]</code> (true/false) be the state after the first <code>i</code> rewards, indicating whether we can get exactly <code>j</code> points.",
    "The transition is given by: <code>dp[i][j] = dp[i - 1][j − rewardValues[i]]</code> if <code>j − rewardValues[i] < rewardValues[i]</code>."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxTotalReward(vector<int>& rewardValues) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxTotalReward(int[] rewardValues) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxTotalReward(self, rewardValues):\n        \"\"\"\n        :type rewardValues: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxTotalReward(self, rewardValues: List[int]) -> int:\n        ",
    "c": "int maxTotalReward(int* rewardValues, int rewardValuesSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxTotalReward(int[] rewardValues) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} rewardValues\n * @return {number}\n */\nvar maxTotalReward = function(rewardValues) {\n    \n};",
    "typescript": "function maxTotalReward(rewardValues: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $rewardValues\n     * @return Integer\n     */\n    function maxTotalReward($rewardValues) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxTotalReward(_ rewardValues: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxTotalReward(rewardValues: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxTotalReward(List<int> rewardValues) {\n    \n  }\n}",
    "golang": "func maxTotalReward(rewardValues []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} reward_values\n# @return {Integer}\ndef max_total_reward(reward_values)\n    \nend",
    "scala": "object Solution {\n    def maxTotalReward(rewardValues: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_total_reward(reward_values: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-total-reward rewardValues)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec max_total_reward(RewardValues :: [integer()]) -> integer().\nmax_total_reward(RewardValues) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_total_reward(reward_values :: [integer]) :: integer\n  def max_total_reward(reward_values) do\n    \n  end\nend"
  }
}
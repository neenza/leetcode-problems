{
  "title": "Bitwise AND of Numbers Range",
  "problem_id": "201",
  "frontend_id": "201",
  "difficulty": "Medium",
  "problem_slug": "bitwise-and-of-numbers-range",
  "topics": [
    "Bit Manipulation"
  ],
  "description": "Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: left = 5, right = 7\nOutput: 4",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: left = 0, right = 0\nOutput: 0",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: left = 1, right = 2147483647\nOutput: 0",
      "images": []
    }
  ],
  "constraints": [
    "0 <= left <= right <= 231 - 1"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int rangeBitwiseAnd(int left, int right) {\n        \n    }\n};",
    "java": "class Solution {\n    public int rangeBitwiseAnd(int left, int right) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def rangeBitwiseAnd(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def rangeBitwiseAnd(self, left: int, right: int) -> int:\n        ",
    "c": "int rangeBitwiseAnd(int left, int right) {\n    \n}",
    "csharp": "public class Solution {\n    public int RangeBitwiseAnd(int left, int right) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} left\n * @param {number} right\n * @return {number}\n */\nvar rangeBitwiseAnd = function(left, right) {\n    \n};",
    "typescript": "function rangeBitwiseAnd(left: number, right: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @return Integer\n     */\n    function rangeBitwiseAnd($left, $right) {\n        \n    }\n}",
    "swift": "class Solution {\n    func rangeBitwiseAnd(_ left: Int, _ right: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun rangeBitwiseAnd(left: Int, right: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int rangeBitwiseAnd(int left, int right) {\n    \n  }\n}",
    "golang": "func rangeBitwiseAnd(left int, right int) int {\n    \n}",
    "ruby": "# @param {Integer} left\n# @param {Integer} right\n# @return {Integer}\ndef range_bitwise_and(left, right)\n    \nend",
    "scala": "object Solution {\n    def rangeBitwiseAnd(left: Int, right: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn range_bitwise_and(left: i32, right: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (range-bitwise-and left right)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec range_bitwise_and(Left :: integer(), Right :: integer()) -> integer().\nrange_bitwise_and(Left, Right) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec range_bitwise_and(left :: integer, right :: integer) :: integer\n  def range_bitwise_and(left, right) do\n    \n  end\nend"
  }
}
{
  "title": "Concatenation of Consecutive Binary Numbers",
  "problem_id": "1800",
  "frontend_id": "1680",
  "difficulty": "Medium",
  "problem_slug": "concatenation-of-consecutive-binary-numbers",
  "topics": [
    "Math",
    "Bit Manipulation",
    "Simulation"
  ],
  "description": "Given an integer n, return the decimal value of the binary string formed by concatenating the binary representations of 1 to n in order, modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 1\nOutput: 1\nExplanation: \"1\" in binary corresponds to the decimal value 1.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 3\nOutput: 27\nExplanation: In binary, 1, 2, and 3 corresponds to \"1\", \"10\", and \"11\".\nAfter concatenating them, we have \"11011\", which corresponds to the decimal value 27.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 12\nOutput: 505379714\nExplanation: The concatenation results in \"1101110010111011110001001101010111100\".\nThe decimal value of that is 118505380540.\nAfter modulo 109 + 7, the result is 505379714.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "Express the nth number value in a recursion formula and think about how we can do a fast evaluation."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int concatenatedBinary(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int concatenatedBinary(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def concatenatedBinary(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def concatenatedBinary(self, n: int) -> int:\n        ",
    "c": "\n\nint concatenatedBinary(int n){\n\n}",
    "csharp": "public class Solution {\n    public int ConcatenatedBinary(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar concatenatedBinary = function(n) {\n    \n};",
    "typescript": "function concatenatedBinary(n: number): number {\n\n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function concatenatedBinary($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func concatenatedBinary(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun concatenatedBinary(n: Int): Int {\n        \n    }\n}",
    "golang": "func concatenatedBinary(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef concatenated_binary(n)\n    \nend",
    "scala": "object Solution {\n    def concatenatedBinary(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn concatenated_binary(n: i32) -> i32 {\n        \n    }\n}"
  }
}
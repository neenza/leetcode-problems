{
  "title": "Next Greater Node In Linked List",
  "problem_id": "1072",
  "frontend_id": "1019",
  "difficulty": "Medium",
  "problem_slug": "next-greater-node-in-linked-list",
  "topics": [
    "Array",
    "Linked List",
    "Stack",
    "Monotonic Stack"
  ],
  "description": "You are given the head of a linked list with n nodes.\nFor each node in the list, find the value of the next greater node. That is, for each node, find the value of the first node that is next to it and has a strictly larger value than it.\nReturn an integer array answer where answer[i] is the value of the next greater node of the ith node (1-indexed). If the ith node does not have a next greater node, set answer[i] = 0.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: head = [2,1,5]\nOutput: [5,5,0]",
      "images": [
        "https://assets.leetcode.com/uploads/2021/08/05/linkedlistnext1.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: head = [2,7,4,3,5]\nOutput: [7,0,5,5,0]",
      "images": [
        "https://assets.leetcode.com/uploads/2021/08/05/linkedlistnext2.jpg"
      ]
    }
  ],
  "constraints": [
    "The number of nodes in the list is n.",
    "1 <= n <= 104",
    "1 <= Node.val <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "We can use a stack that stores nodes in monotone decreasing order of value.  When we see a node_j with a larger value, every node_i in the stack has next_larger(node_i) = node_j ."
  ],
  "code_snippets": {
    "cpp": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> nextLargerNodes(ListNode* head) {\n        \n    }\n};",
    "java": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public int[] nextLargerNodes(ListNode head) {\n        \n    }\n}",
    "python": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def nextLargerNodes(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def nextLargerNodes(self, head: Optional[ListNode]) -> List[int]:\n        ",
    "c": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* nextLargerNodes(struct ListNode* head, int* returnSize) {\n    \n}",
    "csharp": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public int[] NextLargerNodes(ListNode head) {\n        \n    }\n}",
    "javascript": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number[]}\n */\nvar nextLargerNodes = function(head) {\n    \n};",
    "typescript": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction nextLargerNodes(head: ListNode | null): number[] {\n    \n};",
    "php": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param ListNode $head\n     * @return Integer[]\n     */\n    function nextLargerNodes($head) {\n        \n    }\n}",
    "swift": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func nextLargerNodes(_ head: ListNode?) -> [Int] {\n        \n    }\n}",
    "kotlin": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun nextLargerNodes(head: ListNode?): IntArray {\n        \n    }\n}",
    "dart": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  List<int> nextLargerNodes(ListNode? head) {\n    \n  }\n}",
    "golang": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc nextLargerNodes(head *ListNode) []int {\n    \n}",
    "ruby": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {ListNode} head\n# @return {Integer[]}\ndef next_larger_nodes(head)\n    \nend",
    "scala": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def nextLargerNodes(head: ListNode): Array[Int] = {\n        \n    }\n}",
    "rust": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn next_larger_nodes(head: Option<Box<ListNode>>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (next-larger-nodes head)\n  (-> (or/c list-node? #f) (listof exact-integer?))\n  )",
    "erlang": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec next_larger_nodes(Head :: #list_node{} | null) -> [integer()].\nnext_larger_nodes(Head) ->\n  .",
    "elixir": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec next_larger_nodes(head :: ListNode.t | nil) :: [integer]\n  def next_larger_nodes(head) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n\n--- \n\n### Overview\n\nWe start by copying the individual node values in the linked list `head` into an array (let's call it `values`), which is easier to access and makes the problem a bit more intuitive.\n\n![img](../Figures/1019/1019-1.png)\n\nNow the problem becomes, for each value in the array, we need to find the next larger element on its right side.\n\n---\n\n### Approach 1: Monotonic Stack\n\n#### Intuition   \n\nLet's start with the most straightforward approach: brute force. That is, to iterate over all elements after `values[i]` until finding the first larger element for `values[i]`. This approach has two nested loops, so it may not pass all test cases. \n\nInstead of using one iteration for each value, can we finish finding all the first larger values in a single traverse? The answer is YES!\n\nNote that we are looking for the **next** greater value. If the value we are currently visiting (`values[i]`) is larger than the value `values[smaller]` on the top of the stack, we can pop `smaller` from the stack to prevent it from being visited again later, and let `values[i]` be `values[smaller]`'s next greater value. \n\n![img](../Figures/1019/1019-ex.png)\n\n\nWhen will the above process stop? When the stack is empty, or `values[i]` is not larger than the top element of the stack, we can safely push `i` to stack and move on to the next index `i + 1`. Similarly, if we encounter any value that is larger than `values[i]`, we can use it to pop `i` from the stack.\n\nSince we want to set the next greater value for each index, we would better push the index `i` instead of the value `values[i]` to the stack, so that every time we pop an index from the stack, we can directly update the next greater value for this index. After the iteration over the array stops, indexes left in the stack stand for values that don't have such next greater values, we can just set their next greater values as 0.\n\nRefer to the following slides as an example:\n\n!?!../Documents/1019/s1.json:601,301!?!#### Algorithm\n\n1) Traverse through the linked list `head`, and use an array `values` to store the values of nodes.\n2) Initialize an array `answer` with the same size as `values` and an empty stack `stack` to store the previous indexes.\n3) Iterate over `values`, before we push each index `i` to `stack`:\n    - If the value represented by the top element of `stack` (let's call it `values[smaller]`) is smaller than `values[i]`, it means that `values[i]` is `values[smaller]`'s larger value. So we pop `smaller` from the `stack`, update `answer[smaller] = values[i]` and repeat this step.\n    - Otherwise, it means there is no value smaller than `values[i]`, we add `values[i]` to stack and repeat step 3.\n\n#### Implementation#### Complexity Analysis\n\nLet $$n$$ be the length of the linked list `head`.\n\n* Time complexity: $$O(n)$$\n\n    - We iterate over `head` to record all values in `values`, it takes $$O(n)$$ time.\n    - We then iterate over `values` which takes $$O(n)$$ time.\n    - During the iteration, there may be multiple operations on the stack, however, each index is pushed to and popped from the stack at most once, so the total time in the worst-case scenario is $$O(n)$$.\n    - Therefore, the overall time complexity is $$O(n)$$.\n\n* Space complexity: $$O(n)$$\n\n    - We used an array `values` to store the values of eery node in `head` which takes $$O(n)$$ space.\n    - We used a stack `stack` to maintain a non-increasing sequence, there may be up to $$n$$ elements in `stack` thus it also takes $$O(n)$$ space.\n    - To sum up, the overall space complexity is $$O(n)$$.---\n\n### Approach 2: Monotonic Stack, 1 Pass\n\n#### Intuition   \n\nWe can further reduce the number of iterations. In the previous approach, we store node values from the linked list `head` into `values` by the first iteration and find the next greater value in the second iteration. Here we only use one iteration by recording the value from the `head` and updating `stack` in the same iteration step!\n\nCompared to approach 1, the differences are as follows:\n\n- We don't know the size of the linked list `head`, thus we can't initialize an array of equal size. Instead, we start with an empty array `answer` and increment its size during the iteration.\n- We don't use the array `values` to store all values from `head`, so we should store both the index and the value of each node to `stack`. Then we can get the value of each node from the index without referring to `values`.#### Algorithm\n\n1) Initialize an empty `answer` and an empty stack `stack` to store the previous indexes.\n2) Iterate over `head` starting with index `i = 0`, for each current node, and compare the value of `head.val` with the element `[i, val]` on the top of the stack, if `head.val > val`, pop the top element `[top_i, val]` from the stack and update `answer[top_i] = head.val`.\n3) Push the `[i, head.val]` to the top of `stack`.\n4) Add `0` to `answer`, which is the default next larger value for `head.val`.\n5) Repeat step 2 until we finish the iteration.\n\n#### Implementation#### Complexity Analysis\n\nLet $$n$$ be the length of the linked list `head`.\n\n* Time complexity: $$O(n)$$\n\n    - We iterate over `head`. During the iteration, there may be multiple operations on the stack, however, each index `cnt` is pushed to and popped from the stack at most once, so the total time in the worst-case scenario is $$O(n)$$.\n    - Therefore, the overall time complexity is $$O(n)$$.\n\n* Space complexity: $$O(n)$$\n\n    - We only used a stack `stack`, there may be up to $$n$$ elements in `stack` thus it also takes $$O(n)$$ space.\n    - To sum up, the overall space complexity is $$O(n)$$."
}
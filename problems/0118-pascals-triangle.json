{
  "title": "Pascal's Triangle",
  "problem_id": "118",
  "frontend_id": "118",
  "difficulty": "Easy",
  "problem_slug": "pascals-triangle",
  "topics": [
    "Array",
    "Dynamic Programming"
  ],
  "description": "Given an integer numRows, return the first numRows of Pascal's triangle.\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: numRows = 5\nOutput: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]",
      "images": [
        "https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: numRows = 1\nOutput: [[1]]",
      "images": [
        "https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif"
      ]
    }
  ],
  "constraints": [
    "1 <= numRows <= 30"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<vector<int>> generate(int numRows) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<List<Integer>> generate(int numRows) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        ",
    "c": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** generate(int numRows, int* returnSize, int** returnColumnSizes) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<IList<int>> Generate(int numRows) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} numRows\n * @return {number[][]}\n */\nvar generate = function(numRows) {\n    \n};",
    "typescript": "function generate(numRows: number): number[][] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $numRows\n     * @return Integer[][]\n     */\n    function generate($numRows) {\n        \n    }\n}",
    "swift": "class Solution {\n    func generate(_ numRows: Int) -> [[Int]] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun generate(numRows: Int): List<List<Int>> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<List<int>> generate(int numRows) {\n    \n  }\n}",
    "golang": "func generate(numRows int) [][]int {\n    \n}",
    "ruby": "# @param {Integer} num_rows\n# @return {Integer[][]}\ndef generate(num_rows)\n    \nend",
    "scala": "object Solution {\n    def generate(numRows: Int): List[List[Int]] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn generate(num_rows: i32) -> Vec<Vec<i32>> {\n        \n    }\n}",
    "racket": "(define/contract (generate numRows)\n  (-> exact-integer? (listof (listof exact-integer?)))\n  )",
    "erlang": "-spec generate(NumRows :: integer()) -> [[integer()]].\ngenerate(NumRows) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec generate(num_rows :: integer) :: [[integer]]\n  def generate(num_rows) do\n    \n  end\nend"
  }
}
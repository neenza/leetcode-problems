{
  "title": "Power of Heroes",
  "problem_id": "2784",
  "frontend_id": "2681",
  "difficulty": "Hard",
  "problem_slug": "power-of-heroes",
  "topics": [
    "Array",
    "Math",
    "Dynamic Programming",
    "Sorting",
    "Prefix Sum"
  ],
  "description": "You are given a 0-indexed integer array nums representing the strength of some heroes. The power of a group of heroes is defined as follows:\nReturn the sum of the power of all non-empty groups of heroes possible. Since the sum could be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [2,1,4]\nOutput: 141\nExplanation: \n1st group: [2] has power = 22 * 2 = 8.\n2nd group: [1] has power = 12 * 1 = 1. \n3rd group: [4] has power = 42 * 4 = 64. \n4th group: [2,1] has power = 22 * 1 = 4. \n5th group: [2,4] has power = 42 * 2 = 32. \n6th group: [1,4] has power = 42 * 1 = 16. \n​​​​​​​7th group: [2,1,4] has power = 42​​​​​​​ * 1 = 16. \nThe sum of powers of all groups is 8 + 1 + 64 + 4 + 32 + 16 + 16 = 141.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,1,1]\nOutput: 7\nExplanation: A total of 7 groups are possible, and the power of each group will be 1. Therefore, the sum of the powers of all groups is 7.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "1 <= nums[i] <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "Try something with sorting the array.",
    "For a pair of array elements nums[i] and nums[j] (i < j), the power would be nums[i]*nums[j]^2 regardless of how many elements in between are included.",
    "The number of subsets with the above as power will correspond to 2^(j-i-1).",
    "Try collecting the terms for nums[0], nums[1], …, nums[j-1] when computing the power of heroes ending at index j to get the power in a single pass."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int sumOfPower(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int sumOfPower(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def sumOfPower(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def sumOfPower(self, nums: List[int]) -> int:\n        ",
    "c": "int sumOfPower(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int SumOfPower(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar sumOfPower = function(nums) {\n    \n};",
    "typescript": "function sumOfPower(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function sumOfPower($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func sumOfPower(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun sumOfPower(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int sumOfPower(List<int> nums) {\n    \n  }\n}",
    "golang": "func sumOfPower(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef sum_of_power(nums)\n    \nend",
    "scala": "object Solution {\n    def sumOfPower(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn sum_of_power(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (sum-of-power nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec sum_of_power(Nums :: [integer()]) -> integer().\nsum_of_power(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec sum_of_power(nums :: [integer]) :: integer\n  def sum_of_power(nums) do\n    \n  end\nend"
  }
}
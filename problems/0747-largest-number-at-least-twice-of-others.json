{
  "title": "Largest Number At Least Twice of Others",
  "problem_id": "748",
  "frontend_id": "747",
  "difficulty": "Easy",
  "problem_slug": "largest-number-at-least-twice-of-others",
  "topics": [
    "Array",
    "Sorting"
  ],
  "description": "You are given an integer array nums where the largest integer is unique.\nDetermine whether the largest element in the array is at least twice as much as every other number in the array. If it is, return the index of the largest element, or return -1 otherwise.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [3,6,1,0]\nOutput: 1\nExplanation: 6 is the largest integer.\nFor every other number in the array x, 6 is at least twice as big as x.\nThe index of value 6 is 1, so we return 1.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,2,3,4]\nOutput: -1\nExplanation: 4 is less than twice the value of 3, so we return -1.",
      "images": []
    }
  ],
  "constraints": [
    "2 <= nums.length <= 50",
    "0 <= nums[i] <= 100",
    "The largest element in nums is unique."
  ],
  "follow_ups": [],
  "hints": [
    "Scan through the array to find the unique largest element `m`, keeping track of it's index `maxIndex`.\r\n\r\nScan through the array again.  If we find some `x != m` with `m < 2*x`, we should return `-1`.\r\n\r\nOtherwise, we should return `maxIndex`."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int dominantIndex(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int dominantIndex(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def dominantIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def dominantIndex(self, nums: List[int]) -> int:\n        ",
    "c": "int dominantIndex(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int DominantIndex(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar dominantIndex = function(nums) {\n    \n};",
    "typescript": "function dominantIndex(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function dominantIndex($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func dominantIndex(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun dominantIndex(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int dominantIndex(List<int> nums) {\n    \n  }\n}",
    "golang": "func dominantIndex(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef dominant_index(nums)\n    \nend",
    "scala": "object Solution {\n    def dominantIndex(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn dominant_index(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (dominant-index nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec dominant_index(Nums :: [integer()]) -> integer().\ndominant_index(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec dominant_index(nums :: [integer]) :: integer\n  def dominant_index(nums) do\n    \n  end\nend"
  }
}
{
  "title": "Maximum Subarray With Equal Products",
  "problem_id": "3702",
  "frontend_id": "3411",
  "difficulty": "Easy",
  "problem_slug": "maximum-subarray-with-equal-products",
  "topics": [
    "Array",
    "Math",
    "Sliding Window",
    "Enumeration",
    "Number Theory"
  ],
  "description": "You are given an array of positive integers nums.\nAn array arr is called product equivalent if prod(arr) == lcm(arr) * gcd(arr), where:\nReturn the length of the longest product equivalent subarray of nums.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,1,2,1,1,1]\nOutput: 5\nExplanation:\nThe longest product equivalent subarray is [1, 2, 1, 1, 1] , where prod([1, 2, 1, 1, 1]) = 2 , gcd([1, 2, 1, 1, 1]) = 1 , and lcm([1, 2, 1, 1, 1]) = 2 .",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [2,3,4,5,6]\nOutput: 3\nExplanation:\nThe longest product equivalent subarray is [3, 4, 5].",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,2,3,1,4,5,1]\nOutput: 5",
      "images": []
    }
  ],
  "constraints": [
    "2 <= nums.length <= 100",
    "1 <= nums[i] <= 10"
  ],
  "follow_ups": [],
  "hints": [
    "What is the maximum possible lcm?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxLength(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxLength(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxLength(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxLength(self, nums: List[int]) -> int:\n        ",
    "c": "int maxLength(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxLength(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxLength = function(nums) {\n    \n};",
    "typescript": "function maxLength(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxLength($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxLength(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxLength(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxLength(List<int> nums) {\n    \n  }\n}",
    "golang": "func maxLength(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_length(nums)\n    \nend",
    "scala": "object Solution {\n    def maxLength(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_length(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-length nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec max_length(Nums :: [integer()]) -> integer().\nmax_length(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_length(nums :: [integer]) :: integer\n  def max_length(nums) do\n    \n  end\nend"
  }
}
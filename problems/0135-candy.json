{
  "title": "Candy",
  "problem_id": "135",
  "frontend_id": "135",
  "difficulty": "Hard",
  "problem_slug": "candy",
  "topics": [
    "Array",
    "Greedy"
  ],
  "description": "There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.\nYou are giving candies to these children subjected to the following requirements:\nReturn the minimum number of candies you need to have to distribute the candies to the children.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: ratings = [1,0,2]\nOutput: 5\nExplanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: ratings = [1,2,2]\nOutput: 4\nExplanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\nThe third child gets 1 candy because it satisfies the above two conditions.",
      "images": []
    }
  ],
  "constraints": [
    "n == ratings.length",
    "1 <= n <= 2 * 104",
    "0 <= ratings[i] <= 2 * 104"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int candy(vector<int>& ratings) {\n        \n    }\n};",
    "java": "class Solution {\n    public int candy(int[] ratings) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def candy(self, ratings: List[int]) -> int:\n        ",
    "c": "int candy(int* ratings, int ratingsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int Candy(int[] ratings) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} ratings\n * @return {number}\n */\nvar candy = function(ratings) {\n    \n};",
    "typescript": "function candy(ratings: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $ratings\n     * @return Integer\n     */\n    function candy($ratings) {\n        \n    }\n}",
    "swift": "class Solution {\n    func candy(_ ratings: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun candy(ratings: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int candy(List<int> ratings) {\n    \n  }\n}",
    "golang": "func candy(ratings []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} ratings\n# @return {Integer}\ndef candy(ratings)\n    \nend",
    "scala": "object Solution {\n    def candy(ratings: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn candy(ratings: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (candy ratings)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec candy(Ratings :: [integer()]) -> integer().\ncandy(Ratings) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec candy(ratings :: [integer]) :: integer\n  def candy(ratings) do\n    \n  end\nend"
  }
}
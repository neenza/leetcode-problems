{
  "title": "Employee Bonus",
  "problem_id": "577",
  "frontend_id": "577",
  "difficulty": "Easy",
  "problem_slug": "employee-bonus",
  "topics": [
    "Database"
  ],
  "description": "Table: Employee\nTable: Bonus\nWrite a solution to report the name and bonus amount of each employee with a bonus less than 1000.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| empId       | int     |\n| name        | varchar |\n| supervisor  | int     |\n| salary      | int     |\n+-------------+---------+\nempId is the column with unique values for this table.\nEach row of this table indicates the name and the ID of an employee in addition to their salary and the id of their manager.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| empId       | int  |\n| bonus       | int  |\n+-------------+------+\nempId is the column of unique values for this table.\nempId is a foreign key (reference column) to empId from the Employee table.\nEach row of this table contains the id of an employee and their respective bonus.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: \nEmployee table:\n+-------+--------+------------+--------+\n| empId | name   | supervisor | salary |\n+-------+--------+------------+--------+\n| 3     | Brad   | null       | 4000   |\n| 1     | John   | 3          | 1000   |\n| 2     | Dan    | 3          | 2000   |\n| 4     | Thomas | 3          | 4000   |\n+-------+--------+------------+--------+\nBonus table:\n+-------+-------+\n| empId | bonus |\n+-------+-------+\n| 2     | 500   |\n| 4     | 2000  |\n+-------+-------+\nOutput: \n+------+-------+\n| name | bonus |\n+------+-------+\n| Brad | null  |\n| John | null  |\n| Dan  | 500   |\n+------+-------+",
      "images": []
    }
  ],
  "constraints": [],
  "follow_ups": [],
  "hints": [
    "If the EmpId in table Employee has no match in table Bonus, we consider that the corresponding bonus is null and null is smaller than 1000.",
    "Inner join is the default join, we can solve the mismatching problem by using outer join."
  ],
  "code_snippets": {
    "mysql": "# Write your MySQL query statement below\n",
    "mssql": "/* Write your T-SQL query statement below */\n",
    "oraclesql": "/* Write your PL/SQL query statement below */\n",
    "pythondata": "import pandas as pd\n\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\n    ",
    "postgresql": "-- Write your PostgreSQL query statement below\n"
  },
  "solution": "[TOC]\n\n# Solution\n\n---\n\n\n\n\n## pandas\n\n### Approach 1: Filter and Retrieve \n\n##### Algorithm\n\n1. Define the `employee_bonus` function that takes two DataFrames, `employee` and `bonus`, as input parameters and specifies that it returns a DataFrame.\n\n2. Use the Pandas merge function to combine the `employee` and `bonus` DataFrames on the `empId` column using a left join. This combines employee data with their respective bonuses.\n\n3. Apply a filter to the merged DataFrame to include only rows where the bonus is less than 1000 or where the bonus is missing (NaN). Use boolean indexing for filtering.\n\n4. Choose the `name` and `bonus` columns from the filtered DataFrame to extract the relevant information.\n\n5. Return the filtered DataFrame as the output of the function.\n\n##### Code\n\n```python\nimport pandas as pd\n\ndef employee_bonus(employee: pd.DataFrame, bonus: pd.DataFrame) -> pd.DataFrame:\n    # Merge Employee and Bonus tables using a left join\n    result_df = pd.merge(employee, bonus, on='empId', how='left')\n\n    # Filter rows where bonus is less than 1000 or missing\n    result_df = result_df[(result_df['bonus'] < 1000) | result_df['bonus'].isnull()]\n\n    # Select \"name\" and \"bonus\" columns\n    result_df = result_df[['name', 'bonus']]\n\n    return result_df\n\n\n\n```## Database\n\n\n### Approach 1: Using `OUTER JOIN` and `WHERE` clause\n\n\n#### Algorithm\n\n1. Initialize Query: Start an SQL query.\n\n2. Since foreign key **Bonus.empId** refers to **Employee.empId** and some employees do not have bonus records, we can use `OUTER JOIN` to link these two tables as the first step.\n\n\n```sql\nSELECT\n    Employee.name, Bonus.bonus\nFROM\n    Employee\n        LEFT OUTER JOIN\n    Bonus ON Employee.empid = Bonus.empid\n;\n```\n>Note: \"LEFT OUTER JOIN\" could be written as \"LEFT JOIN\".\n\nThe output to run this code with the sample data is as below.\n\n```\n| name   | bonus |\n|--------|-------|\n| Dan    | 500   |\n| Thomas | 2000  |\n| Brad   |       |\n| John   |       |\n```\nThe bonus value for `Brad` and `John` is empty, which is actually `NULL` in the database. \"Conceptually, NULL means “a missing unknown value” and it is treated somewhat differently from other values.\" Check the [Working with NULL Values](https://dev.mysql.com/doc/refman/5.7/en/working-with-null.html) in MySQL manual for more details. In addition, we have to use `IS NULL` or `IS NOT NULL` to compare a value with `NULL`.\n\n3. At last, we can add a `WHERE` clause with the proper conditions to filter these records.\n\n#### Implementation\n\n```mysql []\nSELECT\n    Employee.name, Bonus.bonus\nFROM\n    Employee\n        LEFT JOIN\n    Bonus ON Employee.empid = Bonus.empid\nWHERE\n    bonus < 1000 OR bonus IS NULL\n;\n```"
}
{
  "title": "Final Value of Variable After Performing Operations",
  "problem_id": "2137",
  "frontend_id": "2011",
  "difficulty": "Easy",
  "problem_slug": "final-value-of-variable-after-performing-operations",
  "topics": [
    "Array",
    "String",
    "Simulation"
  ],
  "description": "There is a programming language with only four operations and one variable X:\nInitially, the value of X is 0.\nGiven an array of strings operations containing a list of operations, return the final value of X after performing all the operations.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: operations = [\"--X\",\"X++\",\"X++\"]\nOutput: 1\nExplanation: The operations are performed as follows:\nInitially, X = 0.\n--X: X is decremented by 1, X =  0 - 1 = -1.\nX++: X is incremented by 1, X = -1 + 1 =  0.\nX++: X is incremented by 1, X =  0 + 1 =  1.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: operations = [\"++X\",\"++X\",\"X++\"]\nOutput: 3\nExplanation: The operations are performed as follows:\nInitially, X = 0.\n++X: X is incremented by 1, X = 0 + 1 = 1.\n++X: X is incremented by 1, X = 1 + 1 = 2.\nX++: X is incremented by 1, X = 2 + 1 = 3.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: operations = [\"X++\",\"++X\",\"--X\",\"X--\"]\nOutput: 0\nExplanation: The operations are performed as follows:\nInitially, X = 0.\nX++: X is incremented by 1, X = 0 + 1 = 1.\n++X: X is incremented by 1, X = 1 + 1 = 2.\n--X: X is decremented by 1, X = 2 - 1 = 1.\nX--: X is decremented by 1, X = 1 - 1 = 0.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= operations.length <= 100",
    "operations[i] will be either \"++X\", \"X++\", \"--X\", or \"X--\"."
  ],
  "follow_ups": [],
  "hints": [
    "There are only two operations to keep track of.",
    "Use a variable to store the value after each operation."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int finalValueAfterOperations(vector<string>& operations) {\n        \n    }\n};",
    "java": "class Solution {\n    public int finalValueAfterOperations(String[] operations) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def finalValueAfterOperations(self, operations):\n        \"\"\"\n        :type operations: List[str]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def finalValueAfterOperations(self, operations: List[str]) -> int:\n        ",
    "c": "int finalValueAfterOperations(char** operations, int operationsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int FinalValueAfterOperations(string[] operations) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string[]} operations\n * @return {number}\n */\nvar finalValueAfterOperations = function(operations) {\n    \n};",
    "typescript": "function finalValueAfterOperations(operations: string[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String[] $operations\n     * @return Integer\n     */\n    function finalValueAfterOperations($operations) {\n        \n    }\n}",
    "swift": "class Solution {\n    func finalValueAfterOperations(_ operations: [String]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun finalValueAfterOperations(operations: Array<String>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int finalValueAfterOperations(List<String> operations) {\n    \n  }\n}",
    "golang": "func finalValueAfterOperations(operations []string) int {\n    \n}",
    "ruby": "# @param {String[]} operations\n# @return {Integer}\ndef final_value_after_operations(operations)\n    \nend",
    "scala": "object Solution {\n    def finalValueAfterOperations(operations: Array[String]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn final_value_after_operations(operations: Vec<String>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (final-value-after-operations operations)\n  (-> (listof string?) exact-integer?)\n  )",
    "erlang": "-spec final_value_after_operations(Operations :: [unicode:unicode_binary()]) -> integer().\nfinal_value_after_operations(Operations) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec final_value_after_operations(operations :: [String.t]) :: integer\n  def final_value_after_operations(operations) do\n    \n  end\nend"
  }
}
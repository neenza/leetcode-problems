{
  "title": "Make Three Strings Equal",
  "problem_id": "3207",
  "frontend_id": "2937",
  "difficulty": "Easy",
  "problem_slug": "make-three-strings-equal",
  "topics": [
    "String"
  ],
  "description": "You are given three strings: s1, s2, and s3. In one operation you can choose one of these strings and delete its rightmost character. Note that you cannot completely empty a string.\nReturn the minimum number of operations required to make the strings equal. If it is impossible to make them equal, return -1.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s1 = \"abc\", s2 = \"abb\", s3 = \"ab\"\nOutput: 2\nExplanation: Deleting the rightmost character from both s1 and s2 will result in three equal strings.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s1 = \"dac\", s2 = \"bac\", s3 = \"cac\"\nOutput: -1\nExplanation: Since the first letters of s1 and s2 differ, they cannot be made equal.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s1.length, s2.length, s3.length <= 100",
    "s1, s2 and s3 consist only of lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [
    "Calculate the length of the longest common prefix of the <code>3</code> strings."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int findMinimumOperations(string s1, string s2, string s3) {\n        \n    }\n};",
    "java": "class Solution {\n    public int findMinimumOperations(String s1, String s2, String s3) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findMinimumOperations(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findMinimumOperations(self, s1: str, s2: str, s3: str) -> int:\n        ",
    "c": "int findMinimumOperations(char* s1, char* s2, char* s3) {\n    \n}",
    "csharp": "public class Solution {\n    public int FindMinimumOperations(string s1, string s2, string s3) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s1\n * @param {string} s2\n * @param {string} s3\n * @return {number}\n */\nvar findMinimumOperations = function(s1, s2, s3) {\n    \n};",
    "typescript": "function findMinimumOperations(s1: string, s2: string, s3: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @param String $s3\n     * @return Integer\n     */\n    function findMinimumOperations($s1, $s2, $s3) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findMinimumOperations(_ s1: String, _ s2: String, _ s3: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findMinimumOperations(s1: String, s2: String, s3: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int findMinimumOperations(String s1, String s2, String s3) {\n    \n  }\n}",
    "golang": "func findMinimumOperations(s1 string, s2 string, s3 string) int {\n    \n}",
    "ruby": "# @param {String} s1\n# @param {String} s2\n# @param {String} s3\n# @return {Integer}\ndef find_minimum_operations(s1, s2, s3)\n    \nend",
    "scala": "object Solution {\n    def findMinimumOperations(s1: String, s2: String, s3: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_minimum_operations(s1: String, s2: String, s3: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (find-minimum-operations s1 s2 s3)\n  (-> string? string? string? exact-integer?)\n  )",
    "erlang": "-spec find_minimum_operations(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary(), S3 :: unicode:unicode_binary()) -> integer().\nfind_minimum_operations(S1, S2, S3) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_minimum_operations(s1 :: String.t, s2 :: String.t, s3 :: String.t) :: integer\n  def find_minimum_operations(s1, s2, s3) do\n    \n  end\nend"
  }
}
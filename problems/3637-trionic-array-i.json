{
  "title": "Trionic Array I",
  "problem_id": "3952",
  "frontend_id": "3637",
  "difficulty": "Easy",
  "problem_slug": "trionic-array-i",
  "topics": [],
  "description": "You are given an integer array nums of length n.\nAn array is trionic if there exist indices 0 < p < q < n âˆ’ 1 such that:\nReturn true if nums is trionic, otherwise return false.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,3,5,4,2,6]\nOutput: true\nExplanation:\nPick p = 2 , q = 4 :",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [2,1,3]\nOutput: false\nExplanation:\nThere is no way to pick p and q to form the required three segments.",
      "images": []
    }
  ],
  "constraints": [
    "3 <= n <= 100",
    "-1000 <= nums[i] <= 1000"
  ],
  "follow_ups": [],
  "hints": [
    "Use brute force"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool isTrionic(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean isTrionic(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def isTrionic(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def isTrionic(self, nums: List[int]) -> bool:\n        ",
    "c": "bool isTrionic(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public bool IsTrionic(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar isTrionic = function(nums) {\n    \n};",
    "typescript": "function isTrionic(nums: number[]): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function isTrionic($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func isTrionic(_ nums: [Int]) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun isTrionic(nums: IntArray): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool isTrionic(List<int> nums) {\n    \n  }\n}",
    "golang": "func isTrionic(nums []int) bool {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Boolean}\ndef is_trionic(nums)\n    \nend",
    "scala": "object Solution {\n    def isTrionic(nums: Array[Int]): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn is_trionic(nums: Vec<i32>) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (is-trionic nums)\n  (-> (listof exact-integer?) boolean?)\n  )",
    "erlang": "-spec is_trionic(Nums :: [integer()]) -> boolean().\nis_trionic(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec is_trionic(nums :: [integer]) :: boolean\n  def is_trionic(nums) do\n    \n  end\nend"
  }
}
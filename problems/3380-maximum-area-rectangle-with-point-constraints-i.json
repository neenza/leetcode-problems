{
  "title": "Maximum Area Rectangle With Point Constraints I",
  "problem_id": "3681",
  "frontend_id": "3380",
  "difficulty": "Medium",
  "problem_slug": "maximum-area-rectangle-with-point-constraints-i",
  "topics": [
    "Array",
    "Math",
    "Binary Indexed Tree",
    "Segment Tree",
    "Geometry",
    "Sorting",
    "Enumeration"
  ],
  "description": "You are given an array points where points[i] = [xi, yi] represents the coordinates of a point on an infinite plane.\nYour task is to find the maximum area of a rectangle that:\nReturn the maximum area that you can obtain or -1 if no such rectangle is possible.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: points = [[1,1],[1,3],[3,1],[3,3]]\nOutput: 4\nExplanation:\n\nWe can make a rectangle with these 4 points as corners and there is no other point that lies inside or on the border . Hence, the maximum possible area would be 4.",
      "images": [
        "https://assets.leetcode.com/uploads/2024/11/02/example1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: points = [[1,1],[1,3],[3,1],[3,3],[2,2]]\nOutput: -1\nExplanation:\n\nThere is only one rectangle possible is with points [1,1], [1,3], [3,1] and [3,3] but [2,2] will always lie inside it. Hence, returning -1.",
      "images": [
        "https://assets.leetcode.com/uploads/2024/11/02/example2.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: points = [[1,1],[1,3],[3,1],[3,3],[1,2],[3,2]]\nOutput: 2\nExplanation:\n\nThe maximum area rectangle is formed by the points [1,3], [1,2], [3,2], [3,3] , which has an area of 2. Additionally, the points [1,1], [1,2], [3,1], [3,2] also form a valid rectangle with the same area.",
      "images": [
        "https://assets.leetcode.com/uploads/2024/11/02/example3.png"
      ]
    }
  ],
  "constraints": [
    "1 <= points.length <= 10",
    "points[i].length == 2",
    "0 <= xi, yi <= 100",
    "All the given points are unique."
  ],
  "follow_ups": [],
  "hints": [
    "If <code>(x1, y1)</code> and <code>(x2, y2)</code> are two opposite corners of a rectangle, then the other two would be <code>(x1, y2)</code> and <code>(x2, y1)</code>.",
    "Fix two points and find the other two using a set data structure.",
    "After determining the rectangle, iterate through the array of points to ensure no point lies on the rectangleâ€™s border or within its interior."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxRectangleArea(vector<vector<int>>& points) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxRectangleArea(int[][] points) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxRectangleArea(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxRectangleArea(self, points: List[List[int]]) -> int:\n        ",
    "c": "int maxRectangleArea(int** points, int pointsSize, int* pointsColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxRectangleArea(int[][] points) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar maxRectangleArea = function(points) {\n    \n};",
    "typescript": "function maxRectangleArea(points: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function maxRectangleArea($points) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxRectangleArea(_ points: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxRectangleArea(points: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxRectangleArea(List<List<int>> points) {\n    \n  }\n}",
    "golang": "func maxRectangleArea(points [][]int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} points\n# @return {Integer}\ndef max_rectangle_area(points)\n    \nend",
    "scala": "object Solution {\n    def maxRectangleArea(points: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_rectangle_area(points: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-rectangle-area points)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec max_rectangle_area(Points :: [[integer()]]) -> integer().\nmax_rectangle_area(Points) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_rectangle_area(points :: [[integer]]) :: integer\n  def max_rectangle_area(points) do\n    \n  end\nend"
  }
}
{
  "title": "Determine Whether Matrix Can Be Obtained By Rotation",
  "problem_id": "2015",
  "frontend_id": "1886",
  "difficulty": "Easy",
  "problem_slug": "determine-whether-matrix-can-be-obtained-by-rotation",
  "topics": [
    "Array",
    "Matrix"
  ],
  "description": "Given two n x n binary matrices mat and target, return true if it is possible to make mat equal to target by rotating mat in 90-degree increments, or false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: mat = [[0,1],[1,0]], target = [[1,0],[0,1]]\nOutput: true\nExplanation: We can rotate mat 90 degrees clockwise to make mat equal target.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/05/20/grid3.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: mat = [[0,1],[1,1]], target = [[1,0],[0,1]]\nOutput: false\nExplanation: It is impossible to make mat equal to target by rotating mat.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/05/20/grid4.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]\nOutput: true\nExplanation: We can rotate mat 90 degrees clockwise two times to make mat equal target.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/05/26/grid4.png"
      ]
    }
  ],
  "constraints": [
    "n == mat.length == target.length",
    "n == mat[i].length == target[i].length",
    "1 <= n <= 10",
    "mat[i][j] and target[i][j] are either 0 or 1."
  ],
  "follow_ups": [],
  "hints": [
    "What is the maximum number of rotations you have to check?",
    "Is there a formula you can use to rotate a matrix 90 degrees?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool findRotation(vector<vector<int>>& mat, vector<vector<int>>& target) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean findRotation(int[][] mat, int[][] target) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findRotation(self, mat, target):\n        \"\"\"\n        :type mat: List[List[int]]\n        :type target: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findRotation(self, mat: List[List[int]], target: List[List[int]]) -> bool:\n        ",
    "c": "bool findRotation(int** mat, int matSize, int* matColSize, int** target, int targetSize, int* targetColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public bool FindRotation(int[][] mat, int[][] target) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} mat\n * @param {number[][]} target\n * @return {boolean}\n */\nvar findRotation = function(mat, target) {\n    \n};",
    "typescript": "function findRotation(mat: number[][], target: number[][]): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $mat\n     * @param Integer[][] $target\n     * @return Boolean\n     */\n    function findRotation($mat, $target) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findRotation(_ mat: [[Int]], _ target: [[Int]]) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findRotation(mat: Array<IntArray>, target: Array<IntArray>): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool findRotation(List<List<int>> mat, List<List<int>> target) {\n    \n  }\n}",
    "golang": "func findRotation(mat [][]int, target [][]int) bool {\n    \n}",
    "ruby": "# @param {Integer[][]} mat\n# @param {Integer[][]} target\n# @return {Boolean}\ndef find_rotation(mat, target)\n    \nend",
    "scala": "object Solution {\n    def findRotation(mat: Array[Array[Int]], target: Array[Array[Int]]): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_rotation(mat: Vec<Vec<i32>>, target: Vec<Vec<i32>>) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (find-rotation mat target)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)) boolean?)\n  )",
    "erlang": "-spec find_rotation(Mat :: [[integer()]], Target :: [[integer()]]) -> boolean().\nfind_rotation(Mat, Target) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_rotation(mat :: [[integer]], target :: [[integer]]) :: boolean\n  def find_rotation(mat, target) do\n    \n  end\nend"
  }
}
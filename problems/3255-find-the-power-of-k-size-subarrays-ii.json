{
  "title": "Find the Power of K-Size Subarrays II",
  "problem_id": "3523",
  "frontend_id": "3255",
  "difficulty": "Medium",
  "problem_slug": "find-the-power-of-k-size-subarrays-ii",
  "topics": [
    "Array",
    "Sliding Window"
  ],
  "description": "You are given an array of integers nums of length n and a positive integer k.\nThe power of an array is defined as:\nYou need to find the power of all subarrays of nums of size k.\nReturn an integer array results of size n - k + 1, where results[i] is the power of nums[i..(i + k - 1)].\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,3,4,3,2,5], k = 3\nOutput: [3,4,-1,-1,-1]\nExplanation:\nThere are 5 subarrays of nums of size 3:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [2,2,2,2,2], k = 4\nOutput: [-1,-1]",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [3,2,3,2,3,2], k = 2\nOutput: [-1,3,-1,3,-1]",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n == nums.length <= 105",
    "1 <= nums[i] <= 106",
    "1 <= k <= n"
  ],
  "follow_ups": [],
  "hints": [
    "Let <code>dp[i]</code> denote the length of the longest subarray ending at index <code>i</code> that has consecutive and sorted elements.",
    "Use a TreeMap with a sliding window to check if there are <code>k</code> elements in the subarray ending at index <code>i</code>.",
    "If TreeMap has less than <code>k</code> elements and <code>dp[i] < k</code>, the subarray has power equal to -1.",
    "Is it possible to achieve <code>O(nums.length)</code> using a Stack?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> resultsArray(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] resultsArray(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def resultsArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* resultsArray(int* nums, int numsSize, int k, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] ResultsArray(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar resultsArray = function(nums, k) {\n    \n};",
    "typescript": "function resultsArray(nums: number[], k: number): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function resultsArray($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func resultsArray(_ nums: [Int], _ k: Int) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun resultsArray(nums: IntArray, k: Int): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> resultsArray(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func resultsArray(nums []int, k int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer[]}\ndef results_array(nums, k)\n    \nend",
    "scala": "object Solution {\n    def resultsArray(nums: Array[Int], k: Int): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn results_array(nums: Vec<i32>, k: i32) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (results-array nums k)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )",
    "erlang": "-spec results_array(Nums :: [integer()], K :: integer()) -> [integer()].\nresults_array(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec results_array(nums :: [integer], k :: integer) :: [integer]\n  def results_array(nums, k) do\n    \n  end\nend"
  }
}
{
  "title": "Maximum Sum of Distinct Subarrays With Length K",
  "problem_id": "2552",
  "frontend_id": "2461",
  "difficulty": "Medium",
  "problem_slug": "maximum-sum-of-distinct-subarrays-with-length-k",
  "topics": [
    "Array",
    "Hash Table",
    "Sliding Window"
  ],
  "description": "You are given an integer array nums and an integer k. Find the maximum subarray sum of all the subarrays of nums that meet the following conditions:\nReturn the maximum subarray sum of all the subarrays that meet the conditions. If no subarray meets the conditions, return 0.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,5,4,2,9,9,9], k = 3\nOutput: 15\nExplanation: The subarrays of nums with length 3 are:\n- [1,5,4] which meets the requirements and has a sum of 10.\n- [5,4,2] which meets the requirements and has a sum of 11.\n- [4,2,9] which meets the requirements and has a sum of 15.\n- [2,9,9] which does not meet the requirements because the element 9 is repeated.\n- [9,9,9] which does not meet the requirements because the element 9 is repeated.\nWe return 15 because it is the maximum subarray sum of all the subarrays that meet the conditions",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [4,4,4], k = 3\nOutput: 0\nExplanation: The subarrays of nums with length 3 are:\n- [4,4,4] which does not meet the requirements because the element 4 is repeated.\nWe return 0 because no subarrays meet the conditions.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= k <= nums.length <= 105",
    "1 <= nums[i] <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "Which elements change when moving from the subarray of size k that ends at index i to the subarray of size k that ends at index i + 1?",
    "Only two elements change, the element at i + 1 is added into the subarray, and the element at i - k + 1 gets removed from the subarray.",
    "Iterate through each subarray of size k and keep track of the sum of the subarray and the frequency of each element."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long maximumSubarraySum(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public long maximumSubarraySum(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maximumSubarraySum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maximumSubarraySum(self, nums: List[int], k: int) -> int:\n        ",
    "c": "long long maximumSubarraySum(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public long MaximumSubarraySum(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maximumSubarraySum = function(nums, k) {\n    \n};",
    "typescript": "function maximumSubarraySum(nums: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumSubarraySum($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maximumSubarraySum(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maximumSubarraySum(nums: IntArray, k: Int): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int maximumSubarraySum(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func maximumSubarraySum(nums []int, k int) int64 {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef maximum_subarray_sum(nums, k)\n    \nend",
    "scala": "object Solution {\n    def maximumSubarraySum(nums: Array[Int], k: Int): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn maximum_subarray_sum(nums: Vec<i32>, k: i32) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (maximum-subarray-sum nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec maximum_subarray_sum(Nums :: [integer()], K :: integer()) -> integer().\nmaximum_subarray_sum(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec maximum_subarray_sum(nums :: [integer], k :: integer) :: integer\n  def maximum_subarray_sum(nums, k) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n\n---\n\n### Overview\n\nWe are given an array of integers and an integer `k`. We want to find the maximum sum amongst all subarrays that (1) have exactly `k` elements and (2) only contain distinct integers. In other words, we want to find the largest possible sum amongst all subarrays of length `k` that don't have duplicate values.\n\n### Approach: Sliding Window\n\n#### Intuition\n\nA brute force approach would involve generating all possible subarrays of length `k`, checking if each subarray has distinct elements, and keeping track of the maximum sum. However, it is time-consuming to generate all possible subarrays of length `k`. Let's explore a more efficient way to find these subarrays.\n\nInstead of examining all possible subarrays of size `k`, we can use a sliding window over `nums` to efficiently explore subarrays that meet our constraints. This technique uses two pointers, `begin` and `end`, to represent the indices of the current window or subarray. Let's go over the high-level idea of this approach.\n\nIn the sliding window approach, we typically start with an initial window containing just the first element. Then, we try to expand our sliding window by incrementing `end` to cover more elements of `nums`. For each new element `nums[end]` that we add to our window, there are two possible cases: \n\n1) The new window still satisfies the problem's constraints.\n2) The new window no longer satisfies the problem's constraints.\n\nIf the first case applies, then we can continue expanding the window. If the second case applies, then we must adjust our window so that it satisfies the constraints again. This typically involves adjusting moving `begin` forward to shrink the window. Once adjusted, we can proceed with expanding the window to the next element in `nums`.\n\nNow, we can apply the above technique to our current problem. Because we are interested in the maximum sum, we would also like to maintain the sum of our current window. Moreover, for each new element we add to our sliding window, we want to see if the following constraints are followed:\n\n1) The window has all distinct elements.\n2) The window size does not exceed size `k`. \n\nNote that our second constraint is slightly different from the constraint mentioned in the problem description. We only require the window to have a size less than or equal to `k`, not exactly of size `k`. This is because our first few windows will naturally have a size less than `k` as we expand from the start.\n\nThe key question now is how to efficiently check if these two constraints are followed and how to adjust the window whenever these constraints aren't followed.\n\nTo handle constraint 1, we can use a hash map to track each element's last occurrence index. This allows us to check if the newly added element `nums[end]` already exists in the current window. Specifically, if the index of the last occurrence of `nums[end]` is greater than or equal to `begin`, then it is already in the window. To fix this, we have to shrink our window and adjust `begin` so that it excludes the existing occurrence of `nums[end]`. This means `begin` has to be greater than the last occurrence index. As we shrink our window to meet this condition, we also have to update the current sum of the window by subtracting the values of the excluded elements. After these adjustments, the window can include `nums[end]` without violating constraint 1.\n\nFor constraint 2, if the window size exceeds `k` (`end - begin + 1 > k`), then we can simply increment `begin` until the size of our window returns to `k`. Similar to constraint 1, we also update the sum by subtracting the removed elements as we go.\n\nAs we process each valid window, we keep track of the maximum sum encountered. After checking all possible windows, weâ€™ll have the maximum sum of all distinct subarrays with length `k`.\n\n#### Algorithm\n\n1. Initialize our `ans` variable to `0`\n2. Initialize the `currentSum` of our initially empty window to `0`\n3. Initialize the pointers of our sliding window: `begin = 0`, `end = 0`\n4. Instantiate the hash map `numToIndex` that will store the index of the last occurrence of numbers seen so far in `nums`\n5. Start the sliding window process. While `end < nums.length`:\n    * Get the current number we are adding to our window: `currNum = nums[end]`\n    * Get its last occurrence: `lastOccurrence = numToIndex.getOrDefault(currNum, -1)`\n    * While the window still contains this current number `begin <= lastOccurrence` or our window size is too large `end - begin + 1 > k`:\n        * Update the current sum: `currentSum -= nums[begin]`\n        * Shrink our window by 1: `begin++`\n    * Our window is good now. So add the newly added element to our map: `numToIndex.put(currNum, end)`\n    * Update current sum `currentSum += nums[end]`\n    * If our window is size `k`, then update `ans` if `currentSum` is larger: `ans = max(ans, currentSum)`\n    * Increment `end` to add the next element for the next iteration: `end++`\n6. Return `ans`\n\n#### Implementation#### Complexity Analysis\n\nLet $N$ be the size of `nums`.\n\n* Time Complexity: $O(N)$\n\n    In the sliding window technique, in the worst case, our `begin` is adjusted for every increment of `end` . In total, adjusting `begin` takes $O(N)$ time, resulting in an overall total time complexity is $O(N)$\n\n* Space Complexity: $O(N)$\n\n    The space complexity is $O(N)$ due to the size of the `numToIndex` hash map.  \n\n---"
}
{
  "title": "Separate Squares I",
  "problem_id": "3763",
  "frontend_id": "3453",
  "difficulty": "Medium",
  "problem_slug": "separate-squares-i",
  "topics": [
    "Array",
    "Binary Search"
  ],
  "description": "You are given a 2D integer array squares. Each squares[i] = [xi, yi, li] represents the coordinates of the bottom-left point and the side length of a square parallel to the x-axis.\nFind the minimum y-coordinate value of a horizontal line such that the total area of the squares above the line equals the total area of the squares below the line.\nAnswers within 10-5 of the actual answer will be accepted.\nNote: Squares may overlap. Overlapping areas should be counted multiple times.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: squares = [[0,0,1],[2,2,1]]\nOutput: 1.00000\nExplanation:\n\nAny horizontal line between y = 1 and y = 2 will have 1 square unit above it and 1 square unit below it. The lowest option is 1.",
      "images": [
        "https://assets.leetcode.com/uploads/2025/01/06/4062example1drawio.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: squares = [[0,0,2],[1,1,1]]\nOutput: 1.16667\nExplanation:\n\nThe areas are:\nSince the areas above and below the line are equal, the output is 7/6 = 1.16667 .",
      "images": [
        "https://assets.leetcode.com/uploads/2025/01/15/4062example2drawio.png"
      ]
    }
  ],
  "constraints": [
    "1 <= squares.length <= 5 * 104",
    "squares[i] = [xi, yi, li]",
    "squares[i].length == 3",
    "0 <= xi, yi <= 109",
    "1 <= li <= 109",
    "The total area of all the squares will not exceed 1012."
  ],
  "follow_ups": [],
  "hints": [
    "Binary search on the answer."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    double separateSquares(vector<vector<int>>& squares) {\n        \n    }\n};",
    "java": "class Solution {\n    public double separateSquares(int[][] squares) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def separateSquares(self, squares):\n        \"\"\"\n        :type squares: List[List[int]]\n        :rtype: float\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def separateSquares(self, squares: List[List[int]]) -> float:\n        ",
    "c": "double separateSquares(int** squares, int squaresSize, int* squaresColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public double SeparateSquares(int[][] squares) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} squares\n * @return {number}\n */\nvar separateSquares = function(squares) {\n    \n};",
    "typescript": "function separateSquares(squares: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $squares\n     * @return Float\n     */\n    function separateSquares($squares) {\n        \n    }\n}",
    "swift": "class Solution {\n    func separateSquares(_ squares: [[Int]]) -> Double {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun separateSquares(squares: Array<IntArray>): Double {\n        \n    }\n}",
    "dart": "class Solution {\n  double separateSquares(List<List<int>> squares) {\n    \n  }\n}",
    "golang": "func separateSquares(squares [][]int) float64 {\n    \n}",
    "ruby": "# @param {Integer[][]} squares\n# @return {Float}\ndef separate_squares(squares)\n    \nend",
    "scala": "object Solution {\n    def separateSquares(squares: Array[Array[Int]]): Double = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn separate_squares(squares: Vec<Vec<i32>>) -> f64 {\n        \n    }\n}",
    "racket": "(define/contract (separate-squares squares)\n  (-> (listof (listof exact-integer?)) flonum?)\n  )",
    "erlang": "-spec separate_squares(Squares :: [[integer()]]) -> float().\nseparate_squares(Squares) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec separate_squares(squares :: [[integer]]) :: float\n  def separate_squares(squares) do\n    \n  end\nend"
  }
}
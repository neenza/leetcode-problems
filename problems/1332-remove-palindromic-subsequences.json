{
  "title": "Remove Palindromic Subsequences",
  "problem_id": "1454",
  "frontend_id": "1332",
  "difficulty": "Easy",
  "problem_slug": "remove-palindromic-subsequences",
  "topics": [
    "Two Pointers",
    "String"
  ],
  "description": "You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.\nReturn the minimum number of steps to make the given string empty.\nA string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.\nA string is called palindrome if is one that reads the same backward as well as forward.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"ababa\"\nOutput: 1\nExplanation: s is already a palindrome, so its entirety can be removed in a single step.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"abb\"\nOutput: 2\nExplanation: \"abb\" -> \"bb\" -> \"\". \nRemove palindromic subsequence \"a\" then \"bb\".",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"baabb\"\nOutput: 2\nExplanation: \"baabb\" -> \"b\" -> \"\". \nRemove palindromic subsequence \"baab\" then \"b\".",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 1000",
    "s[i] is either 'a' or 'b'."
  ],
  "follow_ups": [],
  "hints": [
    "Use the fact that string contains only 2 characters.",
    "Are subsequences composed of only one type of letter always palindrome strings ?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int removePalindromeSub(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public int removePalindromeSub(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def removePalindromeSub(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def removePalindromeSub(self, s: str) -> int:\n        ",
    "c": "int removePalindromeSub(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public int RemovePalindromeSub(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {number}\n */\nvar removePalindromeSub = function(s) {\n    \n};",
    "typescript": "function removePalindromeSub(s: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function removePalindromeSub($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func removePalindromeSub(_ s: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun removePalindromeSub(s: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int removePalindromeSub(String s) {\n    \n  }\n}",
    "golang": "func removePalindromeSub(s string) int {\n    \n}",
    "ruby": "# @param {String} s\n# @return {Integer}\ndef remove_palindrome_sub(s)\n    \nend",
    "scala": "object Solution {\n    def removePalindromeSub(s: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn remove_palindrome_sub(s: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (remove-palindrome-sub s)\n  (-> string? exact-integer?)\n  )",
    "erlang": "-spec remove_palindrome_sub(S :: unicode:unicode_binary()) -> integer().\nremove_palindrome_sub(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec remove_palindrome_sub(s :: String.t) :: integer\n  def remove_palindrome_sub(s) do\n    \n  end\nend"
  }
}
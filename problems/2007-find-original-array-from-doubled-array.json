{
  "title": "Find Original Array From Doubled Array",
  "problem_id": "2117",
  "frontend_id": "2007",
  "difficulty": "Medium",
  "problem_slug": "find-original-array-from-doubled-array",
  "topics": [
    "Array",
    "Hash Table",
    "Greedy",
    "Sorting"
  ],
  "description": "An integer array original is transformed into a doubled array changed by appending twice the value of every element in original, and then randomly shuffling the resulting array.\nGiven an array changed, return original if changed is a doubled array. If changed is not a doubled array, return an empty array. The elements in original may be returned in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: changed = [1,3,4,2,6,8]\nOutput: [1,3,4]\nExplanation: One possible original array could be [1,3,4]:\n- Twice the value of 1 is 1 * 2 = 2.\n- Twice the value of 3 is 3 * 2 = 6.\n- Twice the value of 4 is 4 * 2 = 8.\nOther original arrays could be [4,3,1] or [3,1,4].",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: changed = [6,3,0,1]\nOutput: []\nExplanation: changed is not a doubled array.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: changed = [1]\nOutput: []\nExplanation: changed is not a doubled array.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= changed.length <= 105",
    "0 <= changed[i] <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "If changed is a doubled array, you should be able to delete elements and their doubled values until the array is empty.",
    "Which element is guaranteed to not be a doubled value? It is the smallest element.",
    "After removing the smallest element and its double from changed, is there another number that is guaranteed to not be a doubled value?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> findOriginalArray(vector<int>& changed) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] findOriginalArray(int[] changed) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findOriginalArray(self, changed):\n        \"\"\"\n        :type changed: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findOriginalArray(self, changed: List[int]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findOriginalArray(int* changed, int changedSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] FindOriginalArray(int[] changed) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} changed\n * @return {number[]}\n */\nvar findOriginalArray = function(changed) {\n    \n};",
    "typescript": "function findOriginalArray(changed: number[]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $changed\n     * @return Integer[]\n     */\n    function findOriginalArray($changed) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findOriginalArray(_ changed: [Int]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findOriginalArray(changed: IntArray): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> findOriginalArray(List<int> changed) {\n    \n  }\n}",
    "golang": "func findOriginalArray(changed []int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} changed\n# @return {Integer[]}\ndef find_original_array(changed)\n    \nend",
    "scala": "object Solution {\n    def findOriginalArray(changed: Array[Int]): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_original_array(changed: Vec<i32>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (find-original-array changed)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )",
    "erlang": "-spec find_original_array(Changed :: [integer()]) -> [integer()].\nfind_original_array(Changed) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_original_array(changed :: [integer]) :: [integer]\n  def find_original_array(changed) do\n    \n  end\nend"
  }
}
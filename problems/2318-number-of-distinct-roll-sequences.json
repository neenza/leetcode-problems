{
  "title": "Number of Distinct Roll Sequences",
  "problem_id": "2404",
  "frontend_id": "2318",
  "difficulty": "Hard",
  "problem_slug": "number-of-distinct-roll-sequences",
  "topics": [
    "Dynamic Programming",
    "Memoization"
  ],
  "description": "You are given an integer n. You roll a fair 6-sided dice n times. Determine the total number of distinct sequences of rolls possible such that the following conditions are satisfied:\nReturn the total number of distinct sequences possible. Since the answer may be very large, return it modulo 109 + 7.\nTwo sequences are considered distinct if at least one element is different.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 4\nOutput: 184\nExplanation: Some of the possible sequences are (1, 2, 3, 4), (6, 1, 2, 3), (1, 2, 3, 1), etc.\nSome invalid sequences are (1, 2, 1, 3), (1, 2, 3, 6).\n(1, 2, 1, 3) is invalid since the first and third roll have an equal value and abs(1 - 3) = 2 (i and j are 1-indexed).\n(1, 2, 3, 6) is invalid since the greatest common divisor of 3 and 6 = 3.\nThere are a total of 184 distinct sequences possible, so we return 184.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 2\nOutput: 22\nExplanation: Some of the possible sequences are (1, 2), (2, 1), (3, 2).\nSome invalid sequences are (3, 6), (2, 4) since the greatest common divisor is not equal to 1.\nThere are a total of 22 distinct sequences possible, so we return 22.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 104"
  ],
  "follow_ups": [],
  "hints": [
    "Can you think of a DP solution?",
    "Consider a state that remembers the last 1 or 2 rolls.",
    "Do you need to consider the last 3 rolls?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int distinctSequences(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int distinctSequences(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def distinctSequences(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def distinctSequences(self, n: int) -> int:\n        ",
    "c": "int distinctSequences(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int DistinctSequences(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar distinctSequences = function(n) {\n    \n};",
    "typescript": "function distinctSequences(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function distinctSequences($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func distinctSequences(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun distinctSequences(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int distinctSequences(int n) {\n    \n  }\n}",
    "golang": "func distinctSequences(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef distinct_sequences(n)\n    \nend",
    "scala": "object Solution {\n    def distinctSequences(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn distinct_sequences(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (distinct-sequences n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec distinct_sequences(N :: integer()) -> integer().\ndistinct_sequences(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec distinct_sequences(n :: integer) :: integer\n  def distinct_sequences(n) do\n    \n  end\nend"
  }
}
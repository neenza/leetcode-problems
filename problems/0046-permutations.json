{
  "title": "Permutations",
  "problem_id": "46",
  "frontend_id": "46",
  "difficulty": "Medium",
  "problem_slug": "permutations",
  "topics": [
    "Array",
    "Backtracking"
  ],
  "description": "Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [0,1]\nOutput: [[0,1],[1,0]]",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1]\nOutput: [[1]]",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 6",
    "-10 <= nums[i] <= 10",
    "All the integers of nums are unique."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<vector<int>> permute(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        ",
    "c": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** permute(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<IList<int>> Permute(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permute = function(nums) {\n    \n};",
    "typescript": "function permute(nums: number[]): number[][] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function permute($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func permute(_ nums: [Int]) -> [[Int]] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun permute(nums: IntArray): List<List<Int>> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<List<int>> permute(List<int> nums) {\n    \n  }\n}",
    "golang": "func permute(nums []int) [][]int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer[][]}\ndef permute(nums)\n    \nend",
    "scala": "object Solution {\n    def permute(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn permute(nums: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}",
    "racket": "(define/contract (permute nums)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\n  )",
    "erlang": "-spec permute(Nums :: [integer()]) -> [[integer()]].\npermute(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec permute(nums :: [integer]) :: [[integer]]\n  def permute(nums) do\n    \n  end\nend"
  }
}
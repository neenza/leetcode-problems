{
  "title": "Largest Divisible Subset",
  "problem_id": "368",
  "frontend_id": "368",
  "difficulty": "Medium",
  "problem_slug": "largest-divisible-subset",
  "topics": [
    "Array",
    "Math",
    "Dynamic Programming",
    "Sorting"
  ],
  "description": "Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:\nIf there are multiple solutions, return any of them.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,3]\nOutput: [1,2]\nExplanation: [1,3] is also accepted.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,2,4,8]\nOutput: [1,2,4,8]",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 1000",
    "1 <= nums[i] <= 2 * 109",
    "All the integers in nums are unique."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> largestDivisibleSubset(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<Integer> largestDivisibleSubset(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def largestDivisibleSubset(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* largestDivisibleSubset(int* nums, int numsSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<int> LargestDivisibleSubset(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar largestDivisibleSubset = function(nums) {\n    \n};",
    "typescript": "function largestDivisibleSubset(nums: number[]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function largestDivisibleSubset($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func largestDivisibleSubset(_ nums: [Int]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun largestDivisibleSubset(nums: IntArray): List<Int> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> largestDivisibleSubset(List<int> nums) {\n    \n  }\n}",
    "golang": "func largestDivisibleSubset(nums []int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef largest_divisible_subset(nums)\n    \nend",
    "scala": "object Solution {\n    def largestDivisibleSubset(nums: Array[Int]): List[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn largest_divisible_subset(nums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (largest-divisible-subset nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )",
    "erlang": "-spec largest_divisible_subset(Nums :: [integer()]) -> [integer()].\nlargest_divisible_subset(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec largest_divisible_subset(nums :: [integer]) :: [integer]\n  def largest_divisible_subset(nums) do\n    \n  end\nend"
  }
}
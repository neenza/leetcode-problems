{
  "title": "Maximum Points After Collecting Coins From All Nodes",
  "problem_id": "3179",
  "frontend_id": "2920",
  "difficulty": "Hard",
  "problem_slug": "maximum-points-after-collecting-coins-from-all-nodes",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Bit Manipulation",
    "Tree",
    "Depth-First Search",
    "Memoization"
  ],
  "description": "There exists an undirected tree rooted at node 0 with n nodes labeled from 0 to n - 1. You are given a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are also given a 0-indexed array coins of size n where coins[i] indicates the number of coins in the vertex i, and an integer k.\nStarting from the root, you have to collect all the coins such that the coins at a node can only be collected if the coins of its ancestors have been already collected.\nCoins at nodei can be collected in one of the following ways:\nReturn the maximum points you can get after collecting the coins from all the tree nodes.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: edges = [[0,1],[1,2],[2,3]], coins = [10,10,3,3], k = 5\nOutput: 11                        \nExplanation: \nCollect all the coins from node 0 using the first way. Total points = 10 - 5 = 5.\nCollect all the coins from node 1 using the first way. Total points = 5 + (10 - 5) = 10.\nCollect all the coins from node 2 using the second way so coins left at node 3 will be floor(3 / 2) = 1. Total points = 10 + floor(3 / 2) = 11.\nCollect all the coins from node 3 using the second way. Total points = 11 + floor(1 / 2) = 11.\nIt can be shown that the maximum points we can get after collecting coins from all the nodes is 11.",
      "images": [
        "https://assets.leetcode.com/uploads/2023/09/18/ex1-copy.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: edges = [[0,1],[0,2]], coins = [8,4,4], k = 0\nOutput: 16\nExplanation: \nCoins will be collected from all the nodes using the first way. Therefore, total points = (8 - 0) + (4 - 0) + (4 - 0) = 16.",
      "images": [
        "https://assets.leetcode.com/uploads/2023/09/18/ex2.png"
      ]
    }
  ],
  "constraints": [
    "n == coins.length",
    "2 <= n <= 105",
    "0 <= coins[i] <= 104",
    "edges.length == n - 1",
    "0 <= edges[i][0], edges[i][1] < n",
    "0 <= k <= 104"
  ],
  "follow_ups": [],
  "hints": [
    "Let <code>dp[x][t]</code> be the maximum points we can get from the subtree rooted at node <code>x</code> and the second operation has been used <code>t</code> times in its ancestors.",
    "Note that the value of each <code>node <= 10<sup>4</sup></code>, so when <code>t >= 14</code> <code>dp[x][t]</code> is always <code>0</code>.",
    "General equation will be: <code>dp[x][t] = max((coins[x] >> t) - k + sigma(dp[y][t]), (coins[x] >> (t + 1)) + sigma(dp[y][t + 1]))</code> where nodes denoted by <code>y</code> in the sigma, are the direct children of node <code>x</code>."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maximumPoints(vector<vector<int>>& edges, vector<int>& coins, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maximumPoints(int[][] edges, int[] coins, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maximumPoints(self, edges, coins, k):\n        \"\"\"\n        :type edges: List[List[int]]\n        :type coins: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maximumPoints(self, edges: List[List[int]], coins: List[int], k: int) -> int:\n        ",
    "c": "int maximumPoints(int** edges, int edgesSize, int* edgesColSize, int* coins, int coinsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaximumPoints(int[][] edges, int[] coins, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} edges\n * @param {number[]} coins\n * @param {number} k\n * @return {number}\n */\nvar maximumPoints = function(edges, coins, k) {\n    \n};",
    "typescript": "function maximumPoints(edges: number[][], coins: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $edges\n     * @param Integer[] $coins\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumPoints($edges, $coins, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maximumPoints(_ edges: [[Int]], _ coins: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maximumPoints(edges: Array<IntArray>, coins: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maximumPoints(List<List<int>> edges, List<int> coins, int k) {\n    \n  }\n}",
    "golang": "func maximumPoints(edges [][]int, coins []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} edges\n# @param {Integer[]} coins\n# @param {Integer} k\n# @return {Integer}\ndef maximum_points(edges, coins, k)\n    \nend",
    "scala": "object Solution {\n    def maximumPoints(edges: Array[Array[Int]], coins: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn maximum_points(edges: Vec<Vec<i32>>, coins: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (maximum-points edges coins k)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec maximum_points(Edges :: [[integer()]], Coins :: [integer()], K :: integer()) -> integer().\nmaximum_points(Edges, Coins, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec maximum_points(edges :: [[integer]], coins :: [integer], k :: integer) :: integer\n  def maximum_points(edges, coins, k) do\n    \n  end\nend"
  }
}
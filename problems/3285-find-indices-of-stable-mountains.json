{
  "title": "Find Indices of Stable Mountains",
  "problem_id": "3582",
  "frontend_id": "3285",
  "difficulty": "Easy",
  "problem_slug": "find-indices-of-stable-mountains",
  "topics": [
    "Array"
  ],
  "description": "There are n mountains in a row, and each mountain has a height. You are given an integer array height where height[i] represents the height of mountain i, and an integer threshold.\nA mountain is called stable if the mountain just before it (if it exists) has a height strictly greater than threshold. Note that mountain 0 is not stable.\nReturn an array containing the indices of all stable mountains in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: height = [1,2,3,4,5], threshold = 2\nOutput: [3,4]\nExplanation:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: height = [10,1,10,1,10], threshold = 3\nOutput: [1,3]",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: height = [10,1,10,1,10], threshold = 10\nOutput: []",
      "images": []
    }
  ],
  "constraints": [
    "2 <= n == height.length <= 100",
    "1 <= height[i] <= 100",
    "1 <= threshold <= 100"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> stableMountains(vector<int>& height, int threshold) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<Integer> stableMountains(int[] height, int threshold) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def stableMountains(self, height, threshold):\n        \"\"\"\n        :type height: List[int]\n        :type threshold: int\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def stableMountains(self, height: List[int], threshold: int) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* stableMountains(int* height, int heightSize, int threshold, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<int> StableMountains(int[] height, int threshold) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} height\n * @param {number} threshold\n * @return {number[]}\n */\nvar stableMountains = function(height, threshold) {\n    \n};",
    "typescript": "function stableMountains(height: number[], threshold: number): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $height\n     * @param Integer $threshold\n     * @return Integer[]\n     */\n    function stableMountains($height, $threshold) {\n        \n    }\n}",
    "swift": "class Solution {\n    func stableMountains(_ height: [Int], _ threshold: Int) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun stableMountains(height: IntArray, threshold: Int): List<Int> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> stableMountains(List<int> height, int threshold) {\n    \n  }\n}",
    "golang": "func stableMountains(height []int, threshold int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} height\n# @param {Integer} threshold\n# @return {Integer[]}\ndef stable_mountains(height, threshold)\n    \nend",
    "scala": "object Solution {\n    def stableMountains(height: Array[Int], threshold: Int): List[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn stable_mountains(height: Vec<i32>, threshold: i32) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (stable-mountains height threshold)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )",
    "erlang": "-spec stable_mountains(Height :: [integer()], Threshold :: integer()) -> [integer()].\nstable_mountains(Height, Threshold) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec stable_mountains(height :: [integer], threshold :: integer) :: [integer]\n  def stable_mountains(height, threshold) do\n    \n  end\nend"
  }
}
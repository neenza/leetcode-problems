{
  "title": "Count and Say",
  "problem_id": "38",
  "frontend_id": "38",
  "difficulty": "Medium",
  "problem_slug": "count-and-say",
  "topics": [
    "String"
  ],
  "description": "The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\nRun-length encoding (RLE) is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string \"3322251\" we replace \"33\" with \"23\", replace \"222\" with \"32\", replace \"5\" with \"15\" and replace \"1\" with \"11\". Thus the compressed string becomes \"23321511\".\nGiven a positive integer n, return the nth element of the count-and-say sequence.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "countAndSay(1) = \"1\"\ncountAndSay(2) = RLE of \"1\" = \"11\"\ncountAndSay(3) = RLE of \"11\" = \"21\"\ncountAndSay(4) = RLE of \"21\" = \"1211\"",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 30"
  ],
  "follow_ups": [],
  "hints": [
    "Create a helper function that maps an integer to pairs of its digits and their frequencies. For example, if you call this function with \"223314444411\", then it maps it to an array of pairs [[2,2], [3,2], [1,1], [4,5], [1, 2]].",
    "Create another helper function that takes the array of pairs and creates a new integer. For example, if you call this function with [[2,2], [3,2], [1,1], [4,5], [1, 2]], it should create \"22\"+\"23\"+\"11\"+\"54\"+\"21\" = \"2223115421\".",
    "Now, with the two helper functions, you can start with \"1\" and call the two functions alternatively n-1 times. The answer is the last integer you will obtain."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string countAndSay(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public String countAndSay(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countAndSay(self, n: int) -> str:\n        ",
    "c": "char* countAndSay(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public string CountAndSay(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {string}\n */\nvar countAndSay = function(n) {\n    \n};",
    "typescript": "function countAndSay(n: number): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return String\n     */\n    function countAndSay($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countAndSay(_ n: Int) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countAndSay(n: Int): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String countAndSay(int n) {\n    \n  }\n}",
    "golang": "func countAndSay(n int) string {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {String}\ndef count_and_say(n)\n    \nend",
    "scala": "object Solution {\n    def countAndSay(n: Int): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_and_say(n: i32) -> String {\n        \n    }\n}",
    "racket": "(define/contract (count-and-say n)\n  (-> exact-integer? string?)\n  )",
    "erlang": "-spec count_and_say(N :: integer()) -> unicode:unicode_binary().\ncount_and_say(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_and_say(n :: integer) :: String.t\n  def count_and_say(n) do\n    \n  end\nend"
  }
}
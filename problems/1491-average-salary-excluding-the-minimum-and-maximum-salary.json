{
  "title": "Average Salary Excluding the Minimum and Maximum Salary",
  "problem_id": "1584",
  "frontend_id": "1491",
  "difficulty": "Easy",
  "problem_slug": "average-salary-excluding-the-minimum-and-maximum-salary",
  "topics": [
    "Array",
    "Sorting"
  ],
  "description": "You are given an array of unique integers salary where salary[i] is the salary of the ith employee.\nReturn the average salary of employees excluding the minimum and maximum salary. Answers within 10-5 of the actual answer will be accepted.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: salary = [4000,3000,1000,2000]\nOutput: 2500.00000\nExplanation: Minimum salary and maximum salary are 1000 and 4000 respectively.\nAverage salary excluding minimum and maximum salary is (2000+3000) / 2 = 2500",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: salary = [1000,2000,3000]\nOutput: 2000.00000\nExplanation: Minimum salary and maximum salary are 1000 and 3000 respectively.\nAverage salary excluding minimum and maximum salary is (2000) / 1 = 2000",
      "images": []
    }
  ],
  "constraints": [
    "3 <= salary.length <= 100",
    "1000 <= salary[i] <= 106",
    "All the integers of salary are unique."
  ],
  "follow_ups": [],
  "hints": [
    "Get the total sum and subtract the minimum and maximum value in the array.  Finally divide the result by n - 2."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    double average(vector<int>& salary) {\n        \n    }\n};",
    "java": "class Solution {\n    public double average(int[] salary) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def average(self, salary):\n        \"\"\"\n        :type salary: List[int]\n        :rtype: float\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def average(self, salary: List[int]) -> float:\n        ",
    "c": "double average(int* salary, int salarySize) {\n    \n}",
    "csharp": "public class Solution {\n    public double Average(int[] salary) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} salary\n * @return {number}\n */\nvar average = function(salary) {\n    \n};",
    "typescript": "function average(salary: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $salary\n     * @return Float\n     */\n    function average($salary) {\n        \n    }\n}",
    "swift": "class Solution {\n    func average(_ salary: [Int]) -> Double {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun average(salary: IntArray): Double {\n        \n    }\n}",
    "dart": "class Solution {\n  double average(List<int> salary) {\n    \n  }\n}",
    "golang": "func average(salary []int) float64 {\n    \n}",
    "ruby": "# @param {Integer[]} salary\n# @return {Float}\ndef average(salary)\n    \nend",
    "scala": "object Solution {\n    def average(salary: Array[Int]): Double = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn average(salary: Vec<i32>) -> f64 {\n        \n    }\n}",
    "racket": "(define/contract (average salary)\n  (-> (listof exact-integer?) flonum?)\n  )",
    "erlang": "-spec average(Salary :: [integer()]) -> float().\naverage(Salary) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec average(salary :: [integer]) :: float\n  def average(salary) do\n    \n  end\nend"
  }
}
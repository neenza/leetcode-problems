{
  "title": "Lexicographically Smallest Palindrome",
  "problem_id": "2816",
  "frontend_id": "2697",
  "difficulty": "Easy",
  "problem_slug": "lexicographically-smallest-palindrome",
  "topics": [
    "Two Pointers",
    "String",
    "Greedy"
  ],
  "description": "You are given a string s consisting of lowercase English letters, and you are allowed to perform operations on it. In one operation, you can replace a character in s with another lowercase English letter.\nYour task is to make s a palindrome with the minimum number of operations possible. If there are multiple palindromes that can be made using the minimum number of operations, make the lexicographically smallest one.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b.\nReturn the resulting palindrome string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"egcfe\"\nOutput: \"efcfe\"\nExplanation: The minimum number of operations to make \"egcfe\" a palindrome is 1, and the lexicographically smallest palindrome string we can get by modifying one character is \"efcfe\", by changing 'g'.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"abcd\"\nOutput: \"abba\"\nExplanation: The minimum number of operations to make \"abcd\" a palindrome is 2, and the lexicographically smallest palindrome string we can get by modifying two characters is \"abba\".",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"seven\"\nOutput: \"neven\"\nExplanation: The minimum number of operations to make \"seven\" a palindrome is 1, and the lexicographically smallest palindrome string we can get by modifying one character is \"neven\".",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 1000",
    "sÂ consists of only lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [
    "We can make any string a palindrome, by simply making any character at index i equal to the character at index length - i - 1 (using 0-based indexing).",
    "To make it lexicographically smallest we can change the character with maximum ASCII value to the one with minimum ASCII value."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string makeSmallestPalindrome(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public String makeSmallestPalindrome(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def makeSmallestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def makeSmallestPalindrome(self, s: str) -> str:\n        ",
    "c": "char* makeSmallestPalindrome(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public string MakeSmallestPalindrome(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {string}\n */\nvar makeSmallestPalindrome = function(s) {\n    \n};",
    "typescript": "function makeSmallestPalindrome(s: string): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function makeSmallestPalindrome($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func makeSmallestPalindrome(_ s: String) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun makeSmallestPalindrome(s: String): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String makeSmallestPalindrome(String s) {\n    \n  }\n}",
    "golang": "func makeSmallestPalindrome(s string) string {\n    \n}",
    "ruby": "# @param {String} s\n# @return {String}\ndef make_smallest_palindrome(s)\n    \nend",
    "scala": "object Solution {\n    def makeSmallestPalindrome(s: String): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn make_smallest_palindrome(s: String) -> String {\n        \n    }\n}",
    "racket": "(define/contract (make-smallest-palindrome s)\n  (-> string? string?)\n  )",
    "erlang": "-spec make_smallest_palindrome(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmake_smallest_palindrome(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec make_smallest_palindrome(s :: String.t) :: String.t\n  def make_smallest_palindrome(s) do\n    \n  end\nend"
  }
}
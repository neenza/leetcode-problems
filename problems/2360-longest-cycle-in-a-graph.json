{
  "title": "Longest Cycle in a Graph",
  "problem_id": "2439",
  "frontend_id": "2360",
  "difficulty": "Hard",
  "problem_slug": "longest-cycle-in-a-graph",
  "topics": [
    "Depth-First Search",
    "Breadth-First Search",
    "Graph",
    "Topological Sort"
  ],
  "description": "You are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge.\nThe graph is represented with a given 0-indexed array edges of size n, indicating that there is a directed edge from node i to node edges[i]. If there is no outgoing edge from node i, then edges[i] == -1.\nReturn the length of the longest cycle in the graph. If no cycle exists, return -1.\nA cycle is a path that starts and ends at the same node.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: edges = [3,3,4,2,3]\nOutput: 3\nExplanation: The longest cycle in the graph is the cycle: 2 -> 4 -> 3 -> 2.\nThe length of this cycle is 3, so 3 is returned.",
      "images": [
        "https://assets.leetcode.com/uploads/2022/06/08/graph4drawio-5.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: edges = [2,-1,3,1]\nOutput: -1\nExplanation: There are no cycles in this graph.",
      "images": [
        "https://assets.leetcode.com/uploads/2022/06/07/graph4drawio-1.png"
      ]
    }
  ],
  "constraints": [
    "n == edges.length",
    "2 <= n <= 105",
    "-1 <= edges[i] < n",
    "edges[i] != i"
  ],
  "follow_ups": [],
  "hints": [
    "How many cycles can each node at most be part of?",
    "Each node can be part of at most one cycle. Start from each node and find the cycle that it is part of if there is any. Save the already visited nodes to not repeat visiting the same cycle multiple times."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int longestCycle(vector<int>& edges) {\n        \n    }\n};",
    "java": "class Solution {\n    public int longestCycle(int[] edges) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def longestCycle(self, edges):\n        \"\"\"\n        :type edges: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def longestCycle(self, edges: List[int]) -> int:\n        ",
    "c": "int longestCycle(int* edges, int edgesSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int LongestCycle(int[] edges) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} edges\n * @return {number}\n */\nvar longestCycle = function(edges) {\n    \n};",
    "typescript": "function longestCycle(edges: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $edges\n     * @return Integer\n     */\n    function longestCycle($edges) {\n        \n    }\n}",
    "swift": "class Solution {\n    func longestCycle(_ edges: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun longestCycle(edges: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int longestCycle(List<int> edges) {\n    \n  }\n}",
    "golang": "func longestCycle(edges []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} edges\n# @return {Integer}\ndef longest_cycle(edges)\n    \nend",
    "scala": "object Solution {\n    def longestCycle(edges: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn longest_cycle(edges: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (longest-cycle edges)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec longest_cycle(Edges :: [integer()]) -> integer().\nlongest_cycle(Edges) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec longest_cycle(edges :: [integer]) :: integer\n  def longest_cycle(edges) do\n    \n  end\nend"
  }
}
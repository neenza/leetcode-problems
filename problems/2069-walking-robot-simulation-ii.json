{
  "title": "Walking Robot Simulation II",
  "problem_id": "2178",
  "frontend_id": "2069",
  "difficulty": "Medium",
  "problem_slug": "walking-robot-simulation-ii",
  "topics": [
    "Design",
    "Simulation"
  ],
  "description": "A width x height grid is on an XY-plane with the bottom-left cell at (0, 0) and the top-right cell at (width - 1, height - 1). The grid is aligned with the four cardinal directions (\"North\", \"East\", \"South\", and \"West\"). A robot is initially at cell (0, 0) facing direction \"East\".\nThe robot can be instructed to move for a specific number of steps. For each step, it does the following.\nAfter the robot finishes moving the number of steps required, it stops and awaits the next instruction.\nImplement the Robot class:\nExample 1:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input\n[\"Robot\", \"step\", \"step\", \"getPos\", \"getDir\", \"step\", \"step\", \"step\", \"getPos\", \"getDir\"]\n[[6, 3], [2], [2], [], [], [2], [1], [4], [], []]\nOutput\n[null, null, null, [4, 0], \"East\", null, null, null, [1, 2], \"West\"]\n\nExplanation\nRobot robot = new Robot(6, 3); // Initialize the grid and the robot at (0, 0) facing East.\nrobot.step(2);  // It moves two steps East to (2, 0), and faces East.\nrobot.step(2);  // It moves two steps East to (4, 0), and faces East.\nrobot.getPos(); // return [4, 0]\nrobot.getDir(); // return \"East\"\nrobot.step(2);  // It moves one step East to (5, 0), and faces East.\n                // Moving the next step East would be out of bounds, so it turns and faces North.\n                // Then, it moves one step North to (5, 1), and faces North.\nrobot.step(1);  // It moves one step North to (5, 2), and faces North (not West).\nrobot.step(4);  // Moving the next step North would be out of bounds, so it turns and faces West.\n                // Then, it moves four steps West to (1, 2), and faces West.\nrobot.getPos(); // return [1, 2]\nrobot.getDir(); // return \"West\"",
      "images": [
        "https://assets.leetcode.com/uploads/2021/10/09/example-1.png"
      ]
    }
  ],
  "constraints": [
    "2 <= width, height <= 100",
    "1 <= num <= 105",
    "At most 104 calls in total will be made to step, getPos, and getDir."
  ],
  "follow_ups": [],
  "hints": [
    "The robot only moves along the perimeter of the grid. Can you think if modulus can help you quickly compute which cell it stops at?",
    "After the robot moves one time, whenever the robot stops at some cell, it will always face a specific direction. i.e., The direction it faces is determined by the cell it stops at.",
    "Can you precompute what direction it faces when it stops at each cell along the perimeter, and reuse the results?"
  ],
  "code_snippets": {
    "cpp": "class Robot {\npublic:\n    Robot(int width, int height) {\n        \n    }\n    \n    void step(int num) {\n        \n    }\n    \n    vector<int> getPos() {\n        \n    }\n    \n    string getDir() {\n        \n    }\n};\n\n/**\n * Your Robot object will be instantiated and called as such:\n * Robot* obj = new Robot(width, height);\n * obj->step(num);\n * vector<int> param_2 = obj->getPos();\n * string param_3 = obj->getDir();\n */",
    "java": "class Robot {\n\n    public Robot(int width, int height) {\n        \n    }\n    \n    public void step(int num) {\n        \n    }\n    \n    public int[] getPos() {\n        \n    }\n    \n    public String getDir() {\n        \n    }\n}\n\n/**\n * Your Robot object will be instantiated and called as such:\n * Robot obj = new Robot(width, height);\n * obj.step(num);\n * int[] param_2 = obj.getPos();\n * String param_3 = obj.getDir();\n */",
    "python": "class Robot(object):\n\n    def __init__(self, width, height):\n        \"\"\"\n        :type width: int\n        :type height: int\n        \"\"\"\n        \n\n    def step(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: None\n        \"\"\"\n        \n\n    def getPos(self):\n        \"\"\"\n        :rtype: List[int]\n        \"\"\"\n        \n\n    def getDir(self):\n        \"\"\"\n        :rtype: str\n        \"\"\"\n        \n\n\n# Your Robot object will be instantiated and called as such:\n# obj = Robot(width, height)\n# obj.step(num)\n# param_2 = obj.getPos()\n# param_3 = obj.getDir()",
    "python3": "class Robot:\n\n    def __init__(self, width: int, height: int):\n        \n\n    def step(self, num: int) -> None:\n        \n\n    def getPos(self) -> List[int]:\n        \n\n    def getDir(self) -> str:\n        \n\n\n# Your Robot object will be instantiated and called as such:\n# obj = Robot(width, height)\n# obj.step(num)\n# param_2 = obj.getPos()\n# param_3 = obj.getDir()",
    "c": "\n\n\ntypedef struct {\n    \n} Robot;\n\n\nRobot* robotCreate(int width, int height) {\n    \n}\n\nvoid robotStep(Robot* obj, int num) {\n    \n}\n\nint* robotGetPos(Robot* obj, int* retSize) {\n    \n}\n\nchar* robotGetDir(Robot* obj) {\n    \n}\n\nvoid robotFree(Robot* obj) {\n    \n}\n\n/**\n * Your Robot struct will be instantiated and called as such:\n * Robot* obj = robotCreate(width, height);\n * robotStep(obj, num);\n \n * int* param_2 = robotGetPos(obj, retSize);\n \n * char* param_3 = robotGetDir(obj);\n \n * robotFree(obj);\n*/",
    "csharp": "public class Robot {\n\n    public Robot(int width, int height) {\n        \n    }\n    \n    public void Step(int num) {\n        \n    }\n    \n    public int[] GetPos() {\n        \n    }\n    \n    public string GetDir() {\n        \n    }\n}\n\n/**\n * Your Robot object will be instantiated and called as such:\n * Robot obj = new Robot(width, height);\n * obj.Step(num);\n * int[] param_2 = obj.GetPos();\n * string param_3 = obj.GetDir();\n */",
    "javascript": "/**\n * @param {number} width\n * @param {number} height\n */\nvar Robot = function(width, height) {\n    \n};\n\n/** \n * @param {number} num\n * @return {void}\n */\nRobot.prototype.step = function(num) {\n    \n};\n\n/**\n * @return {number[]}\n */\nRobot.prototype.getPos = function() {\n    \n};\n\n/**\n * @return {string}\n */\nRobot.prototype.getDir = function() {\n    \n};\n\n/** \n * Your Robot object will be instantiated and called as such:\n * var obj = new Robot(width, height)\n * obj.step(num)\n * var param_2 = obj.getPos()\n * var param_3 = obj.getDir()\n */",
    "typescript": "class Robot {\n    constructor(width: number, height: number) {\n        \n    }\n\n    step(num: number): void {\n        \n    }\n\n    getPos(): number[] {\n        \n    }\n\n    getDir(): string {\n        \n    }\n}\n\n/**\n * Your Robot object will be instantiated and called as such:\n * var obj = new Robot(width, height)\n * obj.step(num)\n * var param_2 = obj.getPos()\n * var param_3 = obj.getDir()\n */",
    "php": "class Robot {\n    /**\n     * @param Integer $width\n     * @param Integer $height\n     */\n    function __construct($width, $height) {\n        \n    }\n  \n    /**\n     * @param Integer $num\n     * @return NULL\n     */\n    function step($num) {\n        \n    }\n  \n    /**\n     * @return Integer[]\n     */\n    function getPos() {\n        \n    }\n  \n    /**\n     * @return String\n     */\n    function getDir() {\n        \n    }\n}\n\n/**\n * Your Robot object will be instantiated and called as such:\n * $obj = Robot($width, $height);\n * $obj->step($num);\n * $ret_2 = $obj->getPos();\n * $ret_3 = $obj->getDir();\n */",
    "swift": "\nclass Robot {\n\n    init(_ width: Int, _ height: Int) {\n        \n    }\n    \n    func step(_ num: Int) {\n        \n    }\n    \n    func getPos() -> [Int] {\n        \n    }\n    \n    func getDir() -> String {\n        \n    }\n}\n\n/**\n * Your Robot object will be instantiated and called as such:\n * let obj = Robot(width, height)\n * obj.step(num)\n * let ret_2: [Int] = obj.getPos()\n * let ret_3: String = obj.getDir()\n */",
    "kotlin": "class Robot(width: Int, height: Int) {\n\n    fun step(num: Int) {\n        \n    }\n\n    fun getPos(): IntArray {\n        \n    }\n\n    fun getDir(): String {\n        \n    }\n\n}\n\n/**\n * Your Robot object will be instantiated and called as such:\n * var obj = Robot(width, height)\n * obj.step(num)\n * var param_2 = obj.getPos()\n * var param_3 = obj.getDir()\n */",
    "dart": "class Robot {\n\n  Robot(int width, int height) {\n    \n  }\n  \n  void step(int num) {\n    \n  }\n  \n  List<int> getPos() {\n    \n  }\n  \n  String getDir() {\n    \n  }\n}\n\n/**\n * Your Robot object will be instantiated and called as such:\n * Robot obj = Robot(width, height);\n * obj.step(num);\n * List<int> param2 = obj.getPos();\n * String param3 = obj.getDir();\n */",
    "golang": "type Robot struct {\n    \n}\n\n\nfunc Constructor(width int, height int) Robot {\n    \n}\n\n\nfunc (this *Robot) Step(num int)  {\n    \n}\n\n\nfunc (this *Robot) GetPos() []int {\n    \n}\n\n\nfunc (this *Robot) GetDir() string {\n    \n}\n\n\n/**\n * Your Robot object will be instantiated and called as such:\n * obj := Constructor(width, height);\n * obj.Step(num);\n * param_2 := obj.GetPos();\n * param_3 := obj.GetDir();\n */",
    "ruby": "class Robot\n\n=begin\n    :type width: Integer\n    :type height: Integer\n=end\n    def initialize(width, height)\n        \n    end\n\n\n=begin\n    :type num: Integer\n    :rtype: Void\n=end\n    def step(num)\n        \n    end\n\n\n=begin\n    :rtype: Integer[]\n=end\n    def get_pos()\n        \n    end\n\n\n=begin\n    :rtype: String\n=end\n    def get_dir()\n        \n    end\n\n\nend\n\n# Your Robot object will be instantiated and called as such:\n# obj = Robot.new(width, height)\n# obj.step(num)\n# param_2 = obj.get_pos()\n# param_3 = obj.get_dir()",
    "scala": "class Robot(_width: Int, _height: Int) {\n\n    def step(num: Int): Unit = {\n        \n    }\n\n    def getPos(): Array[Int] = {\n        \n    }\n\n    def getDir(): String = {\n        \n    }\n\n}\n\n/**\n * Your Robot object will be instantiated and called as such:\n * val obj = new Robot(width, height)\n * obj.step(num)\n * val param_2 = obj.getPos()\n * val param_3 = obj.getDir()\n */",
    "rust": "struct Robot {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Robot {\n\n    fn new(width: i32, height: i32) -> Self {\n        \n    }\n    \n    fn step(&self, num: i32) {\n        \n    }\n    \n    fn get_pos(&self) -> Vec<i32> {\n        \n    }\n    \n    fn get_dir(&self) -> String {\n        \n    }\n}\n\n/**\n * Your Robot object will be instantiated and called as such:\n * let obj = Robot::new(width, height);\n * obj.step(num);\n * let ret_2: Vec<i32> = obj.get_pos();\n * let ret_3: String = obj.get_dir();\n */",
    "racket": "(define robot%\n  (class object%\n    (super-new)\n    \n    ; width : exact-integer?\n    ; height : exact-integer?\n    (init-field\n      width\n      height)\n    \n    ; step : exact-integer? -> void?\n    (define/public (step num)\n      )\n    ; get-pos : -> (listof exact-integer?)\n    (define/public (get-pos)\n      )\n    ; get-dir : -> string?\n    (define/public (get-dir)\n      )))\n\n;; Your robot% object will be instantiated and called as such:\n;; (define obj (new robot% [width width] [height height]))\n;; (send obj step num)\n;; (define param_2 (send obj get-pos))\n;; (define param_3 (send obj get-dir))",
    "erlang": "-spec robot_init_(Width :: integer(), Height :: integer()) -> any().\nrobot_init_(Width, Height) ->\n  .\n\n-spec robot_step(Num :: integer()) -> any().\nrobot_step(Num) ->\n  .\n\n-spec robot_get_pos() -> [integer()].\nrobot_get_pos() ->\n  .\n\n-spec robot_get_dir() -> unicode:unicode_binary().\nrobot_get_dir() ->\n  .\n\n\n%% Your functions will be called as such:\n%% robot_init_(Width, Height),\n%% robot_step(Num),\n%% Param_2 = robot_get_pos(),\n%% Param_3 = robot_get_dir(),\n\n%% robot_init_ will be called before every test case, in which you can do some necessary initializations.",
    "elixir": "defmodule Robot do\n  @spec init_(width :: integer, height :: integer) :: any\n  def init_(width, height) do\n    \n  end\n\n  @spec step(num :: integer) :: any\n  def step(num) do\n    \n  end\n\n  @spec get_pos() :: [integer]\n  def get_pos() do\n    \n  end\n\n  @spec get_dir() :: String.t\n  def get_dir() do\n    \n  end\nend\n\n# Your functions will be called as such:\n# Robot.init_(width, height)\n# Robot.step(num)\n# param_2 = Robot.get_pos()\n# param_3 = Robot.get_dir()\n\n# Robot.init_ will be called before every test case, in which you can do some necessary initializations."
  }
}
{
  "title": "Count Special Quadruplets",
  "problem_id": "2122",
  "frontend_id": "1995",
  "difficulty": "Easy",
  "problem_slug": "count-special-quadruplets",
  "topics": [
    "Array",
    "Hash Table",
    "Enumeration"
  ],
  "description": "Given a 0-indexed integer array nums, return the number of distinct quadruplets (a, b, c, d) such that:\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,3,6]\nOutput: 1\nExplanation: The only quadruplet that satisfies the requirement is (0, 1, 2, 3) because 1 + 2 + 3 == 6.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [3,3,6,4,5]\nOutput: 0\nExplanation: There are no such quadruplets in [3,3,6,4,5].",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,1,1,3,5]\nOutput: 4\nExplanation: The 4 quadruplets that satisfy the requirement are:\n- (0, 1, 2, 3): 1 + 1 + 1 == 3\n- (0, 1, 3, 4): 1 + 1 + 3 == 5\n- (0, 2, 3, 4): 1 + 1 + 3 == 5\n- (1, 2, 3, 4): 1 + 1 + 3 == 5",
      "images": []
    }
  ],
  "constraints": [
    "4 <= nums.length <= 50",
    "1 <= nums[i] <= 100"
  ],
  "follow_ups": [],
  "hints": [
    "N is very small, how can we use that?",
    "Can we check every possible quadruplet?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int countQuadruplets(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int countQuadruplets(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countQuadruplets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countQuadruplets(self, nums: List[int]) -> int:\n        ",
    "c": "int countQuadruplets(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int CountQuadruplets(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countQuadruplets = function(nums) {\n    \n};",
    "typescript": "function countQuadruplets(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function countQuadruplets($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countQuadruplets(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countQuadruplets(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int countQuadruplets(List<int> nums) {\n    \n  }\n}",
    "golang": "func countQuadruplets(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef count_quadruplets(nums)\n    \nend",
    "scala": "object Solution {\n    def countQuadruplets(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_quadruplets(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (count-quadruplets nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec count_quadruplets(Nums :: [integer()]) -> integer().\ncount_quadruplets(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_quadruplets(nums :: [integer]) :: integer\n  def count_quadruplets(nums) do\n    \n  end\nend"
  }
}
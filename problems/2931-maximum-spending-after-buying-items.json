{
  "title": "Maximum Spending After Buying Items",
  "problem_id": "3107",
  "frontend_id": "2931",
  "difficulty": "Hard",
  "problem_slug": "maximum-spending-after-buying-items",
  "topics": [
    "Array",
    "Greedy",
    "Sorting",
    "Heap (Priority Queue)",
    "Matrix"
  ],
  "description": "You are given a 0-indexed m * n integer matrix values, representing the values of m * n different items in m different shops. Each shop has n items where the jth item in the ith shop has a value of values[i][j]. Additionally, the items in the ith shop are sorted in non-increasing order of value. That is, values[i][j] >= values[i][j + 1] for all 0 <= j < n - 1.\nOn each day, you would like to buy a single item from one of the shops. Specifically, On the dth day you can:\nNote that all items are pairwise different. For example, if you have bought item 0 from shop 1, you can still buy item 0 from any other shop.\nReturn the maximum amount of money that can be spent on buying all  m * n products.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: values = [[8,5,2],[6,4,1],[9,7,3]]\nOutput: 285\nExplanation: On the first day, we buy product 2 from shop 1 for a price of values[1][2] * 1 = 1.\nOn the second day, we buy product 2 from shop 0 for a price of values[0][2] * 2 = 4.\nOn the third day, we buy product 2 from shop 2 for a price of values[2][2] * 3 = 9.\nOn the fourth day, we buy product 1 from shop 1 for a price of values[1][1] * 4 = 16.\nOn the fifth day, we buy product 1 from shop 0 for a price of values[0][1] * 5 = 25.\nOn the sixth day, we buy product 0 from shop 1 for a price of values[1][0] * 6 = 36.\nOn the seventh day, we buy product 1 from shop 2 for a price of values[2][1] * 7 = 49.\nOn the eighth day, we buy product 0 from shop 0 for a price of values[0][0] * 8 = 64.\nOn the ninth day, we buy product 0 from shop 2 for a price of values[2][0] * 9 = 81.\nHence, our total spending is equal to 285.\nIt can be shown that 285 is the maximum amount of money that can be spent buying all m * n products.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: values = [[10,8,6,4,2],[9,7,5,3,2]]\nOutput: 386\nExplanation: On the first day, we buy product 4 from shop 0 for a price of values[0][4] * 1 = 2.\nOn the second day, we buy product 4 from shop 1 for a price of values[1][4] * 2 = 4.\nOn the third day, we buy product 3 from shop 1 for a price of values[1][3] * 3 = 9.\nOn the fourth day, we buy product 3 from shop 0 for a price of values[0][3] * 4 = 16.\nOn the fifth day, we buy product 2 from shop 1 for a price of values[1][2] * 5 = 25.\nOn the sixth day, we buy product 2 from shop 0 for a price of values[0][2] * 6 = 36.\nOn the seventh day, we buy product 1 from shop 1 for a price of values[1][1] * 7 = 49.\nOn the eighth day, we buy product 1 from shop 0 for a price of values[0][1] * 8 = 64\nOn the ninth day, we buy product 0 from shop 1 for a price of values[1][0] * 9 = 81.\nOn the tenth day, we buy product 0 from shop 0 for a price of values[0][0] * 10 = 100.\nHence, our total spending is equal to 386.\nIt can be shown that 386 is the maximum amount of money that can be spent buying all m * n products.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= m == values.length <= 10",
    "1 <= n == values[i].length <= 104",
    "1 <= values[i][j] <= 106",
    "values[i] are sorted in non-increasing order."
  ],
  "follow_ups": [],
  "hints": [
    "Iterate on days <code>1</code> to <code>m * n</code>.",
    "On each day, buy the product that minimizes <code>values[i][values[i].length - 1]</code>, and pop it from <code>values[i]</code>."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long maxSpending(vector<vector<int>>& values) {\n        \n    }\n};",
    "java": "class Solution {\n    public long maxSpending(int[][] values) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxSpending(self, values):\n        \"\"\"\n        :type values: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxSpending(self, values: List[List[int]]) -> int:\n        ",
    "c": "long long maxSpending(int** values, int valuesSize, int* valuesColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public long MaxSpending(int[][] values) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} values\n * @return {number}\n */\nvar maxSpending = function(values) {\n    \n};",
    "typescript": "function maxSpending(values: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $values\n     * @return Integer\n     */\n    function maxSpending($values) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxSpending(_ values: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxSpending(values: Array<IntArray>): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxSpending(List<List<int>> values) {\n    \n  }\n}",
    "golang": "func maxSpending(values [][]int) int64 {\n    \n}",
    "ruby": "# @param {Integer[][]} values\n# @return {Integer}\ndef max_spending(values)\n    \nend",
    "scala": "object Solution {\n    def maxSpending(values: Array[Array[Int]]): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_spending(values: Vec<Vec<i32>>) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (max-spending values)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec max_spending(Values :: [[integer()]]) -> integer().\nmax_spending(Values) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_spending(values :: [[integer]]) :: integer\n  def max_spending(values) do\n    \n  end\nend"
  }
}
{
  "title": "Rectangle Overlap",
  "problem_id": "866",
  "frontend_id": "836",
  "difficulty": "Easy",
  "problem_slug": "rectangle-overlap",
  "topics": [
    "Math",
    "Geometry"
  ],
  "description": "An axis-aligned rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) is the coordinate of its bottom-left corner, and (x2, y2) is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.\nTwo rectangles overlap if the area of their intersection is positive. To be clear, two rectangles that only touch at the corner or edges do not overlap.\nGiven two axis-aligned rectangles rec1 and rec2, return true if they overlap, otherwise return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: rec1 = [0,0,2,2], rec2 = [1,1,3,3]\nOutput: true",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: rec1 = [0,0,1,1], rec2 = [1,0,2,1]\nOutput: false",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: rec1 = [0,0,1,1], rec2 = [2,2,3,3]\nOutput: false",
      "images": []
    }
  ],
  "constraints": [
    "rec1.length == 4",
    "rec2.length == 4",
    "-109 <= rec1[i], rec2[i] <= 109",
    "rec1 and rec2 represent a valid rectangle with a non-zero area."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool isRectangleOverlap(vector<int>& rec1, vector<int>& rec2) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean isRectangleOverlap(int[] rec1, int[] rec2) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def isRectangleOverlap(self, rec1, rec2):\n        \"\"\"\n        :type rec1: List[int]\n        :type rec2: List[int]\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:\n        ",
    "c": "bool isRectangleOverlap(int* rec1, int rec1Size, int* rec2, int rec2Size) {\n    \n}",
    "csharp": "public class Solution {\n    public bool IsRectangleOverlap(int[] rec1, int[] rec2) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} rec1\n * @param {number[]} rec2\n * @return {boolean}\n */\nvar isRectangleOverlap = function(rec1, rec2) {\n    \n};",
    "typescript": "function isRectangleOverlap(rec1: number[], rec2: number[]): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $rec1\n     * @param Integer[] $rec2\n     * @return Boolean\n     */\n    function isRectangleOverlap($rec1, $rec2) {\n        \n    }\n}",
    "swift": "class Solution {\n    func isRectangleOverlap(_ rec1: [Int], _ rec2: [Int]) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun isRectangleOverlap(rec1: IntArray, rec2: IntArray): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool isRectangleOverlap(List<int> rec1, List<int> rec2) {\n    \n  }\n}",
    "golang": "func isRectangleOverlap(rec1 []int, rec2 []int) bool {\n    \n}",
    "ruby": "# @param {Integer[]} rec1\n# @param {Integer[]} rec2\n# @return {Boolean}\ndef is_rectangle_overlap(rec1, rec2)\n    \nend",
    "scala": "object Solution {\n    def isRectangleOverlap(rec1: Array[Int], rec2: Array[Int]): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn is_rectangle_overlap(rec1: Vec<i32>, rec2: Vec<i32>) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (is-rectangle-overlap rec1 rec2)\n  (-> (listof exact-integer?) (listof exact-integer?) boolean?)\n  )",
    "erlang": "-spec is_rectangle_overlap(Rec1 :: [integer()], Rec2 :: [integer()]) -> boolean().\nis_rectangle_overlap(Rec1, Rec2) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec is_rectangle_overlap(rec1 :: [integer], rec2 :: [integer]) :: boolean\n  def is_rectangle_overlap(rec1, rec2) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n### Approach #1: Check Position [Accepted]\n\n**Intuition**\n\nIf the rectangles do not overlap, then `rec1` must either be higher, lower, to the left, or to the right of `rec2`.\n\n**Algorithm**\n\nThe answer for whether they *don't* overlap is `LEFT OR RIGHT OR UP OR DOWN`, where `OR` is the logical OR, and `LEFT` is a boolean that represents whether `rec1` is to the left of `rec2`.  The answer for whether they do overlap is the negation of this.\n\nThe condition \"`rec1` is to the left of `rec2`\" is `rec1[2] <= rec2[0]`, that is the right-most x-coordinate of `rec1` is left of the left-most x-coordinate of `rec2`.  The other cases are similar.\n\n_Note: we should also check if either of the rectangle is actually a line._\nIf this is the case, then we cannot have any positive overlapping according to the definition.**Complexity Analysis**\n\n* Time and Space Complexity:  $$O(1)$$.\n\n---\n### Approach #2: Check Area [Accepted]\n\n**Intuition**\n\nIf the rectangles overlap, they have positive area.  This area must be a rectangle where both dimensions are positive, since the boundaries of the intersection are axis aligned.\n\nThus, we can reduce the problem to the one-dimensional problem of determining whether two line segments overlap.\n\n**Algorithm**\n\nSay the area of the intersection is `width * height`, where `width` is the intersection of the rectangles projected onto the x-axis, and `height` is the same for the y-axis.  We want both quantities to be positive.\n\nThe `width` is positive when `min(rec1[2], rec2[2]) > max(rec1[0], rec2[0])`, that is when the smaller of (the largest x-coordinates) is larger than the larger of (the smallest x-coordinates).  The `height` is similar.**Complexity Analysis**\n\n* Time and Space Complexity:  $$O(1)$$."
}
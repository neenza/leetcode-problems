{
  "title": "Count Operations to Obtain Zero",
  "problem_id": "2288",
  "frontend_id": "2169",
  "difficulty": "Easy",
  "problem_slug": "count-operations-to-obtain-zero",
  "topics": [
    "Math",
    "Simulation"
  ],
  "description": "You are given two non-negative integers num1 and num2.\nIn one operation, if num1 >= num2, you must subtract num2 from num1, otherwise subtract num1 from num2.\nReturn the number of operations required to make either num1 = 0 or num2 = 0.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: num1 = 2, num2 = 3\nOutput: 3\nExplanation: \n- Operation 1: num1 = 2, num2 = 3. Since num1 < num2, we subtract num1 from num2 and get num1 = 2, num2 = 3 - 2 = 1.\n- Operation 2: num1 = 2, num2 = 1. Since num1 > num2, we subtract num2 from num1.\n- Operation 3: num1 = 1, num2 = 1. Since num1 == num2, we subtract num2 from num1.\nNow num1 = 0 and num2 = 1. Since num1 == 0, we do not need to perform any further operations.\nSo the total number of operations required is 3.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: num1 = 10, num2 = 10\nOutput: 1\nExplanation: \n- Operation 1: num1 = 10, num2 = 10. Since num1 == num2, we subtract num2 from num1 and get num1 = 10 - 10 = 0.\nNow num1 = 0 and num2 = 10. Since num1 == 0, we are done.\nSo the total number of operations required is 1.",
      "images": []
    }
  ],
  "constraints": [
    "0 <= num1, num2 <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "Try simulating the process until either of the two integers is zero.",
    "Count the number of operations done."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int countOperations(int num1, int num2) {\n        \n    }\n};",
    "java": "class Solution {\n    public int countOperations(int num1, int num2) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countOperations(self, num1, num2):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countOperations(self, num1: int, num2: int) -> int:\n        ",
    "c": "int countOperations(int num1, int num2) {\n    \n}",
    "csharp": "public class Solution {\n    public int CountOperations(int num1, int num2) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} num1\n * @param {number} num2\n * @return {number}\n */\nvar countOperations = function(num1, num2) {\n    \n};",
    "typescript": "function countOperations(num1: number, num2: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $num1\n     * @param Integer $num2\n     * @return Integer\n     */\n    function countOperations($num1, $num2) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countOperations(_ num1: Int, _ num2: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countOperations(num1: Int, num2: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int countOperations(int num1, int num2) {\n    \n  }\n}",
    "golang": "func countOperations(num1 int, num2 int) int {\n    \n}",
    "ruby": "# @param {Integer} num1\n# @param {Integer} num2\n# @return {Integer}\ndef count_operations(num1, num2)\n    \nend",
    "scala": "object Solution {\n    def countOperations(num1: Int, num2: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_operations(num1: i32, num2: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (count-operations num1 num2)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec count_operations(Num1 :: integer(), Num2 :: integer()) -> integer().\ncount_operations(Num1, Num2) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_operations(num1 :: integer, num2 :: integer) :: integer\n  def count_operations(num1, num2) do\n    \n  end\nend"
  }
}
{
  "title": "Climbing Stairs",
  "problem_id": "70",
  "frontend_id": "70",
  "difficulty": "Easy",
  "problem_slug": "climbing-stairs",
  "topics": [
    "Math",
    "Dynamic Programming",
    "Memoization"
  ],
  "description": "You are climbing a staircase. It takes n steps to reach the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 3\nOutput: 3\nExplanation: There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 45"
  ],
  "follow_ups": [],
  "hints": [
    "To reach nth step, what could have been your previous steps? (Think about the step sizes)"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int climbStairs(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int climbStairs(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def climbStairs(self, n: int) -> int:\n        ",
    "c": "int climbStairs(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int ClimbStairs(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar climbStairs = function(n) {\n    \n};",
    "typescript": "function climbStairs(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function climbStairs($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func climbStairs(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun climbStairs(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int climbStairs(int n) {\n    \n  }\n}",
    "golang": "func climbStairs(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef climb_stairs(n)\n    \nend",
    "scala": "object Solution {\n    def climbStairs(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn climb_stairs(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (climb-stairs n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec climb_stairs(N :: integer()) -> integer().\nclimb_stairs(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec climb_stairs(n :: integer) :: integer\n  def climb_stairs(n) do\n    \n  end\nend"
  }
}
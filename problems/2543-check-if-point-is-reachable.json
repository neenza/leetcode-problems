{
  "title": "Check if Point Is Reachable",
  "problem_id": "2635",
  "frontend_id": "2543",
  "difficulty": "Hard",
  "problem_slug": "check-if-point-is-reachable",
  "topics": [
    "Math",
    "Number Theory"
  ],
  "description": "There exists an infinitely large grid. You are currently at point (1, 1), and you need to reach the point (targetX, targetY) using a finite number of steps.\nIn one step, you can move from point (x, y) to any one of the following points:\nGiven two integers targetX and targetY representing the X-coordinate and Y-coordinate of your final position, return true if you can reach the point from (1, 1) using some number of steps, and false otherwise.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: targetX = 6, targetY = 9\nOutput: false\nExplanation: It is impossible to reach (6,9) from (1,1) using any sequence of moves, so false is returned.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: targetX = 4, targetY = 7\nOutput: true\nExplanation: You can follow the path (1,1) -> (1,2) -> (1,4) -> (1,8) -> (1,7) -> (2,7) -> (4,7).",
      "images": []
    }
  ],
  "constraints": [
    "1 <= targetX, targetYÂ <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "Letâ€™s go in reverse order, from (targetX, targetY) to (1, 1). So, now we can move from (x, y) to (x+y, y), (x, y+x), (x/2, y) if x is even, and (x, y/2) if y is even.",
    "When is it optimal to use the third and fourth operations?",
    "Think how GCD of (x, y) is affected if we apply the first two operations.",
    "How can we check if we can reach (1, 1) using the GCD value calculate above?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool isReachable(int targetX, int targetY) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean isReachable(int targetX, int targetY) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def isReachable(self, targetX, targetY):\n        \"\"\"\n        :type targetX: int\n        :type targetY: int\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def isReachable(self, targetX: int, targetY: int) -> bool:\n        ",
    "c": "bool isReachable(int targetX, int targetY) {\n    \n}",
    "csharp": "public class Solution {\n    public bool IsReachable(int targetX, int targetY) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} targetX\n * @param {number} targetY\n * @return {boolean}\n */\nvar isReachable = function(targetX, targetY) {\n    \n};",
    "typescript": "function isReachable(targetX: number, targetY: number): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $targetX\n     * @param Integer $targetY\n     * @return Boolean\n     */\n    function isReachable($targetX, $targetY) {\n        \n    }\n}",
    "swift": "class Solution {\n    func isReachable(_ targetX: Int, _ targetY: Int) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun isReachable(targetX: Int, targetY: Int): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool isReachable(int targetX, int targetY) {\n    \n  }\n}",
    "golang": "func isReachable(targetX int, targetY int) bool {\n    \n}",
    "ruby": "# @param {Integer} target_x\n# @param {Integer} target_y\n# @return {Boolean}\ndef is_reachable(target_x, target_y)\n    \nend",
    "scala": "object Solution {\n    def isReachable(targetX: Int, targetY: Int): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn is_reachable(target_x: i32, target_y: i32) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (is-reachable targetX targetY)\n  (-> exact-integer? exact-integer? boolean?)\n  )",
    "erlang": "-spec is_reachable(TargetX :: integer(), TargetY :: integer()) -> boolean().\nis_reachable(TargetX, TargetY) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec is_reachable(target_x :: integer, target_y :: integer) :: boolean\n  def is_reachable(target_x, target_y) do\n    \n  end\nend"
  }
}
{
  "title": "Maximum Total Beauty of the Gardens",
  "problem_id": "2330",
  "frontend_id": "2234",
  "difficulty": "Hard",
  "problem_slug": "maximum-total-beauty-of-the-gardens",
  "topics": [
    "Array",
    "Two Pointers",
    "Binary Search",
    "Greedy",
    "Sorting",
    "Enumeration",
    "Prefix Sum"
  ],
  "description": "Alice is a caretaker of n gardens and she wants to plant flowers to maximize the total beauty of all her gardens.\nYou are given a 0-indexed integer array flowers of size n, where flowers[i] is the number of flowers already planted in the ith garden. Flowers that are already planted cannot be removed. You are then given another integer newFlowers, which is the maximum number of flowers that Alice can additionally plant. You are also given the integers target, full, and partial.\nA garden is considered complete if it has at least target flowers. The total beauty of the gardens is then determined as the sum of the following:\nReturn the maximum total beauty that Alice can obtain after planting at most newFlowers flowers.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: flowers = [1,3,1,1], newFlowers = 7, target = 6, full = 12, partial = 1\nOutput: 14\nExplanation: Alice can plant\n- 2 flowers in the 0th garden\n- 3 flowers in the 1st garden\n- 1 flower in the 2nd garden\n- 1 flower in the 3rd garden\nThe gardens will then be [3,6,2,2]. She planted a total of 2 + 3 + 1 + 1 = 7 flowers.\nThere is 1 garden that is complete.\nThe minimum number of flowers in the incomplete gardens is 2.\nThus, the total beauty is 1 * 12 + 2 * 1 = 12 + 2 = 14.\nNo other way of planting flowers can obtain a total beauty higher than 14.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: flowers = [2,4,5,3], newFlowers = 10, target = 5, full = 2, partial = 6\nOutput: 30\nExplanation: Alice can plant\n- 3 flowers in the 0th garden\n- 0 flowers in the 1st garden\n- 0 flowers in the 2nd garden\n- 2 flowers in the 3rd garden\nThe gardens will then be [5,4,5,5]. She planted a total of 3 + 0 + 0 + 2 = 5 flowers.\nThere are 3 gardens that are complete.\nThe minimum number of flowers in the incomplete gardens is 4.\nThus, the total beauty is 3 * 2 + 4 * 6 = 6 + 24 = 30.\nNo other way of planting flowers can obtain a total beauty higher than 30.\nNote that Alice could make all the gardens complete but in this case, she would obtain a lower total beauty.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= flowers.length <= 105",
    "1 <= flowers[i], target <= 105",
    "1 <= newFlowers <= 1010",
    "1 <= full, partial <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "Say we choose k gardens to be complete, is there an optimal way of choosing which gardens to plant more flowers to achieve this?",
    "For a given k, we should greedily fill-up the k gardens with the most flowers planted already. This gives us the most remaining flowers to fill up the other gardens.",
    "After sorting flowers, we can thus try every possible k and what is left is to find the highest minimum flowers we can obtain by planting the remaining flowers in the other gardens.",
    "To find the highest minimum in the other gardens, we can use binary search to find the most optimal way of planting."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long maximumBeauty(vector<int>& flowers, long long newFlowers, int target, int full, int partial) {\n        \n    }\n};",
    "java": "class Solution {\n    public long maximumBeauty(int[] flowers, long newFlowers, int target, int full, int partial) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maximumBeauty(self, flowers, newFlowers, target, full, partial):\n        \"\"\"\n        :type flowers: List[int]\n        :type newFlowers: int\n        :type target: int\n        :type full: int\n        :type partial: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maximumBeauty(self, flowers: List[int], newFlowers: int, target: int, full: int, partial: int) -> int:\n        ",
    "c": "long long maximumBeauty(int* flowers, int flowersSize, long long newFlowers, int target, int full, int partial) {\n    \n}",
    "csharp": "public class Solution {\n    public long MaximumBeauty(int[] flowers, long newFlowers, int target, int full, int partial) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} flowers\n * @param {number} newFlowers\n * @param {number} target\n * @param {number} full\n * @param {number} partial\n * @return {number}\n */\nvar maximumBeauty = function(flowers, newFlowers, target, full, partial) {\n    \n};",
    "typescript": "function maximumBeauty(flowers: number[], newFlowers: number, target: number, full: number, partial: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $flowers\n     * @param Integer $newFlowers\n     * @param Integer $target\n     * @param Integer $full\n     * @param Integer $partial\n     * @return Integer\n     */\n    function maximumBeauty($flowers, $newFlowers, $target, $full, $partial) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maximumBeauty(_ flowers: [Int], _ newFlowers: Int, _ target: Int, _ full: Int, _ partial: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maximumBeauty(flowers: IntArray, newFlowers: Long, target: Int, full: Int, partial: Int): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int maximumBeauty(List<int> flowers, int newFlowers, int target, int full, int partial) {\n    \n  }\n}",
    "golang": "func maximumBeauty(flowers []int, newFlowers int64, target int, full int, partial int) int64 {\n    \n}",
    "ruby": "# @param {Integer[]} flowers\n# @param {Integer} new_flowers\n# @param {Integer} target\n# @param {Integer} full\n# @param {Integer} partial\n# @return {Integer}\ndef maximum_beauty(flowers, new_flowers, target, full, partial)\n    \nend",
    "scala": "object Solution {\n    def maximumBeauty(flowers: Array[Int], newFlowers: Long, target: Int, full: Int, partial: Int): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn maximum_beauty(flowers: Vec<i32>, new_flowers: i64, target: i32, full: i32, partial: i32) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (maximum-beauty flowers newFlowers target full partial)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec maximum_beauty(Flowers :: [integer()], NewFlowers :: integer(), Target :: integer(), Full :: integer(), Partial :: integer()) -> integer().\nmaximum_beauty(Flowers, NewFlowers, Target, Full, Partial) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec maximum_beauty(flowers :: [integer], new_flowers :: integer, target :: integer, full :: integer, partial :: integer) :: integer\n  def maximum_beauty(flowers, new_flowers, target, full, partial) do\n    \n  end\nend"
  }
}
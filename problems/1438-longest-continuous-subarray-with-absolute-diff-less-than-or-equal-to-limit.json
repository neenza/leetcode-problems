{
  "title": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
  "problem_id": "1549",
  "frontend_id": "1438",
  "difficulty": "Medium",
  "problem_slug": "longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit",
  "topics": [
    "Array",
    "Queue",
    "Sliding Window",
    "Heap (Priority Queue)",
    "Ordered Set",
    "Monotonic Queue"
  ],
  "description": "Given an array of integers nums and an integer limit, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to limit.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [8,2,4,7], limit = 4\nOutput: 2 \nExplanation: All subarrays are: \n[8] with maximum absolute diff |8-8| = 0 <= 4.\n[8,2] with maximum absolute diff |8-2| = 6 > 4. \n[8,2,4] with maximum absolute diff |8-2| = 6 > 4.\n[8,2,4,7] with maximum absolute diff |8-2| = 6 > 4.\n[2] with maximum absolute diff |2-2| = 0 <= 4.\n[2,4] with maximum absolute diff |2-4| = 2 <= 4.\n[2,4,7] with maximum absolute diff |2-7| = 5 > 4.\n[4] with maximum absolute diff |4-4| = 0 <= 4.\n[4,7] with maximum absolute diff |4-7| = 3 <= 4.\n[7] with maximum absolute diff |7-7| = 0 <= 4. \nTherefore, the size of the longest subarray is 2.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [10,1,2,4,7,2], limit = 5\nOutput: 4 \nExplanation: The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 <= 5.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [4,2,2,2,4,4,2,2], limit = 0\nOutput: 3",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "1 <= nums[i] <= 109",
    "0 <= limit <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "Use a sliding window approach keeping the maximum and minimum value using a data structure like a multiset from STL in C++.",
    "More specifically, use the two pointer technique, moving the right pointer as far as possible to the right until the subarray is not valid (maxValue - minValue > limit), then moving the left pointer until the subarray is valid again (maxValue - minValue <= limit). Keep repeating this process."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int longestSubarray(vector<int>& nums, int limit) {\n        \n    }\n};",
    "java": "class Solution {\n    public int longestSubarray(int[] nums, int limit) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def longestSubarray(self, nums, limit):\n        \"\"\"\n        :type nums: List[int]\n        :type limit: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def longestSubarray(self, nums: List[int], limit: int) -> int:\n        ",
    "c": "int longestSubarray(int* nums, int numsSize, int limit) {\n    \n}",
    "csharp": "public class Solution {\n    public int LongestSubarray(int[] nums, int limit) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} limit\n * @return {number}\n */\nvar longestSubarray = function(nums, limit) {\n    \n};",
    "typescript": "function longestSubarray(nums: number[], limit: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $limit\n     * @return Integer\n     */\n    function longestSubarray($nums, $limit) {\n        \n    }\n}",
    "swift": "class Solution {\n    func longestSubarray(_ nums: [Int], _ limit: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun longestSubarray(nums: IntArray, limit: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int longestSubarray(List<int> nums, int limit) {\n    \n  }\n}",
    "golang": "func longestSubarray(nums []int, limit int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} limit\n# @return {Integer}\ndef longest_subarray(nums, limit)\n    \nend",
    "scala": "object Solution {\n    def longestSubarray(nums: Array[Int], limit: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn longest_subarray(nums: Vec<i32>, limit: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (longest-subarray nums limit)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec longest_subarray(Nums :: [integer()], Limit :: integer()) -> integer().\nlongest_subarray(Nums, Limit) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec longest_subarray(nums :: [integer], limit :: integer) :: integer\n  def longest_subarray(nums, limit) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n\n---\n\n### Overview\n\nTo solve this problem we need to find the longest subarray in the array `nums` such that the absolute difference between any two elements in the subarray is less than or equal to `limit`.  \n\nIt's possible to solve this problem by checking the difference between the smallest and biggest elements of the array. It's not necessary to check the difference between every single pair in the array, because any other pair will have an absolute difference smaller than the absolute difference between the smallest and largest elements of the subarray. \n\n\nLet's walk through how to efficiently find the longest consecutive segment of a list of numbers when constrained by the limit. We need a mechanism that allows us to dynamically adjust the segment we are examining as we move through the array. This is where the sliding window approach comes in.\n\nThink of the sliding window as an adjustable window that we place on the numbers in the list. This window has a start point on the left and an end point on the right. Initially, the window only covers the first number. Moving along the array, we expand the window to the right to include additional elements. \n\nWe continue expanding the window to the right as long as the numbers in the window satisfy the condition. The condition, in this case, is that the absolute difference between the smallest and largest elements in the window is smaller than the limit. \n\nIf we were to reach a point where the next element causes the absolute difference to exceed the limit, we stop extending the window to the right. At this point, we know that the subarray inside the window no longer meets our condition, so we need to shrink the window from the left side to bring the difference back within the limits again. This means that we march the left boundary of the window to the right, which removes the leftmost number from our window. \n\nThis process of expanding and contracting the window continues as you move through the array. The goal is to keep track of the maximum length of the window whenever it satisfies the condition. \n\n!?!../Documents/1438/slideshow1.json:960,540!?!\n\nThe sliding window approach is efficient because it only requires traversing the array once, and adjusting the window boundaries as needed, which ensures linear time complexity. When tasked with finding the maximum, minimum, or specific conditions within subarrays of an array having non-negative values, we can consider using the sliding window approach for an efficient solution.  \n\nHere are some other problems that use this idea: \n\n* [239. Sliding Window Maximum](https://leetcode.com/problems/sliding-window-maximum/description/)\n* [992. Subarrays with K Different Integers](https://leetcode.com/problems/subarrays-with-k-different-integers/description/)\n\n---\n\n### Approach 1: Two Heaps\n\n#### Intuition\n\nSince we are only concerned with finding the absolute difference between the smallest and largest elements in the subarray, we need to keep track of the maximum and minimum values within the current window. Simply comparing boundary elements isn't enough, since removing the leftmost element might remove the current min or max and cause us to lose track of these values. We need a way to store and quickly retrieve potential max and min values.\n\n![Fig1](../Figures/1438/1438_slides_13.png)\n\nAs you can see above, we don't know the minimum value of the window when we move the left pointer forward to shrink the window. We can solve this by using a max heap to store potential maximum values and a min heap to store potential minimum values.\n\nUsing two heaps, we can access the largest and smallest values in the current window in constant time. If the absolute difference between these values exceeds the limit, we move the left pointer to exclude the element with the lower index. This removes the violating element from the window.\n \nLastly, we need to keep the heaps updated by deleting elements outside the new window after moving the left pointer. This requires storing the indices of elements along with their values in the heap.\n\n!?!../Documents/1438/slideshow2.json:960,540!?!\n\n#### Algorithm\n\n1. Initialization:\n    - Initialize two heaps, `maxHeap` and `minHeap`.\n    - Initialize `left` to `0` to represent the start of the sliding window.\n    - Initialize `maxLength` to `0` to store the length of the longest valid subarray.\n2. Iterate through the array `nums` from left to right using a variable `right`:\n    - For each element `nums[right]`:\n        - Add `nums[right]` and its index to both `maxHeap` and `minHeap`:\n        - Check if the current window exceeds the limit:\n        - While the absolute difference between the maximum value in `maxHeap` and the minimum value in `minHeap` is greater than `limit`:\n            - Move the `left` pointer to the right to exclude the element with the smaller index between the smallest and largest values:\n            - Set `left` to the index of the element with the smaller index between `maxHeap` and `minHeap`, plus 1.\n            - Remove elements from the heaps that are outside the current window:\n            - While the index of the top element in `maxHeap` is less than `left`:\n                - Remove the top element from `maxHeap`.\n            - While the index of the top element in `minHeap` is less than `left`:\n                - Remove the top element from `minHeap`.\n        - Update `maxLength`:\n            - Set `maxLength` to the maximum of `maxLength` and the length of the current window, `(right - left + 1)`.\n3. Return `maxLength` which stores the length of the longest valid subarray.\n\n#### Implementation#### Complexity Analysis\n\nLet $n$ be the length of the array `nums`.\n\n- Time Complexity: $O(n \\cdot \\log n)$\n\n    Initializing the two heaps takes $O(1)$ time.\n  \n    Iterating through the array `nums` from left to right involves a single loop that runs $n$ times.\n\n    Adding each element to the heaps takes $O(\\log n)$ time per operation due to the properties of heaps. Over the entire array, this results in $O(n \\cdot \\log n)$ time for both heaps combined.\n\n    Checking the condition and potentially shrinking the window involves comparing the top elements of the heaps and moving the `left` pointer. Removing elements from the heaps that are outside the current window also takes $O(\\log n)$ time per operation. Over the entire array, this results in $O(n \\cdot \\log n)$ time.\n\n    Updating the `maxLength` variable involves a simple comparison and assignment, each taking $O(1)$ time per iteration. Over the entire array, this takes $O(n)$ time.\n\n    Therefore, the total time complexity is $O(n \\cdot \\log n)$.\n\n- Space Complexity: $O(n)$\n\n    The two heaps, `maxHeap` and `minHeap`, store elements of the array along with their indices. In the worst case, each heap could store all $n$ elements of the array.\n\n    The additional variables `left`, `right`, and `maxLength` use constant space.\n\n    Therefore, the space complexity is $O(n)$ due to the heaps storing up to $n$ elements in the worst case.\n\n--- \n\n### Approach 2: Multiset\n\n#### Intuition\n\nIf we could use a single data structure that can retrieve the maximum and minimum values in constant time, we could reduce the space complexity of our solution. Fortunately, multisets are capable of maintaining elements in sorted order, allowing us to efficiently retrieve both the maximum and minimum values in constant time.  \n\nUsing a multiset, we can efficiently track elements within the current window. Inserting and removing elements take logarithmic time, while finding the maximum and minimum values is constant time, as they are at the ends of the sorted container. A multiset, unlike a set, allows multiple instances of the same element and can be thought of as a combination of a min heap and a max heap.\n\n#### Algorithm\n\n1. Initialization:\n    - Initialize a multiset, `window`.\n    - Initialize `left` to `0` to represent the start of the sliding window.\n    - Initialize `maxLength` to `0` to store the length of the longest valid subarray.\n2. Iterate through the array `nums` from left to right using a variable `right`:\n    - For each element `nums[right]`:\n        - Add `nums[right]` to the `window`.\n        - Check if the current window exceeds the limit:\n        - While the absolute difference between the maximum value in `window` and the minimum value in `window` is greater than `limit`:\n            - Move the `left` pointer to the right to exclude the element causing the violation:\n            - Remove `nums[left]` from the `window`.\n            - Increment `left` by 1.\n        - Update `maxLength`:\n            - Set `maxLength` to the maximum of `maxLength` and the length of the current window, `(right - left + 1)`.\n3. Return `maxLength` which stores the length of the longest valid subarray.\n\n#### Implementation#### Complexity Analysis\n\nLet $n$ be the length of the array `nums`.\n\n- Time Complexity: $O(n \\cdot \\log n)$\n\n    Initializing the multiset takes $O(1)$ time.\n  \n    Iterating through the array `nums` from left to right involves a single loop that runs $n$ times.\n\n    Adding each element to the multiset takes $O(\\log n)$ time per operation due to the properties of the balanced tree. Over the entire array, this results in $O(n \\cdot \\log n)$ time.\n\n    Checking the condition and potentially shrinking the window involves comparing the maximum and minimum values in the multiset and moving the `left` pointer. Removing elements from the multiset that are outside the current window also takes $O(\\log n)$ time per operation. Over the entire array, this results in $O(n \\cdot \\log n)$ time.\n\n    Updating the `maxLength` variable involves a simple comparison and assignment, each taking $O(1)$ time per iteration. Over the entire array, this takes $O(n)$ time.\n\n    Therefore, the total time complexity is $O(n \\cdot \\log n)$.\n\n- Space Complexity: $O(n)$\n\n    The multiset stores elements of the array. In the worst case, the multiset could store all $n$ elements of the array.\n\n    The additional variables `left`, `right`, and `maxLength` use constant space.\n\n    Therefore, the space complexity is $O(n)$ due to the multiset storing up to $n$ elements in the worst case.\n\n---\n\n### Approach 3: Two Deques\n\n#### Intuition\n\nWhile heaps are commonly used to track max and min values, their frequent insertion and removal operations are inefficient ($O(\\log n)$ time). Deques, or double-ended queues, offer efficient $O(1)$ time complexity for adding and removing elements from both ends and are more suitable for this problem.  \n\nWe use two deques for this problem. One deque maintains numbers in decreasing order, ensuring the largest number in the window is always at the front. If a new number exceeds those at the deque's end, we remove those elements since they can no longer be the maximum in the current window.  \n\nSimilarly, the other deque will maintain the numbers in increasing order, ensuring the smallest number in the window is always at the front. If a new number is smaller than those at the deque's end, it replaces them, ensuring accuracy for the current window's minimum.  \n\nThese deques hold all the potential minimum and maximum values for the current and future windows.\n\nWhen expanding the window to include a new element, we add it to both deques while preserving their order. If the absolute difference between the maximum and minimum values at the front of the deques exceeds the limit, we shrink the window by moving the left pointer. Removing elements from the front of either deque maintains the correct min and max values in constant time, enabling efficient checks to ensure the window stays within the limit.\n\n\n#### Algorithm\n\n1. Initialization:\n    - Initialize two deques, `maxDeque` and `minDeque`.\n    - Initialize `left` to `0` to represent the start of the sliding window.\n    - Initialize `maxLength` to `0` to store the length of the longest valid subarray.\n2. Iterate through the array `nums` from left to right using a variable `right`:\n    - For each element `nums[right]`:\n        - Maintain the `maxDeque` in decreasing order:\n            - While `maxDeque` is not empty and the last element in `maxDeque` is less than `nums[right]`:\n                - Remove the last element from `maxDeque`.\n            - Add `nums[right]` to the back of `maxDeque`.\n        - Maintain the `minDeque` in increasing order:\n            - While `minDeque` is not empty and the last element in `minDeque` is greater than `nums[right]`:\n                - Remove the last element from `minDeque`.\n            - Add `nums[right]` to the back of `minDeque`.\n        - Check if the current window exceeds the limit:\n            - While the absolute difference between the first elements of `maxDeque` and `minDeque` is greater than `limit`:\n                - If the first element of `maxDeque` is equal to `nums[left]`:\n                    - Remove the first element from `maxDeque`.\n                - If the first element of `minDeque` is equal to `nums[left]`:\n                    - Remove the first element from `minDeque`.\n                - Increment `left` by 1.\n        - Update `maxLength`:\n            - Set `maxLength` to the maximum of `maxLength` and `(right - left + 1)`.\n3. Return `maxLength` which stores the length of the longest valid subarray.\n\n#### Implementation#### Complexity Analysis\n\nLet $n$ be the length of the array `nums`.\n\n- Time Complexity: $O(n)$\n\n    Initializing the two deques, `maxDeque` and `minDeque`, takes $O(1)$ time.\n\n    Iterating through the array `nums` from left to right involves a single loop that runs $n$ times.\n    \n    Maintaining `maxDeque` and `minDeque` involves adding and removing elements. Each element can be added and removed from the deques at most once, resulting in $O(1)$ time per operation. Over the entire array, this results in $O(n)$ time for both deques combined.\n\n    Checking the condition and potentially shrinking the window involves deque operations, which each take $O(1)$ time. Over the entire array, this takes $O(n)$ time.\n\n    Updating the `maxLength` variable involves a simple comparison and assignment, each taking $O(1)$ time per iteration. Over the entire array, this takes $O(n)$ time.\n\n    Therefore, the total time complexity is $O(n)$.\n\n- Space Complexity: $O(n)$\n\n    The two deques, `maxDeque` and `minDeque`, store elements of the array. In the worst case, each deque could store all $n$ elements of the array.\n\n    The additional variables `left`, `right`, and `maxLength` use constant space.\n\n    Therefore, the space complexity is $O(n)$ due to the deques storing up to $n$ elements in the worst case.\n\n---"
}
{
  "title": "Get the Maximum Score",
  "problem_id": "1659",
  "frontend_id": "1537",
  "difficulty": "Hard",
  "problem_slug": "get-the-maximum-score",
  "topics": [
    "Array",
    "Two Pointers",
    "Dynamic Programming",
    "Greedy"
  ],
  "description": "You are given two sorted arrays of distinct integers nums1 and nums2.\nA valid path is defined as follows:\nThe score is defined as the sum of unique values in a valid path.\nReturn the maximum score you can obtain of all possible valid paths. Since the answer may be too large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]\nOutput: 30\nExplanation: Valid paths:\n[2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10],  (starting from nums1)\n[4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10]    (starting from nums2)\nThe maximum is obtained with the path in green [2,4,6,8,10].",
      "images": [
        "https://assets.leetcode.com/uploads/2020/07/16/sample_1_1893.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: nums1 = [1,3,5,7,9], nums2 = [3,5,100]\nOutput: 109\nExplanation: Maximum sum is obtained with the path [1,3,5,100].",
      "images": [
        "https://assets.leetcode.com/uploads/2020/07/16/sample_1_1893.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]\nOutput: 40\nExplanation: There are no common elements between nums1 and nums2.\nMaximum sum is obtained with the path [6,7,8,9,10].",
      "images": [
        "https://assets.leetcode.com/uploads/2020/07/16/sample_1_1893.png"
      ]
    }
  ],
  "constraints": [
    "1 <= nums1.length, nums2.length <= 105",
    "1 <= nums1[i], nums2[i] <= 107",
    "nums1 and nums2 are strictly increasing."
  ],
  "follow_ups": [],
  "hints": [
    "Partition the array by common integers, and choose the path with larger sum with a DP technique."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxSum(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxSum(int[] nums1, int[] nums2) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxSum(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxSum(self, nums1: List[int], nums2: List[int]) -> int:\n        ",
    "c": "int maxSum(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxSum(int[] nums1, int[] nums2) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar maxSum = function(nums1, nums2) {\n    \n};",
    "typescript": "function maxSum(nums1: number[], nums2: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function maxSum($nums1, $nums2) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxSum(_ nums1: [Int], _ nums2: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxSum(nums1: IntArray, nums2: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxSum(List<int> nums1, List<int> nums2) {\n    \n  }\n}",
    "golang": "func maxSum(nums1 []int, nums2 []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef max_sum(nums1, nums2)\n    \nend",
    "scala": "object Solution {\n    def maxSum(nums1: Array[Int], nums2: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_sum(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-sum nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec max_sum(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\nmax_sum(Nums1, Nums2) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_sum(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def max_sum(nums1, nums2) do\n    \n  end\nend"
  }
}
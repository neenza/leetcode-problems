{
  "title": "Kth Smallest Path XOR Sum",
  "problem_id": "3906",
  "frontend_id": "3590",
  "difficulty": "Hard",
  "problem_slug": "kth-smallest-path-xor-sum",
  "topics": [
    "Array",
    "Tree",
    "Depth-First Search",
    "Ordered Set"
  ],
  "description": "You are given an undirected tree rooted at node 0 with n nodes numbered from 0 to n - 1. Each node i has an integer value vals[i], and its parent is given by par[i].\nThe path XOR sum from the root to a node u is defined as the bitwise XOR of all vals[i] for nodes i on the path from the root node to node u, inclusive.\nYou are given a 2D integer array queries, where queries[j] = [uj, kj]. For each query, find the kjth smallest distinct path XOR sum among all nodes in the subtree rooted at uj. If there are fewer than kj distinct path XOR sums in that subtree, the answer is -1.\nReturn an integer array where the jth element is the answer to the jth query.\nIn a rooted tree, the subtree of a node v includes v and all nodes whose path to the root passes through v, that is, v and its descendants.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: par = [-1,0,0], vals = [1,1,1], queries = [[0,1],[0,2],[0,3]]\nOutput: [0,1,-1]\nExplanation:\n\nPath XORs:\nSubtree of 0 : Subtree rooted at node 0 includes nodes [0, 1, 2] with Path XORs = [1, 0, 0] . The distinct XORs are [0, 1] .\nQueries:\nOutput: [0, 1, -1]",
      "images": [
        "https://assets.leetcode.com/uploads/2025/05/29/screenshot-2025-05-29-at-204434.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: par = [-1,0,1], vals = [5,2,7], queries = [[0,1],[1,2],[1,3],[2,1]]\nOutput: [0,7,-1,0]\nExplanation:\n\nPath XORs:\nSubtrees and Distinct Path XORs:\nQueries:\nOutput: [0, 7, -1, 0]",
      "images": [
        "https://assets.leetcode.com/uploads/2025/05/29/screenshot-2025-05-29-at-204534.png"
      ]
    }
  ],
  "constraints": [
    "1 <= n == vals.length <= 5 * 104",
    "0 <= vals[i] <= 105",
    "par.length == n",
    "par[0] == -1",
    "0 <= par[i] < n for i in [1, n - 1]",
    "1 <= queries.length <= 5 * 104",
    "queries[j] == [uj, kj]",
    "0 <= uj < n",
    "1 <= kj <= n",
    "The input is generated such that the parent array par represents a valid tree."
  ],
  "follow_ups": [],
  "hints": [
    "For each node <code>u</code>, maintain the set of XOR values along the path from the root to <code>u</code>.",
    "Use DSU on tree (small‑to‑large merging) during DFS to efficiently merge each child's set into its parent's set.",
    "Store all XOR values in an <code>ordered_set</code> (in Python you can use the <code>sortedcontainers</code> module's <code>SortedList</code>) so you can quickly find the <code>k</code>th smallest XOR in any subtree.",
    "At node <code>u</code>, process each query <code>[u, k]</code> by calling <code>find_by_order(k − 1)</code> (C++ PBDS) or indexing <code>sorted_list[k-1]</code> (Python <code>SortedList</code>)."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> kthSmallest(vector<int>& par, vector<int>& vals, vector<vector<int>>& queries) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] kthSmallest(int[] par, int[] vals, int[][] queries) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def kthSmallest(self, par, vals, queries):\n        \"\"\"\n        :type par: List[int]\n        :type vals: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def kthSmallest(self, par: List[int], vals: List[int], queries: List[List[int]]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* kthSmallest(int* par, int parSize, int* vals, int valsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] KthSmallest(int[] par, int[] vals, int[][] queries) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} par\n * @param {number[]} vals\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar kthSmallest = function(par, vals, queries) {\n    \n};",
    "typescript": "function kthSmallest(par: number[], vals: number[], queries: number[][]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $par\n     * @param Integer[] $vals\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function kthSmallest($par, $vals, $queries) {\n        \n    }\n}",
    "swift": "class Solution {\n    func kthSmallest(_ par: [Int], _ vals: [Int], _ queries: [[Int]]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun kthSmallest(par: IntArray, vals: IntArray, queries: Array<IntArray>): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> kthSmallest(List<int> par, List<int> vals, List<List<int>> queries) {\n    \n  }\n}",
    "golang": "func kthSmallest(par []int, vals []int, queries [][]int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} par\n# @param {Integer[]} vals\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef kth_smallest(par, vals, queries)\n    \nend",
    "scala": "object Solution {\n    def kthSmallest(par: Array[Int], vals: Array[Int], queries: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn kth_smallest(par: Vec<i32>, vals: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (kth-smallest par vals queries)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof (listof exact-integer?)) (listof exact-integer?))\n  )",
    "erlang": "-spec kth_smallest(Par :: [integer()], Vals :: [integer()], Queries :: [[integer()]]) -> [integer()].\nkth_smallest(Par, Vals, Queries) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec kth_smallest(par :: [integer], vals :: [integer], queries :: [[integer]]) :: [integer]\n  def kth_smallest(par, vals, queries) do\n    \n  end\nend"
  }
}
{
  "title": "Design Movie Rental System",
  "problem_id": "2023",
  "frontend_id": "1912",
  "difficulty": "Hard",
  "problem_slug": "design-movie-rental-system",
  "topics": [
    "Array",
    "Hash Table",
    "Design",
    "Heap (Priority Queue)",
    "Ordered Set"
  ],
  "description": "You have a movie renting company consisting of n shops. You want to implement a renting system that supports searching for, booking, and returning movies. The system should also support generating a report of the currently rented movies.\nEach movie is given as a 2D integer array entries where entries[i] = [shopi, moviei, pricei] indicates that there is a copy of movie moviei at shop shopi with a rental price of pricei. Each shop carries at most one copy of a movie moviei.\nThe system should support the following functions:\nImplement the MovieRentingSystem class:\nNote: The test cases will be generated such that rent will only be called if the shop has an unrented copy of the movie, and drop will only be called if the shop had previously rented out the movie.\nExample 1:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input\n[\"MovieRentingSystem\", \"search\", \"rent\", \"rent\", \"report\", \"drop\", \"search\"]\n[[3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]], [1], [0, 1], [1, 2], [], [1, 2], [2]]\nOutput\n[null, [1, 0, 2], null, null, [[0, 1], [1, 2]], null, [0, 1]]\n\nExplanation\nMovieRentingSystem movieRentingSystem = new MovieRentingSystem(3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]);\nmovieRentingSystem.search(1);  // return [1, 0, 2], Movies of ID 1 are unrented at shops 1, 0, and 2. Shop 1 is cheapest; shop 0 and 2 are the same price, so order by shop number.\nmovieRentingSystem.rent(0, 1); // Rent movie 1 from shop 0. Unrented movies at shop 0 are now [2,3].\nmovieRentingSystem.rent(1, 2); // Rent movie 2 from shop 1. Unrented movies at shop 1 are now [1].\nmovieRentingSystem.report();   // return [[0, 1], [1, 2]]. Movie 1 from shop 0 is cheapest, followed by movie 2 from shop 1.\nmovieRentingSystem.drop(1, 2); // Drop off movie 2 at shop 1. Unrented movies at shop 1 are now [1,2].\nmovieRentingSystem.search(2);  // return [0, 1]. Movies of ID 2 are unrented at shops 0 and 1. Shop 0 is cheapest, followed by shop 1.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 3 * 105",
    "1 <= entries.length <= 105",
    "0 <= shopi < n",
    "1 <= moviei, pricei <= 104",
    "Each shop carries at most one copy of a movie moviei.",
    "At most 105 calls in total will be made to search, rent, drop and report."
  ],
  "follow_ups": [],
  "hints": [
    "You need to maintain a sorted list for each movie and a sorted list for rented movies",
    "When renting a movie remove it from its movies sorted list and added it to the rented list and vice versa in the case of dropping a movie"
  ],
  "code_snippets": {
    "cpp": "class MovieRentingSystem {\npublic:\n    MovieRentingSystem(int n, vector<vector<int>>& entries) {\n        \n    }\n    \n    vector<int> search(int movie) {\n        \n    }\n    \n    void rent(int shop, int movie) {\n        \n    }\n    \n    void drop(int shop, int movie) {\n        \n    }\n    \n    vector<vector<int>> report() {\n        \n    }\n};\n\n/**\n * Your MovieRentingSystem object will be instantiated and called as such:\n * MovieRentingSystem* obj = new MovieRentingSystem(n, entries);\n * vector<int> param_1 = obj->search(movie);\n * obj->rent(shop,movie);\n * obj->drop(shop,movie);\n * vector<vector<int>> param_4 = obj->report();\n */",
    "java": "class MovieRentingSystem {\n\n    public MovieRentingSystem(int n, int[][] entries) {\n        \n    }\n    \n    public List<Integer> search(int movie) {\n        \n    }\n    \n    public void rent(int shop, int movie) {\n        \n    }\n    \n    public void drop(int shop, int movie) {\n        \n    }\n    \n    public List<List<Integer>> report() {\n        \n    }\n}\n\n/**\n * Your MovieRentingSystem object will be instantiated and called as such:\n * MovieRentingSystem obj = new MovieRentingSystem(n, entries);\n * List<Integer> param_1 = obj.search(movie);\n * obj.rent(shop,movie);\n * obj.drop(shop,movie);\n * List<List<Integer>> param_4 = obj.report();\n */",
    "python": "class MovieRentingSystem(object):\n\n    def __init__(self, n, entries):\n        \"\"\"\n        :type n: int\n        :type entries: List[List[int]]\n        \"\"\"\n        \n\n    def search(self, movie):\n        \"\"\"\n        :type movie: int\n        :rtype: List[int]\n        \"\"\"\n        \n\n    def rent(self, shop, movie):\n        \"\"\"\n        :type shop: int\n        :type movie: int\n        :rtype: None\n        \"\"\"\n        \n\n    def drop(self, shop, movie):\n        \"\"\"\n        :type shop: int\n        :type movie: int\n        :rtype: None\n        \"\"\"\n        \n\n    def report(self):\n        \"\"\"\n        :rtype: List[List[int]]\n        \"\"\"\n        \n\n\n# Your MovieRentingSystem object will be instantiated and called as such:\n# obj = MovieRentingSystem(n, entries)\n# param_1 = obj.search(movie)\n# obj.rent(shop,movie)\n# obj.drop(shop,movie)\n# param_4 = obj.report()",
    "python3": "class MovieRentingSystem:\n\n    def __init__(self, n: int, entries: List[List[int]]):\n        \n\n    def search(self, movie: int) -> List[int]:\n        \n\n    def rent(self, shop: int, movie: int) -> None:\n        \n\n    def drop(self, shop: int, movie: int) -> None:\n        \n\n    def report(self) -> List[List[int]]:\n        \n\n\n# Your MovieRentingSystem object will be instantiated and called as such:\n# obj = MovieRentingSystem(n, entries)\n# param_1 = obj.search(movie)\n# obj.rent(shop,movie)\n# obj.drop(shop,movie)\n# param_4 = obj.report()",
    "c": "\n\n\ntypedef struct {\n    \n} MovieRentingSystem;\n\n\nMovieRentingSystem* movieRentingSystemCreate(int n, int** entries, int entriesSize, int* entriesColSize) {\n    \n}\n\nint* movieRentingSystemSearch(MovieRentingSystem* obj, int movie, int* retSize) {\n    \n}\n\nvoid movieRentingSystemRent(MovieRentingSystem* obj, int shop, int movie) {\n    \n}\n\nvoid movieRentingSystemDrop(MovieRentingSystem* obj, int shop, int movie) {\n    \n}\n\nint** movieRentingSystemReport(MovieRentingSystem* obj, int* retSize, int** retColSize) {\n    \n}\n\nvoid movieRentingSystemFree(MovieRentingSystem* obj) {\n    \n}\n\n/**\n * Your MovieRentingSystem struct will be instantiated and called as such:\n * MovieRentingSystem* obj = movieRentingSystemCreate(n, entries, entriesSize, entriesColSize);\n * int* param_1 = movieRentingSystemSearch(obj, movie, retSize);\n \n * movieRentingSystemRent(obj, shop, movie);\n \n * movieRentingSystemDrop(obj, shop, movie);\n \n * int** param_4 = movieRentingSystemReport(obj, retSize, retColSize);\n \n * movieRentingSystemFree(obj);\n*/",
    "csharp": "public class MovieRentingSystem {\n\n    public MovieRentingSystem(int n, int[][] entries) {\n        \n    }\n    \n    public IList<int> Search(int movie) {\n        \n    }\n    \n    public void Rent(int shop, int movie) {\n        \n    }\n    \n    public void Drop(int shop, int movie) {\n        \n    }\n    \n    public IList<IList<int>> Report() {\n        \n    }\n}\n\n/**\n * Your MovieRentingSystem object will be instantiated and called as such:\n * MovieRentingSystem obj = new MovieRentingSystem(n, entries);\n * IList<int> param_1 = obj.Search(movie);\n * obj.Rent(shop,movie);\n * obj.Drop(shop,movie);\n * IList<IList<int>> param_4 = obj.Report();\n */",
    "javascript": "/**\n * @param {number} n\n * @param {number[][]} entries\n */\nvar MovieRentingSystem = function(n, entries) {\n    \n};\n\n/** \n * @param {number} movie\n * @return {number[]}\n */\nMovieRentingSystem.prototype.search = function(movie) {\n    \n};\n\n/** \n * @param {number} shop \n * @param {number} movie\n * @return {void}\n */\nMovieRentingSystem.prototype.rent = function(shop, movie) {\n    \n};\n\n/** \n * @param {number} shop \n * @param {number} movie\n * @return {void}\n */\nMovieRentingSystem.prototype.drop = function(shop, movie) {\n    \n};\n\n/**\n * @return {number[][]}\n */\nMovieRentingSystem.prototype.report = function() {\n    \n};\n\n/** \n * Your MovieRentingSystem object will be instantiated and called as such:\n * var obj = new MovieRentingSystem(n, entries)\n * var param_1 = obj.search(movie)\n * obj.rent(shop,movie)\n * obj.drop(shop,movie)\n * var param_4 = obj.report()\n */",
    "typescript": "class MovieRentingSystem {\n    constructor(n: number, entries: number[][]) {\n        \n    }\n\n    search(movie: number): number[] {\n        \n    }\n\n    rent(shop: number, movie: number): void {\n        \n    }\n\n    drop(shop: number, movie: number): void {\n        \n    }\n\n    report(): number[][] {\n        \n    }\n}\n\n/**\n * Your MovieRentingSystem object will be instantiated and called as such:\n * var obj = new MovieRentingSystem(n, entries)\n * var param_1 = obj.search(movie)\n * obj.rent(shop,movie)\n * obj.drop(shop,movie)\n * var param_4 = obj.report()\n */",
    "php": "class MovieRentingSystem {\n    /**\n     * @param Integer $n\n     * @param Integer[][] $entries\n     */\n    function __construct($n, $entries) {\n        \n    }\n  \n    /**\n     * @param Integer $movie\n     * @return Integer[]\n     */\n    function search($movie) {\n        \n    }\n  \n    /**\n     * @param Integer $shop\n     * @param Integer $movie\n     * @return NULL\n     */\n    function rent($shop, $movie) {\n        \n    }\n  \n    /**\n     * @param Integer $shop\n     * @param Integer $movie\n     * @return NULL\n     */\n    function drop($shop, $movie) {\n        \n    }\n  \n    /**\n     * @return Integer[][]\n     */\n    function report() {\n        \n    }\n}\n\n/**\n * Your MovieRentingSystem object will be instantiated and called as such:\n * $obj = MovieRentingSystem($n, $entries);\n * $ret_1 = $obj->search($movie);\n * $obj->rent($shop, $movie);\n * $obj->drop($shop, $movie);\n * $ret_4 = $obj->report();\n */",
    "swift": "\nclass MovieRentingSystem {\n\n    init(_ n: Int, _ entries: [[Int]]) {\n        \n    }\n    \n    func search(_ movie: Int) -> [Int] {\n        \n    }\n    \n    func rent(_ shop: Int, _ movie: Int) {\n        \n    }\n    \n    func drop(_ shop: Int, _ movie: Int) {\n        \n    }\n    \n    func report() -> [[Int]] {\n        \n    }\n}\n\n/**\n * Your MovieRentingSystem object will be instantiated and called as such:\n * let obj = MovieRentingSystem(n, entries)\n * let ret_1: [Int] = obj.search(movie)\n * obj.rent(shop, movie)\n * obj.drop(shop, movie)\n * let ret_4: [[Int]] = obj.report()\n */",
    "kotlin": "class MovieRentingSystem(n: Int, entries: Array<IntArray>) {\n\n    fun search(movie: Int): List<Int> {\n        \n    }\n\n    fun rent(shop: Int, movie: Int) {\n        \n    }\n\n    fun drop(shop: Int, movie: Int) {\n        \n    }\n\n    fun report(): List<List<Int>> {\n        \n    }\n\n}\n\n/**\n * Your MovieRentingSystem object will be instantiated and called as such:\n * var obj = MovieRentingSystem(n, entries)\n * var param_1 = obj.search(movie)\n * obj.rent(shop,movie)\n * obj.drop(shop,movie)\n * var param_4 = obj.report()\n */",
    "dart": "class MovieRentingSystem {\n\n  MovieRentingSystem(int n, List<List<int>> entries) {\n    \n  }\n  \n  List<int> search(int movie) {\n    \n  }\n  \n  void rent(int shop, int movie) {\n    \n  }\n  \n  void drop(int shop, int movie) {\n    \n  }\n  \n  List<List<int>> report() {\n    \n  }\n}\n\n/**\n * Your MovieRentingSystem object will be instantiated and called as such:\n * MovieRentingSystem obj = MovieRentingSystem(n, entries);\n * List<int> param1 = obj.search(movie);\n * obj.rent(shop,movie);\n * obj.drop(shop,movie);\n * List<List<int>> param4 = obj.report();\n */",
    "golang": "type MovieRentingSystem struct {\n    \n}\n\n\nfunc Constructor(n int, entries [][]int) MovieRentingSystem {\n    \n}\n\n\nfunc (this *MovieRentingSystem) Search(movie int) []int {\n    \n}\n\n\nfunc (this *MovieRentingSystem) Rent(shop int, movie int)  {\n    \n}\n\n\nfunc (this *MovieRentingSystem) Drop(shop int, movie int)  {\n    \n}\n\n\nfunc (this *MovieRentingSystem) Report() [][]int {\n    \n}\n\n\n/**\n * Your MovieRentingSystem object will be instantiated and called as such:\n * obj := Constructor(n, entries);\n * param_1 := obj.Search(movie);\n * obj.Rent(shop,movie);\n * obj.Drop(shop,movie);\n * param_4 := obj.Report();\n */",
    "ruby": "class MovieRentingSystem\n\n=begin\n    :type n: Integer\n    :type entries: Integer[][]\n=end\n    def initialize(n, entries)\n        \n    end\n\n\n=begin\n    :type movie: Integer\n    :rtype: Integer[]\n=end\n    def search(movie)\n        \n    end\n\n\n=begin\n    :type shop: Integer\n    :type movie: Integer\n    :rtype: Void\n=end\n    def rent(shop, movie)\n        \n    end\n\n\n=begin\n    :type shop: Integer\n    :type movie: Integer\n    :rtype: Void\n=end\n    def drop(shop, movie)\n        \n    end\n\n\n=begin\n    :rtype: Integer[][]\n=end\n    def report()\n        \n    end\n\n\nend\n\n# Your MovieRentingSystem object will be instantiated and called as such:\n# obj = MovieRentingSystem.new(n, entries)\n# param_1 = obj.search(movie)\n# obj.rent(shop, movie)\n# obj.drop(shop, movie)\n# param_4 = obj.report()",
    "scala": "class MovieRentingSystem(_n: Int, _entries: Array[Array[Int]]) {\n\n    def search(movie: Int): List[Int] = {\n        \n    }\n\n    def rent(shop: Int, movie: Int): Unit = {\n        \n    }\n\n    def drop(shop: Int, movie: Int): Unit = {\n        \n    }\n\n    def report(): List[List[Int]] = {\n        \n    }\n\n}\n\n/**\n * Your MovieRentingSystem object will be instantiated and called as such:\n * val obj = new MovieRentingSystem(n, entries)\n * val param_1 = obj.search(movie)\n * obj.rent(shop,movie)\n * obj.drop(shop,movie)\n * val param_4 = obj.report()\n */",
    "rust": "struct MovieRentingSystem {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MovieRentingSystem {\n\n    fn new(n: i32, entries: Vec<Vec<i32>>) -> Self {\n        \n    }\n    \n    fn search(&self, movie: i32) -> Vec<i32> {\n        \n    }\n    \n    fn rent(&self, shop: i32, movie: i32) {\n        \n    }\n    \n    fn drop(&self, shop: i32, movie: i32) {\n        \n    }\n    \n    fn report(&self) -> Vec<Vec<i32>> {\n        \n    }\n}\n\n/**\n * Your MovieRentingSystem object will be instantiated and called as such:\n * let obj = MovieRentingSystem::new(n, entries);\n * let ret_1: Vec<i32> = obj.search(movie);\n * obj.rent(shop, movie);\n * obj.drop(shop, movie);\n * let ret_4: Vec<Vec<i32>> = obj.report();\n */",
    "racket": "(define movie-renting-system%\n  (class object%\n    (super-new)\n    \n    ; n : exact-integer?\n    ; entries : (listof (listof exact-integer?))\n    (init-field\n      n\n      entries)\n    \n    ; search : exact-integer? -> (listof exact-integer?)\n    (define/public (search movie)\n      )\n    ; rent : exact-integer? exact-integer? -> void?\n    (define/public (rent shop movie)\n      )\n    ; drop : exact-integer? exact-integer? -> void?\n    (define/public (drop shop movie)\n      )\n    ; report : -> (listof (listof exact-integer?))\n    (define/public (report)\n      )))\n\n;; Your movie-renting-system% object will be instantiated and called as such:\n;; (define obj (new movie-renting-system% [n n] [entries entries]))\n;; (define param_1 (send obj search movie))\n;; (send obj rent shop movie)\n;; (send obj drop shop movie)\n;; (define param_4 (send obj report))",
    "erlang": "-spec movie_renting_system_init_(N :: integer(), Entries :: [[integer()]]) -> any().\nmovie_renting_system_init_(N, Entries) ->\n  .\n\n-spec movie_renting_system_search(Movie :: integer()) -> [integer()].\nmovie_renting_system_search(Movie) ->\n  .\n\n-spec movie_renting_system_rent(Shop :: integer(), Movie :: integer()) -> any().\nmovie_renting_system_rent(Shop, Movie) ->\n  .\n\n-spec movie_renting_system_drop(Shop :: integer(), Movie :: integer()) -> any().\nmovie_renting_system_drop(Shop, Movie) ->\n  .\n\n-spec movie_renting_system_report() -> [[integer()]].\nmovie_renting_system_report() ->\n  .\n\n\n%% Your functions will be called as such:\n%% movie_renting_system_init_(N, Entries),\n%% Param_1 = movie_renting_system_search(Movie),\n%% movie_renting_system_rent(Shop, Movie),\n%% movie_renting_system_drop(Shop, Movie),\n%% Param_4 = movie_renting_system_report(),\n\n%% movie_renting_system_init_ will be called before every test case, in which you can do some necessary initializations.",
    "elixir": "defmodule MovieRentingSystem do\n  @spec init_(n :: integer, entries :: [[integer]]) :: any\n  def init_(n, entries) do\n    \n  end\n\n  @spec search(movie :: integer) :: [integer]\n  def search(movie) do\n    \n  end\n\n  @spec rent(shop :: integer, movie :: integer) :: any\n  def rent(shop, movie) do\n    \n  end\n\n  @spec drop(shop :: integer, movie :: integer) :: any\n  def drop(shop, movie) do\n    \n  end\n\n  @spec report() :: [[integer]]\n  def report() do\n    \n  end\nend\n\n# Your functions will be called as such:\n# MovieRentingSystem.init_(n, entries)\n# param_1 = MovieRentingSystem.search(movie)\n# MovieRentingSystem.rent(shop, movie)\n# MovieRentingSystem.drop(shop, movie)\n# param_4 = MovieRentingSystem.report()\n\n# MovieRentingSystem.init_ will be called before every test case, in which you can do some necessary initializations."
  }
}
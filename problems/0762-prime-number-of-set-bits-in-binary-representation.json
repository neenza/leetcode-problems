{
  "title": "Prime Number of Set Bits in Binary Representation",
  "problem_id": "767",
  "frontend_id": "762",
  "difficulty": "Easy",
  "problem_slug": "prime-number-of-set-bits-in-binary-representation",
  "topics": [
    "Math",
    "Bit Manipulation"
  ],
  "description": "Given two integers left and right, return the count of numbers in the inclusive range [left, right] having a prime number of set bits in their binary representation.\nRecall that the number of set bits an integer has is the number of 1's present when written in binary.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: left = 6, right = 10\nOutput: 4\nExplanation:\n6  -> 110 (2 set bits, 2 is prime)\n7  -> 111 (3 set bits, 3 is prime)\n8  -> 1000 (1 set bit, 1 is not prime)\n9  -> 1001 (2 set bits, 2 is prime)\n10 -> 1010 (2 set bits, 2 is prime)\n4 numbers have a prime number of set bits.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: left = 10, right = 15\nOutput: 5\nExplanation:\n10 -> 1010 (2 set bits, 2 is prime)\n11 -> 1011 (3 set bits, 3 is prime)\n12 -> 1100 (2 set bits, 2 is prime)\n13 -> 1101 (3 set bits, 3 is prime)\n14 -> 1110 (3 set bits, 3 is prime)\n15 -> 1111 (4 set bits, 4 is not prime)\n5 numbers have a prime number of set bits.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= left <= right <= 106",
    "0 <= right - left <= 104"
  ],
  "follow_ups": [],
  "hints": [
    "Write a helper function to count the number of set bits in a number, then check whether the number of set bits is 2, 3, 5, 7, 11, 13, 17 or 19."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int countPrimeSetBits(int left, int right) {\n        \n    }\n};",
    "java": "class Solution {\n    public int countPrimeSetBits(int left, int right) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countPrimeSetBits(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countPrimeSetBits(self, left: int, right: int) -> int:\n        ",
    "c": "int countPrimeSetBits(int left, int right) {\n    \n}",
    "csharp": "public class Solution {\n    public int CountPrimeSetBits(int left, int right) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} left\n * @param {number} right\n * @return {number}\n */\nvar countPrimeSetBits = function(left, right) {\n    \n};",
    "typescript": "function countPrimeSetBits(left: number, right: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $left\n     * @param Integer $right\n     * @return Integer\n     */\n    function countPrimeSetBits($left, $right) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countPrimeSetBits(_ left: Int, _ right: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countPrimeSetBits(left: Int, right: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int countPrimeSetBits(int left, int right) {\n    \n  }\n}",
    "golang": "func countPrimeSetBits(left int, right int) int {\n    \n}",
    "ruby": "# @param {Integer} left\n# @param {Integer} right\n# @return {Integer}\ndef count_prime_set_bits(left, right)\n    \nend",
    "scala": "object Solution {\n    def countPrimeSetBits(left: Int, right: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_prime_set_bits(left: i32, right: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (count-prime-set-bits left right)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec count_prime_set_bits(Left :: integer(), Right :: integer()) -> integer().\ncount_prime_set_bits(Left, Right) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_prime_set_bits(left :: integer, right :: integer) :: integer\n  def count_prime_set_bits(left, right) do\n    \n  end\nend"
  }
}
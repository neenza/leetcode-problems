{
  "title": "Add Binary",
  "problem_id": "67",
  "frontend_id": "67",
  "difficulty": "Easy",
  "problem_slug": "add-binary",
  "topics": [
    "Math",
    "String",
    "Bit Manipulation",
    "Simulation"
  ],
  "description": "Given two binary strings a and b, return their sum as a binary string.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: a = \"11\", b = \"1\"\nOutput: \"100\"",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: a = \"1010\", b = \"1011\"\nOutput: \"10101\"",
      "images": []
    }
  ],
  "constraints": [
    "1 <= a.length, b.length <= 104",
    "a and b consistÂ only of '0' or '1' characters.",
    "Each string does not contain leading zeros except for the zero itself."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string addBinary(string a, string b) {\n        \n    }\n};",
    "java": "class Solution {\n    public String addBinary(String a, String b) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        ",
    "c": "char* addBinary(char* a, char* b) {\n    \n}",
    "csharp": "public class Solution {\n    public string AddBinary(string a, string b) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} a\n * @param {string} b\n * @return {string}\n */\nvar addBinary = function(a, b) {\n    \n};",
    "typescript": "function addBinary(a: string, b: string): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $a\n     * @param String $b\n     * @return String\n     */\n    function addBinary($a, $b) {\n        \n    }\n}",
    "swift": "class Solution {\n    func addBinary(_ a: String, _ b: String) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun addBinary(a: String, b: String): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String addBinary(String a, String b) {\n    \n  }\n}",
    "golang": "func addBinary(a string, b string) string {\n    \n}",
    "ruby": "# @param {String} a\n# @param {String} b\n# @return {String}\ndef add_binary(a, b)\n    \nend",
    "scala": "object Solution {\n    def addBinary(a: String, b: String): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn add_binary(a: String, b: String) -> String {\n        \n    }\n}",
    "racket": "(define/contract (add-binary a b)\n  (-> string? string? string?)\n  )",
    "erlang": "-spec add_binary(A :: unicode:unicode_binary(), B :: unicode:unicode_binary()) -> unicode:unicode_binary().\nadd_binary(A, B) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec add_binary(a :: String.t, b :: String.t) :: String.t\n  def add_binary(a, b) do\n    \n  end\nend"
  }
}
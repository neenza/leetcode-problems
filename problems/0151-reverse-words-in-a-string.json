{
  "title": "Reverse Words in a String",
  "problem_id": "151",
  "frontend_id": "151",
  "difficulty": "Medium",
  "problem_slug": "reverse-words-in-a-string",
  "topics": [
    "Two Pointers",
    "String"
  ],
  "description": "Given an input string s, reverse the order of the words.\nA word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.\nReturn a string of the words in reverse order concatenated by a single space.\nNote that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nFollow-up: If the string data type is mutable in your language, can you solve it in-place with O(1) extra space?",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"the sky is blue\"\nOutput: \"blue is sky the\"",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"  hello world  \"\nOutput: \"world hello\"\nExplanation: Your reversed string should not contain leading or trailing spaces.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"a good   example\"\nOutput: \"example good a\"\nExplanation: You need to reduce multiple spaces between two words to a single space in the reversed string.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 104",
    "s contains English letters (upper-case and lower-case), digits, and spaces ' '.",
    "There is at least one word in s."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string reverseWords(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public String reverseWords(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def reverseWords(self, s: str) -> str:\n        ",
    "c": "char* reverseWords(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public string ReverseWords(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function(s) {\n    \n};",
    "typescript": "function reverseWords(s: string): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function reverseWords($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func reverseWords(_ s: String) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun reverseWords(s: String): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String reverseWords(String s) {\n    \n  }\n}",
    "golang": "func reverseWords(s string) string {\n    \n}",
    "ruby": "# @param {String} s\n# @return {String}\ndef reverse_words(s)\n    \nend",
    "scala": "object Solution {\n    def reverseWords(s: String): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn reverse_words(s: String) -> String {\n        \n    }\n}",
    "racket": "(define/contract (reverse-words s)\n  (-> string? string?)\n  )",
    "erlang": "-spec reverse_words(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nreverse_words(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec reverse_words(s :: String.t) :: String.t\n  def reverse_words(s) do\n    \n  end\nend"
  }
}
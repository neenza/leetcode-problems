{
  "title": "Largest Palindrome Product",
  "problem_id": "479",
  "frontend_id": "479",
  "difficulty": "Hard",
  "problem_slug": "largest-palindrome-product",
  "topics": [
    "Math",
    "Enumeration"
  ],
  "description": "Given an integer n, return the largest palindromic integer that can be represented as the product of two n-digits integers. Since the answer can be very large, return it modulo 1337.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 2\nOutput: 987\nExplanation: 99 x 91 = 9009, 9009 % 1337 = 987",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 1\nOutput: 9",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 8"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int largestPalindrome(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int largestPalindrome(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def largestPalindrome(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def largestPalindrome(self, n: int) -> int:\n        ",
    "c": "int largestPalindrome(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int LargestPalindrome(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar largestPalindrome = function(n) {\n    \n};",
    "typescript": "function largestPalindrome(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function largestPalindrome($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func largestPalindrome(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun largestPalindrome(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int largestPalindrome(int n) {\n    \n  }\n}",
    "golang": "func largestPalindrome(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef largest_palindrome(n)\n    \nend",
    "scala": "object Solution {\n    def largestPalindrome(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn largest_palindrome(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (largest-palindrome n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec largest_palindrome(N :: integer()) -> integer().\nlargest_palindrome(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec largest_palindrome(n :: integer) :: integer\n  def largest_palindrome(n) do\n    \n  end\nend"
  }
}
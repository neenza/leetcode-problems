{
  "title": "Robot Return to Origin",
  "problem_id": "657",
  "frontend_id": "657",
  "difficulty": "Easy",
  "problem_slug": "robot-return-to-origin",
  "topics": [
    "String",
    "Simulation"
  ],
  "description": "There is a robot starting at the position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.\nYou are given a string moves that represents the move sequence of the robot where moves[i] represents its ith move. Valid moves are 'R' (right), 'L' (left), 'U' (up), and 'D' (down).\nReturn true if the robot returns to the origin after it finishes all of its moves, or false otherwise.\nNote: The way that the robot is \"facing\" is irrelevant. 'R' will always make the robot move to the right once, 'L' will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: moves = \"UD\"\nOutput: true\nExplanation: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: moves = \"LL\"\nOutput: false\nExplanation: The robot moves left twice. It ends up two \"moves\" to the left of the origin. We return false because it is not at the origin at the end of its moves.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= moves.length <= 2 * 104",
    "moves only contains the characters 'U', 'D', 'L' and 'R'."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool judgeCircle(string moves) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean judgeCircle(String moves) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def judgeCircle(self, moves):\n        \"\"\"\n        :type moves: str\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def judgeCircle(self, moves: str) -> bool:\n        ",
    "c": "bool judgeCircle(char* moves) {\n    \n}",
    "csharp": "public class Solution {\n    public bool JudgeCircle(string moves) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} moves\n * @return {boolean}\n */\nvar judgeCircle = function(moves) {\n    \n};",
    "typescript": "function judgeCircle(moves: string): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $moves\n     * @return Boolean\n     */\n    function judgeCircle($moves) {\n        \n    }\n}",
    "swift": "class Solution {\n    func judgeCircle(_ moves: String) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun judgeCircle(moves: String): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool judgeCircle(String moves) {\n    \n  }\n}",
    "golang": "func judgeCircle(moves string) bool {\n    \n}",
    "ruby": "# @param {String} moves\n# @return {Boolean}\ndef judge_circle(moves)\n    \nend",
    "scala": "object Solution {\n    def judgeCircle(moves: String): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn judge_circle(moves: String) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (judge-circle moves)\n  (-> string? boolean?)\n  )",
    "erlang": "-spec judge_circle(Moves :: unicode:unicode_binary()) -> boolean().\njudge_circle(Moves) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec judge_circle(moves :: String.t) :: boolean\n  def judge_circle(moves) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n---\n### Approach #1: Simulation [Accepted]\n\n**Intuition**\n\nWe can simulate the position of the robot after each command.\n\n**Algorithm**\n\nInitially, the robot is at `(x, y) = (0, 0)`. If the move is `'U'`, the robot goes to `(x, y - 1)`; if the move is `'R'`, the robot goes to `(x, y) = (x + 1, y)`, and so on.**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$, where $$N$$ is the length of `moves`. We iterate through the string.\n\n* Space Complexity: $$O(1)$$. In Java, our character array is $$O(N)$$."
}
{
  "title": "Modify the Matrix",
  "problem_id": "3330",
  "frontend_id": "3033",
  "difficulty": "Easy",
  "problem_slug": "modify-the-matrix",
  "topics": [
    "Array",
    "Matrix"
  ],
  "description": "Given a 0-indexed m x n integer matrix matrix, create a new 0-indexed matrix called answer. Make answer equal to matrix, then replace each element with the value -1 with the maximum element in its respective column.\nReturn the matrix answer.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: matrix = [[1,2,-1],[4,-1,6],[7,8,9]]\nOutput: [[1,2,9],[4,8,6],[7,8,9]]\nExplanation: The diagram above shows the elements that are changed (in blue).\n- We replace the value in the cell [1][1] with the maximum value in the column 1, that is 8.\n- We replace the value in the cell [0][2] with the maximum value in the column 2, that is 9.",
      "images": [
        "https://assets.leetcode.com/uploads/2023/12/24/matrix1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: matrix = [[3,-1],[5,2]]\nOutput: [[3,2],[5,2]]\nExplanation: The diagram above shows the elements that are changed (in blue).",
      "images": [
        "https://assets.leetcode.com/uploads/2023/12/24/matrix2.png"
      ]
    }
  ],
  "constraints": [
    "m == matrix.length",
    "n == matrix[i].length",
    "2 <= m, n <= 50",
    "-1 <= matrix[i][j] <= 100",
    "The input is generated such that each column contains at least one non-negative integer."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<vector<int>> modifiedMatrix(vector<vector<int>>& matrix) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[][] modifiedMatrix(int[][] matrix) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def modifiedMatrix(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def modifiedMatrix(self, matrix: List[List[int]]) -> List[List[int]]:\n        ",
    "c": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** modifiedMatrix(int** matrix, int matrixSize, int* matrixColSize, int* returnSize, int** returnColumnSizes) {\n    \n}",
    "csharp": "public class Solution {\n    public int[][] ModifiedMatrix(int[][] matrix) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} matrix\n * @return {number[][]}\n */\nvar modifiedMatrix = function(matrix) {\n    \n};",
    "typescript": "function modifiedMatrix(matrix: number[][]): number[][] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @return Integer[][]\n     */\n    function modifiedMatrix($matrix) {\n        \n    }\n}",
    "swift": "class Solution {\n    func modifiedMatrix(_ matrix: [[Int]]) -> [[Int]] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun modifiedMatrix(matrix: Array<IntArray>): Array<IntArray> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<List<int>> modifiedMatrix(List<List<int>> matrix) {\n    \n  }\n}",
    "golang": "func modifiedMatrix(matrix [][]int) [][]int {\n    \n}",
    "ruby": "# @param {Integer[][]} matrix\n# @return {Integer[][]}\ndef modified_matrix(matrix)\n    \nend",
    "scala": "object Solution {\n    def modifiedMatrix(matrix: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn modified_matrix(matrix: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}",
    "racket": "(define/contract (modified-matrix matrix)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )",
    "erlang": "-spec modified_matrix(Matrix :: [[integer()]]) -> [[integer()]].\nmodified_matrix(Matrix) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec modified_matrix(matrix :: [[integer]]) :: [[integer]]\n  def modified_matrix(matrix) do\n    \n  end\nend"
  }
}
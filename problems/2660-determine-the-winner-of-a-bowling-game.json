{
  "title": "Determine the Winner of a Bowling Game",
  "problem_id": "2684",
  "frontend_id": "2660",
  "difficulty": "Easy",
  "problem_slug": "determine-the-winner-of-a-bowling-game",
  "topics": [
    "Array",
    "Simulation"
  ],
  "description": "You are given two 0-indexed integer arrays player1 and player2, representing the number of pins that player 1 and player 2 hit in a bowling game, respectively.\nThe bowling game consists of n turns, and the number of pins in each turn is exactly 10.\nAssume a player hits xi pins in the ith turn. The value of the ith turn for the player is:\nThe score of the player is the sum of the values of their n turns.\nReturn\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: player1 = [5,10,3,2], player2 = [6,5,7,3]\nOutput: 1\nExplanation:\nThe score of player 1 is 5 + 10 + 2*3 + 2*2 = 25.\nThe score of player 2 is 6 + 5 + 7 + 3 = 21.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: player1 = [3,5,7,6], player2 = [8,10,10,2]\nOutput: 2\nExplanation:\nThe score of player 1 is 3 + 5 + 7 + 6 = 21.\nThe score of player 2 is 8 + 10 + 2*10 + 2*2 = 42.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: player1 = [2,3], player2 = [4,1]\nOutput: 0\nExplanation:\nThe score of player1 is 2 + 3 = 5.\nThe score of player2 is 4 + 1 = 5.",
      "images": []
    },
    {
      "example_num": 4,
      "example_text": "Input: player1 = [1,1,1,10,10,10,10], player2 = [10,10,10,10,1,1,1]\nOutput: 2\nExplanation:\nThe score of player1 is 1 + 1 + 1 + 10 + 2*10 + 2*10 + 2*10 = 73.\nThe score of player2 is 10 + 2*10 + 2*10 + 2*10 + 2*1 + 2*1 + 1 = 75.",
      "images": []
    }
  ],
  "constraints": [
    "n == player1.length == player2.length",
    "1 <= n <= 1000",
    "0 <= player1[i], player2[i] <= 10"
  ],
  "follow_ups": [],
  "hints": [
    "Think about simulating the process to calculate the answer.",
    "Iterate over each element and check the previous two elements. See if one of them is 10 and can affect the score."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int isWinner(vector<int>& player1, vector<int>& player2) {\n        \n    }\n};",
    "java": "class Solution {\n    public int isWinner(int[] player1, int[] player2) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def isWinner(self, player1, player2):\n        \"\"\"\n        :type player1: List[int]\n        :type player2: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def isWinner(self, player1: List[int], player2: List[int]) -> int:\n        ",
    "c": "int isWinner(int* player1, int player1Size, int* player2, int player2Size) {\n    \n}",
    "csharp": "public class Solution {\n    public int IsWinner(int[] player1, int[] player2) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} player1\n * @param {number[]} player2\n * @return {number}\n */\nvar isWinner = function(player1, player2) {\n    \n};",
    "typescript": "function isWinner(player1: number[], player2: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $player1\n     * @param Integer[] $player2\n     * @return Integer\n     */\n    function isWinner($player1, $player2) {\n        \n    }\n}",
    "swift": "class Solution {\n    func isWinner(_ player1: [Int], _ player2: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun isWinner(player1: IntArray, player2: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int isWinner(List<int> player1, List<int> player2) {\n    \n  }\n}",
    "golang": "func isWinner(player1 []int, player2 []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} player1\n# @param {Integer[]} player2\n# @return {Integer}\ndef is_winner(player1, player2)\n    \nend",
    "scala": "object Solution {\n    def isWinner(player1: Array[Int], player2: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn is_winner(player1: Vec<i32>, player2: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (is-winner player1 player2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec is_winner(Player1 :: [integer()], Player2 :: [integer()]) -> integer().\nis_winner(Player1, Player2) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec is_winner(player1 :: [integer], player2 :: [integer]) :: integer\n  def is_winner(player1, player2) do\n    \n  end\nend"
  }
}
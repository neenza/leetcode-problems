{
  "title": "Finding MK Average",
  "problem_id": "1953",
  "frontend_id": "1825",
  "difficulty": "Hard",
  "problem_slug": "finding-mk-average",
  "topics": [
    "Design",
    "Queue",
    "Heap (Priority Queue)",
    "Data Stream",
    "Ordered Set"
  ],
  "description": "You are given two integers, m and k, and a stream of integers. You are tasked to implement a data structure that calculates the MKAverage for the stream.\nThe MKAverage can be calculated using these steps:\nImplement the MKAverage class:\nExample 1:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input\n[\"MKAverage\", \"addElement\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"addElement\", \"addElement\", \"calculateMKAverage\"]\n[[3, 1], [3], [1], [], [10], [], [5], [5], [5], []]\nOutput\n[null, null, null, -1, null, 3, null, null, null, 5]\n\nExplanation\nMKAverage obj = new MKAverage(3, 1); \nobj.addElement(3);        // current elements are [3]\nobj.addElement(1);        // current elements are [3,1]\nobj.calculateMKAverage(); // return -1, because m = 3 and only 2 elements exist.\nobj.addElement(10);       // current elements are [3,1,10]\nobj.calculateMKAverage(); // The last 3 elements are [3,1,10].\n                          // After removing smallest and largest 1 element the container will be [3].\n                          // The average of [3] equals 3/1 = 3, return 3\nobj.addElement(5);        // current elements are [3,1,10,5]\nobj.addElement(5);        // current elements are [3,1,10,5,5]\nobj.addElement(5);        // current elements are [3,1,10,5,5,5]\nobj.calculateMKAverage(); // The last 3 elements are [5,5,5].\n                          // After removing smallest and largest 1 element the container will be [5].\n                          // The average of [5] equals 5/1 = 5, return 5",
      "images": []
    }
  ],
  "constraints": [
    "3 <= m <= 105",
    "1 < k*2 < m",
    "1 <= num <= 105",
    "At most 105 calls will be made to addElement and calculateMKAverage."
  ],
  "follow_ups": [],
  "hints": [
    "At each query, try to save and update the sum of the elements needed to calculate MKAverage.",
    "You can use BSTs for fast insertion and deletion of the elements."
  ],
  "code_snippets": {
    "cpp": "class MKAverage {\npublic:\n    MKAverage(int m, int k) {\n        \n    }\n    \n    void addElement(int num) {\n        \n    }\n    \n    int calculateMKAverage() {\n        \n    }\n};\n\n/**\n * Your MKAverage object will be instantiated and called as such:\n * MKAverage* obj = new MKAverage(m, k);\n * obj->addElement(num);\n * int param_2 = obj->calculateMKAverage();\n */",
    "java": "class MKAverage {\n\n    public MKAverage(int m, int k) {\n        \n    }\n    \n    public void addElement(int num) {\n        \n    }\n    \n    public int calculateMKAverage() {\n        \n    }\n}\n\n/**\n * Your MKAverage object will be instantiated and called as such:\n * MKAverage obj = new MKAverage(m, k);\n * obj.addElement(num);\n * int param_2 = obj.calculateMKAverage();\n */",
    "python": "class MKAverage(object):\n\n    def __init__(self, m, k):\n        \"\"\"\n        :type m: int\n        :type k: int\n        \"\"\"\n        \n\n    def addElement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: None\n        \"\"\"\n        \n\n    def calculateMKAverage(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your MKAverage object will be instantiated and called as such:\n# obj = MKAverage(m, k)\n# obj.addElement(num)\n# param_2 = obj.calculateMKAverage()",
    "python3": "class MKAverage:\n\n    def __init__(self, m: int, k: int):\n        \n\n    def addElement(self, num: int) -> None:\n        \n\n    def calculateMKAverage(self) -> int:\n        \n\n\n# Your MKAverage object will be instantiated and called as such:\n# obj = MKAverage(m, k)\n# obj.addElement(num)\n# param_2 = obj.calculateMKAverage()",
    "c": "\n\n\ntypedef struct {\n    \n} MKAverage;\n\n\nMKAverage* mKAverageCreate(int m, int k) {\n    \n}\n\nvoid mKAverageAddElement(MKAverage* obj, int num) {\n    \n}\n\nint mKAverageCalculateMKAverage(MKAverage* obj) {\n    \n}\n\nvoid mKAverageFree(MKAverage* obj) {\n    \n}\n\n/**\n * Your MKAverage struct will be instantiated and called as such:\n * MKAverage* obj = mKAverageCreate(m, k);\n * mKAverageAddElement(obj, num);\n \n * int param_2 = mKAverageCalculateMKAverage(obj);\n \n * mKAverageFree(obj);\n*/",
    "csharp": "public class MKAverage {\n\n    public MKAverage(int m, int k) {\n        \n    }\n    \n    public void AddElement(int num) {\n        \n    }\n    \n    public int CalculateMKAverage() {\n        \n    }\n}\n\n/**\n * Your MKAverage object will be instantiated and called as such:\n * MKAverage obj = new MKAverage(m, k);\n * obj.AddElement(num);\n * int param_2 = obj.CalculateMKAverage();\n */",
    "javascript": "/**\n * @param {number} m\n * @param {number} k\n */\nvar MKAverage = function(m, k) {\n    \n};\n\n/** \n * @param {number} num\n * @return {void}\n */\nMKAverage.prototype.addElement = function(num) {\n    \n};\n\n/**\n * @return {number}\n */\nMKAverage.prototype.calculateMKAverage = function() {\n    \n};\n\n/** \n * Your MKAverage object will be instantiated and called as such:\n * var obj = new MKAverage(m, k)\n * obj.addElement(num)\n * var param_2 = obj.calculateMKAverage()\n */",
    "typescript": "class MKAverage {\n    constructor(m: number, k: number) {\n        \n    }\n\n    addElement(num: number): void {\n        \n    }\n\n    calculateMKAverage(): number {\n        \n    }\n}\n\n/**\n * Your MKAverage object will be instantiated and called as such:\n * var obj = new MKAverage(m, k)\n * obj.addElement(num)\n * var param_2 = obj.calculateMKAverage()\n */",
    "php": "class MKAverage {\n    /**\n     * @param Integer $m\n     * @param Integer $k\n     */\n    function __construct($m, $k) {\n        \n    }\n  \n    /**\n     * @param Integer $num\n     * @return NULL\n     */\n    function addElement($num) {\n        \n    }\n  \n    /**\n     * @return Integer\n     */\n    function calculateMKAverage() {\n        \n    }\n}\n\n/**\n * Your MKAverage object will be instantiated and called as such:\n * $obj = MKAverage($m, $k);\n * $obj->addElement($num);\n * $ret_2 = $obj->calculateMKAverage();\n */",
    "swift": "\nclass MKAverage {\n\n    init(_ m: Int, _ k: Int) {\n        \n    }\n    \n    func addElement(_ num: Int) {\n        \n    }\n    \n    func calculateMKAverage() -> Int {\n        \n    }\n}\n\n/**\n * Your MKAverage object will be instantiated and called as such:\n * let obj = MKAverage(m, k)\n * obj.addElement(num)\n * let ret_2: Int = obj.calculateMKAverage()\n */",
    "kotlin": "class MKAverage(m: Int, k: Int) {\n\n    fun addElement(num: Int) {\n        \n    }\n\n    fun calculateMKAverage(): Int {\n        \n    }\n\n}\n\n/**\n * Your MKAverage object will be instantiated and called as such:\n * var obj = MKAverage(m, k)\n * obj.addElement(num)\n * var param_2 = obj.calculateMKAverage()\n */",
    "dart": "class MKAverage {\n\n  MKAverage(int m, int k) {\n    \n  }\n  \n  void addElement(int num) {\n    \n  }\n  \n  int calculateMKAverage() {\n    \n  }\n}\n\n/**\n * Your MKAverage object will be instantiated and called as such:\n * MKAverage obj = MKAverage(m, k);\n * obj.addElement(num);\n * int param2 = obj.calculateMKAverage();\n */",
    "golang": "type MKAverage struct {\n    \n}\n\n\nfunc Constructor(m int, k int) MKAverage {\n    \n}\n\n\nfunc (this *MKAverage) AddElement(num int)  {\n    \n}\n\n\nfunc (this *MKAverage) CalculateMKAverage() int {\n    \n}\n\n\n/**\n * Your MKAverage object will be instantiated and called as such:\n * obj := Constructor(m, k);\n * obj.AddElement(num);\n * param_2 := obj.CalculateMKAverage();\n */",
    "ruby": "class MKAverage\n\n=begin\n    :type m: Integer\n    :type k: Integer\n=end\n    def initialize(m, k)\n        \n    end\n\n\n=begin\n    :type num: Integer\n    :rtype: Void\n=end\n    def add_element(num)\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def calculate_mk_average()\n        \n    end\n\n\nend\n\n# Your MKAverage object will be instantiated and called as such:\n# obj = MKAverage.new(m, k)\n# obj.add_element(num)\n# param_2 = obj.calculate_mk_average()",
    "scala": "class MKAverage(_m: Int, _k: Int) {\n\n    def addElement(num: Int): Unit = {\n        \n    }\n\n    def calculateMKAverage(): Int = {\n        \n    }\n\n}\n\n/**\n * Your MKAverage object will be instantiated and called as such:\n * val obj = new MKAverage(m, k)\n * obj.addElement(num)\n * val param_2 = obj.calculateMKAverage()\n */",
    "rust": "struct MKAverage {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MKAverage {\n\n    fn new(m: i32, k: i32) -> Self {\n        \n    }\n    \n    fn add_element(&self, num: i32) {\n        \n    }\n    \n    fn calculate_mk_average(&self) -> i32 {\n        \n    }\n}\n\n/**\n * Your MKAverage object will be instantiated and called as such:\n * let obj = MKAverage::new(m, k);\n * obj.add_element(num);\n * let ret_2: i32 = obj.calculate_mk_average();\n */",
    "racket": "(define mk-average%\n  (class object%\n    (super-new)\n    \n    ; m : exact-integer?\n    ; k : exact-integer?\n    (init-field\n      m\n      k)\n    \n    ; add-element : exact-integer? -> void?\n    (define/public (add-element num)\n      )\n    ; calculate-mk-average : -> exact-integer?\n    (define/public (calculate-mk-average)\n      )))\n\n;; Your mk-average% object will be instantiated and called as such:\n;; (define obj (new mk-average% [m m] [k k]))\n;; (send obj add-element num)\n;; (define param_2 (send obj calculate-mk-average))",
    "erlang": "-spec mk_average_init_(M :: integer(), K :: integer()) -> any().\nmk_average_init_(M, K) ->\n  .\n\n-spec mk_average_add_element(Num :: integer()) -> any().\nmk_average_add_element(Num) ->\n  .\n\n-spec mk_average_calculate_mk_average() -> integer().\nmk_average_calculate_mk_average() ->\n  .\n\n\n%% Your functions will be called as such:\n%% mk_average_init_(M, K),\n%% mk_average_add_element(Num),\n%% Param_2 = mk_average_calculate_mk_average(),\n\n%% mk_average_init_ will be called before every test case, in which you can do some necessary initializations.",
    "elixir": "defmodule MKAverage do\n  @spec init_(m :: integer, k :: integer) :: any\n  def init_(m, k) do\n    \n  end\n\n  @spec add_element(num :: integer) :: any\n  def add_element(num) do\n    \n  end\n\n  @spec calculate_mk_average() :: integer\n  def calculate_mk_average() do\n    \n  end\nend\n\n# Your functions will be called as such:\n# MKAverage.init_(m, k)\n# MKAverage.add_element(num)\n# param_2 = MKAverage.calculate_mk_average()\n\n# MKAverage.init_ will be called before every test case, in which you can do some necessary initializations."
  }
}
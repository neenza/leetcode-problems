{
  "title": "Perfect Rectangle",
  "problem_id": "391",
  "frontend_id": "391",
  "difficulty": "Hard",
  "problem_slug": "perfect-rectangle",
  "topics": [
    "Array",
    "Hash Table",
    "Math",
    "Geometry",
    "Line Sweep"
  ],
  "description": "Given an array rectangles where rectangles[i] = [xi, yi, ai, bi] represents an axis-aligned rectangle. The bottom-left point of the rectangle is (xi, yi) and the top-right point of it is (ai, bi).\nReturn true if all the rectangles together form an exact cover of a rectangular region.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]\nOutput: true\nExplanation: All 5 rectangles together form an exact cover of a rectangular region.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/03/27/perectrec1-plane.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]\nOutput: false\nExplanation: Because there is a gap between the two rectangular regions.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/03/27/perfectrec2-plane.jpg"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]\nOutput: false\nExplanation: Because two of the rectangles overlap with each other.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/03/27/perfecrrec4-plane.jpg"
      ]
    }
  ],
  "constraints": [
    "1 <= rectangles.length <= 2 * 104",
    "rectangles[i].length == 4",
    "-105 <= xi < ai <= 105",
    "-105 <= yi < bi <= 105"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool isRectangleCover(vector<vector<int>>& rectangles) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean isRectangleCover(int[][] rectangles) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def isRectangleCover(self, rectangles: List[List[int]]) -> bool:\n        ",
    "c": "bool isRectangleCover(int** rectangles, int rectanglesSize, int* rectanglesColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public bool IsRectangleCover(int[][] rectangles) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} rectangles\n * @return {boolean}\n */\nvar isRectangleCover = function(rectangles) {\n    \n};",
    "typescript": "function isRectangleCover(rectangles: number[][]): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $rectangles\n     * @return Boolean\n     */\n    function isRectangleCover($rectangles) {\n        \n    }\n}",
    "swift": "class Solution {\n    func isRectangleCover(_ rectangles: [[Int]]) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun isRectangleCover(rectangles: Array<IntArray>): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool isRectangleCover(List<List<int>> rectangles) {\n    \n  }\n}",
    "golang": "func isRectangleCover(rectangles [][]int) bool {\n    \n}",
    "ruby": "# @param {Integer[][]} rectangles\n# @return {Boolean}\ndef is_rectangle_cover(rectangles)\n    \nend",
    "scala": "object Solution {\n    def isRectangleCover(rectangles: Array[Array[Int]]): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn is_rectangle_cover(rectangles: Vec<Vec<i32>>) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (is-rectangle-cover rectangles)\n  (-> (listof (listof exact-integer?)) boolean?)\n  )",
    "erlang": "-spec is_rectangle_cover(Rectangles :: [[integer()]]) -> boolean().\nis_rectangle_cover(Rectangles) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec is_rectangle_cover(rectangles :: [[integer]]) :: boolean\n  def is_rectangle_cover(rectangles) do\n    \n  end\nend"
  }
}
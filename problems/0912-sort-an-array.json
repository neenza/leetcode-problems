{
  "title": "Sort an Array",
  "problem_id": "948",
  "frontend_id": "912",
  "difficulty": "Medium",
  "problem_slug": "sort-an-array",
  "topics": [
    "Array",
    "Divide and Conquer",
    "Sorting",
    "Heap (Priority Queue)",
    "Merge Sort",
    "Bucket Sort",
    "Radix Sort",
    "Counting Sort"
  ],
  "description": "Given an array of integers nums, sort the array in ascending order and return it.\nYou must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [5,2,3,1]\nOutput: [1,2,3,5]\nExplanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [5,1,1,2,0,0]\nOutput: [0,0,1,1,2,5]\nExplanation: Note that the values of nums are not necessarily unique.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 5 * 104",
    "-5 * 104 <= nums[i] <= 5 * 104"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> sortArray(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] sortArray(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def sortArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* sortArray(int* nums, int numsSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] SortArray(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar sortArray = function(nums) {\n    \n};",
    "typescript": "function sortArray(nums: number[]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function sortArray($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func sortArray(_ nums: [Int]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun sortArray(nums: IntArray): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> sortArray(List<int> nums) {\n    \n  }\n}",
    "golang": "func sortArray(nums []int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef sort_array(nums)\n    \nend",
    "scala": "object Solution {\n    def sortArray(nums: Array[Int]): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn sort_array(nums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (sort-array nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )",
    "erlang": "-spec sort_array(Nums :: [integer()]) -> [integer()].\nsort_array(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec sort_array(nums :: [integer]) :: [integer]\n  def sort_array(nums) do\n    \n  end\nend"
  }
}
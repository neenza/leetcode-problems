{
  "title": "Maximum XOR of Two Numbers in an Array",
  "problem_id": "421",
  "frontend_id": "421",
  "difficulty": "Medium",
  "problem_slug": "maximum-xor-of-two-numbers-in-an-array",
  "topics": [
    "Array",
    "Hash Table",
    "Bit Manipulation",
    "Trie"
  ],
  "description": "Given an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 <= i <= j < n.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [3,10,5,25,2,8]\nOutput: 28\nExplanation: The maximum result is 5 XOR 25 = 28.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [14,70,53,83,49,91,36,80,92,51,66,70]\nOutput: 127",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 2 * 105",
    "0 <= nums[i] <= 231 - 1"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int findMaximumXOR(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int findMaximumXOR(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findMaximumXOR(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findMaximumXOR(self, nums: List[int]) -> int:\n        ",
    "c": "int findMaximumXOR(int* nums, int numsSize){\n\n}",
    "csharp": "public class Solution {\n    public int FindMaximumXOR(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaximumXOR = function(nums) {\n    \n};",
    "typescript": "function findMaximumXOR(nums: number[]): number {\n\n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findMaximumXOR($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findMaximumXOR(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findMaximumXOR(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int findMaximumXOR(List<int> nums) {\n\n  }\n}",
    "golang": "func findMaximumXOR(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef find_maximum_xor(nums)\n    \nend",
    "scala": "object Solution {\n    def findMaximumXOR(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_maximum_xor(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (find-maximum-xor nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )",
    "erlang": "-spec find_maximum_xor(Nums :: [integer()]) -> integer().\nfind_maximum_xor(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_maximum_xor(nums :: [integer]) :: integer\n  def find_maximum_xor(nums) do\n\n  end\nend"
  }
}
{
  "title": "Separate the Digits in an Array",
  "problem_id": "2639",
  "frontend_id": "2553",
  "difficulty": "Easy",
  "problem_slug": "separate-the-digits-in-an-array",
  "topics": [
    "Array",
    "Simulation"
  ],
  "description": "Given an array of positive integers nums, return an array answer that consists of the digits of each integer in nums after separating them in the same order they appear in nums.\nTo separate the digits of an integer is to get all the digits it has in the same order.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [13,25,83,77]\nOutput: [1,3,2,5,8,3,7,7]\nExplanation: \n- The separation of 13 is [1,3].\n- The separation of 25 is [2,5].\n- The separation of 83 is [8,3].\n- The separation of 77 is [7,7].\nanswer = [1,3,2,5,8,3,7,7]. Note that answer contains the separations in the same order.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [7,1,3,9]\nOutput: [7,1,3,9]\nExplanation: The separation of each integer in nums is itself.\nanswer = [7,1,3,9].",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 1000",
    "1 <= nums[i] <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "Convert each number into a list and append that list to the answer.",
    "You can convert the integer into a string to do that easily."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> separateDigits(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] separateDigits(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def separateDigits(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def separateDigits(self, nums: List[int]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* separateDigits(int* nums, int numsSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] SeparateDigits(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar separateDigits = function(nums) {\n    \n};",
    "typescript": "function separateDigits(nums: number[]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function separateDigits($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func separateDigits(_ nums: [Int]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun separateDigits(nums: IntArray): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> separateDigits(List<int> nums) {\n    \n  }\n}",
    "golang": "func separateDigits(nums []int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef separate_digits(nums)\n    \nend",
    "scala": "object Solution {\n    def separateDigits(nums: Array[Int]): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn separate_digits(nums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (separate-digits nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )",
    "erlang": "-spec separate_digits(Nums :: [integer()]) -> [integer()].\nseparate_digits(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec separate_digits(nums :: [integer]) :: [integer]\n  def separate_digits(nums) do\n    \n  end\nend"
  }
}
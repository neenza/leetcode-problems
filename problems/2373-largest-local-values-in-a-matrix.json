{
  "title": "Largest Local Values in a Matrix",
  "problem_id": "2454",
  "frontend_id": "2373",
  "difficulty": "Easy",
  "problem_slug": "largest-local-values-in-a-matrix",
  "topics": [
    "Array",
    "Matrix"
  ],
  "description": "You are given an n x n integer matrix grid.\nGenerate an integer matrix maxLocal of size (n - 2) x (n - 2) such that:\nIn other words, we want to find the largest value in every contiguous 3 x 3 matrix in grid.\nReturn the generated matrix.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: grid = [[9,9,8,1],[5,6,2,6],[8,2,6,4],[6,2,2,2]]\nOutput: [[9,9],[8,6]]\nExplanation: The diagram above shows the original matrix and the generated matrix.\nNotice that each value in the generated matrix corresponds to the largest value of a contiguous 3 x 3 matrix in grid.",
      "images": [
        "https://assets.leetcode.com/uploads/2022/06/21/ex1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: grid = [[1,1,1,1,1],[1,1,1,1,1],[1,1,2,1,1],[1,1,1,1,1],[1,1,1,1,1]]\nOutput: [[2,2,2],[2,2,2],[2,2,2]]\nExplanation: Notice that the 2 is contained within every contiguous 3 x 3 matrix in grid.",
      "images": [
        "https://assets.leetcode.com/uploads/2022/07/02/ex2new2.png"
      ]
    }
  ],
  "constraints": [
    "n == grid.length == grid[i].length",
    "3 <= n <= 100",
    "1 <= grid[i][j] <= 100"
  ],
  "follow_ups": [],
  "hints": [
    "Use nested loops to run through all possible 3 x 3 windows in the matrix.",
    "For each 3 x 3 window, iterate through the values to get the maximum value within the window."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<vector<int>> largestLocal(vector<vector<int>>& grid) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[][] largestLocal(int[][] grid) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def largestLocal(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def largestLocal(self, grid: List[List[int]]) -> List[List[int]]:\n        ",
    "c": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** largestLocal(int** grid, int gridSize, int* gridColSize, int* returnSize, int** returnColumnSizes) {\n    \n}",
    "csharp": "public class Solution {\n    public int[][] LargestLocal(int[][] grid) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} grid\n * @return {number[][]}\n */\nvar largestLocal = function(grid) {\n    \n};",
    "typescript": "function largestLocal(grid: number[][]): number[][] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer[][]\n     */\n    function largestLocal($grid) {\n        \n    }\n}",
    "swift": "class Solution {\n    func largestLocal(_ grid: [[Int]]) -> [[Int]] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun largestLocal(grid: Array<IntArray>): Array<IntArray> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<List<int>> largestLocal(List<List<int>> grid) {\n    \n  }\n}",
    "golang": "func largestLocal(grid [][]int) [][]int {\n    \n}",
    "ruby": "# @param {Integer[][]} grid\n# @return {Integer[][]}\ndef largest_local(grid)\n    \nend",
    "scala": "object Solution {\n    def largestLocal(grid: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn largest_local(grid: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}",
    "racket": "(define/contract (largest-local grid)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )",
    "erlang": "-spec largest_local(Grid :: [[integer()]]) -> [[integer()]].\nlargest_local(Grid) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec largest_local(grid :: [[integer]]) :: [[integer]]\n  def largest_local(grid) do\n    \n  end\nend"
  },
  "solution": "## Solution\n\n---\n\n### Approach: Simulation\n\n#### Intuition\n\nWe are given an integer matrix `grid` of size $N \\cdot N$. For each element `(i, j)` in the `grid`, we need to find the maximum value in the $3 \\cdot 3$ matrix with the top left cell as `(i, j)`. The local maximums should be returned in a new matrix. Note that we need to add the value to the new matrix only for `(i, j)` values with a valid $3 \\cdot 3$ matrix. Therefore, the size of the new matrix is always $(N - 2) \\cdot (N - 2)$, and the last two rows and columns in the original matrix grid are left out.\n\nWe will follow the process given in the problem description to generate the new matrix. $3 \\cdot 3$ matrices cannot be created from the last two rows and last two columns as of `grid`, so we will iterate over the rows from `0` to `N - 2` and columns from `0` to `N - 2` in the `grid`. For each cell, we will iterate over the $3 \\cdot 3$ matrix and find the local maximum value. This value will be stored in the new matrix `maxLocal`.\n\nThe below figure demonstrates each step of the `maxLocal` grid creation. At each step, we iterate over the $3 \\cdot 3$ matrix and add the maximum value to the `maxLocal` grid.\n\n![fig](../Figures/2373/2373A.png)\n\n#### Algorithm\n\n1. Create an empty matrix `maxLocal` of size $(N - 2) \\cdot (N - 2)$, this will store the maximum values of all possible `3 x 3` matrices.\n2. Define the `findMax` function, which takes the `grid` and the coordinates `(x, y)` as parameters. This function finds the maximum value in the `3 x 3` section of the grid, where `(x, y)` is the top-left corner.\n    - Iterate over the `3 x 3` matrix starting with `(x, y)` as top-left cell.\n    - Find and return the maximum value as `maxElement`.\n3. Iterate over the `grid` rows `0` to `N - 2` and columns `0` to `N - 2`, and for each cell `(i, j)`:\n    - Use `findMax(grid, i, j)` to find the maximum local element and store it in the matrix `maxLocal` at position `(i, j)`.\n4. Return `maxLocal`.\n\n#### Implementation#### Complexity Analysis\n\nHere, $N$ is the number of rows and columns in the matrix `grid`.\n\n* Time complexity: $O(N \\cdot N)$\n\n  We iterate over the matrix `grid` rows `0` to `N - 2` and columns `0` to `N - 2` using nested loops. In the inner loop, we call the `findMax` function, so it is called $(N - 2 )^2$ times. The `findMax` function iterates over the $3 \\cdot 3$ matrix to find the maximum value. Hence, the total number of operations will be $9 \\cdot (N -2)^2$. Therefore, the total time complexity is $O(N ^2)$.\n\n* Space complexity: $O(N \\cdot N)$\n\n  We need to create a new matrix `maxLocal` of size $(N -2)^2$; hence, the total space complexity is equal to $O(N^2)$.\n\n---"
}
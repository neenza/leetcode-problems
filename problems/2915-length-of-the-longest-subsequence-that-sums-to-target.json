{
  "title": "Length of the Longest Subsequence That Sums to Target",
  "problem_id": "3106",
  "frontend_id": "2915",
  "difficulty": "Medium",
  "problem_slug": "length-of-the-longest-subsequence-that-sums-to-target",
  "topics": [
    "Array",
    "Dynamic Programming"
  ],
  "description": "You are given a 0-indexed array of integers nums, and an integer target.\nReturn the length of the longest subsequence of nums that sums up to target. If no such subsequence exists, return -1.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,3,4,5], target = 9\nOutput: 3\nExplanation: There are 3 subsequences with a sum equal to 9: [4,5], [1,3,5], and [2,3,4]. The longest subsequences are [1,3,5], and [2,3,4]. Hence, the answer is 3.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [4,1,3,2,1,5], target = 7\nOutput: 4\nExplanation: There are 5 subsequences with a sum equal to 7: [4,3], [4,1,2], [4,2,1], [1,1,5], and [1,3,2,1]. The longest subsequence is [1,3,2,1]. Hence, the answer is 4.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,1,5,4,5], target = 3\nOutput: -1\nExplanation: It can be shown that nums has no subsequence that sums up to 3.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 1000",
    "1 <= nums[i] <= 1000",
    "1 <= target <= 1000"
  ],
  "follow_ups": [],
  "hints": [
    "Use dynamic programming.",
    "Let <code>dp[i][j]</code> be the maximum length of any subsequence of <code>nums[0..i - 1]</code> that sums to <code>j</code>.",
    "<code>dp[0][0] = 1</code>, and <code>dp[0][j] = 1</code> for all <code>target ≥ j > 0</code>.",
    "<code>dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - nums[i -1])</code> for all <code>n ≥ i > 0</code> and <code>target ≥ j > nums[i - 1]</code>."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int lengthOfLongestSubsequence(vector<int>& nums, int target) {\n        \n    }\n};",
    "java": "class Solution {\n    public int lengthOfLongestSubsequence(List<Integer> nums, int target) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def lengthOfLongestSubsequence(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def lengthOfLongestSubsequence(self, nums: List[int], target: int) -> int:\n        ",
    "c": "int lengthOfLongestSubsequence(int* nums, int numsSize, int target) {\n    \n}",
    "csharp": "public class Solution {\n    public int LengthOfLongestSubsequence(IList<int> nums, int target) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar lengthOfLongestSubsequence = function(nums, target) {\n    \n};",
    "typescript": "function lengthOfLongestSubsequence(nums: number[], target: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function lengthOfLongestSubsequence($nums, $target) {\n        \n    }\n}",
    "swift": "class Solution {\n    func lengthOfLongestSubsequence(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun lengthOfLongestSubsequence(nums: List<Int>, target: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int lengthOfLongestSubsequence(List<int> nums, int target) {\n    \n  }\n}",
    "golang": "func lengthOfLongestSubsequence(nums []int, target int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef length_of_longest_subsequence(nums, target)\n    \nend",
    "scala": "object Solution {\n    def lengthOfLongestSubsequence(nums: List[Int], target: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn length_of_longest_subsequence(nums: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (length-of-longest-subsequence nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec length_of_longest_subsequence(Nums :: [integer()], Target :: integer()) -> integer().\nlength_of_longest_subsequence(Nums, Target) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec length_of_longest_subsequence(nums :: [integer], target :: integer) :: integer\n  def length_of_longest_subsequence(nums, target) do\n    \n  end\nend"
  }
}
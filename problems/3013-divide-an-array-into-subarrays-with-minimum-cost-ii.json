{
  "title": "Divide an Array Into Subarrays With Minimum Cost II",
  "problem_id": "3260",
  "frontend_id": "3013",
  "difficulty": "Hard",
  "problem_slug": "divide-an-array-into-subarrays-with-minimum-cost-ii",
  "topics": [
    "Array",
    "Hash Table",
    "Sliding Window",
    "Heap (Priority Queue)"
  ],
  "description": "You are given a 0-indexed array of integers nums of length n, and two positive integers k and dist.\nThe cost of an array is the value of its first element. For example, the cost of [1,2,3] is 1 while the cost of [3,4,1] is 3.\nYou need to divide nums into k disjoint contiguous subarrays, such that the difference between the starting index of the second subarray and the starting index of the kth subarray should be less than or equal to dist. In other words, if you divide nums into the subarrays nums[0..(i1 - 1)], nums[i1..(i2 - 1)], ..., nums[ik-1..(n - 1)], then ik-1 - i1 <= dist.\nReturn the minimum possible sum of the cost of these subarrays.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,3,2,6,4,2], k = 3, dist = 3\nOutput: 5\nExplanation: The best possible way to divide nums into 3 subarrays is: [1,3], [2,6,4], and [2]. This choice is valid because ik-1 - i1 is 5 - 2 = 3 which is equal to dist. The total cost is nums[0] + nums[2] + nums[5] which is 1 + 2 + 2 = 5.\nIt can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 5.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [10,1,2,2,2,1], k = 4, dist = 3\nOutput: 15\nExplanation: The best possible way to divide nums into 4 subarrays is: [10], [1], [2], and [2,2,1]. This choice is valid because ik-1 - i1 is 3 - 1 = 2 which is less than dist. The total cost is nums[0] + nums[1] + nums[2] + nums[3] which is 10 + 1 + 2 + 2 = 15.\nThe division [10], [1], [2,2,2], and [1] is not valid, because the difference between ik-1 and i1 is 5 - 1 = 4, which is greater than dist.\nIt can be shown that there is no possible way to divide nums into 4 subarrays at a cost lower than 15.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [10,8,18,9], k = 3, dist = 1\nOutput: 36\nExplanation: The best possible way to divide nums into 4 subarrays is: [10], [8], and [18,9]. This choice is valid because ik-1 - i1 is 2 - 1 = 1 which is equal to dist.The total cost is nums[0] + nums[1] + nums[2] which is 10 + 8 + 18 = 36.\nThe division [10], [8,18], and [9] is not valid, because the difference between ik-1 and i1 is 3 - 1 = 2, which is greater than dist.\nIt can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 36.",
      "images": []
    }
  ],
  "constraints": [
    "3 <= n <= 105",
    "1 <= nums[i] <= 109",
    "3 <= k <= n",
    "k - 2 <= dist <= n - 2"
  ],
  "follow_ups": [],
  "hints": [
    "For each <code>i > 0</code>, try each <code>nums[i]</code> as the first element of the second subarray. We need to find the sum of <code>k - 2</code> smallest values in the index range <code>[i + 1, min(i + dist, n - 1)]</code>.",
    "Typically, we use a max heap to maintain the top <code>k - 2</code> smallest values dynamically. Here we also have a sliding window, which is the index range <code>[i + 1, min(i + dist, n - 1)]</code>. We can use another min heap to put unselected values for future use.",
    "Update the two heaps when iteration over <code>i</code>. Ordered/Tree sets are also a good choice since we have to delete elements.",
    "If the max heap’s size is less than <code>k - 2</code>, use the min heap’s value to fill it. If the maximum value in the max heap is larger than the smallest value in the min heap, swap them in the two heaps."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long minimumCost(vector<int>& nums, int k, int dist) {\n        \n    }\n};",
    "java": "class Solution {\n    public long minimumCost(int[] nums, int k, int dist) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumCost(self, nums, k, dist):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :type dist: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumCost(self, nums: List[int], k: int, dist: int) -> int:\n        ",
    "c": "long long minimumCost(int* nums, int numsSize, int k, int dist) {\n    \n}",
    "csharp": "public class Solution {\n    public long MinimumCost(int[] nums, int k, int dist) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @param {number} dist\n * @return {number}\n */\nvar minimumCost = function(nums, k, dist) {\n    \n};",
    "typescript": "function minimumCost(nums: number[], k: number, dist: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @param Integer $dist\n     * @return Integer\n     */\n    function minimumCost($nums, $k, $dist) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumCost(_ nums: [Int], _ k: Int, _ dist: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumCost(nums: IntArray, k: Int, dist: Int): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumCost(List<int> nums, int k, int dist) {\n    \n  }\n}",
    "golang": "func minimumCost(nums []int, k int, dist int) int64 {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @param {Integer} dist\n# @return {Integer}\ndef minimum_cost(nums, k, dist)\n    \nend",
    "scala": "object Solution {\n    def minimumCost(nums: Array[Int], k: Int, dist: Int): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_cost(nums: Vec<i32>, k: i32, dist: i32) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-cost nums k dist)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec minimum_cost(Nums :: [integer()], K :: integer(), Dist :: integer()) -> integer().\nminimum_cost(Nums, K, Dist) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_cost(nums :: [integer], k :: integer, dist :: integer) :: integer\n  def minimum_cost(nums, k, dist) do\n    \n  end\nend"
  }
}
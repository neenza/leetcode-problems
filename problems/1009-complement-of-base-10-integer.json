{
  "title": "Complement of Base 10 Integer",
  "problem_id": "1054",
  "frontend_id": "1009",
  "difficulty": "Easy",
  "problem_slug": "complement-of-base-10-integer",
  "topics": [
    "Bit Manipulation"
  ],
  "description": "The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.\nGiven an integer n, return its complement.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nNote: This question is the same as 476: https://leetcode.com/problems/number-complement/",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 5\nOutput: 2\nExplanation: 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 7\nOutput: 0\nExplanation: 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 10\nOutput: 5\nExplanation: 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5 in base-10.",
      "images": []
    }
  ],
  "constraints": [
    "0 <= n < 109"
  ],
  "follow_ups": [],
  "hints": [
    "A binary number plus its complement will equal 111....111 in binary.  Also, N = 0 is a corner case."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int bitwiseComplement(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int bitwiseComplement(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def bitwiseComplement(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def bitwiseComplement(self, n: int) -> int:\n        ",
    "c": "int bitwiseComplement(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int BitwiseComplement(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar bitwiseComplement = function(n) {\n    \n};",
    "typescript": "function bitwiseComplement(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function bitwiseComplement($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func bitwiseComplement(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun bitwiseComplement(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int bitwiseComplement(int n) {\n    \n  }\n}",
    "golang": "func bitwiseComplement(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef bitwise_complement(n)\n    \nend",
    "scala": "object Solution {\n    def bitwiseComplement(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn bitwise_complement(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (bitwise-complement n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec bitwise_complement(N :: integer()) -> integer().\nbitwise_complement(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec bitwise_complement(n :: integer) :: integer\n  def bitwise_complement(n) do\n    \n  end\nend"
  }
}
{
  "title": "Distribute Candies Among Children II",
  "problem_id": "3201",
  "frontend_id": "2929",
  "difficulty": "Medium",
  "problem_slug": "distribute-candies-among-children-ii",
  "topics": [
    "Math",
    "Combinatorics",
    "Enumeration"
  ],
  "description": "You are given two positive integers n and limit.\nReturn the total number of ways to distribute n candies among 3 children such that no child gets more than limit candies.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 5, limit = 2\nOutput: 3\nExplanation: There are 3 ways to distribute 5 candies such that no child gets more than 2 candies: (1, 2, 2), (2, 1, 2) and (2, 2, 1).",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 3, limit = 3\nOutput: 10\nExplanation: There are 10 ways to distribute 3 candies such that no child gets more than 3 candies: (0, 0, 3), (0, 1, 2), (0, 2, 1), (0, 3, 0), (1, 0, 2), (1, 1, 1), (1, 2, 0), (2, 0, 1), (2, 1, 0) and (3, 0, 0).",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 106",
    "1 <= limit <= 106"
  ],
  "follow_ups": [],
  "hints": [
    "We can enumerate the number of candies of one particular child, let it be <code>i</code> which means <code>0 <= i <= min(limit, n)</code>.",
    "Suppose the 2nd child gets <code>j</code> candies. Then <code>0 <= j <= limit</code> and <code>i + j <= n</code>.",
    "The 3rd child will hence get <code>n - i - j</code> candies and we should have <code>0 <= n - i - j <= limit</code>.",
    "After some transformations, for each <code>i</code>, we have <code>max(0, n - i - limit) <= j <= min(limit, n - i)</code>, each <code>j</code> corresponding to a solution.\r\nSo the number of solutions for some <code>i</code> is <code>max(min(limit, n - i) - max(0, n - i - limit) + 1, 0)</code>. Sum the expression for every <code>i</code> in <code>[0, min(n, limit)]</code>."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long distributeCandies(int n, int limit) {\n        \n    }\n};",
    "java": "class Solution {\n    public long distributeCandies(int n, int limit) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def distributeCandies(self, n, limit):\n        \"\"\"\n        :type n: int\n        :type limit: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def distributeCandies(self, n: int, limit: int) -> int:\n        ",
    "c": "long long distributeCandies(int n, int limit) {\n    \n}",
    "csharp": "public class Solution {\n    public long DistributeCandies(int n, int limit) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number} limit\n * @return {number}\n */\nvar distributeCandies = function(n, limit) {\n    \n};",
    "typescript": "function distributeCandies(n: number, limit: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $limit\n     * @return Integer\n     */\n    function distributeCandies($n, $limit) {\n        \n    }\n}",
    "swift": "class Solution {\n    func distributeCandies(_ n: Int, _ limit: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun distributeCandies(n: Int, limit: Int): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int distributeCandies(int n, int limit) {\n    \n  }\n}",
    "golang": "func distributeCandies(n int, limit int) int64 {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer} limit\n# @return {Integer}\ndef distribute_candies(n, limit)\n    \nend",
    "scala": "object Solution {\n    def distributeCandies(n: Int, limit: Int): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn distribute_candies(n: i32, limit: i32) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (distribute-candies n limit)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec distribute_candies(N :: integer(), Limit :: integer()) -> integer().\ndistribute_candies(N, Limit) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec distribute_candies(n :: integer, limit :: integer) :: integer\n  def distribute_candies(n, limit) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n\n--- \n\n### Approach 1: Enumeration\n\n#### Intuition\n\nWe try every possible number of candies, $x$, that could be distributed to the first child. After, there are $n - x$ candies left. At this point, we consider two scenarios:\n\n+ If $n - x > \\textit{limit} \\times 2$, then at least one of the remaining two children must receive more than $\\textit{limit}$ candies. In this case, there is no valid distribution.\n\n+ If $n - x \\le \\textit{limit} \\times 2$, then the second child must receive **at least** $\\max(0, n - x - \\textit{limit})$ candies to ensure the third child does not receive more than $\\textit{limit}$ candies. **At most**, the second child can receive $\\min(\\textit{limit}, n - x)$ candies.\n\nFor the second case, we can count all valid distributions.\n\n#### Implementation#### Complexity Analysis\n\n- Time complexity: $O(\\min(\\textit{limit}, n))$.\n  \n  We iterate over all possible values of candies that can be given to the first child, which ranges from $0$ to $\\min(\\textit{limit}, n)$. For each such value, we perform constant-time calculations.\n\n- Space complexity: $O(1)$.\n  \n  Only a few additional variables are needed.\n\n### Approach 2: Inclusion-Exclusion Principle\n\n#### Intuition\n\nWe can also solve this using a classical counting method: subtracting the number of invalid distributions from the total number of possible distributions. By applying the inclusion-exclusion principle, we subtract the number of distributions in which at least one child receives more than `limit` candies. However, in doing so, we may subtract some distributions multiple times - specifically, the ones where **two or more children** receive more than `limit` candies. To correct this, we add back the number of cases where **at least two** children exceed the limit. But now we've overcounted the distributions where **all three** children exceed the limit, so we subtract those again.\n\nNow let's go through each case in detail:\n\n* **Total number of unrestricted distributions:**\n  Since children are allowed to receive zero candies, distributing `n` candies among 3 children is equivalent to placing two dividers among `n` candies to split them into three groups. The number of such distributions is given by the combination:\n\n  $$\n  C_{n + 2}^2\n  $$\n\n* **At least one child receives more than `limit` candies:**\n  We give `limit + 1` candies to one child first, reducing the problem to distributing $n - (limit + 1)$ candies among 3 children (with possible zeroes). There are 3 choices for which child gets the extra candies, so:\n\n  $$\n  3 \\times C_{n - (limit + 1) + 2}^2\n  $$\n\n* **At least two children receive more than `limit` candies:**\n  We give `limit + 1` candies to any two children, reducing the problem to distributing $n - 2 \\times (limit + 1)$ candies among 3 children. There are 3 ways to choose the two children:\n\n  $$\n  3 \\times C_{n - 2 \\times (limit + 1) + 2}^2\n  $$\n\n* **All three children receive more than `limit` candies:**\n  We give `limit + 1` candies to each child, so we're left with $n - 3 \\times (limit + 1)$ candies to distribute among 3 children. The number of such distributions is:\n\n  $$\n  C_{n - 3 \\times (limit + 1) + 2}^2\n  $$\n\nFinally, applying inclusion-exclusion gives the answer:\n\n$$\nC_{n+2}^2 - 3 \\times C_{n - (limit + 1) + 2}^2 + 3 \\times C_{n - 2 \\times (limit + 1) + 2}^2 - C_{n - 3 \\times (limit + 1) + 2}^2\n$$\n\n#### Implementation#### Complexity Analysis\n\n- Time complexity: $O(1)$.\n  \n  The result can be calculated directly.\n\n- Space complexity: $O(1)$.\n  \n  Only a few additional variables are needed."
}
{
  "title": "Maximum Product of Word Lengths",
  "problem_id": "318",
  "frontend_id": "318",
  "difficulty": "Medium",
  "problem_slug": "maximum-product-of-word-lengths",
  "topics": [
    "Array",
    "String",
    "Bit Manipulation"
  ],
  "description": "Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]\nOutput: 16\nExplanation: The two words can be \"abcw\", \"xtfn\".",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]\nOutput: 4\nExplanation: The two words can be \"ab\", \"cd\".",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]\nOutput: 0\nExplanation: No such pair of words.",
      "images": []
    }
  ],
  "constraints": [
    "2 <= words.length <= 1000",
    "1 <= words[i].length <= 1000",
    "words[i] consists only of lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxProduct(vector<string>& words) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxProduct(String[] words) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxProduct(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxProduct(self, words: List[str]) -> int:\n        ",
    "c": "int maxProduct(char** words, int wordsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxProduct(string[] words) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string[]} words\n * @return {number}\n */\nvar maxProduct = function(words) {\n    \n};",
    "typescript": "function maxProduct(words: string[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return Integer\n     */\n    function maxProduct($words) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxProduct(_ words: [String]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxProduct(words: Array<String>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxProduct(List<String> words) {\n    \n  }\n}",
    "golang": "func maxProduct(words []string) int {\n    \n}",
    "ruby": "# @param {String[]} words\n# @return {Integer}\ndef max_product(words)\n    \nend",
    "scala": "object Solution {\n    def maxProduct(words: Array[String]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_product(words: Vec<String>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-product words)\n  (-> (listof string?) exact-integer?)\n  )",
    "erlang": "-spec max_product(Words :: [unicode:unicode_binary()]) -> integer().\nmax_product(Words) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_product(words :: [String.t]) :: integer\n  def max_product(words) do\n    \n  end\nend"
  }
}
{
  "title": "Number of Common Factors",
  "problem_id": "2507",
  "frontend_id": "2427",
  "difficulty": "Easy",
  "problem_slug": "number-of-common-factors",
  "topics": [
    "Math",
    "Enumeration",
    "Number Theory"
  ],
  "description": "Given two positive integers a and b, return the number of common factors of a and b.\nAn integer x is a common factor of a and b if x divides both a and b.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: a = 12, b = 6\nOutput: 4\nExplanation: The common factors of 12 and 6 are 1, 2, 3, 6.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: a = 25, b = 30\nOutput: 2\nExplanation: The common factors of 25 and 30 are 1, 5.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= a, b <= 1000"
  ],
  "follow_ups": [],
  "hints": [
    "For each integer in range [1,1000], check if itâ€™s divisible by both A and B."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int commonFactors(int a, int b) {\n        \n    }\n};",
    "java": "class Solution {\n    public int commonFactors(int a, int b) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def commonFactors(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def commonFactors(self, a: int, b: int) -> int:\n        ",
    "c": "int commonFactors(int a, int b) {\n    \n}",
    "csharp": "public class Solution {\n    public int CommonFactors(int a, int b) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nvar commonFactors = function(a, b) {\n    \n};",
    "typescript": "function commonFactors(a: number, b: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $a\n     * @param Integer $b\n     * @return Integer\n     */\n    function commonFactors($a, $b) {\n        \n    }\n}",
    "swift": "class Solution {\n    func commonFactors(_ a: Int, _ b: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun commonFactors(a: Int, b: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int commonFactors(int a, int b) {\n    \n  }\n}",
    "golang": "func commonFactors(a int, b int) int {\n    \n}",
    "ruby": "# @param {Integer} a\n# @param {Integer} b\n# @return {Integer}\ndef common_factors(a, b)\n    \nend",
    "scala": "object Solution {\n    def commonFactors(a: Int, b: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn common_factors(a: i32, b: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (common-factors a b)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec common_factors(A :: integer(), B :: integer()) -> integer().\ncommon_factors(A, B) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec common_factors(a :: integer, b :: integer) :: integer\n  def common_factors(a, b) do\n    \n  end\nend"
  }
}
{
  "title": "Jump Game II",
  "problem_id": "45",
  "frontend_id": "45",
  "difficulty": "Medium",
  "problem_slug": "jump-game-ii",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Greedy"
  ],
  "description": "You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].\nEach element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:\nReturn the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [2,3,1,1,4]\nOutput: 2\nExplanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [2,3,0,1,4]\nOutput: 2",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 104",
    "0 <= nums[i] <= 1000",
    "It's guaranteed that you can reach nums[n - 1]."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int jump(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int jump(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def jump(self, nums: List[int]) -> int:\n        ",
    "c": "int jump(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int Jump(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar jump = function(nums) {\n    \n};",
    "typescript": "function jump(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function jump($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func jump(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun jump(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int jump(List<int> nums) {\n    \n  }\n}",
    "golang": "func jump(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef jump(nums)\n    \nend",
    "scala": "object Solution {\n    def jump(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn jump(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (jump nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec jump(Nums :: [integer()]) -> integer().\njump(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec jump(nums :: [integer]) :: integer\n  def jump(nums) do\n    \n  end\nend"
  }
}
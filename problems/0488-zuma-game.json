{
  "title": "Zuma Game",
  "problem_id": "488",
  "frontend_id": "488",
  "difficulty": "Hard",
  "problem_slug": "zuma-game",
  "topics": [
    "String",
    "Dynamic Programming",
    "Stack",
    "Breadth-First Search",
    "Memoization"
  ],
  "description": "You are playing a variation of the game Zuma.\nIn this variation of Zuma, there is a single row of colored balls on a board, where each ball can be colored red 'R', yellow 'Y', blue 'B', green 'G', or white 'W'. You also have several colored balls in your hand.\nYour goal is to clear all of the balls from the board. On each turn:\nGiven a string board, representing the row of balls on the board, and a string hand, representing the balls in your hand, return the minimum number of balls you have to insert to clear all the balls from the board. If you cannot clear all the balls from the board using the balls in your hand, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: board = \"WRRBBW\", hand = \"RB\"\nOutput: -1\nExplanation: It is impossible to clear all the balls. The best you can do is:\n- Insert 'R' so the board becomes WRRRBBW. WRRRBBW -> WBBW.\n- Insert 'B' so the board becomes WBBBW. WBBBW -> WW.\nThere are still balls remaining on the board, and you are out of balls to insert.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: board = \"WWRRBBWW\", hand = \"WRBRW\"\nOutput: 2\nExplanation: To make the board empty:\n- Insert 'R' so the board becomes WWRRRBBWW. WWRRRBBWW -> WWBBWW.\n- Insert 'B' so the board becomes WWBBBWW. WWBBBWW -> WWWW -> empty.\n2 balls from your hand were needed to clear the board.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: board = \"G\", hand = \"GGGGG\"\nOutput: 2\nExplanation: To make the board empty:\n- Insert 'G' so the board becomes GG.\n- Insert 'G' so the board becomes GGG. GGG -> empty.\n2 balls from your hand were needed to clear the board.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= board.length <= 16",
    "1 <= hand.length <= 5",
    "board and hand consist of the characters 'R', 'Y', 'B', 'G', and 'W'.",
    "The initial row of balls on the board will not have any groups of three or more consecutive balls of the same color."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int findMinStep(string board, string hand) {\n        \n    }\n};",
    "java": "class Solution {\n    public int findMinStep(String board, String hand) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findMinStep(self, board, hand):\n        \"\"\"\n        :type board: str\n        :type hand: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findMinStep(self, board: str, hand: str) -> int:\n        ",
    "c": "int findMinStep(char* board, char* hand) {\n    \n}",
    "csharp": "public class Solution {\n    public int FindMinStep(string board, string hand) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} board\n * @param {string} hand\n * @return {number}\n */\nvar findMinStep = function(board, hand) {\n    \n};",
    "typescript": "function findMinStep(board: string, hand: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $board\n     * @param String $hand\n     * @return Integer\n     */\n    function findMinStep($board, $hand) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findMinStep(_ board: String, _ hand: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findMinStep(board: String, hand: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int findMinStep(String board, String hand) {\n    \n  }\n}",
    "golang": "func findMinStep(board string, hand string) int {\n    \n}",
    "ruby": "# @param {String} board\n# @param {String} hand\n# @return {Integer}\ndef find_min_step(board, hand)\n    \nend",
    "scala": "object Solution {\n    def findMinStep(board: String, hand: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_min_step(board: String, hand: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (find-min-step board hand)\n  (-> string? string? exact-integer?)\n  )",
    "erlang": "-spec find_min_step(Board :: unicode:unicode_binary(), Hand :: unicode:unicode_binary()) -> integer().\nfind_min_step(Board, Hand) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_min_step(board :: String.t, hand :: String.t) :: integer\n  def find_min_step(board, hand) do\n    \n  end\nend"
  }
}
{
  "title": "Best Time to Buy and Sell Stock",
  "problem_id": "121",
  "frontend_id": "121",
  "difficulty": "Easy",
  "problem_slug": "best-time-to-buy-and-sell-stock",
  "topics": [
    "Array",
    "Dynamic Programming"
  ],
  "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day.\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= prices.length <= 105",
    "0 <= prices[i] <= 104"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxProfit(int[] prices) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        ",
    "c": "int maxProfit(int* prices, int pricesSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxProfit(int[] prices) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function(prices) {\n    \n};",
    "typescript": "function maxProfit(prices: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $prices\n     * @return Integer\n     */\n    function maxProfit($prices) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxProfit(_ prices: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxProfit(prices: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxProfit(List<int> prices) {\n    \n  }\n}",
    "golang": "func maxProfit(prices []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} prices\n# @return {Integer}\ndef max_profit(prices)\n    \nend",
    "scala": "object Solution {\n    def maxProfit(prices: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_profit(prices: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-profit prices)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec max_profit(Prices :: [integer()]) -> integer().\nmax_profit(Prices) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_profit(prices :: [integer]) :: integer\n  def max_profit(prices) do\n    \n  end\nend"
  }
}
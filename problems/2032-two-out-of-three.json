{
  "title": "Two Out of Three",
  "problem_id": "2159",
  "frontend_id": "2032",
  "difficulty": "Easy",
  "problem_slug": "two-out-of-three",
  "topics": [
    "Array",
    "Hash Table",
    "Bit Manipulation"
  ],
  "description": "Example 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums1 = [1,1,3,2], nums2 = [2,3], nums3 = [3]\nOutput: [3,2]\nExplanation: The values that are present in at least two arrays are:\n- 3, in all three arrays.\n- 2, in nums1 and nums2.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums1 = [3,1], nums2 = [2,3], nums3 = [1,2]\nOutput: [2,3,1]\nExplanation: The values that are present in at least two arrays are:\n- 2, in nums2 and nums3.\n- 3, in nums1 and nums2.\n- 1, in nums1 and nums3.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums1 = [1,2,2], nums2 = [4,3,3], nums3 = [5]\nOutput: []\nExplanation: No value is present in at least two arrays.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums1.length, nums2.length, nums3.length <= 100",
    "1 <= nums1[i], nums2[j], nums3[k] <= 100"
  ],
  "follow_ups": [],
  "hints": [
    "What data structure can we use to help us quickly find whether an element belongs in an array?",
    "Can we count the frequencies of the elements in each array?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> twoOutOfThree(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<Integer> twoOutOfThree(int[] nums1, int[] nums2, int[] nums3) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def twoOutOfThree(self, nums1, nums2, nums3):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type nums3: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def twoOutOfThree(self, nums1: List[int], nums2: List[int], nums3: List[int]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* twoOutOfThree(int* nums1, int nums1Size, int* nums2, int nums2Size, int* nums3, int nums3Size, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<int> TwoOutOfThree(int[] nums1, int[] nums2, int[] nums3) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number[]} nums3\n * @return {number[]}\n */\nvar twoOutOfThree = function(nums1, nums2, nums3) {\n    \n};",
    "typescript": "function twoOutOfThree(nums1: number[], nums2: number[], nums3: number[]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @param Integer[] $nums3\n     * @return Integer[]\n     */\n    function twoOutOfThree($nums1, $nums2, $nums3) {\n        \n    }\n}",
    "swift": "class Solution {\n    func twoOutOfThree(_ nums1: [Int], _ nums2: [Int], _ nums3: [Int]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun twoOutOfThree(nums1: IntArray, nums2: IntArray, nums3: IntArray): List<Int> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> twoOutOfThree(List<int> nums1, List<int> nums2, List<int> nums3) {\n    \n  }\n}",
    "golang": "func twoOutOfThree(nums1 []int, nums2 []int, nums3 []int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @param {Integer[]} nums3\n# @return {Integer[]}\ndef two_out_of_three(nums1, nums2, nums3)\n    \nend",
    "scala": "object Solution {\n    def twoOutOfThree(nums1: Array[Int], nums2: Array[Int], nums3: Array[Int]): List[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn two_out_of_three(nums1: Vec<i32>, nums2: Vec<i32>, nums3: Vec<i32>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (two-out-of-three nums1 nums2 nums3)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  )",
    "erlang": "-spec two_out_of_three(Nums1 :: [integer()], Nums2 :: [integer()], Nums3 :: [integer()]) -> [integer()].\ntwo_out_of_three(Nums1, Nums2, Nums3) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec two_out_of_three(nums1 :: [integer], nums2 :: [integer], nums3 :: [integer]) :: [integer]\n  def two_out_of_three(nums1, nums2, nums3) do\n    \n  end\nend"
  }
}
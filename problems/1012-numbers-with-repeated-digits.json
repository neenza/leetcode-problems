{
  "title": "Numbers With Repeated Digits",
  "problem_id": "1057",
  "frontend_id": "1012",
  "difficulty": "Hard",
  "problem_slug": "numbers-with-repeated-digits",
  "topics": [
    "Math",
    "Dynamic Programming"
  ],
  "description": "Given an integer n, return the number of positive integers in the range [1, n] that have at least one repeated digit.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 20\nOutput: 1\nExplanation: The only positive number (<= 20) with at least 1 repeated digit is 11.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 100\nOutput: 10\nExplanation: The positive numbers (<= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 1000\nOutput: 262",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "How many numbers with no duplicate digits?  How many numbers with K digits and no duplicates?",
    "How many numbers with same length as N?  How many numbers with same prefix as N?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int numDupDigitsAtMostN(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int numDupDigitsAtMostN(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numDupDigitsAtMostN(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numDupDigitsAtMostN(self, n: int) -> int:\n        ",
    "c": "int numDupDigitsAtMostN(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int NumDupDigitsAtMostN(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar numDupDigitsAtMostN = function(n) {\n    \n};",
    "typescript": "function numDupDigitsAtMostN(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function numDupDigitsAtMostN($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numDupDigitsAtMostN(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numDupDigitsAtMostN(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int numDupDigitsAtMostN(int n) {\n    \n  }\n}",
    "golang": "func numDupDigitsAtMostN(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef num_dup_digits_at_most_n(n)\n    \nend",
    "scala": "object Solution {\n    def numDupDigitsAtMostN(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn num_dup_digits_at_most_n(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (num-dup-digits-at-most-n n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec num_dup_digits_at_most_n(N :: integer()) -> integer().\nnum_dup_digits_at_most_n(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec num_dup_digits_at_most_n(n :: integer) :: integer\n  def num_dup_digits_at_most_n(n) do\n    \n  end\nend"
  }
}
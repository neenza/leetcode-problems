{
  "title": "Palindrome Partitioning II",
  "problem_id": "132",
  "frontend_id": "132",
  "difficulty": "Hard",
  "problem_slug": "palindrome-partitioning-ii",
  "topics": [
    "String",
    "Dynamic Programming"
  ],
  "description": "Given a string s, partition s such that every substring of the partition is a palindrome.\nReturn the minimum cuts needed for a palindrome partitioning of s.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"aab\"\nOutput: 1\nExplanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"a\"\nOutput: 0",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"ab\"\nOutput: 1",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 2000",
    "s consists of lowercase English letters only."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minCut(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minCut(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minCut(self, s: str) -> int:\n        ",
    "c": "int minCut(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinCut(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {number}\n */\nvar minCut = function(s) {\n    \n};",
    "typescript": "function minCut(s: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function minCut($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minCut(_ s: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minCut(s: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minCut(String s) {\n    \n  }\n}",
    "golang": "func minCut(s string) int {\n    \n}",
    "ruby": "# @param {String} s\n# @return {Integer}\ndef min_cut(s)\n    \nend",
    "scala": "object Solution {\n    def minCut(s: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_cut(s: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-cut s)\n  (-> string? exact-integer?)\n  )",
    "erlang": "-spec min_cut(S :: unicode:unicode_binary()) -> integer().\nmin_cut(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_cut(s :: String.t) :: integer\n  def min_cut(s) do\n    \n  end\nend"
  }
}
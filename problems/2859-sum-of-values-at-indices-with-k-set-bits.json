{
  "title": "Sum of Values at Indices With K Set Bits",
  "problem_id": "3093",
  "frontend_id": "2859",
  "difficulty": "Easy",
  "problem_slug": "sum-of-values-at-indices-with-k-set-bits",
  "topics": [
    "Array",
    "Bit Manipulation"
  ],
  "description": "You are given a 0-indexed integer array nums and an integer k.\nReturn an integer that denotes the sum of elements in nums whose corresponding indices have exactly k set bits in their binary representation.\nThe set bits in an integer are the 1's present when it is written in binary.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [5,10,1,5,2], k = 1\nOutput: 13\nExplanation: The binary representation of the indices are: \n0 = 0002\n1 = 0012\n2 = 0102\n3 = 0112\n4 = 1002 \nIndices 1, 2, and 4 have k = 1 set bits in their binary representation.\nHence, the answer is nums[1] + nums[2] + nums[4] = 13.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [4,3,2,1], k = 2\nOutput: 1\nExplanation: The binary representation of the indices are:\n0 = 002\n1 = 012\n2 = 102\n3 = 112\nOnly index 3 has k = 2 set bits in its binary representation.\nHence, the answer is nums[3] = 1.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 1000",
    "1 <= nums[i] <= 105",
    "0 <= k <= 10"
  ],
  "follow_ups": [],
  "hints": [
    "Iterate through the indices <code>i</code> in the range <code>[0, n - 1]</code>, for each index <code>i</code> count the number of bits in its binary representation. If it is <code>k</code>, add <code>nums[i]</code> to the result."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int sumIndicesWithKSetBits(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int sumIndicesWithKSetBits(List<Integer> nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def sumIndicesWithKSetBits(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def sumIndicesWithKSetBits(self, nums: List[int], k: int) -> int:\n        ",
    "c": "int sumIndicesWithKSetBits(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int SumIndicesWithKSetBits(IList<int> nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar sumIndicesWithKSetBits = function(nums, k) {\n    \n};",
    "typescript": "function sumIndicesWithKSetBits(nums: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function sumIndicesWithKSetBits($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func sumIndicesWithKSetBits(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun sumIndicesWithKSetBits(nums: List<Int>, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int sumIndicesWithKSetBits(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func sumIndicesWithKSetBits(nums []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef sum_indices_with_k_set_bits(nums, k)\n    \nend",
    "scala": "object Solution {\n    def sumIndicesWithKSetBits(nums: List[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn sum_indices_with_k_set_bits(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (sum-indices-with-k-set-bits nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec sum_indices_with_k_set_bits(Nums :: [integer()], K :: integer()) -> integer().\nsum_indices_with_k_set_bits(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec sum_indices_with_k_set_bits(nums :: [integer], k :: integer) :: integer\n  def sum_indices_with_k_set_bits(nums, k) do\n    \n  end\nend"
  }
}
{
  "title": "Implement Magic Dictionary",
  "problem_id": "676",
  "frontend_id": "676",
  "difficulty": "Medium",
  "problem_slug": "implement-magic-dictionary",
  "topics": [
    "Hash Table",
    "String",
    "Depth-First Search",
    "Design",
    "Trie"
  ],
  "description": "Design a data structure that is initialized with a list of different words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.\nImplement the MagicDictionary class:\nExample 1:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input\n[\"MagicDictionary\", \"buildDict\", \"search\", \"search\", \"search\", \"search\"]\n[[], [[\"hello\", \"leetcode\"]], [\"hello\"], [\"hhllo\"], [\"hell\"], [\"leetcoded\"]]\nOutput\n[null, null, false, true, false, false]\n\nExplanation\nMagicDictionary magicDictionary = new MagicDictionary();\nmagicDictionary.buildDict([\"hello\", \"leetcode\"]);\nmagicDictionary.search(\"hello\"); // return False\nmagicDictionary.search(\"hhllo\"); // We can change the second 'h' to 'e' to match \"hello\" so we return True\nmagicDictionary.search(\"hell\"); // return False\nmagicDictionary.search(\"leetcoded\"); // return False",
      "images": []
    }
  ],
  "constraints": [
    "1 <= dictionary.length <= 100",
    "1 <= dictionary[i].length <= 100",
    "dictionary[i] consists of only lower-case English letters.",
    "All the strings in dictionary are distinct.",
    "1 <= searchWord.length <= 100",
    "searchWord consists of only lower-case English letters.",
    "buildDict will be called only once before search.",
    "At most 100 calls will be made to search."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class MagicDictionary {\npublic:\n    MagicDictionary() {\n        \n    }\n    \n    void buildDict(vector<string> dictionary) {\n        \n    }\n    \n    bool search(string searchWord) {\n        \n    }\n};\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * MagicDictionary* obj = new MagicDictionary();\n * obj->buildDict(dictionary);\n * bool param_2 = obj->search(searchWord);\n */",
    "java": "class MagicDictionary {\n\n    public MagicDictionary() {\n        \n    }\n    \n    public void buildDict(String[] dictionary) {\n        \n    }\n    \n    public boolean search(String searchWord) {\n        \n    }\n}\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * MagicDictionary obj = new MagicDictionary();\n * obj.buildDict(dictionary);\n * boolean param_2 = obj.search(searchWord);\n */",
    "python": "class MagicDictionary(object):\n\n    def __init__(self):\n        \n\n    def buildDict(self, dictionary):\n        \"\"\"\n        :type dictionary: List[str]\n        :rtype: None\n        \"\"\"\n        \n\n    def search(self, searchWord):\n        \"\"\"\n        :type searchWord: str\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your MagicDictionary object will be instantiated and called as such:\n# obj = MagicDictionary()\n# obj.buildDict(dictionary)\n# param_2 = obj.search(searchWord)",
    "python3": "class MagicDictionary:\n\n    def __init__(self):\n        \n\n    def buildDict(self, dictionary: List[str]) -> None:\n        \n\n    def search(self, searchWord: str) -> bool:\n        \n\n\n# Your MagicDictionary object will be instantiated and called as such:\n# obj = MagicDictionary()\n# obj.buildDict(dictionary)\n# param_2 = obj.search(searchWord)",
    "c": "\n\n\ntypedef struct {\n    \n} MagicDictionary;\n\n\nMagicDictionary* magicDictionaryCreate() {\n    \n}\n\nvoid magicDictionaryBuildDict(MagicDictionary* obj, char** dictionary, int dictionarySize) {\n    \n}\n\nbool magicDictionarySearch(MagicDictionary* obj, char* searchWord) {\n    \n}\n\nvoid magicDictionaryFree(MagicDictionary* obj) {\n    \n}\n\n/**\n * Your MagicDictionary struct will be instantiated and called as such:\n * MagicDictionary* obj = magicDictionaryCreate();\n * magicDictionaryBuildDict(obj, dictionary, dictionarySize);\n \n * bool param_2 = magicDictionarySearch(obj, searchWord);\n \n * magicDictionaryFree(obj);\n*/",
    "csharp": "public class MagicDictionary {\n\n    public MagicDictionary() {\n        \n    }\n    \n    public void BuildDict(string[] dictionary) {\n        \n    }\n    \n    public bool Search(string searchWord) {\n        \n    }\n}\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * MagicDictionary obj = new MagicDictionary();\n * obj.BuildDict(dictionary);\n * bool param_2 = obj.Search(searchWord);\n */",
    "javascript": "\nvar MagicDictionary = function() {\n    \n};\n\n/** \n * @param {string[]} dictionary\n * @return {void}\n */\nMagicDictionary.prototype.buildDict = function(dictionary) {\n    \n};\n\n/** \n * @param {string} searchWord\n * @return {boolean}\n */\nMagicDictionary.prototype.search = function(searchWord) {\n    \n};\n\n/** \n * Your MagicDictionary object will be instantiated and called as such:\n * var obj = new MagicDictionary()\n * obj.buildDict(dictionary)\n * var param_2 = obj.search(searchWord)\n */",
    "typescript": "class MagicDictionary {\n    constructor() {\n        \n    }\n\n    buildDict(dictionary: string[]): void {\n        \n    }\n\n    search(searchWord: string): boolean {\n        \n    }\n}\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * var obj = new MagicDictionary()\n * obj.buildDict(dictionary)\n * var param_2 = obj.search(searchWord)\n */",
    "php": "class MagicDictionary {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param String[] $dictionary\n     * @return NULL\n     */\n    function buildDict($dictionary) {\n        \n    }\n  \n    /**\n     * @param String $searchWord\n     * @return Boolean\n     */\n    function search($searchWord) {\n        \n    }\n}\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * $obj = MagicDictionary();\n * $obj->buildDict($dictionary);\n * $ret_2 = $obj->search($searchWord);\n */",
    "swift": "\nclass MagicDictionary {\n\n    init() {\n        \n    }\n    \n    func buildDict(_ dictionary: [String]) {\n        \n    }\n    \n    func search(_ searchWord: String) -> Bool {\n        \n    }\n}\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * let obj = MagicDictionary()\n * obj.buildDict(dictionary)\n * let ret_2: Bool = obj.search(searchWord)\n */",
    "kotlin": "class MagicDictionary() {\n\n    fun buildDict(dictionary: Array<String>) {\n        \n    }\n\n    fun search(searchWord: String): Boolean {\n        \n    }\n\n}\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * var obj = MagicDictionary()\n * obj.buildDict(dictionary)\n * var param_2 = obj.search(searchWord)\n */",
    "dart": "class MagicDictionary {\n\n  MagicDictionary() {\n    \n  }\n  \n  void buildDict(List<String> dictionary) {\n    \n  }\n  \n  bool search(String searchWord) {\n    \n  }\n}\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * MagicDictionary obj = MagicDictionary();\n * obj.buildDict(dictionary);\n * bool param2 = obj.search(searchWord);\n */",
    "golang": "type MagicDictionary struct {\n    \n}\n\n\nfunc Constructor() MagicDictionary {\n    \n}\n\n\nfunc (this *MagicDictionary) BuildDict(dictionary []string)  {\n    \n}\n\n\nfunc (this *MagicDictionary) Search(searchWord string) bool {\n    \n}\n\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * obj := Constructor();\n * obj.BuildDict(dictionary);\n * param_2 := obj.Search(searchWord);\n */",
    "ruby": "class MagicDictionary\n    def initialize()\n        \n    end\n\n\n=begin\n    :type dictionary: String[]\n    :rtype: Void\n=end\n    def build_dict(dictionary)\n        \n    end\n\n\n=begin\n    :type search_word: String\n    :rtype: Boolean\n=end\n    def search(search_word)\n        \n    end\n\n\nend\n\n# Your MagicDictionary object will be instantiated and called as such:\n# obj = MagicDictionary.new()\n# obj.build_dict(dictionary)\n# param_2 = obj.search(search_word)",
    "scala": "class MagicDictionary() {\n\n    def buildDict(dictionary: Array[String]): Unit = {\n        \n    }\n\n    def search(searchWord: String): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * val obj = new MagicDictionary()\n * obj.buildDict(dictionary)\n * val param_2 = obj.search(searchWord)\n */",
    "rust": "struct MagicDictionary {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MagicDictionary {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn build_dict(&self, dictionary: Vec<String>) {\n        \n    }\n    \n    fn search(&self, search_word: String) -> bool {\n        \n    }\n}\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * let obj = MagicDictionary::new();\n * obj.build_dict(dictionary);\n * let ret_2: bool = obj.search(searchWord);\n */",
    "racket": "(define magic-dictionary%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; build-dict : (listof string?) -> void?\n    (define/public (build-dict dictionary)\n      )\n    ; search : string? -> boolean?\n    (define/public (search search-word)\n      )))\n\n;; Your magic-dictionary% object will be instantiated and called as such:\n;; (define obj (new magic-dictionary%))\n;; (send obj build-dict dictionary)\n;; (define param_2 (send obj search search-word))",
    "erlang": "-spec magic_dictionary_init_() -> any().\nmagic_dictionary_init_() ->\n  .\n\n-spec magic_dictionary_build_dict(Dictionary :: [unicode:unicode_binary()]) -> any().\nmagic_dictionary_build_dict(Dictionary) ->\n  .\n\n-spec magic_dictionary_search(SearchWord :: unicode:unicode_binary()) -> boolean().\nmagic_dictionary_search(SearchWord) ->\n  .\n\n\n%% Your functions will be called as such:\n%% magic_dictionary_init_(),\n%% magic_dictionary_build_dict(Dictionary),\n%% Param_2 = magic_dictionary_search(SearchWord),\n\n%% magic_dictionary_init_ will be called before every test case, in which you can do some necessary initializations.",
    "elixir": "defmodule MagicDictionary do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec build_dict(dictionary :: [String.t]) :: any\n  def build_dict(dictionary) do\n    \n  end\n\n  @spec search(search_word :: String.t) :: boolean\n  def search(search_word) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# MagicDictionary.init_()\n# MagicDictionary.build_dict(dictionary)\n# param_2 = MagicDictionary.search(search_word)\n\n# MagicDictionary.init_ will be called before every test case, in which you can do some necessary initializations."
  }
}
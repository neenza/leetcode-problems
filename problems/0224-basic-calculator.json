{
  "title": "Basic Calculator",
  "problem_id": "224",
  "frontend_id": "224",
  "difficulty": "Hard",
  "problem_slug": "basic-calculator",
  "topics": [
    "Math",
    "String",
    "Stack",
    "Recursion"
  ],
  "description": "Given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.\nNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"1 + 1\"\nOutput: 2",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \" 2-1 + 2 \"\nOutput: 3",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"(1+(4+5+2)-3)+(6+8)\"\nOutput: 23",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 3 * 105",
    "s consists of digits, '+', '-', '(', ')', and ' '.",
    "s represents a valid expression.",
    "'+' is not used as a unary operation (i.e., \"+1\" and \"+(2 + 3)\" is invalid).",
    "'-' could be used as a unary operation (i.e., \"-1\" and \"-(2 + 3)\" is valid).",
    "There will be no two consecutive operators in the input.",
    "Every number and running calculation will fit in a signed 32-bit integer."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int calculate(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public int calculate(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def calculate(self, s: str) -> int:\n        ",
    "c": "int calculate(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public int Calculate(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {number}\n */\nvar calculate = function(s) {\n    \n};",
    "typescript": "function calculate(s: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function calculate($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func calculate(_ s: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun calculate(s: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int calculate(String s) {\n    \n  }\n}",
    "golang": "func calculate(s string) int {\n    \n}",
    "ruby": "# @param {String} s\n# @return {Integer}\ndef calculate(s)\n    \nend",
    "scala": "object Solution {\n    def calculate(s: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn calculate(s: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (calculate s)\n  (-> string? exact-integer?)\n  )",
    "erlang": "-spec calculate(S :: unicode:unicode_binary()) -> integer().\ncalculate(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec calculate(s :: String.t) :: integer\n  def calculate(s) do\n    \n  end\nend"
  }
}
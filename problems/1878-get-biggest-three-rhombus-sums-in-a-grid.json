{
  "title": "Get Biggest Three Rhombus Sums in a Grid",
  "problem_id": "1990",
  "frontend_id": "1878",
  "difficulty": "Medium",
  "problem_slug": "get-biggest-three-rhombus-sums-in-a-grid",
  "topics": [
    "Array",
    "Math",
    "Sorting",
    "Heap (Priority Queue)",
    "Matrix",
    "Prefix Sum"
  ],
  "description": "You are given an m x n integer matrix grid​​​.\nA rhombus sum is the sum of the elements that form the border of a regular rhombus shape in grid​​​. The rhombus must have the shape of a square rotated 45 degrees with each of the corners centered in a grid cell. Below is an image of four valid rhombus shapes with the corresponding colored cells that should be included in each rhombus sum:\nNote that the rhombus can have an area of 0, which is depicted by the purple rhombus in the bottom right corner.\nReturn the biggest three distinct rhombus sums in the grid in descending order. If there are less than three distinct values, return all of them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: grid = [[3,4,5,1,3],[3,3,4,2,3],[20,30,200,40,10],[1,5,5,4,1],[4,3,2,2,5]]\nOutput: [228,216,211]\nExplanation: The rhombus shapes for the three biggest distinct rhombus sums are depicted above.\n- Blue: 20 + 3 + 200 + 5 = 228\n- Red: 200 + 2 + 10 + 4 = 216\n- Green: 5 + 200 + 4 + 2 = 211",
      "images": [
        "https://assets.leetcode.com/uploads/2021/04/23/pc73-q4-ex1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: grid = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [20,9,8]\nExplanation: The rhombus shapes for the three biggest distinct rhombus sums are depicted above.\n- Blue: 4 + 2 + 6 + 8 = 20\n- Red: 9 (area 0 rhombus in the bottom right corner)\n- Green: 8 (area 0 rhombus in the bottom middle)",
      "images": [
        "https://assets.leetcode.com/uploads/2021/04/23/pc73-q4-ex2.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: grid = [[7,7,7]]\nOutput: [7]\nExplanation: All three possible rhombus sums are the same, so return [7].",
      "images": [
        "https://assets.leetcode.com/uploads/2021/04/23/pc73-q4-ex2.png"
      ]
    }
  ],
  "constraints": [
    "m == grid.length",
    "n == grid[i].length",
    "1 <= m, n <= 50",
    "1 <= grid[i][j] <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "You need to maintain only the biggest 3 distinct sums",
    "The limits are small enough for you to iterate over all rhombus sizes then iterate over all possible borders to get the sums"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> getBiggestThree(vector<vector<int>>& grid) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] getBiggestThree(int[][] grid) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def getBiggestThree(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def getBiggestThree(self, grid: List[List[int]]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* getBiggestThree(int** grid, int gridSize, int* gridColSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] GetBiggestThree(int[][] grid) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} grid\n * @return {number[]}\n */\nvar getBiggestThree = function(grid) {\n    \n};",
    "typescript": "function getBiggestThree(grid: number[][]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer[]\n     */\n    function getBiggestThree($grid) {\n        \n    }\n}",
    "swift": "class Solution {\n    func getBiggestThree(_ grid: [[Int]]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun getBiggestThree(grid: Array<IntArray>): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> getBiggestThree(List<List<int>> grid) {\n    \n  }\n}",
    "golang": "func getBiggestThree(grid [][]int) []int {\n    \n}",
    "ruby": "# @param {Integer[][]} grid\n# @return {Integer[]}\ndef get_biggest_three(grid)\n    \nend",
    "scala": "object Solution {\n    def getBiggestThree(grid: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn get_biggest_three(grid: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (get-biggest-three grid)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n  )",
    "erlang": "-spec get_biggest_three(Grid :: [[integer()]]) -> [integer()].\nget_biggest_three(Grid) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec get_biggest_three(grid :: [[integer]]) :: [integer]\n  def get_biggest_three(grid) do\n    \n  end\nend"
  }
}
{
  "title": "Minimum Pair Removal to Sort Array I",
  "problem_id": "3773",
  "frontend_id": "3507",
  "difficulty": "Easy",
  "problem_slug": "minimum-pair-removal-to-sort-array-i",
  "topics": [
    "Array",
    "Hash Table",
    "Linked List",
    "Heap (Priority Queue)",
    "Simulation",
    "Doubly-Linked List",
    "Ordered Set"
  ],
  "description": "Given an array nums, you can perform the following operation any number of times:\nReturn the minimum number of operations needed to make the array non-decreasing.\nAn array is said to be non-decreasing if each element is greater than or equal to its previous element (if it exists).\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [5,2,3,1]\nOutput: 2\nExplanation:\nThe array nums became non-decreasing in two operations.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,2,2]\nOutput: 0\nExplanation:\nThe array nums is already sorted.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 50",
    "-1000 <= nums[i] <= 1000"
  ],
  "follow_ups": [],
  "hints": [
    "Simulate the operations"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimumPairRemoval(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimumPairRemoval(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumPairRemoval(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumPairRemoval(self, nums: List[int]) -> int:\n        ",
    "c": "int minimumPairRemoval(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimumPairRemoval(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minimumPairRemoval = function(nums) {\n    \n};",
    "typescript": "function minimumPairRemoval(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minimumPairRemoval($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumPairRemoval(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumPairRemoval(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumPairRemoval(List<int> nums) {\n    \n  }\n}",
    "golang": "func minimumPairRemoval(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef minimum_pair_removal(nums)\n    \nend",
    "scala": "object Solution {\n    def minimumPairRemoval(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_pair_removal(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-pair-removal nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec minimum_pair_removal(Nums :: [integer()]) -> integer().\nminimum_pair_removal(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_pair_removal(nums :: [integer]) :: integer\n  def minimum_pair_removal(nums) do\n    \n  end\nend"
  }
}
{
  "title": "Distinct Subsequences",
  "problem_id": "115",
  "frontend_id": "115",
  "difficulty": "Hard",
  "problem_slug": "distinct-subsequences",
  "topics": [
    "String",
    "Dynamic Programming"
  ],
  "description": "Given two strings s and t, return the number of distinct subsequences of s which equals t.\nThe test cases are generated so that the answer fits on a 32-bit signed integer.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"rabbbit\", t = \"rabbit\"\nOutput: 3\nExplanation:\nAs shown below, there are 3 ways you can generate \"rabbit\" from s.\nrabbbit\nrabbbit\nrabbbit",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"babgbag\", t = \"bag\"\nOutput: 5\nExplanation:\nAs shown below, there are 5 ways you can generate \"bag\" from s.\nbabgbag\nbabgbag\nbabgbag\nbabgbag\nbabgbag",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length, t.length <= 1000",
    "s and t consist of English letters."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int numDistinct(string s, string t) {\n        \n    }\n};",
    "java": "class Solution {\n    public int numDistinct(String s, String t) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numDistinct(self, s: str, t: str) -> int:\n        ",
    "c": "int numDistinct(char* s, char* t) {\n    \n}",
    "csharp": "public class Solution {\n    public int NumDistinct(string s, string t) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @param {string} t\n * @return {number}\n */\nvar numDistinct = function(s, t) {\n    \n};",
    "typescript": "function numDistinct(s: string, t: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $t\n     * @return Integer\n     */\n    function numDistinct($s, $t) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numDistinct(_ s: String, _ t: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numDistinct(s: String, t: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int numDistinct(String s, String t) {\n    \n  }\n}",
    "golang": "func numDistinct(s string, t string) int {\n    \n}",
    "ruby": "# @param {String} s\n# @param {String} t\n# @return {Integer}\ndef num_distinct(s, t)\n    \nend",
    "scala": "object Solution {\n    def numDistinct(s: String, t: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn num_distinct(s: String, t: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (num-distinct s t)\n  (-> string? string? exact-integer?)\n  )",
    "erlang": "-spec num_distinct(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> integer().\nnum_distinct(S, T) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec num_distinct(s :: String.t, t :: String.t) :: integer\n  def num_distinct(s, t) do\n    \n  end\nend"
  }
}
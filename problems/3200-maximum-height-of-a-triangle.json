{
  "title": "Maximum Height of a Triangle",
  "problem_id": "3469",
  "frontend_id": "3200",
  "difficulty": "Easy",
  "problem_slug": "maximum-height-of-a-triangle",
  "topics": [
    "Array",
    "Enumeration"
  ],
  "description": "You are given two integers red and blue representing the count of red and blue colored balls. You have to arrange these balls to form a triangle such that the 1st row will have 1 ball, the 2nd row will have 2 balls, the 3rd row will have 3 balls, and so on.\nAll the balls in a particular row should be the same color, and adjacent rows should have different colors.\nReturn the maximum height of the triangle that can be achieved.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: red = 2, blue = 4\nOutput: 3\nExplanation:\n\nThe only possible arrangement is shown above.",
      "images": [
        "https://assets.leetcode.com/uploads/2024/06/16/brb.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: red = 2, blue = 1\nOutput: 2\nExplanation:\nThe only possible arrangement is shown above.",
      "images": [
        "https://assets.leetcode.com/uploads/2024/06/16/br.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: red = 1, blue = 1\nOutput: 1",
      "images": []
    },
    {
      "example_num": 4,
      "example_text": "Input: red = 10, blue = 1\nOutput: 2\nExplanation:\nThe only possible arrangement is shown above.",
      "images": [
        "https://assets.leetcode.com/uploads/2024/06/16/br.png"
      ]
    }
  ],
  "constraints": [
    "1 <= red, blue <= 100"
  ],
  "follow_ups": [],
  "hints": [
    "Count the max height using both possibilities. That is, red ball as top and blue ball as top.",
    "For counting the max height, use a simple for loop and remove the number of balls required at this level."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxHeightOfTriangle(int red, int blue) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxHeightOfTriangle(int red, int blue) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxHeightOfTriangle(self, red, blue):\n        \"\"\"\n        :type red: int\n        :type blue: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxHeightOfTriangle(self, red: int, blue: int) -> int:\n        ",
    "c": "int maxHeightOfTriangle(int red, int blue) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxHeightOfTriangle(int red, int blue) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} red\n * @param {number} blue\n * @return {number}\n */\nvar maxHeightOfTriangle = function(red, blue) {\n    \n};",
    "typescript": "function maxHeightOfTriangle(red: number, blue: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $red\n     * @param Integer $blue\n     * @return Integer\n     */\n    function maxHeightOfTriangle($red, $blue) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxHeightOfTriangle(_ red: Int, _ blue: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxHeightOfTriangle(red: Int, blue: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxHeightOfTriangle(int red, int blue) {\n    \n  }\n}",
    "golang": "func maxHeightOfTriangle(red int, blue int) int {\n    \n}",
    "ruby": "# @param {Integer} red\n# @param {Integer} blue\n# @return {Integer}\ndef max_height_of_triangle(red, blue)\n    \nend",
    "scala": "object Solution {\n    def maxHeightOfTriangle(red: Int, blue: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_height_of_triangle(red: i32, blue: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-height-of-triangle red blue)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec max_height_of_triangle(Red :: integer(), Blue :: integer()) -> integer().\nmax_height_of_triangle(Red, Blue) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_height_of_triangle(red :: integer, blue :: integer) :: integer\n  def max_height_of_triangle(red, blue) do\n    \n  end\nend"
  }
}
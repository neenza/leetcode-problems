{
  "title": "Custom Sort String",
  "problem_id": "807",
  "frontend_id": "791",
  "difficulty": "Medium",
  "problem_slug": "custom-sort-string",
  "topics": [
    "Hash Table",
    "String",
    "Sorting"
  ],
  "description": "You are given two strings order and s. All the characters of order are unique and were sorted in some custom order previously.\nPermute the characters of s so that they match the order that order was sorted. More specifically, if a character x occurs before a character y in order, then x should occur before y in the permuted string.\nReturn any permutation of s that satisfies this property.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: order = \"cba\", s = \"abcd\"\nOutput: \"cbad\"\nExplanation: \"a\" , \"b\" , \"c\" appear in order, so the order of \"a\" , \"b\" , \"c\" should be \"c\" , \"b\" , and \"a\" .\nSince \"d\" does not appear in order , it can be at any position in the returned string. \"dcba\" , \"cdba\" , \"cbda\" are also valid outputs.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: order = \"bcafg\", s = \"abcd\"\nOutput: \"bcad\"\nExplanation: The characters \"b\" , \"c\" , and \"a\" from order dictate the order for the characters in s . The character \"d\" in s does not appear in order , so its position is flexible.\nFollowing the order of appearance in order , \"b\" , \"c\" , and \"a\" from s should be arranged as \"b\" , \"c\" , \"a\" . \"d\" can be placed at any position since it's not in order. The output \"bcad\" correctly follows this rule. Other arrangements like \"dbca\" or \"bcda\" would also be valid, as long as \"b\" , \"c\" , \"a\" maintain their order.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= order.length <= 26",
    "1 <= s.length <= 200",
    "order and s consist of lowercase English letters.",
    "All the characters of order are unique."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string customSortString(string order, string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public String customSortString(String order, String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def customSortString(self, order, s):\n        \"\"\"\n        :type order: str\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def customSortString(self, order: str, s: str) -> str:\n        ",
    "c": "char* customSortString(char* order, char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public string CustomSortString(string order, string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} order\n * @param {string} s\n * @return {string}\n */\nvar customSortString = function(order, s) {\n    \n};",
    "typescript": "function customSortString(order: string, s: string): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $order\n     * @param String $s\n     * @return String\n     */\n    function customSortString($order, $s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func customSortString(_ order: String, _ s: String) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun customSortString(order: String, s: String): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String customSortString(String order, String s) {\n    \n  }\n}",
    "golang": "func customSortString(order string, s string) string {\n    \n}",
    "ruby": "# @param {String} order\n# @param {String} s\n# @return {String}\ndef custom_sort_string(order, s)\n    \nend",
    "scala": "object Solution {\n    def customSortString(order: String, s: String): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn custom_sort_string(order: String, s: String) -> String {\n        \n    }\n}",
    "racket": "(define/contract (custom-sort-string order s)\n  (-> string? string? string?)\n  )",
    "erlang": "-spec custom_sort_string(Order :: unicode:unicode_binary(), S :: unicode:unicode_binary()) -> unicode:unicode_binary().\ncustom_sort_string(Order, S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec custom_sort_string(order :: String.t, s :: String.t) :: String.t\n  def custom_sort_string(order, s) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n\n---\n\n### Approach 1: Custom Comparator\n\n#### Intuition\n\nA comparator is a tool used to define (or redefine) an order between two items of the same class or data type. Most languages allow for the use of a custom comparator. This means that we can define a rule that determines how an array is sorted, and leverage built-in sort functions for custom sort. \n\nRecall that a comparator takes two values `c1` and `c2` as parameters and returns the following:\n\n1. If `c1` comes before `c2`, return a negative integer.\n2. If `c1` comes after `c2`, return a positive integer.\n3. If `c1` and `c2` are equal, return $0$.\n\nLetter `c1` should come before `c2` in the sorted order of `s` if and only if the index of `c1` in the `order` string is less than the index of `c2`. By evaluating `c1` and `c2` as integer indices, we can use subtraction to achieve a return value that abides by the three rules described above.\n\nLet's consider the following example: let `s` = \"bdadeec\" and `order` = \"edcba\". Letter \"e\" is at index $0$ in `order`, whereas letter \"b\" is at index $3$. Because $0 < 3$, \"e\" should come before \"b\" in the result string. Therefore, the return result is $0 - 3 = -3$, a negative number that adheres to the first rule listed above.\n\nTaking into account all possible relationships between pairs of letters, the result string is \"eeddcba\".\n\n#### Algorithm\n\n1. Create a character array of input string `s` to allow modification.\n2. Use the built-in sort method and define the comparator function as the difference between the index of `c1` and the index of `c2` in `order`.\n3. Concatenate the character array into a string.\n4. Return this resulting string.\n\n#### Implementation#### Complexity Analysis\n\nHere, we define $N$ as the length of string `s`, and $K$ as the length of string `order`.\n\n* Time Complexity:  $O(N \\log N)$\n\n    Sorting an array of length $N$ requires $O(N \\log N)$ time, and the indices of `order` have to be retrieved for each distinct letter, which results in an $O(N \\log N + K)$ complexity. $K$ is at most $26$, the number of unique English letters, so we can simplify the time complexity to $O(N \\log N)$.\n\n* Space Complexity:  $O(N)$ or $O(\\log ⁡N)$\n\n    Note that some extra space is used when we sort arrays in place. The space complexity of the sorting algorithm depends on the programming language.\n    - In Java, Arrays.sort() is implemented using a variant of the Quick Sort algorithm, which has a space complexity of $O( \\log N)$ for sorting two arrays. The Java solution also uses an auxiliary array of length $N$. This is the dominating term for the Java solution.\n    - In C++, the sort() function is implemented as a hybrid of Quick Sort, Heap Sort, and Insertion Sort, with a worse-case space complexity of $O(\\log ⁡N)$. This is the main space used by the C++ solution.\n\n---\n\n### Approach 2: Frequency Table and Counting\n\n#### Intuition\n\nBecause the `order` string already gives us the explicit ordering to sort all the letters, we can generate a sorted version of `s` without calling upon an $O(N \\log N)$ algorithm. Let's create a frequency table where the key equals a character `c`, and the value equals how many times `c` appears in the string `s`. Then, for each character in `order`, append the number of occurrences of that character in `s` to the resulting string. After iterating through `order`, any remaining characters in `s` can be appended to the end without disrupting the defined sorting order.\n\nLet's look at an example: consider `s` = \"leetcoded\" and `order` = \"ecolt\", and `result` is initially an empty string.\n\nFrequency Table:\n\n|character | l | e | t | c | o | d |\n|----------|---|---|---|---|---|---|\n|frequency | 1 | 3 | 1 | 1 | 1 | 2 |\n\n1. The first letter in `order` is \"e\", which appears $3$ times in `s`, so `result` = \"eee\".\n2. The second letter in `order` is \"c\", which appears $1$ times in `s`, so `result` = \"eeec\".\n3. The third letter in `order` is \"o\", which appears $1$ times in `s`, so `result` = \"eeeco\".\n4. The fourth letter in `order` is \"l\", which appears $1$ times in `s`, so `result` = \"eeecol\".\n5. The fifth letter in `order` is \"t\", which appears $1$ times in `s`, so `result` = \"eeecolt\".\n\nFinally, note that some letters in `s` could be missing in `order`, so we need to append any remaining letters to `result`. In this case, two occurrences of \"d\" need to be appended, so `result` = \"eeecoltdd\" is the final result.\n\n#### Algorithm\n\n1. Initialize a frequency table (here we use a Hashmap, but a frequency array works too).\n2. Populate the frequency table by incrementing `freq[letter]` for each letter in `s`.\n3. For each character of `order`, append to `result` the same frequency it appears in `s`.\n4. Iterate through the frequency table to find any remaining letters of `s` not in `order`, and append these letters to `result`.\n5. Return the resulting string.\n\n#### Implementation#### Complexity Analysis\n\nHere, we define $N$ as the length of string `s`, and $K$ as the length of string `order`.\n\n* Time Complexity: $O(N)$\n\n    It takes $O(N)$ time to populate the frequency table, and all other hashmap operations performed take $O(1)$ time in the average case. Building the result string also takes $O(N)$ time because each letter from `s` is appended to the result in the custom order, making the overall time complexity $O(N)$.\n\n* Space Complexity: $O(N)$\n\n    A hash map and a `result` string are created, which results in an additional space complexity of $O(N)$.\n\n---"
}
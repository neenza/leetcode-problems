{
  "title": "Minimum Moves to Make Array Complementary",
  "problem_id": "1793",
  "frontend_id": "1674",
  "difficulty": "Medium",
  "problem_slug": "minimum-moves-to-make-array-complementary",
  "topics": [
    "Array",
    "Hash Table",
    "Prefix Sum"
  ],
  "description": "You are given an integer array nums of even length n and an integer limit. In one move, you can replace any integer from nums with another integer between 1 and limit, inclusive.\nThe array nums is complementary if for all indices i (0-indexed), nums[i] + nums[n - 1 - i] equals the same number. For example, the array [1,2,3,4] is complementary because for all indices i, nums[i] + nums[n - 1 - i] = 5.\nReturn the minimum number of moves required to make nums complementary.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,4,3], limit = 4\nOutput: 1\nExplanation: In 1 move, you can change nums to [1,2,2,3] (underlined elements are changed).\nnums[0] + nums[3] = 1 + 3 = 4.\nnums[1] + nums[2] = 2 + 2 = 4.\nnums[2] + nums[1] = 2 + 2 = 4.\nnums[3] + nums[0] = 3 + 1 = 4.\nTherefore, nums[i] + nums[n-1-i] = 4 for every i, so nums is complementary.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,2,2,1], limit = 2\nOutput: 2\nExplanation: In 2 moves, you can change nums to [2,2,2,2]. You cannot change any number to 3 since 3 > limit.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,2,1,2], limit = 2\nOutput: 0\nExplanation: nums is already complementary.",
      "images": []
    }
  ],
  "constraints": [
    "n == nums.length",
    "2 <= n <= 105",
    "1 <= nums[i] <= limit <= 105",
    "n is even."
  ],
  "follow_ups": [],
  "hints": [
    "Given a target sum x, each pair of nums[i] and nums[n-1-i] would either need 0, 1, or 2 modifications.",
    "Can you find the optimal target sum x value such that the sum of modifications is minimized?",
    "Create a difference array to efficiently sum all the modifications."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minMoves(vector<int>& nums, int limit) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minMoves(int[] nums, int limit) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minMoves(self, nums, limit):\n        \"\"\"\n        :type nums: List[int]\n        :type limit: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minMoves(self, nums: List[int], limit: int) -> int:\n        ",
    "c": "int minMoves(int* nums, int numsSize, int limit) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinMoves(int[] nums, int limit) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} limit\n * @return {number}\n */\nvar minMoves = function(nums, limit) {\n    \n};",
    "typescript": "function minMoves(nums: number[], limit: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $limit\n     * @return Integer\n     */\n    function minMoves($nums, $limit) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minMoves(_ nums: [Int], _ limit: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minMoves(nums: IntArray, limit: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minMoves(List<int> nums, int limit) {\n    \n  }\n}",
    "golang": "func minMoves(nums []int, limit int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} limit\n# @return {Integer}\ndef min_moves(nums, limit)\n    \nend",
    "scala": "object Solution {\n    def minMoves(nums: Array[Int], limit: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_moves(nums: Vec<i32>, limit: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-moves nums limit)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec min_moves(Nums :: [integer()], Limit :: integer()) -> integer().\nmin_moves(Nums, Limit) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_moves(nums :: [integer], limit :: integer) :: integer\n  def min_moves(nums, limit) do\n    \n  end\nend"
  }
}
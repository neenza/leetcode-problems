{
  "title": "Rotated Digits",
  "problem_id": "804",
  "frontend_id": "788",
  "difficulty": "Medium",
  "problem_slug": "rotated-digits",
  "topics": [
    "Math",
    "Dynamic Programming"
  ],
  "description": "An integer x is a good if after rotating each digit individually by 180 degrees, we get a valid number that is different from x. Each digit must be rotated - we cannot choose to leave it alone.\nA number is valid if each digit remains a digit after rotation. For example:\nGiven an integer n, return the number of good integers in the range [1, n].\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 10\nOutput: 4\nExplanation: There are four good numbers in the range [1, 10] : 2, 5, 6, 9.\nNote that 1 and 10 are not good numbers, since they remain unchanged after rotating.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 1\nOutput: 0",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 2\nOutput: 1",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 104"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int rotatedDigits(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int rotatedDigits(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def rotatedDigits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def rotatedDigits(self, n: int) -> int:\n        ",
    "c": "int rotatedDigits(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int RotatedDigits(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar rotatedDigits = function(n) {\n    \n};",
    "typescript": "function rotatedDigits(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function rotatedDigits($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func rotatedDigits(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun rotatedDigits(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int rotatedDigits(int n) {\n    \n  }\n}",
    "golang": "func rotatedDigits(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef rotated_digits(n)\n    \nend",
    "scala": "object Solution {\n    def rotatedDigits(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn rotated_digits(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (rotated-digits n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec rotated_digits(N :: integer()) -> integer().\nrotated_digits(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec rotated_digits(n :: integer) :: integer\n  def rotated_digits(n) do\n    \n  end\nend"
  }
}
{
  "title": "Unique Paths",
  "problem_id": "62",
  "frontend_id": "62",
  "difficulty": "Medium",
  "problem_slug": "unique-paths",
  "topics": [
    "Math",
    "Dynamic Programming",
    "Combinatorics"
  ],
  "description": "There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\nGiven the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\nThe test cases are generated so that the answer will be less than or equal to 2 * 109.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: m = 3, n = 7\nOutput: 28",
      "images": [
        "https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: m = 3, n = 2\nOutput: 3\nExplanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -> Down -> Down\n2. Down -> Down -> Right\n3. Down -> Right -> Down",
      "images": [
        "https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png"
      ]
    }
  ],
  "constraints": [
    "1 <= m, n <= 100"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int uniquePaths(int m, int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int uniquePaths(int m, int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        ",
    "c": "int uniquePaths(int m, int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int UniquePaths(int m, int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar uniquePaths = function(m, n) {\n    \n};",
    "typescript": "function uniquePaths(m: number, n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @return Integer\n     */\n    function uniquePaths($m, $n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func uniquePaths(_ m: Int, _ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun uniquePaths(m: Int, n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int uniquePaths(int m, int n) {\n    \n  }\n}",
    "golang": "func uniquePaths(m int, n int) int {\n    \n}",
    "ruby": "# @param {Integer} m\n# @param {Integer} n\n# @return {Integer}\ndef unique_paths(m, n)\n    \nend",
    "scala": "object Solution {\n    def uniquePaths(m: Int, n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn unique_paths(m: i32, n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (unique-paths m n)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec unique_paths(M :: integer(), N :: integer()) -> integer().\nunique_paths(M, N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec unique_paths(m :: integer, n :: integer) :: integer\n  def unique_paths(m, n) do\n    \n  end\nend"
  }
}
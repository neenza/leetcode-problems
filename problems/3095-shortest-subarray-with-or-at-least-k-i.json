{
  "title": "Shortest Subarray With OR at Least K I",
  "problem_id": "3381",
  "frontend_id": "3095",
  "difficulty": "Easy",
  "problem_slug": "shortest-subarray-with-or-at-least-k-i",
  "topics": [
    "Array",
    "Bit Manipulation",
    "Sliding Window"
  ],
  "description": "You are given an array nums of non-negative integers and an integer k.\nAn array is called special if the bitwise OR of all of its elements is at least k.\nReturn the length of the shortest special non-empty subarray of nums, or return -1 if no special subarray exists.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,3], k = 2\nOutput: 1\nExplanation:\nThe subarray [3] has OR value of 3 . Hence, we return 1 .\nNote that [2] is also a special subarray.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [2,1,8], k = 10\nOutput: 3\nExplanation:\nThe subarray [2,1,8] has OR value of 11 . Hence, we return 3 .",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,2], k = 0\nOutput: 1\nExplanation:\nThe subarray [1] has OR value of 1 . Hence, we return 1 .",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 50",
    "0 <= nums[i] <= 50",
    "0 <= k < 64"
  ],
  "follow_ups": [],
  "hints": [
    "The constraints are small. Brute force checking all the subarrays."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimumSubarrayLength(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimumSubarrayLength(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumSubarrayLength(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumSubarrayLength(self, nums: List[int], k: int) -> int:\n        ",
    "c": "int minimumSubarrayLength(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimumSubarrayLength(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minimumSubarrayLength = function(nums, k) {\n    \n};",
    "typescript": "function minimumSubarrayLength(nums: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumSubarrayLength($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumSubarrayLength(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumSubarrayLength(nums: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumSubarrayLength(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func minimumSubarrayLength(nums []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef minimum_subarray_length(nums, k)\n    \nend",
    "scala": "object Solution {\n    def minimumSubarrayLength(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_subarray_length(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-subarray-length nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec minimum_subarray_length(Nums :: [integer()], K :: integer()) -> integer().\nminimum_subarray_length(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_subarray_length(nums :: [integer], k :: integer) :: integer\n  def minimum_subarray_length(nums, k) do\n    \n  end\nend"
  }
}
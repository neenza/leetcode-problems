{
  "title": "Earliest Second to Mark Indices I",
  "problem_id": "3292",
  "frontend_id": "3048",
  "difficulty": "Medium",
  "problem_slug": "earliest-second-to-mark-indices-i",
  "topics": [
    "Array",
    "Binary Search"
  ],
  "description": "You are given two 1-indexed integer arrays, nums and, changeIndices, having lengths n and m, respectively.\nInitially, all indices in nums are unmarked. Your task is to mark all indices in nums.\nIn each second, s, in order from 1 to m (inclusive), you can perform one of the following operations:\nReturn an integer denoting the earliest second in the range [1, m] when all indices in nums can be marked by choosing operations optimally, or -1 if it is impossible.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [2,2,0], changeIndices = [2,2,2,2,3,2,2,1]\nOutput: 8\nExplanation: In this example, we have 8 seconds. The following operations can be performed to mark all indices:\nSecond 1: Choose index 1 and decrement nums[1] by one. nums becomes [1,2,0].\nSecond 2: Choose index 1 and decrement nums[1] by one. nums becomes [0,2,0].\nSecond 3: Choose index 2 and decrement nums[2] by one. nums becomes [0,1,0].\nSecond 4: Choose index 2 and decrement nums[2] by one. nums becomes [0,0,0].\nSecond 5: Mark the index changeIndices[5], which is marking index 3, since nums[3] is equal to 0.\nSecond 6: Mark the index changeIndices[6], which is marking index 2, since nums[2] is equal to 0.\nSecond 7: Do nothing.\nSecond 8: Mark the index changeIndices[8], which is marking index 1, since nums[1] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 8th second.\nHence, the answer is 8.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,3], changeIndices = [1,1,1,2,1,1,1]\nOutput: 6\nExplanation: In this example, we have 7 seconds. The following operations can be performed to mark all indices:\nSecond 1: Choose index 2 and decrement nums[2] by one. nums becomes [1,2].\nSecond 2: Choose index 2 and decrement nums[2] by one. nums becomes [1,1].\nSecond 3: Choose index 2 and decrement nums[2] by one. nums becomes [1,0].\nSecond 4: Mark the index changeIndices[4], which is marking index 2, since nums[2] is equal to 0.\nSecond 5: Choose index 1 and decrement nums[1] by one. nums becomes [0,0].\nSecond 6: Mark the index changeIndices[6], which is marking index 1, since nums[1] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 6th second.\nHence, the answer is 6.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [0,1], changeIndices = [2,2,2]\nOutput: -1\nExplanation: In this example, it is impossible to mark all indices because index 1 isn't in changeIndices.\nHence, the answer is -1.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n == nums.length <= 2000",
    "0 <= nums[i] <= 109",
    "1 <= m == changeIndices.length <= 2000",
    "1 <= changeIndices[i] <= n"
  ],
  "follow_ups": [],
  "hints": [
    "Consider using binary search.",
    "Suppose the <code>answer <= x</code>; we can mark each index as late as possible. Namely, mark each index at the last occurrence in the array <code>changeIndices[1..x]</code>.",
    "When marking an index, which is the last occurrence at the second <code>i</code>, we check whether we have a sufficient number of decrement operations to mark all the previous indices whose last occurrences have already been marked, and the current index, i.e., <code>i - sum_of_marked_indices_values - cnt_of_marked_indices >= nums[changeIndices[i]]</code>.",
    "The answer is the earliest second when all indices can be marked after running the binary search or <code>-1</code> if there is no such second."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int earliestSecondToMarkIndices(vector<int>& nums, vector<int>& changeIndices) {\n        \n    }\n};",
    "java": "class Solution {\n    public int earliestSecondToMarkIndices(int[] nums, int[] changeIndices) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def earliestSecondToMarkIndices(self, nums, changeIndices):\n        \"\"\"\n        :type nums: List[int]\n        :type changeIndices: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def earliestSecondToMarkIndices(self, nums: List[int], changeIndices: List[int]) -> int:\n        ",
    "c": "int earliestSecondToMarkIndices(int* nums, int numsSize, int* changeIndices, int changeIndicesSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int EarliestSecondToMarkIndices(int[] nums, int[] changeIndices) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number[]} changeIndices\n * @return {number}\n */\nvar earliestSecondToMarkIndices = function(nums, changeIndices) {\n    \n};",
    "typescript": "function earliestSecondToMarkIndices(nums: number[], changeIndices: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $changeIndices\n     * @return Integer\n     */\n    function earliestSecondToMarkIndices($nums, $changeIndices) {\n        \n    }\n}",
    "swift": "class Solution {\n    func earliestSecondToMarkIndices(_ nums: [Int], _ changeIndices: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun earliestSecondToMarkIndices(nums: IntArray, changeIndices: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int earliestSecondToMarkIndices(List<int> nums, List<int> changeIndices) {\n    \n  }\n}",
    "golang": "func earliestSecondToMarkIndices(nums []int, changeIndices []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer[]} change_indices\n# @return {Integer}\ndef earliest_second_to_mark_indices(nums, change_indices)\n    \nend",
    "scala": "object Solution {\n    def earliestSecondToMarkIndices(nums: Array[Int], changeIndices: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn earliest_second_to_mark_indices(nums: Vec<i32>, change_indices: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (earliest-second-to-mark-indices nums changeIndices)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec earliest_second_to_mark_indices(Nums :: [integer()], ChangeIndices :: [integer()]) -> integer().\nearliest_second_to_mark_indices(Nums, ChangeIndices) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec earliest_second_to_mark_indices(nums :: [integer], change_indices :: [integer]) :: integer\n  def earliest_second_to_mark_indices(nums, change_indices) do\n    \n  end\nend"
  }
}
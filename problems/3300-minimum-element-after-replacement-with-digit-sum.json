{
  "title": "Minimum Element After Replacement With Digit Sum",
  "problem_id": "3606",
  "frontend_id": "3300",
  "difficulty": "Easy",
  "problem_slug": "minimum-element-after-replacement-with-digit-sum",
  "topics": [
    "Array",
    "Math"
  ],
  "description": "You are given an integer array nums.\nYou replace each element in nums with the sum of its digits.\nReturn the minimum element in nums after all replacements.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [10,12,13,14]\nOutput: 1\nExplanation:\nnums becomes [1, 3, 4, 5] after all replacements, with minimum element 1.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,2,3,4]\nOutput: 1\nExplanation:\nnums becomes [1, 2, 3, 4] after all replacements, with minimum element 1.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [999,19,199]\nOutput: 10\nExplanation:\nnums becomes [27, 10, 19] after all replacements, with minimum element 10.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 100",
    "1 <= nums[i] <= 104"
  ],
  "follow_ups": [],
  "hints": [
    "Convert to string and calculate the sum for each element."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minElement(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minElement(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minElement(self, nums: List[int]) -> int:\n        ",
    "c": "int minElement(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinElement(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minElement = function(nums) {\n    \n};",
    "typescript": "function minElement(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minElement($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minElement(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minElement(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minElement(List<int> nums) {\n    \n  }\n}",
    "golang": "func minElement(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef min_element(nums)\n    \nend",
    "scala": "object Solution {\n    def minElement(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_element(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-element nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec min_element(Nums :: [integer()]) -> integer().\nmin_element(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_element(nums :: [integer]) :: integer\n  def min_element(nums) do\n    \n  end\nend"
  }
}
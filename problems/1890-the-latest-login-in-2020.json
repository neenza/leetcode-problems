{
  "title": "The Latest Login in 2020",
  "problem_id": "2041",
  "frontend_id": "1890",
  "difficulty": "Easy",
  "problem_slug": "the-latest-login-in-2020",
  "topics": [
    "Database"
  ],
  "description": "Table: Logins\nWrite a solution to report the latest login for all users in the year 2020. Do not include the users who did not login in 2020.\nReturn the result table in any order.\nThe result format is in the following example.\nExample 1:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "+----------------+----------+\n| Column Name    | Type     |\n+----------------+----------+\n| user_id        | int      |\n| time_stamp     | datetime |\n+----------------+----------+\n(user_id, time_stamp) is the primary key (combination of columns with unique values) for this table.\nEach row contains information about the login time for the user with ID user_id.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: \nLogins table:\n+---------+---------------------+\n| user_id | time_stamp          |\n+---------+---------------------+\n| 6       | 2020-06-30 15:06:07 |\n| 6       | 2021-04-21 14:06:06 |\n| 6       | 2019-03-07 00:18:15 |\n| 8       | 2020-02-01 05:10:53 |\n| 8       | 2020-12-30 00:46:50 |\n| 2       | 2020-01-16 02:49:50 |\n| 2       | 2019-08-25 07:59:08 |\n| 14      | 2019-07-14 09:00:00 |\n| 14      | 2021-01-06 11:59:59 |\n+---------+---------------------+\nOutput: \n+---------+---------------------+\n| user_id | last_stamp          |\n+---------+---------------------+\n| 6       | 2020-06-30 15:06:07 |\n| 8       | 2020-12-30 00:46:50 |\n| 2       | 2020-01-16 02:49:50 |\n+---------+---------------------+\nExplanation: \nUser 6 logged into their account 3 times but only once in 2020, so we include this login in the result table.\nUser 8 logged into their account 2 times in 2020, once in February and once in December. We include only the latest one (December) in the result table.\nUser 2 logged into their account 2 times but only once in 2020, so we include this login in the result table.\nUser 14 did not login in 2020, so we do not include them in the result table.",
      "images": []
    }
  ],
  "constraints": [],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "mysql": "# Write your MySQL query statement below\n",
    "mssql": "/* Write your T-SQL query statement below */\n",
    "oraclesql": "/* Write your PL/SQL query statement below */\n",
    "pythondata": "import pandas as pd\n\ndef latest_login(logins: pd.DataFrame) -> pd.DataFrame:\n    ",
    "postgresql": "-- Write your PostgreSQL query statement below\n"
  },
  "solution": "[TOC]\n\n## Solution\n\n--- \n\n### Overview\n\nThe two conditions needed to get the final result are : \n1. find all records in the year 2020 \n2. from these records, identify the latest record for each user\n\nFor condition 1, there are two commonly used functions to get the year from a date:\n\n1. [YEAR(date)](https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_year)\n2. [EXTRACT(unit from date)](https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_extract): this function can extract different units (e.g. year, month, week) from a date\n\nFor condition 2, there are two methods to get the latest record: \n1. [MAX(expr)](https://dev.mysql.com/doc/refman/5.7/en/aggregate-functions.html#function_max): this function returns the maximum value of `expr`, and the MAX(time_stamp) returns the latest login time\n2. [FIRST_VALUE(expr)](https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html#function_first-value): this window function returns the value of `expr` from the first row of the window frame; if the column `time_stamp` is sorted in descending order,  the FIRST_VALUE(time_stamp) also returns the latest login time\n\n---\n\n### Approach 1: Using YEAR() to extract year from the date column and MAX() to find the latest record \n\n#### Algorithm\n1. Select the columns needed for the final output\n2. Add condition 1 using YEAR() to select all records with a timestamp in the year 2020 \n3. Add condition 2 using MAX() to get the latest record for each user from the previous step\n4. Group the result by user_id to get the distinct record for each user_id \n\n##### MySQL\n\n```sql\nSELECT \n    user_id, \n    MAX(time_stamp) AS last_stamp\nFROM \n    Logins\nWHERE \n    YEAR(time_stamp) = 2020\nGROUP BY 1;\n```\n---\n\n### Approach 2: Using EXTRACT() to get year from the date column and FIRST_VALUE() to find the latest record \n\n#### Algorithm\n1. Select the columns needed for the final output\n2. Add condition 1 using EXTRACT() to select all records with a timestamp in the year 2020 \n3. Add condition 2 using FIRST_VALUE() to get the latest record for each user from the previous step; the date column is sorted in descending order to make sure the first record is the latest record in 2020\n4. Because window function returns non-aggregate results,  DISTINCT is needed for this approach to make sure users with multiple records in 2020 will return only one record\n\n```sql\nSELECT\n    DISTINCT user_id,\n    FIRST_VALUE(time_stamp)OVER(PARTITION BY user_id ORDER BY time_stamp DESC) AS last_stamp\nFROM\n    Logins\nWHERE EXTRACT(Year FROM time_stamp) = 2020;\n```\n\n---"
}
{
  "title": "Power Grid Maintenance",
  "problem_id": "3863",
  "frontend_id": "3607",
  "difficulty": "Medium",
  "problem_slug": "power-grid-maintenance",
  "topics": [
    "Array",
    "Hash Table",
    "Depth-First Search",
    "Breadth-First Search",
    "Union Find",
    "Graph",
    "Heap (Priority Queue)",
    "Ordered Set"
  ],
  "description": "You are given an integer c representing c power stations, each with a unique identifier id from 1 to c (1‑based indexing).\nThese stations are interconnected via n bidirectional cables, represented by a 2D array connections, where each element connections[i] = [ui, vi] indicates a connection between station ui and station vi. Stations that are directly or indirectly connected form a power grid.\nInitially, all stations are online (operational).\nYou are also given a 2D array queries, where each query is one of the following two types:\nReturn an array of integers representing the results of each query of type [1, x] in the order they appear.\nNote: The power grid preserves its structure; an offline (non‑operational) node remains part of its grid and taking it offline does not alter connectivity.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: c = 5, connections = [[1,2],[2,3],[3,4],[4,5]], queries = [[1,3],[2,1],[1,1],[2,2],[1,2]]\nOutput: [3,2,3]\nExplanation:\n",
      "images": [
        "https://assets.leetcode.com/uploads/2025/04/15/powergrid.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: c = 3, connections = [], queries = [[1,1],[2,1],[1,1]]\nOutput: [1,-1]\nExplanation:",
      "images": []
    }
  ],
  "constraints": [
    "1 <= c <= 105",
    "0 <= n == connections.length <= min(105, c * (c - 1) / 2)",
    "connections[i].length == 2",
    "1 <= ui, vi <= c",
    "ui != vi",
    "1 <= queries.length <= 2 * 105",
    "queries[i].length == 2",
    "queries[i][0] is either 1 or 2.",
    "1 <= queries[i][1] <= c"
  ],
  "follow_ups": [],
  "hints": [
    "Use DFS or BFS to assign each station a component ID",
    "For each component, maintain a sorted set of online station IDs",
    "For query <code>[2, x]</code>, remove <code>x</code> from the set of its component",
    "For query <code>[1, x]</code>, if <code>x</code> is in its component’s set return <code>x</code>; otherwise if the set is non-empty return its smallest element; else return <code>-1</code>",
    "Precompute all components and then handle each query in O(log n) time using the sorted sets"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> processQueries(int c, vector<vector<int>>& connections, vector<vector<int>>& queries) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] processQueries(int c, int[][] connections, int[][] queries) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def processQueries(self, c, connections, queries):\n        \"\"\"\n        :type c: int\n        :type connections: List[List[int]]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def processQueries(self, c: int, connections: List[List[int]], queries: List[List[int]]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* processQueries(int c, int** connections, int connectionsSize, int* connectionsColSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] ProcessQueries(int c, int[][] connections, int[][] queries) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} c\n * @param {number[][]} connections\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar processQueries = function(c, connections, queries) {\n    \n};",
    "typescript": "function processQueries(c: number, connections: number[][], queries: number[][]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $c\n     * @param Integer[][] $connections\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function processQueries($c, $connections, $queries) {\n        \n    }\n}",
    "swift": "class Solution {\n    func processQueries(_ c: Int, _ connections: [[Int]], _ queries: [[Int]]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun processQueries(c: Int, connections: Array<IntArray>, queries: Array<IntArray>): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> processQueries(int c, List<List<int>> connections, List<List<int>> queries) {\n    \n  }\n}",
    "golang": "func processQueries(c int, connections [][]int, queries [][]int) []int {\n    \n}",
    "ruby": "# @param {Integer} c\n# @param {Integer[][]} connections\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef process_queries(c, connections, queries)\n    \nend",
    "scala": "object Solution {\n    def processQueries(c: Int, connections: Array[Array[Int]], queries: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn process_queries(c: i32, connections: Vec<Vec<i32>>, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (process-queries c connections queries)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof (listof exact-integer?)) (listof exact-integer?))\n  )",
    "erlang": "-spec process_queries(C :: integer(), Connections :: [[integer()]], Queries :: [[integer()]]) -> [integer()].\nprocess_queries(C, Connections, Queries) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec process_queries(c :: integer, connections :: [[integer]], queries :: [[integer]]) :: [integer]\n  def process_queries(c, connections, queries) do\n    \n  end\nend"
  }
}
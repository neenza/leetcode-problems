{
  "title": "Partition Array Such That Maximum Difference Is K",
  "problem_id": "2387",
  "frontend_id": "2294",
  "difficulty": "Medium",
  "problem_slug": "partition-array-such-that-maximum-difference-is-k",
  "topics": [
    "Array",
    "Greedy",
    "Sorting"
  ],
  "description": "You are given an integer array nums and an integer k. You may partition nums into one or more subsequences such that each element in nums appears in exactly one of the subsequences.\nReturn the minimum number of subsequences needed such that the difference between the maximum and minimum values in each subsequence is at most k.\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [3,6,1,2,5], k = 2\nOutput: 2\nExplanation:\nWe can partition nums into the two subsequences [3,1,2] and [6,5].\nThe difference between the maximum and minimum value in the first subsequence is 3 - 1 = 2.\nThe difference between the maximum and minimum value in the second subsequence is 6 - 5 = 1.\nSince two subsequences were created, we return 2. It can be shown that 2 is the minimum number of subsequences needed.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,2,3], k = 1\nOutput: 2\nExplanation:\nWe can partition nums into the two subsequences [1,2] and [3].\nThe difference between the maximum and minimum value in the first subsequence is 2 - 1 = 1.\nThe difference between the maximum and minimum value in the second subsequence is 3 - 3 = 0.\nSince two subsequences were created, we return 2. Note that another optimal solution is to partition nums into the two subsequences [1] and [2,3].",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [2,2,4,5], k = 0\nOutput: 3\nExplanation:\nWe can partition nums into the three subsequences [2,2], [4], and [5].\nThe difference between the maximum and minimum value in the first subsequences is 2 - 2 = 0.\nThe difference between the maximum and minimum value in the second subsequences is 4 - 4 = 0.\nThe difference between the maximum and minimum value in the third subsequences is 5 - 5 = 0.\nSince three subsequences were created, we return 3. It can be shown that 3 is the minimum number of subsequences needed.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "0 <= nums[i] <= 105",
    "0 <= k <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "Which values in each subsequence matter? The only values that matter are the maximum and minimum values.",
    "Let the maximum and minimum values of a subsequence be Max and Min. It is optimal to place all values in between Max and Min in the original array in the same subsequence as Max and Min.",
    "Sort the array."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int partitionArray(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int partitionArray(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def partitionArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def partitionArray(self, nums: List[int], k: int) -> int:\n        ",
    "c": "int partitionArray(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int PartitionArray(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar partitionArray = function(nums, k) {\n    \n};",
    "typescript": "function partitionArray(nums: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function partitionArray($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func partitionArray(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun partitionArray(nums: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int partitionArray(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func partitionArray(nums []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef partition_array(nums, k)\n    \nend",
    "scala": "object Solution {\n    def partitionArray(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn partition_array(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (partition-array nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec partition_array(Nums :: [integer()], K :: integer()) -> integer().\npartition_array(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec partition_array(nums :: [integer], k :: integer) :: integer\n  def partition_array(nums, k) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n\n---\n\n### Approach: Sort + Greedy\n\n#### Intuition\n\nThe task requires us to group the numbers in the $\\textit{nums}$ array such that the difference between the minimum and maximum values in each group is no more than $k$, and the total number of groups is minimized.\n\nWe can consider a greedy approach here: for each group, we include as many numbers as possible. Since the order of elements does not affect the grouping, we can sort the array first. Then, we traverse the array $\\textit{nums}$ and start a new group whenever necessary. We record the minimum value $\\textit{rec}$ of the current group. As we iterate, if the current element $\\textit{nums}[i]$ satisfies $\\textit{nums}[i] - \\textit{rec} > k$, it means a new group must be started.\n\nThe correctness of this greedy strategy can be explained as follows:\n\n1. Suppose the minimum value of a group is $\\textit{start}$. Then, the valid range for that group is $[\\textit{start}, \\textit{start} + k]$. Since we add all elements within this range to the current group, removing any of them wouldn't reduce the number of groupsâ€”it would either stay the same or increase. Thus, including all such elements in a group ensures we use the fewest groups possible.\n2. According to our strategy, we start a new group only when an element exceeds $\\textit{start} + k$. This guarantees that no element is counted in more than one group. If there were overlap between two groups, the overlapping elements could be moved to the first group, which would increase the second group's minimum value and its upper bound, possibly allowing more elements to be grouped together. This either reduces or maintains the number of groups, proving the greedy method does not produce a worse result.\n\n#### Implementation#### Complexity analysis\n\nLet $n$ be the length of the array $\\textit{nums}$.\n\n- Time complexity: $O(n \\log n)$.\n  \n  We sort the array $\\textit{nums}$ in $O(n \\log n)$ time. Then, we traverse the sorted array once, which takes $O(n)$ time. Therefore, the overall time complexity is $O(n \\log n)$.\n\n- Space complexity: $O(S_n)$.\n  \n  The space complexity is determined by the space needed by our sorting algorithm to sort `nums`. This space complexity ($S$) depends on the language of implementation. Given input size $n$:\n\n  In Java, `Arrays.sort()` is implemented using a variant of the Quick Sort algorithm which has a space complexity of $O( \\log n)$.\n  In C++, the `sort()` function is implemented as a hybrid of Quick Sort, Heap Sort, and Insertion Sort, with a worst-case space complexity of $O(\\log n)$.\n  In Python, the `sort()` method sorts a list using the Timsort algorithm which is a combination of Merge Sort and Insertion Sort and has a space complexity of $O(n)$."
}
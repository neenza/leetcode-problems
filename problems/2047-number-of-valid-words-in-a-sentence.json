{
  "title": "Number of Valid Words in a Sentence",
  "problem_id": "2173",
  "frontend_id": "2047",
  "difficulty": "Easy",
  "problem_slug": "number-of-valid-words-in-a-sentence",
  "topics": [
    "String"
  ],
  "description": "A sentence consists of lowercase letters ('a' to 'z'), digits ('0' to '9'), hyphens ('-'), punctuation marks ('!', '.', and ','), and spaces (' ') only. Each sentence can be broken down into one or more tokens separated by one or more spaces ' '.\nA token is a valid word if all three of the following are true:\nExamples of valid words include \"a-b.\", \"afad\", \"ba-c\", \"a!\", and \"!\".\nGiven a string sentence, return the number of valid words in sentence.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: sentence = \"cat and  dog\"\nOutput: 3\nExplanation: The valid words in the sentence are \"cat\", \"and\", and \"dog\".",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: sentence = \"!this  1-s b8d!\"\nOutput: 0\nExplanation: There are no valid words in the sentence.\n\"!this\" is invalid because it starts with a punctuation mark.\n\"1-s\" and \"b8d\" are invalid because they contain digits.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: sentence = \"alice and  bob are playing stone-game10\"\nOutput: 5\nExplanation: The valid words in the sentence are \"alice\", \"and\", \"bob\", \"are\", and \"playing\".\n\"stone-game10\" is invalid because it contains digits.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= sentence.length <= 1000",
    "sentence only contains lowercase English letters, digits, ' ', '-', '!', '.', and ','.",
    "There will be at leastÂ 1 token."
  ],
  "follow_ups": [],
  "hints": [
    "Iterate through the string to split it by spaces.",
    "Count the number of characters of each type (letters, numbers, hyphens, and punctuations)."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int countValidWords(string sentence) {\n        \n    }\n};",
    "java": "class Solution {\n    public int countValidWords(String sentence) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countValidWords(self, sentence):\n        \"\"\"\n        :type sentence: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countValidWords(self, sentence: str) -> int:\n        ",
    "c": "int countValidWords(char* sentence) {\n    \n}",
    "csharp": "public class Solution {\n    public int CountValidWords(string sentence) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} sentence\n * @return {number}\n */\nvar countValidWords = function(sentence) {\n    \n};",
    "typescript": "function countValidWords(sentence: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $sentence\n     * @return Integer\n     */\n    function countValidWords($sentence) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countValidWords(_ sentence: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countValidWords(sentence: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int countValidWords(String sentence) {\n    \n  }\n}",
    "golang": "func countValidWords(sentence string) int {\n    \n}",
    "ruby": "# @param {String} sentence\n# @return {Integer}\ndef count_valid_words(sentence)\n    \nend",
    "scala": "object Solution {\n    def countValidWords(sentence: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_valid_words(sentence: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (count-valid-words sentence)\n  (-> string? exact-integer?)\n  )",
    "erlang": "-spec count_valid_words(Sentence :: unicode:unicode_binary()) -> integer().\ncount_valid_words(Sentence) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_valid_words(sentence :: String.t) :: integer\n  def count_valid_words(sentence) do\n    \n  end\nend"
  }
}
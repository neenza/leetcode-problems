{
  "title": "Find Number of Ways to Reach the K-th Stair",
  "problem_id": "3414",
  "frontend_id": "3154",
  "difficulty": "Hard",
  "problem_slug": "find-number-of-ways-to-reach-the-k-th-stair",
  "topics": [
    "Math",
    "Dynamic Programming",
    "Bit Manipulation",
    "Memoization",
    "Combinatorics"
  ],
  "description": "You are given a non-negative integer k. There exists a staircase with an infinite number of stairs, with the lowest stair numbered 0.\nAlice has an integer jump, with an initial value of 0. She starts on stair 1 and wants to reach stair k using any number of operations. If she is on stair i, in one operation she can:\nReturn the total number of ways Alice can reach stair k.\nNote that it is possible that Alice reaches the stair k, and performs some operations to reach the stair k again.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: k = 0\nOutput: 2\nExplanation:\nThe 2 possible ways of reaching stair 0 are:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: k = 1\nOutput: 4\nExplanation:\nThe 4 possible ways of reaching stair 1 are:",
      "images": []
    }
  ],
  "constraints": [
    "0 <= k <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "On using <code>x</code> operations of the second type and <code>y</code> operations of the first type, the stair <code>2<sup>x</sup> - y</code> is reached.",
    "Since first operations cannot be consecutive, there are exactly <code>x + 1</code> positions (before and after each power of 2) to perform the second operation.",
    "Using combinatorics, we have <sup>x + 1</sup>C<sub>y</sub> number of ways to select the positions of second operations."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int waysToReachStair(int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int waysToReachStair(int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def waysToReachStair(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def waysToReachStair(self, k: int) -> int:\n        ",
    "c": "int waysToReachStair(int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int WaysToReachStair(int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} k\n * @return {number}\n */\nvar waysToReachStair = function(k) {\n    \n};",
    "typescript": "function waysToReachStair(k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @return Integer\n     */\n    function waysToReachStair($k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func waysToReachStair(_ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun waysToReachStair(k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int waysToReachStair(int k) {\n    \n  }\n}",
    "golang": "func waysToReachStair(k int) int {\n    \n}",
    "ruby": "# @param {Integer} k\n# @return {Integer}\ndef ways_to_reach_stair(k)\n    \nend",
    "scala": "object Solution {\n    def waysToReachStair(k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn ways_to_reach_stair(k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (ways-to-reach-stair k)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec ways_to_reach_stair(K :: integer()) -> integer().\nways_to_reach_stair(K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec ways_to_reach_stair(k :: integer) :: integer\n  def ways_to_reach_stair(k) do\n    \n  end\nend"
  }
}
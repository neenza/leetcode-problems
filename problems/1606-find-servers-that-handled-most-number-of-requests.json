{
  "title": "Find Servers That Handled Most Number of Requests",
  "problem_id": "1710",
  "frontend_id": "1606",
  "difficulty": "Hard",
  "problem_slug": "find-servers-that-handled-most-number-of-requests",
  "topics": [
    "Array",
    "Greedy",
    "Heap (Priority Queue)",
    "Ordered Set"
  ],
  "description": "You have k servers numbered from 0 to k-1 that are being used to handle multiple requests simultaneously. Each server has infinite computational capacity but cannot handle more than one request at a time. The requests are assigned to servers according to a specific algorithm:\nYou are given a strictly increasing array arrival of positive integers, where arrival[i] represents the arrival time of the ith request, and another array load, where load[i] represents the load of the ith request (the time it takes to complete). Your goal is to find the busiest server(s). A server is considered busiest if it handled the most number of requests successfully among all the servers.\nReturn a list containing the IDs (0-indexed) of the busiest server(s). You may return the IDs in any order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3] \nOutput: [1] \nExplanation: \nAll of the servers start out available.\nThe first 3 requests are handled by the first 3 servers in order.\nRequest 3 comes in. Server 0 is busy, so it's assigned to the next available server, which is 1.\nRequest 4 comes in. It cannot be handled since all servers are busy, so it is dropped.\nServers 0 and 2 handled one request each, while server 1 handled two requests. Hence server 1 is the busiest server.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/09/08/load-1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: k = 3, arrival = [1,2,3,4], load = [1,2,1,2]\nOutput: [0]\nExplanation: \nThe first 3 requests are handled by first 3 servers.\nRequest 3 comes in. It is handled by server 0 since the server is available.\nServer 0 handled two requests, while servers 1 and 2 handled one request each. Hence server 0 is the busiest server.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/09/08/load-1.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: k = 3, arrival = [1,2,3], load = [10,12,11]\nOutput: [0,1,2]\nExplanation: Each server handles a single request, so they are all considered the busiest.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/09/08/load-1.png"
      ]
    }
  ],
  "constraints": [
    "1 <= k <= 105",
    "1 <= arrival.length, load.length <= 105",
    "arrival.length == load.length",
    "1 <= arrival[i], load[i] <= 109",
    "arrival is strictly increasing."
  ],
  "follow_ups": [],
  "hints": [
    "To speed up the next available server search, keep track of the available servers in a sorted structure such as an ordered set.",
    "To determine if a server is available, keep track of the end times for each task in a heap and add the server to the available set once the soonest task ending time is less than or equal to the next task to add."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> busiestServers(int k, vector<int>& arrival, vector<int>& load) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<Integer> busiestServers(int k, int[] arrival, int[] load) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def busiestServers(self, k, arrival, load):\n        \"\"\"\n        :type k: int\n        :type arrival: List[int]\n        :type load: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def busiestServers(self, k: int, arrival: List[int], load: List[int]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* busiestServers(int k, int* arrival, int arrivalSize, int* load, int loadSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<int> BusiestServers(int k, int[] arrival, int[] load) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} k\n * @param {number[]} arrival\n * @param {number[]} load\n * @return {number[]}\n */\nvar busiestServers = function(k, arrival, load) {\n    \n};",
    "typescript": "function busiestServers(k: number, arrival: number[], load: number[]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @param Integer[] $arrival\n     * @param Integer[] $load\n     * @return Integer[]\n     */\n    function busiestServers($k, $arrival, $load) {\n        \n    }\n}",
    "swift": "class Solution {\n    func busiestServers(_ k: Int, _ arrival: [Int], _ load: [Int]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun busiestServers(k: Int, arrival: IntArray, load: IntArray): List<Int> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> busiestServers(int k, List<int> arrival, List<int> load) {\n    \n  }\n}",
    "golang": "func busiestServers(k int, arrival []int, load []int) []int {\n    \n}",
    "ruby": "# @param {Integer} k\n# @param {Integer[]} arrival\n# @param {Integer[]} load\n# @return {Integer[]}\ndef busiest_servers(k, arrival, load)\n    \nend",
    "scala": "object Solution {\n    def busiestServers(k: Int, arrival: Array[Int], load: Array[Int]): List[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn busiest_servers(k: i32, arrival: Vec<i32>, load: Vec<i32>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (busiest-servers k arrival load)\n  (-> exact-integer? (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  )",
    "erlang": "-spec busiest_servers(K :: integer(), Arrival :: [integer()], Load :: [integer()]) -> [integer()].\nbusiest_servers(K, Arrival, Load) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec busiest_servers(k :: integer, arrival :: [integer], load :: [integer]) :: [integer]\n  def busiest_servers(k, arrival, load) do\n    \n  end\nend"
  }
}
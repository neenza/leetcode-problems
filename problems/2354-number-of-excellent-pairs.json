{
  "title": "Number of Excellent Pairs",
  "problem_id": "2430",
  "frontend_id": "2354",
  "difficulty": "Hard",
  "problem_slug": "number-of-excellent-pairs",
  "topics": [
    "Array",
    "Hash Table",
    "Binary Search",
    "Bit Manipulation"
  ],
  "description": "You are given a 0-indexed positive integer array nums and a positive integer k.\nA pair of numbers (num1, num2) is called excellent if the following conditions are satisfied:\nReturn the number of distinct excellent pairs.\nTwo pairs (a, b) and (c, d) are considered distinct if either a != c or b != d. For example, (1, 2) and (2, 1) are distinct.\nNote that a pair (num1, num2) such that num1 == num2 can also be excellent if you have at least one occurrence of num1 in the array.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,3,1], k = 3\nOutput: 5\nExplanation: The excellent pairs are the following:\n- (3, 3). (3 AND 3) and (3 OR 3) are both equal to (11) in binary. The total number of set bits is 2 + 2 = 4, which is greater than or equal to k = 3.\n- (2, 3) and (3, 2). (2 AND 3) is equal to (10) in binary, and (2 OR 3) is equal to (11) in binary. The total number of set bits is 1 + 2 = 3.\n- (1, 3) and (3, 1). (1 AND 3) is equal to (01) in binary, and (1 OR 3) is equal to (11) in binary. The total number of set bits is 1 + 2 = 3.\nSo the number of excellent pairs is 5.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [5,1,1], k = 10\nOutput: 0\nExplanation: There are no excellent pairs for this array.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "1 <= nums[i] <= 109",
    "1 <= k <= 60"
  ],
  "follow_ups": [],
  "hints": [
    "Can you find a different way to describe the second condition?",
    "The sum of the number of set bits in (num1 OR num2) and (num1 AND num2) is equal to the sum of the number of set bits in num1 and num2."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long countExcellentPairs(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public long countExcellentPairs(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countExcellentPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countExcellentPairs(self, nums: List[int], k: int) -> int:\n        ",
    "c": "long long countExcellentPairs(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public long CountExcellentPairs(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar countExcellentPairs = function(nums, k) {\n    \n};",
    "typescript": "function countExcellentPairs(nums: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function countExcellentPairs($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countExcellentPairs(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countExcellentPairs(nums: IntArray, k: Int): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int countExcellentPairs(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func countExcellentPairs(nums []int, k int) int64 {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef count_excellent_pairs(nums, k)\n    \nend",
    "scala": "object Solution {\n    def countExcellentPairs(nums: Array[Int], k: Int): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_excellent_pairs(nums: Vec<i32>, k: i32) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (count-excellent-pairs nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec count_excellent_pairs(Nums :: [integer()], K :: integer()) -> integer().\ncount_excellent_pairs(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_excellent_pairs(nums :: [integer], k :: integer) :: integer\n  def count_excellent_pairs(nums, k) do\n    \n  end\nend"
  }
}
{
  "title": "Two City Scheduling",
  "problem_id": "1095",
  "frontend_id": "1029",
  "difficulty": "Medium",
  "problem_slug": "two-city-scheduling",
  "topics": [
    "Array",
    "Greedy",
    "Sorting"
  ],
  "description": "A company is planning to interview 2n people. Given the array costs where costs[i] = [aCosti, bCosti],Â the cost of flying the ith person to city a is aCosti, and the cost of flying the ith person to city b is bCosti.\nReturn the minimum cost to fly every person to a city such that exactly n people arrive in each city.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: costs = [[10,20],[30,200],[400,50],[30,20]]\nOutput: 110\nExplanation: \nThe first person goes to city A for a cost of 10.\nThe second person goes to city A for a cost of 30.\nThe third person goes to city B for a cost of 50.\nThe fourth person goes to city B for a cost of 20.\n\nThe total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]\nOutput: 1859",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]\nOutput: 3086",
      "images": []
    }
  ],
  "constraints": [
    "2 * n == costs.length",
    "2 <= costs.length <= 100",
    "costs.length is even.",
    "1 <= aCosti, bCosti <= 1000"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int twoCitySchedCost(vector<vector<int>>& costs) {\n        \n    }\n};",
    "java": "class Solution {\n    public int twoCitySchedCost(int[][] costs) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def twoCitySchedCost(self, costs):\n        \"\"\"\n        :type costs: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def twoCitySchedCost(self, costs: List[List[int]]) -> int:\n        ",
    "c": "int twoCitySchedCost(int** costs, int costsSize, int* costsColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int TwoCitySchedCost(int[][] costs) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} costs\n * @return {number}\n */\nvar twoCitySchedCost = function(costs) {\n    \n};",
    "typescript": "function twoCitySchedCost(costs: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $costs\n     * @return Integer\n     */\n    function twoCitySchedCost($costs) {\n        \n    }\n}",
    "swift": "class Solution {\n    func twoCitySchedCost(_ costs: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun twoCitySchedCost(costs: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int twoCitySchedCost(List<List<int>> costs) {\n    \n  }\n}",
    "golang": "func twoCitySchedCost(costs [][]int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} costs\n# @return {Integer}\ndef two_city_sched_cost(costs)\n    \nend",
    "scala": "object Solution {\n    def twoCitySchedCost(costs: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn two_city_sched_cost(costs: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (two-city-sched-cost costs)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec two_city_sched_cost(Costs :: [[integer()]]) -> integer().\ntwo_city_sched_cost(Costs) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec two_city_sched_cost(costs :: [[integer]]) :: integer\n  def two_city_sched_cost(costs) do\n    \n  end\nend"
  }
}
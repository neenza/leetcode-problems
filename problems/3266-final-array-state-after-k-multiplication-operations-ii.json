{
  "title": "Final Array State After K Multiplication Operations II",
  "problem_id": "3556",
  "frontend_id": "3266",
  "difficulty": "Hard",
  "problem_slug": "final-array-state-after-k-multiplication-operations-ii",
  "topics": [
    "Array",
    "Heap (Priority Queue)",
    "Simulation"
  ],
  "description": "You are given an integer array nums, an integer k, and an integer multiplier.\nYou need to perform k operations on nums. In each operation:\nAfter the k operations, apply modulo 109 + 7 to every value in nums.\nReturn an integer array denoting the final state of nums after performing all k operations and then applying the modulo.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [2,1,3,5,6], k = 5, multiplier = 2\nOutput: [8,4,6,5,6]\nExplanation:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [100000,2000], k = 2, multiplier = 1000000\nOutput: [999999307,999999993]\nExplanation:",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 104",
    "1 <= nums[i] <= 109",
    "1 <= k <= 109",
    "1 <= multiplier <= 106"
  ],
  "follow_ups": [],
  "hints": [
    "What happens when <code>min(nums) * multiplier > max(nums)</code>?",
    "A cycle of operations begins.",
    "Simulate until <code>min(nums) * multiplier > max(nums)</code>, then greedily distribute remaining multiplications."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> getFinalState(vector<int>& nums, int k, int multiplier) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] getFinalState(int[] nums, int k, int multiplier) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def getFinalState(self, nums, k, multiplier):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :type multiplier: int\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def getFinalState(self, nums: List[int], k: int, multiplier: int) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* getFinalState(int* nums, int numsSize, int k, int multiplier, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] GetFinalState(int[] nums, int k, int multiplier) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @param {number} multiplier\n * @return {number[]}\n */\nvar getFinalState = function(nums, k, multiplier) {\n    \n};",
    "typescript": "function getFinalState(nums: number[], k: number, multiplier: number): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @param Integer $multiplier\n     * @return Integer[]\n     */\n    function getFinalState($nums, $k, $multiplier) {\n        \n    }\n}",
    "swift": "class Solution {\n    func getFinalState(_ nums: [Int], _ k: Int, _ multiplier: Int) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun getFinalState(nums: IntArray, k: Int, multiplier: Int): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> getFinalState(List<int> nums, int k, int multiplier) {\n    \n  }\n}",
    "golang": "func getFinalState(nums []int, k int, multiplier int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @param {Integer} multiplier\n# @return {Integer[]}\ndef get_final_state(nums, k, multiplier)\n    \nend",
    "scala": "object Solution {\n    def getFinalState(nums: Array[Int], k: Int, multiplier: Int): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn get_final_state(nums: Vec<i32>, k: i32, multiplier: i32) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (get-final-state nums k multiplier)\n  (-> (listof exact-integer?) exact-integer? exact-integer? (listof exact-integer?))\n  )",
    "erlang": "-spec get_final_state(Nums :: [integer()], K :: integer(), Multiplier :: integer()) -> [integer()].\nget_final_state(Nums, K, Multiplier) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec get_final_state(nums :: [integer], k :: integer, multiplier :: integer) :: [integer]\n  def get_final_state(nums, k, multiplier) do\n    \n  end\nend"
  }
}
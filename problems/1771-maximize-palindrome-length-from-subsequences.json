{
  "title": "Maximize Palindrome Length From Subsequences",
  "problem_id": "1897",
  "frontend_id": "1771",
  "difficulty": "Hard",
  "problem_slug": "maximize-palindrome-length-from-subsequences",
  "topics": [
    "String",
    "Dynamic Programming"
  ],
  "description": "You are given two strings, word1 and word2. You want to construct a string in the following manner:\nReturn the length of the longest palindrome that can be constructed in the described manner. If no palindromes can be constructed, return 0.\nA subsequence of a string s is a string that can be made by deleting some (possibly none) characters from s without changing the order of the remaining characters.\nA palindrome is a string that reads the same forwardÂ as well as backward.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: word1 = \"cacb\", word2 = \"cbba\"\nOutput: 5\nExplanation: Choose \"ab\" from word1 and \"cba\" from word2 to make \"abcba\", which is a palindrome.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: word1 = \"ab\", word2 = \"ab\"\nOutput: 3\nExplanation: Choose \"ab\" from word1 and \"a\" from word2 to make \"aba\", which is a palindrome.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: word1 = \"aa\", word2 = \"bb\"\nOutput: 0\nExplanation: You cannot construct a palindrome from the described method, so return 0.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= word1.length, word2.length <= 1000",
    "word1 and word2 consist of lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [
    "Let's ignore the non-empty subsequence constraint. We can concatenate the two strings and find the largest palindromic subsequence with dynamic programming.",
    "Iterate through every pair of characters word1[i] and word2[j], and see if some palindrome begins with word1[i] and ends with word2[j]. This ensures that the subsequences are non-empty."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int longestPalindrome(string word1, string word2) {\n        \n    }\n};",
    "java": "class Solution {\n    public int longestPalindrome(String word1, String word2) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def longestPalindrome(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def longestPalindrome(self, word1: str, word2: str) -> int:\n        ",
    "c": "int longestPalindrome(char* word1, char* word2) {\n    \n}",
    "csharp": "public class Solution {\n    public int LongestPalindrome(string word1, string word2) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} word1\n * @param {string} word2\n * @return {number}\n */\nvar longestPalindrome = function(word1, word2) {\n    \n};",
    "typescript": "function longestPalindrome(word1: string, word2: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $word1\n     * @param String $word2\n     * @return Integer\n     */\n    function longestPalindrome($word1, $word2) {\n        \n    }\n}",
    "swift": "class Solution {\n    func longestPalindrome(_ word1: String, _ word2: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun longestPalindrome(word1: String, word2: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int longestPalindrome(String word1, String word2) {\n    \n  }\n}",
    "golang": "func longestPalindrome(word1 string, word2 string) int {\n    \n}",
    "ruby": "# @param {String} word1\n# @param {String} word2\n# @return {Integer}\ndef longest_palindrome(word1, word2)\n    \nend",
    "scala": "object Solution {\n    def longestPalindrome(word1: String, word2: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn longest_palindrome(word1: String, word2: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (longest-palindrome word1 word2)\n  (-> string? string? exact-integer?)\n  )",
    "erlang": "-spec longest_palindrome(Word1 :: unicode:unicode_binary(), Word2 :: unicode:unicode_binary()) -> integer().\nlongest_palindrome(Word1, Word2) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec longest_palindrome(word1 :: String.t, word2 :: String.t) :: integer\n  def longest_palindrome(word1, word2) do\n    \n  end\nend"
  }
}
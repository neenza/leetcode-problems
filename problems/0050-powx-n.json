{
  "title": "Pow(x, n)",
  "problem_id": "50",
  "frontend_id": "50",
  "difficulty": "Medium",
  "problem_slug": "powx-n",
  "topics": [
    "Math",
    "Recursion"
  ],
  "description": "Implement pow(x, n), which calculates x raised to the power n (i.e., xn).\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: x = 2.00000, n = 10\nOutput: 1024.00000",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: x = 2.10000, n = 3\nOutput: 9.26100",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: x = 2.00000, n = -2\nOutput: 0.25000\nExplanation: 2-2 = 1/22 = 1/4 = 0.25",
      "images": []
    }
  ],
  "constraints": [
    "-100.0 < x < 100.0",
    "-231 <= n <= 231-1",
    "n is an integer.",
    "Either x is not zero or n > 0.",
    "-104 <= xn <= 104"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    double myPow(double x, int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public double myPow(double x, int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def myPow(self, x, n):\n        \"\"\"\n        :type x: float\n        :type n: int\n        :rtype: float\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def myPow(self, x: float, n: int) -> float:\n        ",
    "c": "double myPow(double x, int n) {\n    \n}",
    "csharp": "public class Solution {\n    public double MyPow(double x, int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} x\n * @param {number} n\n * @return {number}\n */\nvar myPow = function(x, n) {\n    \n};",
    "typescript": "function myPow(x: number, n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Float $x\n     * @param Integer $n\n     * @return Float\n     */\n    function myPow($x, $n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func myPow(_ x: Double, _ n: Int) -> Double {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun myPow(x: Double, n: Int): Double {\n        \n    }\n}",
    "dart": "class Solution {\n  double myPow(double x, int n) {\n    \n  }\n}",
    "golang": "func myPow(x float64, n int) float64 {\n    \n}",
    "ruby": "# @param {Float} x\n# @param {Integer} n\n# @return {Float}\ndef my_pow(x, n)\n    \nend",
    "scala": "object Solution {\n    def myPow(x: Double, n: Int): Double = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn my_pow(x: f64, n: i32) -> f64 {\n        \n    }\n}",
    "racket": "(define/contract (my-pow x n)\n  (-> flonum? exact-integer? flonum?)\n  )",
    "erlang": "-spec my_pow(X :: float(), N :: integer()) -> float().\nmy_pow(X, N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec my_pow(x :: float, n :: integer) :: float\n  def my_pow(x, n) do\n    \n  end\nend"
  }
}
{
  "title": "Maximum Coins From K Consecutive Bags",
  "problem_id": "3715",
  "frontend_id": "3413",
  "difficulty": "Medium",
  "problem_slug": "maximum-coins-from-k-consecutive-bags",
  "topics": [
    "Array",
    "Binary Search",
    "Greedy",
    "Sliding Window",
    "Sorting",
    "Prefix Sum"
  ],
  "description": "There are an infinite amount of bags on a number line, one bag for each coordinate. Some of these bags contain coins.\nYou are given a 2D array coins, where coins[i] = [li, ri, ci] denotes that every bag from li to ri contains ci coins.\nThe segments that coins contain are non-overlapping.\nYou are also given an integer k.\nReturn the maximum amount of coins you can obtain by collecting k consecutive bags.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: coins = [[8,10,1],[1,3,2],[5,6,4]], k = 4\nOutput: 10\nExplanation:\nSelecting bags at positions [3, 4, 5, 6] gives the maximum number of coins: 2 + 0 + 4 + 4 = 10 .",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: coins = [[1,10,3]], k = 2\nOutput: 6\nExplanation:\nSelecting bags at positions [1, 2] gives the maximum number of coins: 3 + 3 = 6 .",
      "images": []
    }
  ],
  "constraints": [
    "1 <= coins.length <= 105",
    "1 <= k <= 109",
    "coins[i] == [li, ri, ci]",
    "1 <= li <= ri <= 109",
    "1 <= ci <= 1000",
    "The given segments are non-overlapping."
  ],
  "follow_ups": [],
  "hints": [
    "An optimal starting position for <code>k</code> consecutive bags will be either <code>l<sub>i</sub></code> or <code>r<sub>i</sub> - k + 1</code>."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long maximumCoins(vector<vector<int>>& coins, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public long maximumCoins(int[][] coins, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maximumCoins(self, coins, k):\n        \"\"\"\n        :type coins: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maximumCoins(self, coins: List[List[int]], k: int) -> int:\n        ",
    "c": "long long maximumCoins(int** coins, int coinsSize, int* coinsColSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public long MaximumCoins(int[][] coins, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} coins\n * @param {number} k\n * @return {number}\n */\nvar maximumCoins = function(coins, k) {\n    \n};",
    "typescript": "function maximumCoins(coins: number[][], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $coins\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumCoins($coins, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maximumCoins(_ coins: [[Int]], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maximumCoins(coins: Array<IntArray>, k: Int): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int maximumCoins(List<List<int>> coins, int k) {\n    \n  }\n}",
    "golang": "func maximumCoins(coins [][]int, k int) int64 {\n    \n}",
    "ruby": "# @param {Integer[][]} coins\n# @param {Integer} k\n# @return {Integer}\ndef maximum_coins(coins, k)\n    \nend",
    "scala": "object Solution {\n    def maximumCoins(coins: Array[Array[Int]], k: Int): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn maximum_coins(coins: Vec<Vec<i32>>, k: i32) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (maximum-coins coins k)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec maximum_coins(Coins :: [[integer()]], K :: integer()) -> integer().\nmaximum_coins(Coins, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec maximum_coins(coins :: [[integer]], k :: integer) :: integer\n  def maximum_coins(coins, k) do\n    \n  end\nend"
  }
}
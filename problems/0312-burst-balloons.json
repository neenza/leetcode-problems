{
  "title": "Burst Balloons",
  "problem_id": "312",
  "frontend_id": "312",
  "difficulty": "Hard",
  "problem_slug": "burst-balloons",
  "topics": [
    "Array",
    "Dynamic Programming"
  ],
  "description": "You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.\nIf you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.\nReturn the maximum coins you can collect by bursting the balloons wisely.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [3,1,5,8]\nOutput: 167\nExplanation:\nnums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []\ncoins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,5]\nOutput: 10",
      "images": []
    }
  ],
  "constraints": [
    "n == nums.length",
    "1 <= n <= 300",
    "0 <= nums[i] <= 100"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxCoins(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxCoins(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxCoins(self, nums: List[int]) -> int:\n        ",
    "c": "int maxCoins(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxCoins(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxCoins = function(nums) {\n    \n};",
    "typescript": "function maxCoins(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxCoins($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxCoins(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxCoins(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxCoins(List<int> nums) {\n    \n  }\n}",
    "golang": "func maxCoins(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_coins(nums)\n    \nend",
    "scala": "object Solution {\n    def maxCoins(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_coins(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-coins nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec max_coins(Nums :: [integer()]) -> integer().\nmax_coins(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_coins(nums :: [integer]) :: integer\n  def max_coins(nums) do\n    \n  end\nend"
  }
}
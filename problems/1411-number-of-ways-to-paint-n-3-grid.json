{
  "title": "Number of Ways to Paint N Ã— 3 Grid",
  "problem_id": "1527",
  "frontend_id": "1411",
  "difficulty": "Hard",
  "problem_slug": "number-of-ways-to-paint-n-3-grid",
  "topics": [
    "Dynamic Programming"
  ],
  "description": "You have a grid of size n x 3 and you want to paint each cell of the grid with exactly one of the three colors: Red, Yellow, or Green while making sure that no two adjacent cells have the same color (i.e., no two cells that share vertical or horizontal sides have the same color).\nGiven n the number of rows of the grid, return the number of ways you can paint this grid. As the answer may grow large, the answer must be computed modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 1\nOutput: 12\nExplanation: There are 12 possible way to paint the grid as shown.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/03/26/e1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 5000\nOutput: 30228214",
      "images": [
        "https://assets.leetcode.com/uploads/2020/03/26/e1.png"
      ]
    }
  ],
  "constraints": [
    "n == grid.length",
    "1 <= n <= 5000"
  ],
  "follow_ups": [],
  "hints": [
    "We will use Dynamic programming approach. we will try all possible configuration.",
    "Let dp[idx][prev1col][prev2col][prev3col] be the number of ways to color the rows of the grid from idx to n-1 keeping in mind that the previous row (idx - 1) has colors prev1col, prev2col and prev3col. Build the dp array to get the answer."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int numOfWays(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int numOfWays(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numOfWays(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numOfWays(self, n: int) -> int:\n        ",
    "c": "int numOfWays(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int NumOfWays(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar numOfWays = function(n) {\n    \n};",
    "typescript": "function numOfWays(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function numOfWays($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numOfWays(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numOfWays(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int numOfWays(int n) {\n    \n  }\n}",
    "golang": "func numOfWays(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef num_of_ways(n)\n    \nend",
    "scala": "object Solution {\n    def numOfWays(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn num_of_ways(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (num-of-ways n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec num_of_ways(N :: integer()) -> integer().\nnum_of_ways(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec num_of_ways(n :: integer) :: integer\n  def num_of_ways(n) do\n    \n  end\nend"
  }
}
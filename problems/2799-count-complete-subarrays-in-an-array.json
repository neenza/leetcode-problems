{
  "title": "Count Complete Subarrays in an Array",
  "problem_id": "2856",
  "frontend_id": "2799",
  "difficulty": "Medium",
  "problem_slug": "count-complete-subarrays-in-an-array",
  "topics": [
    "Array",
    "Hash Table",
    "Sliding Window"
  ],
  "description": "You are given an array nums consisting of positive integers.\nWe call a subarray of an array complete if the following condition is satisfied:\nReturn the number of complete subarrays.\nA subarray is a contiguous non-empty part of an array.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,3,1,2,2]\nOutput: 4\nExplanation: The complete subarrays are the following: [1,3,1,2], [1,3,1,2,2], [3,1,2] and [3,1,2,2].",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [5,5,5,5]\nOutput: 10\nExplanation: The array consists only of the integer 5, so any subarray is complete. The number of subarrays that we can choose is 10.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 1000",
    "1 <= nums[i] <= 2000"
  ],
  "follow_ups": [],
  "hints": [
    "Letâ€™s say k is the number of distinct elements in the array. Our goal is to find the number of subarrays with k distinct elements.",
    "Since the constraints are small, you can check every subarray."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int countCompleteSubarrays(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int countCompleteSubarrays(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countCompleteSubarrays(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countCompleteSubarrays(self, nums: List[int]) -> int:\n        ",
    "c": "int countCompleteSubarrays(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int CountCompleteSubarrays(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countCompleteSubarrays = function(nums) {\n    \n};",
    "typescript": "function countCompleteSubarrays(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function countCompleteSubarrays($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countCompleteSubarrays(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countCompleteSubarrays(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int countCompleteSubarrays(List<int> nums) {\n    \n  }\n}",
    "golang": "func countCompleteSubarrays(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef count_complete_subarrays(nums)\n    \nend",
    "scala": "object Solution {\n    def countCompleteSubarrays(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_complete_subarrays(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (count-complete-subarrays nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec count_complete_subarrays(Nums :: [integer()]) -> integer().\ncount_complete_subarrays(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_complete_subarrays(nums :: [integer]) :: integer\n  def count_complete_subarrays(nums) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n\n--- \n\n### Approach: Sliding Window\n\n#### Intuition\n\nWe fix the left boundary $\\textit{left}$ and use the $\\textit{cnt}$ hash map to count the number of occurrences of each element in the window. When the number of different elements in the window is less than $\\textit{distinct}$, we continuously shift $\\textit{right}$ to expand the window; once the number of different elements in the window equals $\\textit{distinct}$, it indicates that the current window $[\\textit{left},\\textit{right})$ is a **complete subarray**. At this point, since continuing to increase $\\textit{right}$ will not reduce the number of different elements in the window, all subarrays from $\\textit{right}$ to the end of the array are also valid **complete subarrays**. Therefore, we can count these solutions at once. That is, we add $n-\\textit{right}+1$.\n\nEach time we move $\\textit{left}$, the count of $\\textit{nums}[\\textit{left}]$ in the hash table should be decreased by 1. If the count is reduced to $0$, the element should be deleted from the hash table.\n\nFinally, return the accumulated results.\n\n#### Implementation#### Complexity Analysis\n\nLet $n$ be the length of the $\\textit{nums}$.\n\n- Time complexity: $O(n)$\n\nThe two pointers $\\textit{left}$ and $\\textit{right}$ will each traverse the array once.\n\n- Space complexity: $O(n)$\n\nThis is the space required for the hash map $\\textit{cnt}$."
}
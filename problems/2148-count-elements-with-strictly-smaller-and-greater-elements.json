{
  "title": "Count Elements With Strictly Smaller and Greater Elements ",
  "problem_id": "2269",
  "frontend_id": "2148",
  "difficulty": "Easy",
  "problem_slug": "count-elements-with-strictly-smaller-and-greater-elements",
  "topics": [
    "Array",
    "Sorting",
    "Counting"
  ],
  "description": "Given an integer array nums, return the number of elements that have both a strictly smaller and a strictly greater element appear in nums.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [11,7,2,15]\nOutput: 2\nExplanation: The element 7 has the element 2 strictly smaller than it and the element 11 strictly greater than it.\nElement 11 has element 7 strictly smaller than it and element 15 strictly greater than it.\nIn total there are 2 elements having both a strictly smaller and a strictly greater element appear in nums.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [-3,3,3,90]\nOutput: 2\nExplanation: The element 3 has the element -3 strictly smaller than it and the element 90 strictly greater than it.\nSince there are two elements with the value 3, in total there are 2 elements having both a strictly smaller and a strictly greater element appear in nums.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 100",
    "-105 <= nums[i] <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "All the elements in the array should be counted except for the minimum and maximum elements.",
    "If the array has n elements, the answer will be n - count(min(nums)) - count(max(nums))",
    "This formula will not work in case the array has all the elements equal, why?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int countElements(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int countElements(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countElements(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countElements(self, nums: List[int]) -> int:\n        ",
    "c": "int countElements(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int CountElements(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countElements = function(nums) {\n    \n};",
    "typescript": "function countElements(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function countElements($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countElements(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countElements(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int countElements(List<int> nums) {\n    \n  }\n}",
    "golang": "func countElements(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef count_elements(nums)\n    \nend",
    "scala": "object Solution {\n    def countElements(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_elements(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (count-elements nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec count_elements(Nums :: [integer()]) -> integer().\ncount_elements(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_elements(nums :: [integer]) :: integer\n  def count_elements(nums) do\n    \n  end\nend"
  }
}
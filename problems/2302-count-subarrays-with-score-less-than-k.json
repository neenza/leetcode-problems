{
  "title": "Count Subarrays With Score Less Than K",
  "problem_id": "2394",
  "frontend_id": "2302",
  "difficulty": "Hard",
  "problem_slug": "count-subarrays-with-score-less-than-k",
  "topics": [
    "Array",
    "Binary Search",
    "Sliding Window",
    "Prefix Sum"
  ],
  "description": "The score of an array is defined as the product of its sum and its length.\nGiven a positive integer array nums and an integer k, return the number of non-empty subarrays of nums whose score is strictly less than k.\nA subarray is a contiguous sequence of elements within an array.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [2,1,4,3,5], k = 10\nOutput: 6\nExplanation:\nThe 6 subarrays having scores less than 10 are:\n- [2] with score 2 * 1 = 2.\n- [1] with score 1 * 1 = 1.\n- [4] with score 4 * 1 = 4.\n- [3] with score 3 * 1 = 3. \n- [5] with score 5 * 1 = 5.\n- [2,1] with score (2 + 1) * 2 = 6.\nNote that subarrays such as [1,4] and [4,3,5] are not considered because their scores are 10 and 36 respectively, while we need scores strictly less than 10.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,1,1], k = 5\nOutput: 5\nExplanation:\nEvery subarray except [1,1,1] has a score less than 5.\n[1,1,1] has a score (1 + 1 + 1) * 3 = 9, which is greater than 5.\nThus, there are 5 subarrays having scores less than 5.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "1 <= nums[i] <= 105",
    "1 <= k <= 1015"
  ],
  "follow_ups": [],
  "hints": [
    "If we add an element to a list of elements, how will the score change?",
    "How can we use this to determine the number of subarrays with score less than k in a given range?",
    "How can we use “Two Pointers” to generalize the solution, and thus count all possible subarrays?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, long long k) {\n        \n    }\n};",
    "java": "class Solution {\n    public long countSubarrays(int[] nums, long k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countSubarrays(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        ",
    "c": "long long countSubarrays(int* nums, int numsSize, long long k) {\n    \n}",
    "csharp": "public class Solution {\n    public long CountSubarrays(int[] nums, long k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar countSubarrays = function(nums, k) {\n    \n};",
    "typescript": "function countSubarrays(nums: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function countSubarrays($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countSubarrays(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countSubarrays(nums: IntArray, k: Long): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int countSubarrays(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func countSubarrays(nums []int, k int64) int64 {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef count_subarrays(nums, k)\n    \nend",
    "scala": "object Solution {\n    def countSubarrays(nums: Array[Int], k: Long): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_subarrays(nums: Vec<i32>, k: i64) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (count-subarrays nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec count_subarrays(Nums :: [integer()], K :: integer()) -> integer().\ncount_subarrays(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_subarrays(nums :: [integer], k :: integer) :: integer\n  def count_subarrays(nums, k) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n\n--- \n\n### Approach: Sliding Window\n\n#### Intuition\n\nAccording to the definition of array scores in the question, and given that $\\textit{nums}$ is an array of positive integers, for a subarray $[i, j]$, as the right endpoint $j$ is fixed, the sum of the subarray decreases and its length shortens with the increase of the left endpoint $i$, so the score of the subarray monotonically decreases. If the score of the subarray $[i, j]$ is less than $k$, since the score is monotonically decreasing, then the score of the subarray $[p, j], i < p \\leq j$ is also less than $k$.\n\nBased on the above properties, we can use the sliding window method to solve the question. Starting from $j = 0$, enumerate the right endpoint of the subarray and maintain a left endpoint $i$ (initially set to $0$). For each $j$:\n\n- Expand window: Add $\\textit{nums}[j]$ to the subarray sum corresponding to the current window $\\textit{total}$.\n\n- Shrink window: If the score of the corresponding subarray in the current window, $\\textit{total} \\times (j - i + 1)$, is greater than or equal to $k$, it indicates that the subarray does not meet the requirements, and therefore, the left endpoint $i$ needs to be moved to the right until the score is less than $k$.\n\n- Count the number of subarrays: At this moment, the number of subarrays with $j$ as the right endpoint and a score less than $k$ is $j - i + 1$, and it is accumulated into the final result $\\textit{res}$.\n\nAfter the enumeration, return the final result $\\textit{res}$.\n\n#### Implementation#### Complexity Analysis\n\nLet $n$ be the length of the $\\textit{nums}$.\n\n- Time complexity: $O(n)$.\n\nWe only need to traverse the array once.\n\n- Space complexity: $O(1)$.\n\nOnly a few additional variables are needed."
}
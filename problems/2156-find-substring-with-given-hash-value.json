{
  "title": "Find Substring With Given Hash Value",
  "problem_id": "2275",
  "frontend_id": "2156",
  "difficulty": "Hard",
  "problem_slug": "find-substring-with-given-hash-value",
  "topics": [
    "String",
    "Sliding Window",
    "Rolling Hash",
    "Hash Function"
  ],
  "description": "The hash of a 0-indexed string s of length k, given integers p and m, is computed using the following function:\nWhere val(s[i]) represents the index of s[i] in the alphabet from val('a') = 1 to val('z') = 26.\nYou are given a string s and the integers power, modulo, k, and hashValue. Return sub, the first substring of s of length k such that hash(sub, power, modulo) == hashValue.\nThe test cases will be generated such that an answer always exists.\nA substring is a contiguous non-empty sequence of characters within a string.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"leetcode\", power = 7, modulo = 20, k = 2, hashValue = 0\nOutput: \"ee\"\nExplanation: The hash of \"ee\" can be computed to be hash(\"ee\", 7, 20) = (5 * 1 + 5 * 7) mod 20 = 40 mod 20 = 0. \n\"ee\" is the first substring of length 2 with hashValue 0. Hence, we return \"ee\".",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"fbxzaad\", power = 31, modulo = 100, k = 3, hashValue = 32\nOutput: \"fbx\"\nExplanation: The hash of \"fbx\" can be computed to be hash(\"fbx\", 31, 100) = (6 * 1 + 2 * 31 + 24 * 312) mod 100 = 23132 mod 100 = 32. \nThe hash of \"bxz\" can be computed to be hash(\"bxz\", 31, 100) = (2 * 1 + 24 * 31 + 26 * 312) mod 100 = 25732 mod 100 = 32. \n\"fbx\" is the first substring of length 3 with hashValue 32. Hence, we return \"fbx\".\nNote that \"bxz\" also has a hash of 32 but it appears later than \"fbx\".",
      "images": []
    }
  ],
  "constraints": [
    "1 <= k <= s.length <= 2 * 104",
    "1 <= power, modulo <= 109",
    "0 <= hashValue < modulo",
    "s consists of lowercase English letters only.",
    "The test cases are generated such that an answer always exists."
  ],
  "follow_ups": [],
  "hints": [
    "How can we update the hash value efficiently while iterating instead of recalculating it each time?",
    "Use the rolling hash method."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string subStrHash(string s, int power, int modulo, int k, int hashValue) {\n        \n    }\n};",
    "java": "class Solution {\n    public String subStrHash(String s, int power, int modulo, int k, int hashValue) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def subStrHash(self, s, power, modulo, k, hashValue):\n        \"\"\"\n        :type s: str\n        :type power: int\n        :type modulo: int\n        :type k: int\n        :type hashValue: int\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def subStrHash(self, s: str, power: int, modulo: int, k: int, hashValue: int) -> str:\n        ",
    "c": "char* subStrHash(char* s, int power, int modulo, int k, int hashValue) {\n    \n}",
    "csharp": "public class Solution {\n    public string SubStrHash(string s, int power, int modulo, int k, int hashValue) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @param {number} power\n * @param {number} modulo\n * @param {number} k\n * @param {number} hashValue\n * @return {string}\n */\nvar subStrHash = function(s, power, modulo, k, hashValue) {\n    \n};",
    "typescript": "function subStrHash(s: string, power: number, modulo: number, k: number, hashValue: number): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $power\n     * @param Integer $modulo\n     * @param Integer $k\n     * @param Integer $hashValue\n     * @return String\n     */\n    function subStrHash($s, $power, $modulo, $k, $hashValue) {\n        \n    }\n}",
    "swift": "class Solution {\n    func subStrHash(_ s: String, _ power: Int, _ modulo: Int, _ k: Int, _ hashValue: Int) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun subStrHash(s: String, power: Int, modulo: Int, k: Int, hashValue: Int): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String subStrHash(String s, int power, int modulo, int k, int hashValue) {\n    \n  }\n}",
    "golang": "func subStrHash(s string, power int, modulo int, k int, hashValue int) string {\n    \n}",
    "ruby": "# @param {String} s\n# @param {Integer} power\n# @param {Integer} modulo\n# @param {Integer} k\n# @param {Integer} hash_value\n# @return {String}\ndef sub_str_hash(s, power, modulo, k, hash_value)\n    \nend",
    "scala": "object Solution {\n    def subStrHash(s: String, power: Int, modulo: Int, k: Int, hashValue: Int): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn sub_str_hash(s: String, power: i32, modulo: i32, k: i32, hash_value: i32) -> String {\n        \n    }\n}",
    "racket": "(define/contract (sub-str-hash s power modulo k hashValue)\n  (-> string? exact-integer? exact-integer? exact-integer? exact-integer? string?)\n  )",
    "erlang": "-spec sub_str_hash(S :: unicode:unicode_binary(), Power :: integer(), Modulo :: integer(), K :: integer(), HashValue :: integer()) -> unicode:unicode_binary().\nsub_str_hash(S, Power, Modulo, K, HashValue) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec sub_str_hash(s :: String.t, power :: integer, modulo :: integer, k :: integer, hash_value :: integer) :: String.t\n  def sub_str_hash(s, power, modulo, k, hash_value) do\n    \n  end\nend"
  }
}
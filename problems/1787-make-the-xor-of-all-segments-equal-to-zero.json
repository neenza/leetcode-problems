{
  "title": "Make the XOR of All Segments Equal to Zero",
  "problem_id": "1913",
  "frontend_id": "1787",
  "difficulty": "Hard",
  "problem_slug": "make-the-xor-of-all-segments-equal-to-zero",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Bit Manipulation"
  ],
  "description": "You are given an array nums​​​ and an integer k​​​​​. The XOR of a segment [left, right] where left <= right is the XOR of all the elements with indices between left and right, inclusive: nums[left] XOR nums[left+1] XOR ... XOR nums[right].\nReturn the minimum number of elements to change in the array such that the XOR of all segments of size k​​​​​​ is equal to zero.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,0,3,0], k = 1\nOutput: 3\nExplanation: Modify the array from [1,2,0,3,0] to from [0,0,0,0,0].",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [3,4,5,2,1,7,3,4,7], k = 3\nOutput: 3\nExplanation: Modify the array from [3,4,5,2,1,7,3,4,7] to [3,4,7,3,4,7,3,4,7].",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,2,4,1,2,5,1,2,6], k = 3\nOutput: 3\nExplanation: Modify the array from [1,2,4,1,2,5,1,2,6] to [1,2,3,1,2,3,1,2,3].",
      "images": []
    }
  ],
  "constraints": [
    "1 <= k <= nums.length <= 2000",
    "​​​​​​0 <= nums[i] < 210"
  ],
  "follow_ups": [],
  "hints": [
    "Let's note that for the XOR of all segments with size K to be equal to zeros, nums[i] has to be equal to nums[i+k]",
    "Basically, we need to make the first K elements have XOR = 0 and then modify them."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minChanges(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minChanges(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n        ",
    "c": "int minChanges(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinChanges(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minChanges = function(nums, k) {\n    \n};",
    "typescript": "function minChanges(nums: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minChanges($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minChanges(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minChanges(nums: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minChanges(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func minChanges(nums []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef min_changes(nums, k)\n    \nend",
    "scala": "object Solution {\n    def minChanges(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_changes(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-changes nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec min_changes(Nums :: [integer()], K :: integer()) -> integer().\nmin_changes(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_changes(nums :: [integer], k :: integer) :: integer\n  def min_changes(nums, k) do\n    \n  end\nend"
  }
}
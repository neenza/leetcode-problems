{
  "title": "Shortest Path Visiting All Nodes",
  "problem_id": "877",
  "frontend_id": "847",
  "difficulty": "Hard",
  "problem_slug": "shortest-path-visiting-all-nodes",
  "topics": [
    "Dynamic Programming",
    "Bit Manipulation",
    "Breadth-First Search",
    "Graph",
    "Bitmask"
  ],
  "description": "You have an undirected, connected graph of n nodes labeled from 0 to n - 1. You are given an array graph where graph[i] is a list of all the nodes connected with node i by an edge.\nReturn the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: graph = [[1,2,3],[0],[0],[0]]\nOutput: 4\nExplanation: One possible path is [1,0,2,0,3]",
      "images": [
        "https://assets.leetcode.com/uploads/2021/05/12/shortest1-graph.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: graph = [[1],[0,2,4],[1,3,4],[2],[1,2]]\nOutput: 4\nExplanation: One possible path is [0,1,4,2,3]",
      "images": [
        "https://assets.leetcode.com/uploads/2021/05/12/shortest2-graph.jpg"
      ]
    }
  ],
  "constraints": [
    "n == graph.length",
    "1 <= n <= 12",
    "0 <= graph[i].length <Â n",
    "graph[i] does not contain i.",
    "If graph[a] contains b, then graph[b] contains a.",
    "The input graph is always connected."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int shortestPathLength(vector<vector<int>>& graph) {\n        \n    }\n};",
    "java": "class Solution {\n    public int shortestPathLength(int[][] graph) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def shortestPathLength(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def shortestPathLength(self, graph: List[List[int]]) -> int:\n        ",
    "c": "int shortestPathLength(int** graph, int graphSize, int* graphColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int ShortestPathLength(int[][] graph) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} graph\n * @return {number}\n */\nvar shortestPathLength = function(graph) {\n    \n};",
    "typescript": "function shortestPathLength(graph: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $graph\n     * @return Integer\n     */\n    function shortestPathLength($graph) {\n        \n    }\n}",
    "swift": "class Solution {\n    func shortestPathLength(_ graph: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun shortestPathLength(graph: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int shortestPathLength(List<List<int>> graph) {\n    \n  }\n}",
    "golang": "func shortestPathLength(graph [][]int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} graph\n# @return {Integer}\ndef shortest_path_length(graph)\n    \nend",
    "scala": "object Solution {\n    def shortestPathLength(graph: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn shortest_path_length(graph: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (shortest-path-length graph)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec shortest_path_length(Graph :: [[integer()]]) -> integer().\nshortest_path_length(Graph) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec shortest_path_length(graph :: [[integer]]) :: integer\n  def shortest_path_length(graph) do\n    \n  end\nend"
  }
}
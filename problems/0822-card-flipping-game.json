{
  "title": "Card Flipping Game",
  "problem_id": "842",
  "frontend_id": "822",
  "difficulty": "Medium",
  "problem_slug": "card-flipping-game",
  "topics": [
    "Array",
    "Hash Table"
  ],
  "description": "You are given two 0-indexed integer arrays fronts and backs of length n, where the ith card has the positive integer fronts[i] printed on the front and backs[i] printed on the back. Initially, each card is placed on a table such that the front number is facing up and the other is facing down. You may flip over any number of cards (possibly zero).\nAfter flipping the cards, an integer is considered good if it is facing down on some card and not facing up on any card.\nReturn the minimum possible good integer after flipping the cards. If there are no good integers, return 0.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: fronts = [1,2,4,4,7], backs = [1,3,4,1,3]\nOutput: 2\nExplanation:\nIf we flip the second card, the face up numbers are [1,3,4,4,7] and the face down are [1,2,4,1,3].\n2 is the minimum good integer as it appears facing down but not facing up.\nIt can be shown that 2 is the minimum possible good integer obtainable after flipping some cards.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: fronts = [1], backs = [1]\nOutput: 0\nExplanation:\nThere are no good integers no matter how we flip the cards, so we return 0.",
      "images": []
    }
  ],
  "constraints": [
    "n == fronts.length == backs.length",
    "1 <= n <= 1000",
    "1 <= fronts[i], backs[i] <= 2000"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int flipgame(vector<int>& fronts, vector<int>& backs) {\n        \n    }\n};",
    "java": "class Solution {\n    public int flipgame(int[] fronts, int[] backs) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def flipgame(self, fronts, backs):\n        \"\"\"\n        :type fronts: List[int]\n        :type backs: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def flipgame(self, fronts: List[int], backs: List[int]) -> int:\n        ",
    "c": "int flipgame(int* fronts, int frontsSize, int* backs, int backsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int Flipgame(int[] fronts, int[] backs) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} fronts\n * @param {number[]} backs\n * @return {number}\n */\nvar flipgame = function(fronts, backs) {\n    \n};",
    "typescript": "function flipgame(fronts: number[], backs: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $fronts\n     * @param Integer[] $backs\n     * @return Integer\n     */\n    function flipgame($fronts, $backs) {\n        \n    }\n}",
    "swift": "class Solution {\n    func flipgame(_ fronts: [Int], _ backs: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun flipgame(fronts: IntArray, backs: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int flipgame(List<int> fronts, List<int> backs) {\n    \n  }\n}",
    "golang": "func flipgame(fronts []int, backs []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} fronts\n# @param {Integer[]} backs\n# @return {Integer}\ndef flipgame(fronts, backs)\n    \nend",
    "scala": "object Solution {\n    def flipgame(fronts: Array[Int], backs: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn flipgame(fronts: Vec<i32>, backs: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (flipgame fronts backs)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec flipgame(Fronts :: [integer()], Backs :: [integer()]) -> integer().\nflipgame(Fronts, Backs) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec flipgame(fronts :: [integer], backs :: [integer]) :: integer\n  def flipgame(fronts, backs) do\n    \n  end\nend"
  }
}
{
  "title": "Find the Grid of Region Average",
  "problem_id": "3272",
  "frontend_id": "3030",
  "difficulty": "Medium",
  "problem_slug": "find-the-grid-of-region-average",
  "topics": [
    "Array",
    "Matrix"
  ],
  "description": "You are given m x n grid image which represents a grayscale image, where image[i][j] represents a pixel with intensity in the range [0..255]. You are also given a non-negative integer threshold.\nTwo pixels are adjacent if they share an edge.\nA region is a 3 x 3 subgrid where the absolute difference in intensity between any two adjacent pixels is less than or equal to threshold.\nAll pixels in a region belong to that region, note that a pixel can belong to multiple regions.\nYou need to calculate a m x n grid result, where result[i][j] is the average intensity of the regions to which image[i][j] belongs, rounded down to the nearest integer. If image[i][j] belongs to multiple regions, result[i][j] is the average of the rounded-down average intensities of these regions, rounded down to the nearest integer. If image[i][j] does not belong to any region, result[i][j] is equal to image[i][j].\nReturn the grid result.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: image = [[5,6,7,10],[8,9,10,10],[11,12,13,10]], threshold = 3\nOutput: [[9,9,9,9],[9,9,9,9],[9,9,9,9]]\nExplanation:\n\nThere are two regions as illustrated above. The average intensity of the first region is 9, while the average intensity of the second region is 9.67 which is rounded down to 9. The average intensity of both of the regions is (9 + 9) / 2 = 9. As all the pixels belong to either region 1, region 2, or both of them, the intensity of every pixel in the result is 9.\nPlease note that the rounded-down values are used when calculating the average of multiple regions, hence the calculation is done using 9 as the average intensity of region 2, not 9.67.",
      "images": [
        "https://assets.leetcode.com/uploads/2023/12/21/example0corrected.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: image = [[10,20,30],[15,25,35],[20,30,40],[25,35,45]], threshold = 12\nOutput: [[25,25,25],[27,27,27],[27,27,27],[30,30,30]]\nExplanation:\n\nThere are two regions as illustrated above. The average intensity of the first region is 25, while the average intensity of the second region is 30. The average intensity of both of the regions is (25 + 30) / 2 = 27.5 which is rounded down to 27.\nAll the pixels in row 0 of the image belong to region 1, hence all the pixels in row 0 in the result are 25. Similarly, all the pixels in row 3 in the result are 30. The pixels in rows 1 and 2 of the image belong to region 1 and region 2, hence their assigned value is 27 in the result.",
      "images": [
        "https://assets.leetcode.com/uploads/2023/12/21/example1corrected.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: image = [[5,6,7],[8,9,10],[11,12,13]], threshold = 1\nOutput: [[5,6,7],[8,9,10],[11,12,13]]\nExplanation:\nThere is only one 3 x 3 subgrid, while it does not have the condition on difference of adjacent pixels, for example, the difference between image[0][0] and image[1][0] is |5 - 8| = 3 > threshold = 1 . None of them belong to any valid regions, so the result should be the same as image .",
      "images": []
    }
  ],
  "constraints": [
    "3 <= n, m <= 500",
    "0 <= image[i][j] <= 255",
    "0 <= threshold <= 255"
  ],
  "follow_ups": [],
  "hints": [
    "Try all the <code>3 * 3</code> sub-grids to find all the regions.",
    "Keep two 2-D arrays <code>sum</code> and <code>num</code>, for each position <code>(x, y)</code> in a region, increase <code>sum[x][y]</code> by the average sum of the region and increase <code>num[x][y]</code> by <code>1</code>.",
    "For each position (x, y), <code>sum[x][y] / num[x][y]</code> is the answer. Note when <code>num[x][y] == 0</code>, we use the original value in <code>image</code> instead."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<vector<int>> resultGrid(vector<vector<int>>& image, int threshold) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[][] resultGrid(int[][] image, int threshold) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def resultGrid(self, image, threshold):\n        \"\"\"\n        :type image: List[List[int]]\n        :type threshold: int\n        :rtype: List[List[int]]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def resultGrid(self, image: List[List[int]], threshold: int) -> List[List[int]]:\n        ",
    "c": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** resultGrid(int** image, int imageSize, int* imageColSize, int threshold, int* returnSize, int** returnColumnSizes) {\n    \n}",
    "csharp": "public class Solution {\n    public int[][] ResultGrid(int[][] image, int threshold) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} image\n * @param {number} threshold\n * @return {number[][]}\n */\nvar resultGrid = function(image, threshold) {\n    \n};",
    "typescript": "function resultGrid(image: number[][], threshold: number): number[][] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $image\n     * @param Integer $threshold\n     * @return Integer[][]\n     */\n    function resultGrid($image, $threshold) {\n        \n    }\n}",
    "swift": "class Solution {\n    func resultGrid(_ image: [[Int]], _ threshold: Int) -> [[Int]] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun resultGrid(image: Array<IntArray>, threshold: Int): Array<IntArray> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<List<int>> resultGrid(List<List<int>> image, int threshold) {\n    \n  }\n}",
    "golang": "func resultGrid(image [][]int, threshold int) [][]int {\n    \n}",
    "ruby": "# @param {Integer[][]} image\n# @param {Integer} threshold\n# @return {Integer[][]}\ndef result_grid(image, threshold)\n    \nend",
    "scala": "object Solution {\n    def resultGrid(image: Array[Array[Int]], threshold: Int): Array[Array[Int]] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn result_grid(image: Vec<Vec<i32>>, threshold: i32) -> Vec<Vec<i32>> {\n        \n    }\n}",
    "racket": "(define/contract (result-grid image threshold)\n  (-> (listof (listof exact-integer?)) exact-integer? (listof (listof exact-integer?)))\n  )",
    "erlang": "-spec result_grid(Image :: [[integer()]], Threshold :: integer()) -> [[integer()]].\nresult_grid(Image, Threshold) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec result_grid(image :: [[integer]], threshold :: integer) :: [[integer]]\n  def result_grid(image, threshold) do\n    \n  end\nend"
  }
}
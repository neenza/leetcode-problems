{
  "title": "Compare Version Numbers",
  "problem_id": "165",
  "frontend_id": "165",
  "difficulty": "Medium",
  "problem_slug": "compare-version-numbers",
  "topics": [
    "Two Pointers",
    "String"
  ],
  "description": "Given two version strings, version1 and version2, compare them. A version string consists of revisions separated by dots '.'. The value of the revision is its integer conversion ignoring leading zeros.\nTo compare version strings, compare their revision values in left-to-right order. If one of the version strings has fewer revisions, treat the missing revision values as 0.\nReturn the following:\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: version1 = \"1.2\", version2 = \"1.10\"\nOutput: -1\nExplanation:\nversion1's second revision is \"2\" and version2's second revision is \"10\": 2 < 10, so version1 < version2.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: version1 = \"1.01\", version2 = \"1.001\"\nOutput: 0\nExplanation:\nIgnoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\".",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: version1 = \"1.0\", version2 = \"1.0.0.0\"\nOutput: 0\nExplanation:\nversion1 has less revisions, which means every missing revision are treated as \"0\".",
      "images": []
    }
  ],
  "constraints": [
    "1 <= version1.length, version2.length <= 500",
    "version1 and version2 only contain digits and '.'.",
    "version1 and version2 are valid version numbers.",
    "All the given revisions in version1 and version2 can be stored in a 32-bit integer."
  ],
  "follow_ups": [],
  "hints": [
    "You can use two pointers for each version string to traverse them together while comparing the corresponding segments.",
    "Utilize the substring method to extract each version segment delimited by '.'. Ensure you're extracting the segments correctly by adjusting the start and end indices accordingly."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int compareVersion(string version1, string version2) {\n        \n    }\n};",
    "java": "class Solution {\n    public int compareVersion(String version1, String version2) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def compareVersion(self, version1: str, version2: str) -> int:\n        ",
    "c": "int compareVersion(char* version1, char* version2) {\n    \n}",
    "csharp": "public class Solution {\n    public int CompareVersion(string version1, string version2) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} version1\n * @param {string} version2\n * @return {number}\n */\nvar compareVersion = function(version1, version2) {\n    \n};",
    "typescript": "function compareVersion(version1: string, version2: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $version1\n     * @param String $version2\n     * @return Integer\n     */\n    function compareVersion($version1, $version2) {\n        \n    }\n}",
    "swift": "class Solution {\n    func compareVersion(_ version1: String, _ version2: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun compareVersion(version1: String, version2: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int compareVersion(String version1, String version2) {\n    \n  }\n}",
    "golang": "func compareVersion(version1 string, version2 string) int {\n    \n}",
    "ruby": "# @param {String} version1\n# @param {String} version2\n# @return {Integer}\ndef compare_version(version1, version2)\n    \nend",
    "scala": "object Solution {\n    def compareVersion(version1: String, version2: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn compare_version(version1: String, version2: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (compare-version version1 version2)\n  (-> string? string? exact-integer?)\n  )",
    "erlang": "-spec compare_version(Version1 :: unicode:unicode_binary(), Version2 :: unicode:unicode_binary()) -> integer().\ncompare_version(Version1, Version2) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec compare_version(version1 :: String.t, version2 :: String.t) :: integer\n  def compare_version(version1, version2) do\n    \n  end\nend"
  }
}
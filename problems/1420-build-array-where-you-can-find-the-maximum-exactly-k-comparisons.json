{
  "title": "Build Array Where You Can Find The Maximum Exactly K Comparisons",
  "problem_id": "1535",
  "frontend_id": "1420",
  "difficulty": "Hard",
  "problem_slug": "build-array-where-you-can-find-the-maximum-exactly-k-comparisons",
  "topics": [
    "Dynamic Programming",
    "Prefix Sum"
  ],
  "description": "You are given three integers n, m and k. Consider the following algorithm to find the maximum element of an array of positive integers:\nYou should build the array arr which has the following properties:\nReturn the number of ways to build the array arr under the mentioned conditions. As the answer may grow large, the answer must be computed modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 2, m = 3, k = 1\nOutput: 6\nExplanation: The possible arrays are [1, 1], [2, 1], [2, 2], [3, 1], [3, 2] [3, 3]",
      "images": [
        "https://assets.leetcode.com/uploads/2020/04/02/e.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 5, m = 2, k = 3\nOutput: 0\nExplanation: There are no possible arrays that satisfy the mentioned conditions.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/04/02/e.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 9, m = 1, k = 1\nOutput: 1\nExplanation: The only possible array is [1, 1, 1, 1, 1, 1, 1, 1, 1]",
      "images": [
        "https://assets.leetcode.com/uploads/2020/04/02/e.png"
      ]
    }
  ],
  "constraints": [
    "1 <= n <= 50",
    "1 <= m <= 100",
    "0 <= k <= n"
  ],
  "follow_ups": [],
  "hints": [
    "Use dynamic programming approach. Build dp table where dp[a][b][c] is the number of ways you can start building the array starting from index a where the search_cost = c and the maximum used integer was b.",
    "Recursively, solve the small sub-problems first. Optimize your answer by stopping the search if you exceeded k changes."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int numOfArrays(int n, int m, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int numOfArrays(int n, int m, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numOfArrays(self, n, m, k):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numOfArrays(self, n: int, m: int, k: int) -> int:\n        ",
    "c": "int numOfArrays(int n, int m, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int NumOfArrays(int n, int m, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number} m\n * @param {number} k\n * @return {number}\n */\nvar numOfArrays = function(n, m, k) {\n    \n};",
    "typescript": "function numOfArrays(n: number, m: number, k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $m\n     * @param Integer $k\n     * @return Integer\n     */\n    function numOfArrays($n, $m, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numOfArrays(_ n: Int, _ m: Int, _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numOfArrays(n: Int, m: Int, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int numOfArrays(int n, int m, int k) {\n    \n  }\n}",
    "golang": "func numOfArrays(n int, m int, k int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer} m\n# @param {Integer} k\n# @return {Integer}\ndef num_of_arrays(n, m, k)\n    \nend",
    "scala": "object Solution {\n    def numOfArrays(n: Int, m: Int, k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn num_of_arrays(n: i32, m: i32, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (num-of-arrays n m k)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec num_of_arrays(N :: integer(), M :: integer(), K :: integer()) -> integer().\nnum_of_arrays(N, M, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec num_of_arrays(n :: integer, m :: integer, k :: integer) :: integer\n  def num_of_arrays(n, m, k) do\n    \n  end\nend"
  }
}
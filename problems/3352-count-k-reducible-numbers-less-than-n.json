{
  "title": "Count K-Reducible Numbers Less Than N",
  "problem_id": "3631",
  "frontend_id": "3352",
  "difficulty": "Hard",
  "problem_slug": "count-k-reducible-numbers-less-than-n",
  "topics": [
    "Math",
    "String",
    "Dynamic Programming",
    "Combinatorics"
  ],
  "description": "You are given a binary string s representing a number n in its binary form.\nYou are also given an integer k.\nAn integer x is called k-reducible if performing the following operation at most k times reduces it to 1:\nFor example, the binary representation of 6 is \"110\". Applying the operation once reduces it to 2 (since \"110\" has two set bits). Applying the operation again to 2 (binary \"10\") reduces it to 1 (since \"10\" has one set bit).\nReturn an integer denoting the number of positive integers less than n that are k-reducible.\nSince the answer may be too large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"111\", k = 1\nOutput: 3\nExplanation:\nn = 7 . The 1-reducible integers less than 7 are 1, 2, and 4.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"1000\", k = 2\nOutput: 6\nExplanation:\nn = 8 . The 2-reducible integers less than 8 are 1, 2, 3, 4, 5, and 6.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"1\", k = 3\nOutput: 0\nExplanation:\nThere are no positive integers less than n = 1 , so the answer is 0.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 800",
    "s has no leading zeros.",
    "s consists only of the characters '0' and '1'.",
    "1 <= k <= 5"
  ],
  "follow_ups": [],
  "hints": [
    "You can precompute number of operations required to convert a number with <code>x</code> bits to 1.",
    "Use digit dp."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int countKReducibleNumbers(string s, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int countKReducibleNumbers(String s, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countKReducibleNumbers(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countKReducibleNumbers(self, s: str, k: int) -> int:\n        ",
    "c": "int countKReducibleNumbers(char* s, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int CountKReducibleNumbers(string s, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar countKReducibleNumbers = function(s, k) {\n    \n};",
    "typescript": "function countKReducibleNumbers(s: string, k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function countKReducibleNumbers($s, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countKReducibleNumbers(_ s: String, _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countKReducibleNumbers(s: String, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int countKReducibleNumbers(String s, int k) {\n    \n  }\n}",
    "golang": "func countKReducibleNumbers(s string, k int) int {\n    \n}",
    "ruby": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef count_k_reducible_numbers(s, k)\n    \nend",
    "scala": "object Solution {\n    def countKReducibleNumbers(s: String, k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_k_reducible_numbers(s: String, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (count-k-reducible-numbers s k)\n  (-> string? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec count_k_reducible_numbers(S :: unicode:unicode_binary(), K :: integer()) -> integer().\ncount_k_reducible_numbers(S, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_k_reducible_numbers(s :: String.t, k :: integer) :: integer\n  def count_k_reducible_numbers(s, k) do\n    \n  end\nend"
  }
}
{
  "title": "Patching Array",
  "problem_id": "330",
  "frontend_id": "330",
  "difficulty": "Hard",
  "problem_slug": "patching-array",
  "topics": [
    "Array",
    "Greedy"
  ],
  "description": "Given a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] inclusive can be formed by the sum of some elements in the array.\nReturn the minimum number of patches required.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,3], n = 6\nOutput: 1\nExplanation:\nCombinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\nNow if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\nPossible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\nSo we only need 1 patch.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,5,10], n = 20\nOutput: 2\nExplanation: The two patches can be [2, 4].",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,2,2], n = 5\nOutput: 0",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 1000",
    "1 <= nums[i] <= 104",
    "nums is sorted in ascending order.",
    "1 <= n <= 231 - 1"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minPatches(vector<int>& nums, int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minPatches(int[] nums, int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minPatches(self, nums: List[int], n: int) -> int:\n        ",
    "c": "int minPatches(int* nums, int numsSize, int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinPatches(int[] nums, int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} n\n * @return {number}\n */\nvar minPatches = function(nums, n) {\n    \n};",
    "typescript": "function minPatches(nums: number[], n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $n\n     * @return Integer\n     */\n    function minPatches($nums, $n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minPatches(_ nums: [Int], _ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minPatches(nums: IntArray, n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minPatches(List<int> nums, int n) {\n    \n  }\n}",
    "golang": "func minPatches(nums []int, n int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} n\n# @return {Integer}\ndef min_patches(nums, n)\n    \nend",
    "scala": "object Solution {\n    def minPatches(nums: Array[Int], n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_patches(nums: Vec<i32>, n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-patches nums n)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec min_patches(Nums :: [integer()], N :: integer()) -> integer().\nmin_patches(Nums, N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_patches(nums :: [integer], n :: integer) :: integer\n  def min_patches(nums, n) do\n    \n  end\nend"
  }
}
{
  "title": "Find the Largest Area of Square Inside Two Rectangles",
  "problem_id": "3325",
  "frontend_id": "3047",
  "difficulty": "Medium",
  "problem_slug": "find-the-largest-area-of-square-inside-two-rectangles",
  "topics": [
    "Array",
    "Math",
    "Geometry"
  ],
  "description": "There exist n rectangles in a 2D plane with edges parallel to the x and y axis. You are given two 2D integer arrays bottomLeft and topRight where bottomLeft[i] = [a_i, b_i] and topRight[i] = [c_i, d_i] represent the bottom-left and top-right coordinates of the ith rectangle, respectively.\nYou need to find the maximum area of a square that can fit inside the intersecting region of at least two rectangles. Return 0 if such a square does not exist.\nExample 1:\nInput: bottomLeft = [[1,1],[2,2],[3,1]], topRight = [[3,3],[4,4],[6,6]]\nOutput: 1\nExplanation:\nA square with side length 1 can fit inside either the intersecting region of rectangles 0 and 1 or the intersecting region of rectangles 1 and 2. Hence the maximum area is 1. It can be shown that a square with a greater side length can not fit inside any intersecting region of two rectangles.\nExample 2:\nInput: bottomLeft = [[1,1],[1,3],[1,5]], topRight = [[5,5],[5,7],[5,9]]\nOutput: 4\nExplanation:\nA square with side length 2 can fit inside either the intersecting region of rectangles 0 and 1 or the intersecting region of rectangles 1 and 2. Hence the maximum area is 2 * 2 = 4. It can be shown that a square with a greater side length can not fit inside any intersecting region of two rectangles.\nExample 3:\nInput: bottomLeft = [[1,1],[2,2],[1,2]], topRight = [[3,3],[4,4],[3,4]]\nOutput: 1\nExplanation:\nA square with side length 1 can fit inside the intersecting region of any two rectangles. Also, no larger square can, so the maximum area is 1. Note that the region can be formed by the intersection of more than 2 rectangles.\nExample 4:\nInput: bottomLeft = [[1,1],[3,3],[3,1]], topRight = [[2,2],[4,4],[4,2]]\nOutput: 0\nExplanation:\nNo pair of rectangles intersect, hence, the answer is 0.\nConstraints:",
  "examples": [],
  "constraints": [
    "n == bottomLeft.length == topRight.length",
    "2 <= n <= 103",
    "bottomLeft[i].length == topRight[i].length == 2",
    "1 <= bottomLeft[i][0], bottomLeft[i][1] <= 107",
    "1 <= topRight[i][0], topRight[i][1] <= 107",
    "bottomLeft[i][0] < topRight[i][0]",
    "bottomLeft[i][1] < topRight[i][1]"
  ],
  "follow_ups": [],
  "hints": [
    "Brute Force the intersection area of each pair of rectangles.",
    "Two rectangles will not overlap when the bottom left x coordinate of one rectangle is greater than the top right x coordinate of the other rectangle. The same is true for the y coordinate.",
    "The intersection area (if any) is also a rectangle. Find its corners."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long largestSquareArea(vector<vector<int>>& bottomLeft, vector<vector<int>>& topRight) {\n        \n    }\n};",
    "java": "class Solution {\n    public long largestSquareArea(int[][] bottomLeft, int[][] topRight) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def largestSquareArea(self, bottomLeft, topRight):\n        \"\"\"\n        :type bottomLeft: List[List[int]]\n        :type topRight: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def largestSquareArea(self, bottomLeft: List[List[int]], topRight: List[List[int]]) -> int:\n        ",
    "c": "long long largestSquareArea(int** bottomLeft, int bottomLeftSize, int* bottomLeftColSize, int** topRight, int topRightSize, int* topRightColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public long LargestSquareArea(int[][] bottomLeft, int[][] topRight) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} bottomLeft\n * @param {number[][]} topRight\n * @return {number}\n */\nvar largestSquareArea = function(bottomLeft, topRight) {\n    \n};",
    "typescript": "function largestSquareArea(bottomLeft: number[][], topRight: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $bottomLeft\n     * @param Integer[][] $topRight\n     * @return Integer\n     */\n    function largestSquareArea($bottomLeft, $topRight) {\n        \n    }\n}",
    "swift": "class Solution {\n    func largestSquareArea(_ bottomLeft: [[Int]], _ topRight: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun largestSquareArea(bottomLeft: Array<IntArray>, topRight: Array<IntArray>): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int largestSquareArea(List<List<int>> bottomLeft, List<List<int>> topRight) {\n    \n  }\n}",
    "golang": "func largestSquareArea(bottomLeft [][]int, topRight [][]int) int64 {\n    \n}",
    "ruby": "# @param {Integer[][]} bottom_left\n# @param {Integer[][]} top_right\n# @return {Integer}\ndef largest_square_area(bottom_left, top_right)\n    \nend",
    "scala": "object Solution {\n    def largestSquareArea(bottomLeft: Array[Array[Int]], topRight: Array[Array[Int]]): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn largest_square_area(bottom_left: Vec<Vec<i32>>, top_right: Vec<Vec<i32>>) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (largest-square-area bottomLeft topRight)\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec largest_square_area(BottomLeft :: [[integer()]], TopRight :: [[integer()]]) -> integer().\nlargest_square_area(BottomLeft, TopRight) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec largest_square_area(bottom_left :: [[integer]], top_right :: [[integer]]) :: integer\n  def largest_square_area(bottom_left, top_right) do\n    \n  end\nend"
  }
}
{
  "title": "Find Maximum Area of a Triangle",
  "problem_id": "3868",
  "frontend_id": "3588",
  "difficulty": "Medium",
  "problem_slug": "find-maximum-area-of-a-triangle",
  "topics": [
    "Array",
    "Hash Table",
    "Math",
    "Greedy",
    "Geometry",
    "Enumeration"
  ],
  "description": "You are given a 2D array coords of size n x 2, representing the coordinates of n points in an infinite Cartesian plane.\nFind twice the maximum area of a triangle with its corners at any three elements from coords, such that at least one side of this triangle is parallel to the x-axis or y-axis. Formally, if the maximum area of such a triangle is A, return 2 * A.\nIf no such triangle exists, return -1.\nNote that a triangle cannot have zero area.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: coords = [[1,1],[1,2],[3,2],[3,3]]\nOutput: 2\nExplanation:\n\nThe triangle shown in the image has a base 1 and height 2. Hence its area is 1/2 * base * height = 1 .",
      "images": [
        "https://assets.leetcode.com/uploads/2025/04/19/image-20250420010047-1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: coords = [[1,1],[2,2],[3,3]]\nOutput: -1\nExplanation:\nThe only possible triangle has corners (1, 1) , (2, 2) , and (3, 3) . None of its sides are parallel to the x-axis or the y-axis.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n == coords.length <= 105",
    "1 <= coords[i][0], coords[i][1] <= 106",
    "All coords[i] are unique."
  ],
  "follow_ups": [],
  "hints": [
    "<code>area * 2 = base * height</code>",
    "Let the base be parallel to the x‑axis or y‑axis",
    "Sort to find the maximum base for each fixed <code>x</code> (or <code>y</code>), then the maximum height comes from the extreme values of the other coordinate."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long maxArea(vector<vector<int>>& coords) {\n        \n    }\n};",
    "java": "class Solution {\n    public long maxArea(int[][] coords) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxArea(self, coords):\n        \"\"\"\n        :type coords: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxArea(self, coords: List[List[int]]) -> int:\n        ",
    "c": "long long maxArea(int** coords, int coordsSize, int* coordsColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public long MaxArea(int[][] coords) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} coords\n * @return {number}\n */\nvar maxArea = function(coords) {\n    \n};",
    "typescript": "function maxArea(coords: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $coords\n     * @return Integer\n     */\n    function maxArea($coords) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxArea(_ coords: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxArea(coords: Array<IntArray>): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxArea(List<List<int>> coords) {\n    \n  }\n}",
    "golang": "func maxArea(coords [][]int) int64 {\n    \n}",
    "ruby": "# @param {Integer[][]} coords\n# @return {Integer}\ndef max_area(coords)\n    \nend",
    "scala": "object Solution {\n    def maxArea(coords: Array[Array[Int]]): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_area(coords: Vec<Vec<i32>>) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (max-area coords)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec max_area(Coords :: [[integer()]]) -> integer().\nmax_area(Coords) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_area(coords :: [[integer]]) :: integer\n  def max_area(coords) do\n    \n  end\nend"
  }
}
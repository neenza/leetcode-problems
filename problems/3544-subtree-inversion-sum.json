{
  "title": "Subtree Inversion Sum",
  "problem_id": "3858",
  "frontend_id": "3544",
  "difficulty": "Hard",
  "problem_slug": "subtree-inversion-sum",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Tree",
    "Depth-First Search"
  ],
  "description": "You are given an undirected tree rooted at node 0, with n nodes numbered from 0 to n - 1. The tree is represented by a 2D integer array edges of length n - 1, where edges[i] = [ui, vi] indicates an edge between nodes ui and vi.\nYou are also given an integer array nums of length n, where nums[i] represents the value at node i, and an integer k.\nYou may perform inversion operations on a subset of nodes subject to the following rules:\nReturn the maximum possible sum of the tree's node values after applying inversion operations.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], nums = [4,-8,-6,3,7,-2,5], k = 2\nOutput: 27\nExplanation:\n",
      "images": [
        "https://assets.leetcode.com/uploads/2025/03/29/tree1-3.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: edges = [[0,1],[1,2],[2,3],[3,4]], nums = [-1,3,-2,4,-5], k = 2\nOutput: 9\nExplanation:\n",
      "images": [
        "https://assets.leetcode.com/uploads/2025/03/29/tree2-1.jpg"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: edges = [[0,1],[0,2]], nums = [0,-1,-2], k = 3\nOutput: 3\nExplanation:\nApply inversion operations at nodes 1 and 2.",
      "images": []
    }
  ],
  "constraints": [
    "2 <= n <= 5 * 104",
    "edges.length == n - 1",
    "edges[i] = [ui, vi]",
    "0 <= ui, vi < n",
    "nums.length == n",
    "-5 * 104 <= nums[i] <= 5 * 104",
    "1 <= k <= 50",
    "The input is generated such that edges represents a valid tree."
  ],
  "follow_ups": [],
  "hints": [
    "Use treeâ€‘based dynamic programming",
    "Define your DP state as dp[node][parityFromAncestorInversions][distSinceLastInversion]",
    "<code>node</code> is the current tree node",
    "<code>parityFromAncestorInversions</code> indicates whether the subtree values have been flipped an even (0) or odd (1) number of times by ancestor inversions",
    "<code>distSinceLastInversion</code> tracks the number of edges from this node up to the most recent ancestor inversion"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long subtreeInversionSum(vector<vector<int>>& edges, vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public long subtreeInversionSum(int[][] edges, int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def subtreeInversionSum(self, edges, nums, k):\n        \"\"\"\n        :type edges: List[List[int]]\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def subtreeInversionSum(self, edges: List[List[int]], nums: List[int], k: int) -> int:\n        ",
    "c": "long long subtreeInversionSum(int** edges, int edgesSize, int* edgesColSize, int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public long SubtreeInversionSum(int[][] edges, int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} edges\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar subtreeInversionSum = function(edges, nums, k) {\n    \n};",
    "typescript": "function subtreeInversionSum(edges: number[][], nums: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $edges\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function subtreeInversionSum($edges, $nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func subtreeInversionSum(_ edges: [[Int]], _ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun subtreeInversionSum(edges: Array<IntArray>, nums: IntArray, k: Int): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int subtreeInversionSum(List<List<int>> edges, List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func subtreeInversionSum(edges [][]int, nums []int, k int) int64 {\n    \n}",
    "ruby": "# @param {Integer[][]} edges\n# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef subtree_inversion_sum(edges, nums, k)\n    \nend",
    "scala": "object Solution {\n    def subtreeInversionSum(edges: Array[Array[Int]], nums: Array[Int], k: Int): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn subtree_inversion_sum(edges: Vec<Vec<i32>>, nums: Vec<i32>, k: i32) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (subtree-inversion-sum edges nums k)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec subtree_inversion_sum(Edges :: [[integer()]], Nums :: [integer()], K :: integer()) -> integer().\nsubtree_inversion_sum(Edges, Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec subtree_inversion_sum(edges :: [[integer]], nums :: [integer], k :: integer) :: integer\n  def subtree_inversion_sum(edges, nums, k) do\n    \n  end\nend"
  }
}
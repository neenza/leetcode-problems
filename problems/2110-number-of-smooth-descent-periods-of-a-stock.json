{
  "title": "Number of Smooth Descent Periods of a Stock",
  "problem_id": "2233",
  "frontend_id": "2110",
  "difficulty": "Medium",
  "problem_slug": "number-of-smooth-descent-periods-of-a-stock",
  "topics": [
    "Array",
    "Math",
    "Dynamic Programming"
  ],
  "description": "You are given an integer array prices representing the daily price history of a stock, where prices[i] is the stock price on the ith day.\nA smooth descent period of a stock consists of one or more contiguous days such that the price on each day is lower than the price on the preceding day by exactly 1. The first day of the period is exempted from this rule.\nReturn the number of smooth descent periods.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: prices = [3,2,1,4]\nOutput: 7\nExplanation: There are 7 smooth descent periods:\n[3], [2], [1], [4], [3,2], [2,1], and [3,2,1]\nNote that a period with one day is a smooth descent period by the definition.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: prices = [8,6,7,7]\nOutput: 4\nExplanation: There are 4 smooth descent periods: [8], [6], [7], and [7]\nNote that [8,6] is not a smooth descent period as 8 - 6 â‰  1.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: prices = [1]\nOutput: 1\nExplanation: There is 1 smooth descent period: [1]",
      "images": []
    }
  ],
  "constraints": [
    "1 <= prices.length <= 105",
    "1 <= prices[i] <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "Any array is a series of adjacent longest possible smooth descent periods. For example, [5,3,2,1,7,6] is [5] + [3,2,1] + [7,6].",
    "Think of a 2-pointer approach to traverse the array and find each longest possible period.",
    "Suppose you found the longest possible period with a length of k. How many periods are within that period? How can you count them quickly? Think of the formula to calculate the sum of 1, 2, 3, ..., k."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long getDescentPeriods(vector<int>& prices) {\n        \n    }\n};",
    "java": "class Solution {\n    public long getDescentPeriods(int[] prices) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def getDescentPeriods(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def getDescentPeriods(self, prices: List[int]) -> int:\n        ",
    "c": "long long getDescentPeriods(int* prices, int pricesSize) {\n    \n}",
    "csharp": "public class Solution {\n    public long GetDescentPeriods(int[] prices) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} prices\n * @return {number}\n */\nvar getDescentPeriods = function(prices) {\n    \n};",
    "typescript": "function getDescentPeriods(prices: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $prices\n     * @return Integer\n     */\n    function getDescentPeriods($prices) {\n        \n    }\n}",
    "swift": "class Solution {\n    func getDescentPeriods(_ prices: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun getDescentPeriods(prices: IntArray): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int getDescentPeriods(List<int> prices) {\n    \n  }\n}",
    "golang": "func getDescentPeriods(prices []int) int64 {\n    \n}",
    "ruby": "# @param {Integer[]} prices\n# @return {Integer}\ndef get_descent_periods(prices)\n    \nend",
    "scala": "object Solution {\n    def getDescentPeriods(prices: Array[Int]): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn get_descent_periods(prices: Vec<i32>) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (get-descent-periods prices)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec get_descent_periods(Prices :: [integer()]) -> integer().\nget_descent_periods(Prices) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec get_descent_periods(prices :: [integer]) :: integer\n  def get_descent_periods(prices) do\n    \n  end\nend"
  }
}
{
  "title": "Find Kth Largest XOR Coordinate Value",
  "problem_id": "1860",
  "frontend_id": "1738",
  "difficulty": "Medium",
  "problem_slug": "find-kth-largest-xor-coordinate-value",
  "topics": [
    "Array",
    "Divide and Conquer",
    "Bit Manipulation",
    "Sorting",
    "Heap (Priority Queue)",
    "Matrix",
    "Prefix Sum",
    "Quickselect"
  ],
  "description": "You are given a 2D matrix of size m x n, consisting of non-negative integers. You are also given an integer k.\nThe value of coordinate (a, b) of the matrix is the XOR of all matrix[i][j] where 0 <= i <= a < m and 0 <= j <= b < n (0-indexed).\nFind the kth largest value (1-indexed) of all the coordinates of matrix.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: matrix = [[5,2],[1,6]], k = 1\nOutput: 7\nExplanation: The value of coordinate (0,1) is 5 XOR 2 = 7, which is the largest value.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: matrix = [[5,2],[1,6]], k = 2\nOutput: 5\nExplanation: The value of coordinate (0,0) is 5 = 5, which is the 2nd largest value.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: matrix = [[5,2],[1,6]], k = 3\nOutput: 4\nExplanation: The value of coordinate (1,0) is 5 XOR 1 = 4, which is the 3rd largest value.",
      "images": []
    }
  ],
  "constraints": [
    "m == matrix.length",
    "n == matrix[i].length",
    "1 <= m, n <= 1000",
    "0 <= matrix[i][j] <= 106",
    "1 <= k <= m * n"
  ],
  "follow_ups": [],
  "hints": [
    "Use a 2D prefix sum to precalculate the xor-sum of the upper left submatrix."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int kthLargestValue(vector<vector<int>>& matrix, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int kthLargestValue(int[][] matrix, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def kthLargestValue(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def kthLargestValue(self, matrix: List[List[int]], k: int) -> int:\n        ",
    "c": "int kthLargestValue(int** matrix, int matrixSize, int* matrixColSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int KthLargestValue(int[][] matrix, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} matrix\n * @param {number} k\n * @return {number}\n */\nvar kthLargestValue = function(matrix, k) {\n    \n};",
    "typescript": "function kthLargestValue(matrix: number[][], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $matrix\n     * @param Integer $k\n     * @return Integer\n     */\n    function kthLargestValue($matrix, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func kthLargestValue(_ matrix: [[Int]], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun kthLargestValue(matrix: Array<IntArray>, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int kthLargestValue(List<List<int>> matrix, int k) {\n    \n  }\n}",
    "golang": "func kthLargestValue(matrix [][]int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} matrix\n# @param {Integer} k\n# @return {Integer}\ndef kth_largest_value(matrix, k)\n    \nend",
    "scala": "object Solution {\n    def kthLargestValue(matrix: Array[Array[Int]], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn kth_largest_value(matrix: Vec<Vec<i32>>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (kth-largest-value matrix k)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec kth_largest_value(Matrix :: [[integer()]], K :: integer()) -> integer().\nkth_largest_value(Matrix, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec kth_largest_value(matrix :: [[integer]], k :: integer) :: integer\n  def kth_largest_value(matrix, k) do\n    \n  end\nend"
  }
}
{
  "title": "Distribute Candies to People",
  "problem_id": "1195",
  "frontend_id": "1103",
  "difficulty": "Easy",
  "problem_slug": "distribute-candies-to-people",
  "topics": [
    "Math",
    "Simulation"
  ],
  "description": "We distribute some number of candies, to a row of n = num_people people in the following way:\nWe then give 1 candy to the first person, 2 candies to the second person, and so on until we give n candies to the last person.\nThen, we go back to the start of the row, giving n + 1 candies to the first person, n + 2 candies to the second person, and so on until we give 2 * n candies to the last person.\nThis process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies.  The last person will receive all of our remaining candies (not necessarily one more than the previous gift).\nReturn an array (of length num_people and sum candies) that represents the final distribution of candies.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: candies = 7, num_people = 4\nOutput: [1,2,3,1]\nExplanation:\nOn the first turn, ans[0] += 1, and the array is [1,0,0,0].\nOn the second turn, ans[1] += 2, and the array is [1,2,0,0].\nOn the third turn, ans[2] += 3, and the array is [1,2,3,0].\nOn the fourth turn, ans[3] += 1 (because there is only one candy left), and the final array is [1,2,3,1].",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: candies = 10, num_people = 3\nOutput: [5,2,3]\nExplanation: \nOn the first turn, ans[0] += 1, and the array is [1,0,0].\nOn the second turn, ans[1] += 2, and the array is [1,2,0].\nOn the third turn, ans[2] += 3, and the array is [1,2,3].\nOn the fourth turn, ans[0] += 4, and the final array is [5,2,3].",
      "images": []
    }
  ],
  "constraints": [
    "1 <= candies <= 10^9",
    "1 <= num_people <= 1000"
  ],
  "follow_ups": [],
  "hints": [
    "Give candy to everyone each \"turn\" first [until you can't], then give candy to one person per turn."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> distributeCandies(int candies, int num_people) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] distributeCandies(int candies, int num_people) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def distributeCandies(self, candies, num_people):\n        \"\"\"\n        :type candies: int\n        :type num_people: int\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def distributeCandies(self, candies: int, num_people: int) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* distributeCandies(int candies, int num_people, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] DistributeCandies(int candies, int num_people) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} candies\n * @param {number} num_people\n * @return {number[]}\n */\nvar distributeCandies = function(candies, num_people) {\n    \n};",
    "typescript": "function distributeCandies(candies: number, num_people: number): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $candies\n     * @param Integer $num_people\n     * @return Integer[]\n     */\n    function distributeCandies($candies, $num_people) {\n        \n    }\n}",
    "swift": "class Solution {\n    func distributeCandies(_ candies: Int, _ num_people: Int) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun distributeCandies(candies: Int, num_people: Int): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> distributeCandies(int candies, int num_people) {\n    \n  }\n}",
    "golang": "func distributeCandies(candies int, num_people int) []int {\n    \n}",
    "ruby": "# @param {Integer} candies\n# @param {Integer} num_people\n# @return {Integer[]}\ndef distribute_candies(candies, num_people)\n    \nend",
    "scala": "object Solution {\n    def distributeCandies(candies: Int, num_people: Int): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn distribute_candies(candies: i32, num_people: i32) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (distribute-candies candies num_people)\n  (-> exact-integer? exact-integer? (listof exact-integer?))\n  )",
    "erlang": "-spec distribute_candies(Candies :: integer(), Num_people :: integer()) -> [integer()].\ndistribute_candies(Candies, Num_people) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec distribute_candies(candies :: integer, num_people :: integer) :: [integer]\n  def distribute_candies(candies, num_people) do\n    \n  end\nend"
  }
}
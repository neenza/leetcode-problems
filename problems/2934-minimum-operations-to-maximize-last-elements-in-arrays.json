{
  "title": "Minimum Operations to Maximize Last Elements in Arrays",
  "problem_id": "3190",
  "frontend_id": "2934",
  "difficulty": "Medium",
  "problem_slug": "minimum-operations-to-maximize-last-elements-in-arrays",
  "topics": [
    "Array",
    "Enumeration"
  ],
  "description": "You are given two 0-indexed integer arrays, nums1 and nums2, both having length n.\nYou are allowed to perform a series of operations (possibly none).\nIn an operation, you select an index i in the range [0, n - 1] and swap the values of nums1[i] and nums2[i].\nYour task is to find the minimum number of operations required to satisfy the following conditions:\nReturn an integer denoting the minimum number of operations needed to meet both conditions, or -1 if it is impossible to satisfy both conditions.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums1 = [1,2,7], nums2 = [4,5,3]\nOutput: 1\nExplanation: In this example, an operation can be performed using index i = 2.\nWhen nums1[2] and nums2[2] are swapped, nums1 becomes [1,2,3] and nums2 becomes [4,5,7].\nBoth conditions are now satisfied.\nIt can be shown that the minimum number of operations needed to be performed is 1.\nSo, the answer is 1.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums1 = [2,3,4,5,9], nums2 = [8,8,4,4,4]\nOutput: 2\nExplanation: In this example, the following operations can be performed:\nFirst operation using index i = 4.\nWhen nums1[4] and nums2[4] are swapped, nums1 becomes [2,3,4,5,4], and nums2 becomes [8,8,4,4,9].\nAnother operation using index i = 3.\nWhen nums1[3] and nums2[3] are swapped, nums1 becomes [2,3,4,4,4], and nums2 becomes [8,8,4,5,9].\nBoth conditions are now satisfied.\nIt can be shown that the minimum number of operations needed to be performed is 2.\nSo, the answer is 2.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums1 = [1,5,4], nums2 = [2,5,3]\nOutput: -1\nExplanation: In this example, it is not possible to satisfy both conditions. \nSo, the answer is -1.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n == nums1.length == nums2.length <= 1000",
    "1 <= nums1[i] <= 109",
    "1 <= nums2[i] <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "Consider how to calculate the minimum number of operations when <code>nums1[n - 1]</code> and <code>nums2[n - 1]</code> are fixed (they are not swapped).",
    "For each index <code>i</code>, there are only <code>3</code> possibilities: <ul>\r\n<li><code>nums1[i] <= nums1[n - 1] && nums2[i] <= nums2[n - 1]</code>. We don't need to swap them.</li>\r\n<li><code>nums1[i] <= nums2[n - 1] && nums2[i] <= nums1[n - 1]</code>. We have to swap them.</li>\r\n<li>Otherwise, there is no solution.</li>\r\n</ul>",
    "There are <code>2</code> cases to determine the minimum number of operations: <ul>\r\n<li>The first case is the number of indices that need to be swapped when <code>nums1[n - 1]</code> and <code>nums2[n - 1]</code> are fixed.</li>\r\n<li>The second case is <code>1 +</code> the number of indices that need to be swapped when <code>nums1[n - 1]</code> and <code>nums2[n - 1]</code> are swapped.</li>\r\n</ul>",
    "The answer is the minimum of both cases or <code>-1</code> if there is no solution in either case."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minOperations(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minOperations(int[] nums1, int[] nums2) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minOperations(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minOperations(self, nums1: List[int], nums2: List[int]) -> int:\n        ",
    "c": "int minOperations(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinOperations(int[] nums1, int[] nums2) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar minOperations = function(nums1, nums2) {\n    \n};",
    "typescript": "function minOperations(nums1: number[], nums2: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function minOperations($nums1, $nums2) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minOperations(_ nums1: [Int], _ nums2: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minOperations(nums1: IntArray, nums2: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minOperations(List<int> nums1, List<int> nums2) {\n    \n  }\n}",
    "golang": "func minOperations(nums1 []int, nums2 []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef min_operations(nums1, nums2)\n    \nend",
    "scala": "object Solution {\n    def minOperations(nums1: Array[Int], nums2: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_operations(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-operations nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec min_operations(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\nmin_operations(Nums1, Nums2) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_operations(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def min_operations(nums1, nums2) do\n    \n  end\nend"
  }
}
{
  "title": "Maximum Number of Pairs in Array",
  "problem_id": "2421",
  "frontend_id": "2341",
  "difficulty": "Easy",
  "problem_slug": "maximum-number-of-pairs-in-array",
  "topics": [
    "Array",
    "Hash Table",
    "Counting"
  ],
  "description": "You are given a 0-indexed integer array nums. In one operation, you may do the following:\nThe operation is done on nums as many times as possible.\nReturn a 0-indexed integer array answer of size 2 where answer[0] is the number of pairs that are formed and answer[1] is the number of leftover integers in nums after doing the operation as many times as possible.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,3,2,1,3,2,2]\nOutput: [3,1]\nExplanation:\nForm a pair with nums[0] and nums[3] and remove them from nums. Now, nums = [3,2,3,2,2].\nForm a pair with nums[0] and nums[2] and remove them from nums. Now, nums = [2,2,2].\nForm a pair with nums[0] and nums[1] and remove them from nums. Now, nums = [2].\nNo more pairs can be formed. A total of 3 pairs have been formed, and there is 1 number leftover in nums.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,1]\nOutput: [1,0]\nExplanation: Form a pair with nums[0] and nums[1] and remove them from nums. Now, nums = [].\nNo more pairs can be formed. A total of 1 pair has been formed, and there are 0 numbers leftover in nums.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [0]\nOutput: [0,1]\nExplanation: No pairs can be formed, and there is 1 number leftover in nums.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 100",
    "0 <= nums[i] <= 100"
  ],
  "follow_ups": [],
  "hints": [
    "What do we need to know to find how many pairs we can make? We need to know the frequency of each integer.",
    "When will there be a leftover number? When the frequency of an integer is an odd number."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> numberOfPairs(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] numberOfPairs(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numberOfPairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numberOfPairs(self, nums: List[int]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* numberOfPairs(int* nums, int numsSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] NumberOfPairs(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar numberOfPairs = function(nums) {\n    \n};",
    "typescript": "function numberOfPairs(nums: number[]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function numberOfPairs($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numberOfPairs(_ nums: [Int]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numberOfPairs(nums: IntArray): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> numberOfPairs(List<int> nums) {\n    \n  }\n}",
    "golang": "func numberOfPairs(nums []int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef number_of_pairs(nums)\n    \nend",
    "scala": "object Solution {\n    def numberOfPairs(nums: Array[Int]): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn number_of_pairs(nums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (number-of-pairs nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )",
    "erlang": "-spec number_of_pairs(Nums :: [integer()]) -> [integer()].\nnumber_of_pairs(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec number_of_pairs(nums :: [integer]) :: [integer]\n  def number_of_pairs(nums) do\n    \n  end\nend"
  }
}
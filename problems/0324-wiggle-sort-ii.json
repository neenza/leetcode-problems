{
  "title": "Wiggle Sort II",
  "problem_id": "324",
  "frontend_id": "324",
  "difficulty": "Medium",
  "problem_slug": "wiggle-sort-ii",
  "topics": [
    "Array",
    "Divide and Conquer",
    "Greedy",
    "Sorting",
    "Quickselect"
  ],
  "description": "Given an integer array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....\nYou may assume the input array always has a valid answer.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,5,1,1,6,4]\nOutput: [1,6,1,5,1,4]\nExplanation: [1,4,1,5,1,6] is also accepted.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,3,2,2,3,1]\nOutput: [2,3,1,3,1,2]",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 5 * 104",
    "0 <= nums[i] <= 5000",
    "It is guaranteed that there will be an answer for the given input nums."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    void wiggleSort(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public void wiggleSort(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def wiggleSort(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def wiggleSort(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        ",
    "c": "void wiggleSort(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public void WiggleSort(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar wiggleSort = function(nums) {\n    \n};",
    "typescript": "/**\n Do not return anything, modify nums in-place instead.\n */\nfunction wiggleSort(nums: number[]): void {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return NULL\n     */\n    function wiggleSort(&$nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func wiggleSort(_ nums: inout [Int]) {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun wiggleSort(nums: IntArray): Unit {\n        \n    }\n}",
    "dart": "class Solution {\n  void wiggleSort(List<int> nums) {\n    \n  }\n}",
    "golang": "func wiggleSort(nums []int)  {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Void} Do not return anything, modify nums in-place instead.\ndef wiggle_sort(nums)\n    \nend",
    "scala": "object Solution {\n    def wiggleSort(nums: Array[Int]): Unit = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn wiggle_sort(nums: &mut Vec<i32>) {\n        \n    }\n}"
  }
}
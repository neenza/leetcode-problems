{
  "title": "Minimum Number of Operations to Make X and Y Equal",
  "problem_id": "3239",
  "frontend_id": "2998",
  "difficulty": "Medium",
  "problem_slug": "minimum-number-of-operations-to-make-x-and-y-equal",
  "topics": [
    "Dynamic Programming",
    "Breadth-First Search",
    "Memoization"
  ],
  "description": "You are given two positive integers x and y.\nIn one operation, you can do one of the four following operations:\nReturn the minimum number of operations required to make  x and y equal.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: x = 26, y = 1\nOutput: 3\nExplanation: We can make 26 equal to 1 by applying the following operations: \n1. Decrement x by 1\n2. Divide x by 5\n3. Divide x by 5\nIt can be shown that 3 is the minimum number of operations required to make 26 equal to 1.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: x = 54, y = 2\nOutput: 4\nExplanation: We can make 54 equal to 2 by applying the following operations: \n1. Increment x by 1\n2. Divide x by 11 \n3. Divide x by 5\n4. Increment x by 1\nIt can be shown that 4 is the minimum number of operations required to make 54 equal to 2.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: x = 25, y = 30\nOutput: 5\nExplanation: We can make 25 equal to 30 by applying the following operations: \n1. Increment x by 1\n2. Increment x by 1\n3. Increment x by 1\n4. Increment x by 1\n5. Increment x by 1\nIt can be shown that 5 is the minimum number of operations required to make 25 equal to 30.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= x, y <= 104"
  ],
  "follow_ups": [],
  "hints": [
    "The only way to make <code>x</code> larger is to increase it by <code>1</code> so if <code>y >= x</code> the answer is <code>y - x</code>.",
    "For <code>y < x</code>, <code>x - y</code> is always a candidate answer since we can repeatedly decrease <code>x</code> by one to reach <code>y</code>.",
    "We can also increase <code>x</code> and then use the division operations. For example, if <code>x = 10</code> and <code>y = 1</code>, we can increment <code>x</code> by <code>1</code> then divide it by <code>11</code>.",
    "Find an upper bound <code>U</code> on the maximum value of <code>x</code> we will reach an optimal solution. Since all values of <code>x</code> will be in the range <code>[1, U]</code>, we can use BFS to find the answer.",
    "One possible upper bound on <code>x</code> is <code>U = x + (x - y) </code>. To reach any number strictly greater than <code>U</code> from <code>x</code>, we will need more than <code>x - y</code> operations which is not optimal since we can always reach <code>y</code> in <code>x - y</code> operations."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimumOperationsToMakeEqual(int x, int y) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimumOperationsToMakeEqual(int x, int y) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumOperationsToMakeEqual(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumOperationsToMakeEqual(self, x: int, y: int) -> int:\n        ",
    "c": "int minimumOperationsToMakeEqual(int x, int y) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimumOperationsToMakeEqual(int x, int y) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nvar minimumOperationsToMakeEqual = function(x, y) {\n    \n};",
    "typescript": "function minimumOperationsToMakeEqual(x: number, y: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @param Integer $y\n     * @return Integer\n     */\n    function minimumOperationsToMakeEqual($x, $y) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumOperationsToMakeEqual(_ x: Int, _ y: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumOperationsToMakeEqual(x: Int, y: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumOperationsToMakeEqual(int x, int y) {\n    \n  }\n}",
    "golang": "func minimumOperationsToMakeEqual(x int, y int) int {\n    \n}",
    "ruby": "# @param {Integer} x\n# @param {Integer} y\n# @return {Integer}\ndef minimum_operations_to_make_equal(x, y)\n    \nend",
    "scala": "object Solution {\n    def minimumOperationsToMakeEqual(x: Int, y: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_operations_to_make_equal(x: i32, y: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-operations-to-make-equal x y)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec minimum_operations_to_make_equal(X :: integer(), Y :: integer()) -> integer().\nminimum_operations_to_make_equal(X, Y) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_operations_to_make_equal(x :: integer, y :: integer) :: integer\n  def minimum_operations_to_make_equal(x, y) do\n    \n  end\nend"
  }
}
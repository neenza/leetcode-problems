{
  "title": "Find the N-th Value After K Seconds",
  "problem_id": "3422",
  "frontend_id": "3179",
  "difficulty": "Medium",
  "problem_slug": "find-the-n-th-value-after-k-seconds",
  "topics": [
    "Array",
    "Math",
    "Simulation",
    "Combinatorics",
    "Prefix Sum"
  ],
  "description": "You are given two integers n and k.\nInitially, you start with an array a of n integers where a[i] = 1 for all 0 <= i <= n - 1. After each second, you simultaneously update each element to be the sum of all its preceding elements plus the element itself. For example, after one second, a[0] remains the same, a[1] becomes a[0] + a[1], a[2] becomes a[0] + a[1] + a[2], and so on.\nReturn the value of a[n - 1] after k seconds.\nSince the answer may be very large, return it modulo 109 + 7.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 4, k = 5\nOutput: 56\nExplanation:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 5, k = 3\nOutput: 35\nExplanation:",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n, k <= 1000"
  ],
  "follow_ups": [],
  "hints": [
    "Calculate the prefix sum array of <code>nums</code>, <code>k</code> times."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int valueAfterKSeconds(int n, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int valueAfterKSeconds(int n, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def valueAfterKSeconds(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def valueAfterKSeconds(self, n: int, k: int) -> int:\n        ",
    "c": "int valueAfterKSeconds(int n, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int ValueAfterKSeconds(int n, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar valueAfterKSeconds = function(n, k) {\n    \n};",
    "typescript": "function valueAfterKSeconds(n: number, k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer\n     */\n    function valueAfterKSeconds($n, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func valueAfterKSeconds(_ n: Int, _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun valueAfterKSeconds(n: Int, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int valueAfterKSeconds(int n, int k) {\n    \n  }\n}",
    "golang": "func valueAfterKSeconds(n int, k int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef value_after_k_seconds(n, k)\n    \nend",
    "scala": "object Solution {\n    def valueAfterKSeconds(n: Int, k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn value_after_k_seconds(n: i32, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (value-after-k-seconds n k)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec value_after_k_seconds(N :: integer(), K :: integer()) -> integer().\nvalue_after_k_seconds(N, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec value_after_k_seconds(n :: integer, k :: integer) :: integer\n  def value_after_k_seconds(n, k) do\n    \n  end\nend"
  }
}
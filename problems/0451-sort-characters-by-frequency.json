{
  "title": "Sort Characters By Frequency",
  "problem_id": "451",
  "frontend_id": "451",
  "difficulty": "Medium",
  "problem_slug": "sort-characters-by-frequency",
  "topics": [
    "Hash Table",
    "String",
    "Sorting",
    "Heap (Priority Queue)",
    "Bucket Sort",
    "Counting"
  ],
  "description": "Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.\nReturn the sorted string. If there are multiple answers, return any of them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"tree\"\nOutput: \"eert\"\nExplanation: 'e' appears twice while 'r' and 't' both appear once.\nSo 'e' must appear before both 'r' and 't'. Therefore \"eetr\" is also a valid answer.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"cccaaa\"\nOutput: \"aaaccc\"\nExplanation: Both 'c' and 'a' appear three times, so both \"cccaaa\" and \"aaaccc\" are valid answers.\nNote that \"cacaca\" is incorrect, as the same characters must be together.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"Aabb\"\nOutput: \"bbAa\"\nExplanation: \"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.\nNote that 'A' and 'a' are treated as two different characters.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 5 * 105",
    "s consists of uppercase and lowercase English letters and digits."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string frequencySort(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public String frequencySort(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def frequencySort(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def frequencySort(self, s: str) -> str:\n        ",
    "c": "char* frequencySort(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public string FrequencySort(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {string}\n */\nvar frequencySort = function(s) {\n    \n};",
    "typescript": "function frequencySort(s: string): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function frequencySort($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func frequencySort(_ s: String) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun frequencySort(s: String): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String frequencySort(String s) {\n    \n  }\n}",
    "golang": "func frequencySort(s string) string {\n    \n}",
    "ruby": "# @param {String} s\n# @return {String}\ndef frequency_sort(s)\n    \nend",
    "scala": "object Solution {\n    def frequencySort(s: String): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn frequency_sort(s: String) -> String {\n        \n    }\n}",
    "racket": "(define/contract (frequency-sort s)\n  (-> string? string?)\n  )",
    "erlang": "-spec frequency_sort(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nfrequency_sort(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec frequency_sort(s :: String.t) :: String.t\n  def frequency_sort(s) do\n    \n  end\nend"
  }
}
{
  "title": "Longest Alternating Subarray",
  "problem_id": "2870",
  "frontend_id": "2765",
  "difficulty": "Easy",
  "problem_slug": "longest-alternating-subarray",
  "topics": [
    "Array",
    "Enumeration"
  ],
  "description": "You are given a 0-indexed integer array nums. A subarray s of length m is called alternating if:\nReturn the maximum length of all alternating subarrays present in nums or -1 if no such subarray exists.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [2,3,4,3,4]\nOutput: 4\nExplanation:\nThe alternating subarrays are [2, 3] , [3,4] , [3,4,3] , and [3,4,3,4] . The longest of these is [3,4,3,4] , which is of length 4.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [4,5,6]\nOutput: 2\nExplanation:\n[4,5] and [5,6] are the only two alternating subarrays. They are both of length 2.",
      "images": []
    }
  ],
  "constraints": [
    "2 <= nums.length <= 100",
    "1 <= nums[i] <= 104"
  ],
  "follow_ups": [],
  "hints": [
    "As the constraints are low, you can check each subarray for the given condition."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int alternatingSubarray(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int alternatingSubarray(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def alternatingSubarray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def alternatingSubarray(self, nums: List[int]) -> int:\n        ",
    "c": "int alternatingSubarray(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int AlternatingSubarray(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar alternatingSubarray = function(nums) {\n    \n};",
    "typescript": "function alternatingSubarray(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function alternatingSubarray($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func alternatingSubarray(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun alternatingSubarray(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int alternatingSubarray(List<int> nums) {\n    \n  }\n}",
    "golang": "func alternatingSubarray(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef alternating_subarray(nums)\n    \nend",
    "scala": "object Solution {\n    def alternatingSubarray(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn alternating_subarray(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (alternating-subarray nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec alternating_subarray(Nums :: [integer()]) -> integer().\nalternating_subarray(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec alternating_subarray(nums :: [integer]) :: integer\n  def alternating_subarray(nums) do\n    \n  end\nend"
  }
}
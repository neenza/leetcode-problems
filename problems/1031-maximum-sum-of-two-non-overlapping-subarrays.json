{
  "title": "Maximum Sum of Two Non-Overlapping Subarrays",
  "problem_id": "1096",
  "frontend_id": "1031",
  "difficulty": "Medium",
  "problem_slug": "maximum-sum-of-two-non-overlapping-subarrays",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Sliding Window"
  ],
  "description": "Given an integer array nums and two integers firstLen and secondLen, return the maximum sum of elements in two non-overlapping subarrays with lengths firstLen and secondLen.\nThe array with length firstLen could occur before or after the array with length secondLen, but they have to be non-overlapping.\nA subarray is a contiguous part of an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [0,6,5,2,2,5,1,9,4], firstLen = 1, secondLen = 2\nOutput: 20\nExplanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [3,8,1,3,2,1,8,9,0], firstLen = 3, secondLen = 2\nOutput: 29\nExplanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [2,1,5,6,0,9,5,0,3,8], firstLen = 4, secondLen = 3\nOutput: 31\nExplanation: One choice of subarrays is [5,6,0,9] with length 4, and [0,3,8] with length 3.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= firstLen, secondLen <= 1000",
    "2 <= firstLen + secondLen <= 1000",
    "firstLen + secondLen <= nums.length <= 1000",
    "0 <= nums[i] <= 1000"
  ],
  "follow_ups": [],
  "hints": [
    "We can use prefix sums to calculate any subarray sum quickly.\r\nFor each L length subarray, find the best possible M length subarray that occurs before and after it."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxSumTwoNoOverlap(vector<int>& nums, int firstLen, int secondLen) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxSumTwoNoOverlap(int[] nums, int firstLen, int secondLen) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxSumTwoNoOverlap(self, nums, firstLen, secondLen):\n        \"\"\"\n        :type nums: List[int]\n        :type firstLen: int\n        :type secondLen: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxSumTwoNoOverlap(self, nums: List[int], firstLen: int, secondLen: int) -> int:\n        ",
    "c": "int maxSumTwoNoOverlap(int* nums, int numsSize, int firstLen, int secondLen) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxSumTwoNoOverlap(int[] nums, int firstLen, int secondLen) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} firstLen\n * @param {number} secondLen\n * @return {number}\n */\nvar maxSumTwoNoOverlap = function(nums, firstLen, secondLen) {\n    \n};",
    "typescript": "function maxSumTwoNoOverlap(nums: number[], firstLen: number, secondLen: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $firstLen\n     * @param Integer $secondLen\n     * @return Integer\n     */\n    function maxSumTwoNoOverlap($nums, $firstLen, $secondLen) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxSumTwoNoOverlap(_ nums: [Int], _ firstLen: Int, _ secondLen: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxSumTwoNoOverlap(nums: IntArray, firstLen: Int, secondLen: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxSumTwoNoOverlap(List<int> nums, int firstLen, int secondLen) {\n    \n  }\n}",
    "golang": "func maxSumTwoNoOverlap(nums []int, firstLen int, secondLen int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} first_len\n# @param {Integer} second_len\n# @return {Integer}\ndef max_sum_two_no_overlap(nums, first_len, second_len)\n    \nend",
    "scala": "object Solution {\n    def maxSumTwoNoOverlap(nums: Array[Int], firstLen: Int, secondLen: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_sum_two_no_overlap(nums: Vec<i32>, first_len: i32, second_len: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-sum-two-no-overlap nums firstLen secondLen)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec max_sum_two_no_overlap(Nums :: [integer()], FirstLen :: integer(), SecondLen :: integer()) -> integer().\nmax_sum_two_no_overlap(Nums, FirstLen, SecondLen) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_sum_two_no_overlap(nums :: [integer], first_len :: integer, second_len :: integer) :: integer\n  def max_sum_two_no_overlap(nums, first_len, second_len) do\n    \n  end\nend"
  }
}
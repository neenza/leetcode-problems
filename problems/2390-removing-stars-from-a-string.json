{
  "title": "Removing Stars From a String",
  "problem_id": "2470",
  "frontend_id": "2390",
  "difficulty": "Medium",
  "problem_slug": "removing-stars-from-a-string",
  "topics": [
    "String",
    "Stack",
    "Simulation"
  ],
  "description": "You are given a string s, which contains stars *.\nIn one operation, you can:\nReturn the string after all stars have been removed.\nNote:\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"leet**cod*e\"\nOutput: \"lecoe\"\nExplanation: Performing the removals from left to right:\n- The closest character to the 1st star is 't' in \"leet**cod*e\". s becomes \"lee*cod*e\".\n- The closest character to the 2nd star is 'e' in \"lee*cod*e\". s becomes \"lecod*e\".\n- The closest character to the 3rd star is 'd' in \"lecod*e\". s becomes \"lecoe\".\nThere are no more stars, so we return \"lecoe\".",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"erase*****\"\nOutput: \"\"\nExplanation: The entire string is removed, so we return an empty string.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 105",
    "s consists of lowercase English letters and stars *.",
    "The operation above can be performed on s."
  ],
  "follow_ups": [],
  "hints": [
    "What data structure could we use to efficiently perform these removals?",
    "Use a stack to store the characters. Pop one character off the stack at each star. Otherwise, we push the character onto the stack."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string removeStars(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public String removeStars(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def removeStars(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def removeStars(self, s: str) -> str:\n        ",
    "c": "char* removeStars(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public string RemoveStars(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {string}\n */\nvar removeStars = function(s) {\n    \n};",
    "typescript": "function removeStars(s: string): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function removeStars($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func removeStars(_ s: String) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun removeStars(s: String): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String removeStars(String s) {\n    \n  }\n}",
    "golang": "func removeStars(s string) string {\n    \n}",
    "ruby": "# @param {String} s\n# @return {String}\ndef remove_stars(s)\n    \nend",
    "scala": "object Solution {\n    def removeStars(s: String): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn remove_stars(s: String) -> String {\n        \n    }\n}",
    "racket": "(define/contract (remove-stars s)\n  (-> string? string?)\n  )",
    "erlang": "-spec remove_stars(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nremove_stars(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec remove_stars(s :: String.t) :: String.t\n  def remove_stars(s) do\n    \n  end\nend"
  }
}
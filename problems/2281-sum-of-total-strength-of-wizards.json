{
  "title": "Sum of Total Strength of Wizards",
  "problem_id": "2368",
  "frontend_id": "2281",
  "difficulty": "Hard",
  "problem_slug": "sum-of-total-strength-of-wizards",
  "topics": [
    "Array",
    "Stack",
    "Monotonic Stack",
    "Prefix Sum"
  ],
  "description": "As the ruler of a kingdom, you have an army of wizards at your command.\nYou are given a 0-indexed integer array strength, where strength[i] denotes the strength of the ith wizard. For a contiguous group of wizards (i.e. the wizards' strengths form a subarray of strength), the total strength is defined as the product of the following two values:\nReturn the sum of the total strengths of all contiguous groups of wizards. Since the answer may be very large, return it modulo 109 + 7.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: strength = [1,3,1,2]\nOutput: 44\nExplanation: The following are all the contiguous groups of wizards:\n- [1] from [1,3,1,2] has a total strength of min([1]) * sum([1]) = 1 * 1 = 1\n- [3] from [1,3,1,2] has a total strength of min([3]) * sum([3]) = 3 * 3 = 9\n- [1] from [1,3,1,2] has a total strength of min([1]) * sum([1]) = 1 * 1 = 1\n- [2] from [1,3,1,2] has a total strength of min([2]) * sum([2]) = 2 * 2 = 4\n- [1,3] from [1,3,1,2] has a total strength of min([1,3]) * sum([1,3]) = 1 * 4 = 4\n- [3,1] from [1,3,1,2] has a total strength of min([3,1]) * sum([3,1]) = 1 * 4 = 4\n- [1,2] from [1,3,1,2] has a total strength of min([1,2]) * sum([1,2]) = 1 * 3 = 3\n- [1,3,1] from [1,3,1,2] has a total strength of min([1,3,1]) * sum([1,3,1]) = 1 * 5 = 5\n- [3,1,2] from [1,3,1,2] has a total strength of min([3,1,2]) * sum([3,1,2]) = 1 * 6 = 6\n- [1,3,1,2] from [1,3,1,2] has a total strength of min([1,3,1,2]) * sum([1,3,1,2]) = 1 * 7 = 7\nThe sum of all the total strengths is 1 + 9 + 1 + 4 + 4 + 4 + 3 + 5 + 6 + 7 = 44.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: strength = [5,4,6]\nOutput: 213\nExplanation: The following are all the contiguous groups of wizards: \n- [5] from [5,4,6] has a total strength of min([5]) * sum([5]) = 5 * 5 = 25\n- [4] from [5,4,6] has a total strength of min([4]) * sum([4]) = 4 * 4 = 16\n- [6] from [5,4,6] has a total strength of min([6]) * sum([6]) = 6 * 6 = 36\n- [5,4] from [5,4,6] has a total strength of min([5,4]) * sum([5,4]) = 4 * 9 = 36\n- [4,6] from [5,4,6] has a total strength of min([4,6]) * sum([4,6]) = 4 * 10 = 40\n- [5,4,6] from [5,4,6] has a total strength of min([5,4,6]) * sum([5,4,6]) = 4 * 15 = 60\nThe sum of all the total strengths is 25 + 16 + 36 + 36 + 40 + 60 = 213.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= strength.length <= 105",
    "1 <= strength[i] <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "Consider the contribution of each wizard to the answer.",
    "Can you efficiently calculate the total contribution to the answer for all subarrays that end at each index?",
    "Denote the total contribution of all subarrays ending at index i as solve[i]. Can you express solve[i] in terms of solve[m] for some m < i?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int totalStrength(vector<int>& strength) {\n        \n    }\n};",
    "java": "class Solution {\n    public int totalStrength(int[] strength) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def totalStrength(self, strength):\n        \"\"\"\n        :type strength: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def totalStrength(self, strength: List[int]) -> int:\n        ",
    "c": "int totalStrength(int* strength, int strengthSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int TotalStrength(int[] strength) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} strength\n * @return {number}\n */\nvar totalStrength = function(strength) {\n    \n};",
    "typescript": "function totalStrength(strength: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $strength\n     * @return Integer\n     */\n    function totalStrength($strength) {\n        \n    }\n}",
    "swift": "class Solution {\n    func totalStrength(_ strength: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun totalStrength(strength: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int totalStrength(List<int> strength) {\n    \n  }\n}",
    "golang": "func totalStrength(strength []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} strength\n# @return {Integer}\ndef total_strength(strength)\n    \nend",
    "scala": "object Solution {\n    def totalStrength(strength: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn total_strength(strength: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (total-strength strength)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec total_strength(Strength :: [integer()]) -> integer().\ntotal_strength(Strength) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec total_strength(strength :: [integer]) :: integer\n  def total_strength(strength) do\n    \n  end\nend"
  }
}
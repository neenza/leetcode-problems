{
  "title": "Minimize the Maximum of Two Arrays",
  "problem_id": "2628",
  "frontend_id": "2513",
  "difficulty": "Medium",
  "problem_slug": "minimize-the-maximum-of-two-arrays",
  "topics": [
    "Math",
    "Binary Search",
    "Number Theory"
  ],
  "description": "We have two arrays arr1 and arr2 which are initially empty. You need to add positive integers to them such that they satisfy all the following conditions:\nGiven divisor1, divisor2, uniqueCnt1, and uniqueCnt2, return the minimum possible maximum integer that can be present in either array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: divisor1 = 2, divisor2 = 7, uniqueCnt1 = 1, uniqueCnt2 = 3\nOutput: 4\nExplanation: \nWe can distribute the first 4 natural numbers into arr1 and arr2.\narr1 = [1] and arr2 = [2,3,4].\nWe can see that both arrays satisfy all the conditions.\nSince the maximum value is 4, we return it.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: divisor1 = 3, divisor2 = 5, uniqueCnt1 = 2, uniqueCnt2 = 1\nOutput: 3\nExplanation: \nHere arr1 = [1,2], and arr2 = [3] satisfy all conditions.\nSince the maximum value is 3, we return it.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: divisor1 = 2, divisor2 = 4, uniqueCnt1 = 8, uniqueCnt2 = 2\nOutput: 15\nExplanation: \nHere, the final possible arrays can be arr1 = [1,3,5,7,9,11,13,15], and arr2 = [2,6].\nIt can be shown that it is not possible to obtain a lower maximum satisfying all conditions.",
      "images": []
    }
  ],
  "constraints": [
    "2 <= divisor1, divisor2 <= 105",
    "1 <= uniqueCnt1, uniqueCnt2 < 109",
    "2 <= uniqueCnt1 + uniqueCnt2 <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "Use binary search to find smallest maximum element.",
    "Add numbers divisible by x in nums2 and vice versa."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimizeSet(int divisor1, int divisor2, int uniqueCnt1, int uniqueCnt2) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimizeSet(int divisor1, int divisor2, int uniqueCnt1, int uniqueCnt2) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimizeSet(self, divisor1, divisor2, uniqueCnt1, uniqueCnt2):\n        \"\"\"\n        :type divisor1: int\n        :type divisor2: int\n        :type uniqueCnt1: int\n        :type uniqueCnt2: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimizeSet(self, divisor1: int, divisor2: int, uniqueCnt1: int, uniqueCnt2: int) -> int:\n        ",
    "c": "int minimizeSet(int divisor1, int divisor2, int uniqueCnt1, int uniqueCnt2) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimizeSet(int divisor1, int divisor2, int uniqueCnt1, int uniqueCnt2) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} divisor1\n * @param {number} divisor2\n * @param {number} uniqueCnt1\n * @param {number} uniqueCnt2\n * @return {number}\n */\nvar minimizeSet = function(divisor1, divisor2, uniqueCnt1, uniqueCnt2) {\n    \n};",
    "typescript": "function minimizeSet(divisor1: number, divisor2: number, uniqueCnt1: number, uniqueCnt2: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $divisor1\n     * @param Integer $divisor2\n     * @param Integer $uniqueCnt1\n     * @param Integer $uniqueCnt2\n     * @return Integer\n     */\n    function minimizeSet($divisor1, $divisor2, $uniqueCnt1, $uniqueCnt2) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimizeSet(_ divisor1: Int, _ divisor2: Int, _ uniqueCnt1: Int, _ uniqueCnt2: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimizeSet(divisor1: Int, divisor2: Int, uniqueCnt1: Int, uniqueCnt2: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimizeSet(int divisor1, int divisor2, int uniqueCnt1, int uniqueCnt2) {\n    \n  }\n}",
    "golang": "func minimizeSet(divisor1 int, divisor2 int, uniqueCnt1 int, uniqueCnt2 int) int {\n    \n}",
    "ruby": "# @param {Integer} divisor1\n# @param {Integer} divisor2\n# @param {Integer} unique_cnt1\n# @param {Integer} unique_cnt2\n# @return {Integer}\ndef minimize_set(divisor1, divisor2, unique_cnt1, unique_cnt2)\n    \nend",
    "scala": "object Solution {\n    def minimizeSet(divisor1: Int, divisor2: Int, uniqueCnt1: Int, uniqueCnt2: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimize_set(divisor1: i32, divisor2: i32, unique_cnt1: i32, unique_cnt2: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimize-set divisor1 divisor2 uniqueCnt1 uniqueCnt2)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec minimize_set(Divisor1 :: integer(), Divisor2 :: integer(), UniqueCnt1 :: integer(), UniqueCnt2 :: integer()) -> integer().\nminimize_set(Divisor1, Divisor2, UniqueCnt1, UniqueCnt2) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimize_set(divisor1 :: integer, divisor2 :: integer, unique_cnt1 :: integer, unique_cnt2 :: integer) :: integer\n  def minimize_set(divisor1, divisor2, unique_cnt1, unique_cnt2) do\n    \n  end\nend"
  }
}
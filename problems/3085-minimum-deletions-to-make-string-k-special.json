{
  "title": "Minimum Deletions to Make String K-Special",
  "problem_id": "3360",
  "frontend_id": "3085",
  "difficulty": "Medium",
  "problem_slug": "minimum-deletions-to-make-string-k-special",
  "topics": [
    "Hash Table",
    "String",
    "Greedy",
    "Sorting",
    "Counting"
  ],
  "description": "You are given a string word and an integer k.\nWe consider word to be k-special if |freq(word[i]) - freq(word[j])| <= k for all indices i and j in the string.\nHere, freq(x) denotes the frequency of the character x in word, and |y| denotes the absolute value of y.\nReturn the minimum number of characters you need to delete to make word k-special.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: word = \"aabcaba\", k = 0\nOutput: 3\nExplanation: We can make word 0 -special by deleting 2 occurrences of \"a\" and 1 occurrence of \"c\" . Therefore, word becomes equal to \"baba\" where freq('a') == freq('b') == 2 .",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: word = \"dabdcbdcdcd\", k = 2\nOutput: 2\nExplanation: We can make word 2 -special by deleting 1 occurrence of \"a\" and 1 occurrence of \"d\" . Therefore, word becomes equal to \"bdcbdcdcd\" where freq('b') == 2 , freq('c') == 3 , and freq('d') == 4 .",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: word = \"aaabaaa\", k = 2\nOutput: 1\nExplanation: We can make word 2 -special by deleting 1 occurrence of \"b\" . Therefore, word becomes equal to \"aaaaaa\" where each letter's frequency is now uniformly 6 .",
      "images": []
    }
  ],
  "constraints": [
    "1 <= word.length <= 105",
    "0 <= k <= 105",
    "word consists only of lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [
    "Count the frequency of each letter.",
    "Suppose we select several characters as the final answer, and let <code>x</code> be the character with the smallest frequency in the answer. It can be shown that out of the selected characters, the optimal solution will never delete an occurrence of character <code>x</code> to obtain the answer.",
    "We will fix a character <code>c</code> and assume that it will be the character with the smallest frequency in the answer. Suppose its frequency is <code>x</code>.",
    "Then, for every other character, we will count the number of occurrences that will be deleted. Suppose that the current character has <code>y</code> occurrences. <ol> <li>If y < x, we need to delete all of them.</li> <li> if y > x + k, we should delete y - x - k of such character.</li> <li> Otherwise we donâ€™t need to delete it.</li></ol>"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimumDeletions(string word, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimumDeletions(String word, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumDeletions(self, word, k):\n        \"\"\"\n        :type word: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumDeletions(self, word: str, k: int) -> int:\n        ",
    "c": "int minimumDeletions(char* word, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimumDeletions(string word, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} word\n * @param {number} k\n * @return {number}\n */\nvar minimumDeletions = function(word, k) {\n    \n};",
    "typescript": "function minimumDeletions(word: string, k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $word\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumDeletions($word, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumDeletions(_ word: String, _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumDeletions(word: String, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumDeletions(String word, int k) {\n    \n  }\n}",
    "golang": "func minimumDeletions(word string, k int) int {\n    \n}",
    "ruby": "# @param {String} word\n# @param {Integer} k\n# @return {Integer}\ndef minimum_deletions(word, k)\n    \nend",
    "scala": "object Solution {\n    def minimumDeletions(word: String, k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_deletions(word: String, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-deletions word k)\n  (-> string? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec minimum_deletions(Word :: unicode:unicode_binary(), K :: integer()) -> integer().\nminimum_deletions(Word, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_deletions(word :: String.t, k :: integer) :: integer\n  def minimum_deletions(word, k) do\n    \n  end\nend"
  },
  "solution": "### Approach: Hash Table + Enumeration\n\n#### Intuition\n\nThe task requires us to delete certain characters from the given string so that the difference in the frequency of any two types of characters does not exceed $k$.\n\nTo do this, we first use a hash table to count the number of occurrences of each character, where $\\textit{cnt}[c]$ represents the number of times the character $c$ appears. Since there are only $26$ character types, we can enumerate one of them as the \"character with the lowest frequency after the deletion operation\" and set it as $c$. Then, all characters with frequencies less than $\\textit{cnt}[c]$ will be entirely deleted, and all characters with frequencies greater than $\\textit{cnt}[c] + k$ will be reduced to exactly $\\textit{cnt}[c] + k$ instances.\n\nAmong all such enumeration schemes, we select the one that results in the smallest total number of deletions.\n\n#### Implementation#### Complexity analysis\n\nLet $n$ be the length of the string $\\textit{word}$, and let $C$ be the size of the character set, which is $26$ in this case.\n\n- Time complexity: $O(n + C^2)$.\n  \n  We enumerate each character and calculate the number of deleted characters.\n\n- Space complexity: $O(C)$.\n  \n  The space complexity when using a hash table is $O(C)$."
}
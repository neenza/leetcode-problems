{
  "title": "Minimum ASCII Delete Sum for Two Strings",
  "problem_id": "712",
  "frontend_id": "712",
  "difficulty": "Medium",
  "problem_slug": "minimum-ascii-delete-sum-for-two-strings",
  "topics": [
    "String",
    "Dynamic Programming"
  ],
  "description": "Given two strings s1 andÂ s2, return the lowest ASCII sum of deleted characters to make two strings equal.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s1 = \"sea\", s2 = \"eat\"\nOutput: 231\nExplanation: Deleting \"s\" from \"sea\" adds the ASCII value of \"s\" (115) to the sum.\nDeleting \"t\" from \"eat\" adds 116 to the sum.\nAt the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s1 = \"delete\", s2 = \"leet\"\nOutput: 403\nExplanation: Deleting \"dee\" from \"delete\" to turn the string into \"let\",\nadds 100[d] + 101[e] + 101[e] to the sum.\nDeleting \"e\" from \"leet\" adds 101[e] to the sum.\nAt the end, both strings are equal to \"let\", and the answer is 100+101+101+101 = 403.\nIf instead we turned both strings into \"lee\" or \"eet\", we would get answers of 433 or 417, which are higher.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s1.length, s2.length <= 1000",
    "s1 and s2 consist of lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [
    "Let dp(i, j) be the answer for inputs s1[i:] and s2[j:]."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimumDeleteSum(string s1, string s2) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimumDeleteSum(String s1, String s2) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumDeleteSum(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumDeleteSum(self, s1: str, s2: str) -> int:\n        ",
    "c": "int minimumDeleteSum(char* s1, char* s2) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimumDeleteSum(string s1, string s2) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s1\n * @param {string} s2\n * @return {number}\n */\nvar minimumDeleteSum = function(s1, s2) {\n    \n};",
    "typescript": "function minimumDeleteSum(s1: string, s2: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @return Integer\n     */\n    function minimumDeleteSum($s1, $s2) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumDeleteSum(_ s1: String, _ s2: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumDeleteSum(s1: String, s2: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumDeleteSum(String s1, String s2) {\n    \n  }\n}",
    "golang": "func minimumDeleteSum(s1 string, s2 string) int {\n    \n}",
    "ruby": "# @param {String} s1\n# @param {String} s2\n# @return {Integer}\ndef minimum_delete_sum(s1, s2)\n    \nend",
    "scala": "object Solution {\n    def minimumDeleteSum(s1: String, s2: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_delete_sum(s1: String, s2: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-delete-sum s1 s2)\n  (-> string? string? exact-integer?)\n  )",
    "erlang": "-spec minimum_delete_sum(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary()) -> integer().\nminimum_delete_sum(S1, S2) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_delete_sum(s1 :: String.t, s2 :: String.t) :: integer\n  def minimum_delete_sum(s1, s2) do\n    \n  end\nend"
  }
}
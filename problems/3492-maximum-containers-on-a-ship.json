{
  "title": "Maximum Containers on a Ship",
  "problem_id": "3817",
  "frontend_id": "3492",
  "difficulty": "Easy",
  "problem_slug": "maximum-containers-on-a-ship",
  "topics": [
    "Math"
  ],
  "description": "You are given a positive integer n representing an n x n cargo deck on a ship. Each cell on the deck can hold one container with a weight of exactly w.\nHowever, the total weight of all containers, if loaded onto the deck, must not exceed the ship's maximum weight capacity, maxWeight.\nReturn the maximum number of containers that can be loaded onto the ship.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 2, w = 3, maxWeight = 15\nOutput: 4\nExplanation:\nThe deck has 4 cells, and each container weighs 3. The total weight of loading all containers is 12, which does not exceed maxWeight .",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 3, w = 5, maxWeight = 20\nOutput: 4\nExplanation:\nThe deck has 9 cells, and each container weighs 5. The maximum number of containers that can be loaded without exceeding maxWeight is 4.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 1000",
    "1 <= w <= 1000",
    "1 <= maxWeight <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "What are the limits on the number of containers?",
    "We can load at most <code>min(n * n, maxWeight / w)</code> containers."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxContainers(int n, int w, int maxWeight) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxContainers(int n, int w, int maxWeight) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxContainers(self, n, w, maxWeight):\n        \"\"\"\n        :type n: int\n        :type w: int\n        :type maxWeight: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxContainers(self, n: int, w: int, maxWeight: int) -> int:\n        ",
    "c": "int maxContainers(int n, int w, int maxWeight) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxContainers(int n, int w, int maxWeight) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number} w\n * @param {number} maxWeight\n * @return {number}\n */\nvar maxContainers = function(n, w, maxWeight) {\n    \n};",
    "typescript": "function maxContainers(n: number, w: number, maxWeight: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $w\n     * @param Integer $maxWeight\n     * @return Integer\n     */\n    function maxContainers($n, $w, $maxWeight) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxContainers(_ n: Int, _ w: Int, _ maxWeight: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxContainers(n: Int, w: Int, maxWeight: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxContainers(int n, int w, int maxWeight) {\n    \n  }\n}",
    "golang": "func maxContainers(n int, w int, maxWeight int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer} w\n# @param {Integer} max_weight\n# @return {Integer}\ndef max_containers(n, w, max_weight)\n    \nend",
    "scala": "object Solution {\n    def maxContainers(n: Int, w: Int, maxWeight: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_containers(n: i32, w: i32, max_weight: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-containers n w maxWeight)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec max_containers(N :: integer(), W :: integer(), MaxWeight :: integer()) -> integer().\nmax_containers(N, W, MaxWeight) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_containers(n :: integer, w :: integer, max_weight :: integer) :: integer\n  def max_containers(n, w, max_weight) do\n    \n  end\nend"
  }
}
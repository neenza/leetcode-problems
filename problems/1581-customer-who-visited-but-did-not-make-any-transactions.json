{
  "title": "Customer Who Visited but Did Not Make Any Transactions",
  "problem_id": "1724",
  "frontend_id": "1581",
  "difficulty": "Easy",
  "problem_slug": "customer-who-visited-but-did-not-make-any-transactions",
  "topics": [
    "Database"
  ],
  "description": "Table: Visits\nTable: Transactions\nWrite a solution to find the IDs of the users who visited without making any transactions and the number of times they made these types of visits.\nReturn the result table sorted in any order.\nThe result format is in the following example.\nExample 1:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| visit_id    | int     |\n| customer_id | int     |\n+-------------+---------+\nvisit_id is the column with unique values for this table.\nThis table contains information about the customers who visited the mall.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "+----------------+---------+\n| Column Name    | Type    |\n+----------------+---------+\n| transaction_id | int     |\n| visit_id       | int     |\n| amount         | int     |\n+----------------+---------+\ntransaction_id is column with unique values for this table.\nThis table contains information about the transactions made during the visit_id.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: \nVisits\n+----------+-------------+\n| visit_id | customer_id |\n+----------+-------------+\n| 1        | 23          |\n| 2        | 9           |\n| 4        | 30          |\n| 5        | 54          |\n| 6        | 96          |\n| 7        | 54          |\n| 8        | 54          |\n+----------+-------------+\nTransactions\n+----------------+----------+--------+\n| transaction_id | visit_id | amount |\n+----------------+----------+--------+\n| 2              | 5        | 310    |\n| 3              | 5        | 300    |\n| 9              | 5        | 200    |\n| 12             | 1        | 910    |\n| 13             | 2        | 970    |\n+----------------+----------+--------+\nOutput: \n+-------------+----------------+\n| customer_id | count_no_trans |\n+-------------+----------------+\n| 54          | 2              |\n| 30          | 1              |\n| 96          | 1              |\n+-------------+----------------+\nExplanation: \nCustomer with id = 23 visited the mall once and made one transaction during the visit with id = 12.\nCustomer with id = 9 visited the mall once and made one transaction during the visit with id = 13.\nCustomer with id = 30 visited the mall once and did not make any transactions.\nCustomer with id = 54 visited the mall three times. During 2 visits they did not make any transactions, and during one visit they made 3 transactions.\nCustomer with id = 96 visited the mall once and did not make any transactions.\nAs we can see, users with IDs 30 and 96 visited the mall one time without making any transactions. Also, user 54 visited the mall twice and did not make any transactions.",
      "images": []
    }
  ],
  "constraints": [],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "mysql": "# Write your MySQL query statement below\n",
    "mssql": "/* Write your T-SQL query statement below */\n",
    "oraclesql": "/* Write your PL/SQL query statement below */\n",
    "pythondata": "import pandas as pd\n\ndef find_customers(visits: pd.DataFrame, transactions: pd.DataFrame) -> pd.DataFrame:\n    ",
    "postgresql": "-- Write your PostgreSQL query statement below\n"
  },
  "solution": "[TOC]\n\n# Solution\n\n---\n## pandas\n\nTo identify customers who visited but did not make any transactions, we need to remove the records of customers who made transactions from the list of all customers who visited. By doing so, we convert this problem to a typical \"NOT IN\" problem. There are two main ways to solve \"NOT IN\" problems: 1) using the function similar to `NOT IN/EXISTS` directly or 2)`LEFT OUTER JOIN/merge` where the right table is set as `NULL`. We will introduce both methods in pandas and Mysql. \n\n### Approach 1: Removing Records Using `~` and `isin()` \n\n#### AlgorithmFor this approach, we leverage the functions `~` and `isin()` to exclude unwanted records from the list. Since we want to remove the customers who made transactions from all customers who visited, we first identify those customers from the DataFrame `visits` to see who are also in the DataFrame `transactions` using `isin()`. We then remove these visits from all visits using `~`. \n\n```python\nvisits_no_trans = visits[~visits.visit_id.isin(transactions.visit_id)]\n```\n\nThis step creates a new DataFrame that contains the visits that the customers made no transactions.  \n\n| visit_id | customer_id |\n| -------- | ----------- |\n| 4        | 30          |\n| 6        | 96          |\n| 7        | 54          |\n| 8        | 54          |\n\nThe next step is to count how many of these types of visits were made by each customer. To do this, we have the results grouped by the `customer_id` and `count` the `visit_id`. To get the final output, we also need to rename the column that stores the calculated result. \n\n```python\ndf = visits_no_trans.groupby('customer_id', as_index=False)['visit_id'].count()\n\nreturn df.rename(columns={'visit_id': 'count_no_trans'})\n```#### Implementation\n​### Approach 2: Removing Records Using `left merge` and `isna()`\n\n#### Algorithm\n\nFor this approach, we leverage the `left merge` and `isna()` to achieve the same goal: removing the visits with transactions from all visits. To do this, we first `left merge` the DataFrame `visits` that contain all `visit_id`s to the DataFrame `transactions` that contain only the `visit_id`s that have transactions. We want to make sure the records that need to be removed are placed in the right DataFrame. \n\n```python\nvisits_no_trans = visits.merge(transactions, on='visit_id', how='left')\n```\n\nWe now have a DataFrame with all `visit_id`s and their corresponding transactions. The visits that have no transactions associated return `null` values for the column `transaction_id`. \n\n| visit_id | customer_id | transaction_id | amount |\n| -------- | ----------- | -------------- | ------ |\n| 1        | 23          | 12             | 910    |\n| 2        | 9           | 13             | 970    |\n| 4        | 30          | null           | null   |\n| 5        | 54          | 2              | 310    |\n| 5        | 54          | 3              | 300    |\n| 5        | 54          | 9              | 200    |\n| 6        | 96          | null           | null   |\n| 7        | 54          | null           | null   |\n| 8        | 54          | null           | null   |\n\nNow we only need to remove those visits that have `null` transactions. We can use the function `isna()` to achieve this. \n\n```python\nvisits_no_trans = visits_no_trans[visits_no_trans.transaction_id.isna()]\n```\n\nThe DataFrame `visits_no_trans` now retains only the visits that have no transactions. \n\n| visit_id | customer_id | transaction_id | amount |\n| -------- | ----------- | -------------- | ------ |\n| 4        | 30          | null           | null   |\n| 6        | 96          | null           | null   |\n| 7        | 54          | null           | null   |\n| 8        | 54          | null           | null   |\n\nNext, we want to count how many of these types of visits were made by each customer. To do this, we have the results grouped by the `customer_id` and `count` the `visit_id`. To get the final output, we also need to rename the column that stores the calculated result.\n\n```python\ndf = visits_no_trans.groupby('customer_id', as_index=False)['visit_id'].count()\n\nreturn df.rename(columns={'visit_id': 'count_no_trans'})\n```#### Implementation\n​----\n​\n## Database### Approach 1: Removing Records Using `NOT IN/EXISTS`#### AlgorithmFor this approach, we remove the visits that have transactions directly using `NOT IN`. Let's start by identifying these visits. For this problem, they are all the `visit_id` from the table `Transactions`. \n\n```sql\nSELECT visit_id FROM Transactions\n```\n\nNext, in the main query, we can `COUNT` the `visit_id` at the `customer_id` level from table `Visits` excluding the visits we identified in the subquery. The aggregate value is grouped at the `customer_id` level as we are looking for the total result for each customer. This column is also renamed as requested by the final output.#### Implementation\n\n```mysql []\nSELECT \n  customer_id, \n  COUNT(visit_id) AS count_no_trans \nFROM \n  Visits \nWHERE \n  visit_id NOT IN (\n    SELECT \n      visit_id \n    FROM \n      Transactions\n  ) \nGROUP BY \n  customer_id\n```### Approach 2: Removing Records Using `LEFT JOIN` and `IS NULL`#### AlgorithmFor this approach, we want to exclude visits that involved transactions from the complete set of visits by using `LEFT JOIN`. To do this, we have all visits as the left table (table `Visits`) to join the visits from table `Transactions` on the shared column `visit_id`. To remove the records from the right table, we set its key as `NULL`, so the remains in the `Visits` table are the records of visits where no transactions occurred.\n\nTo get the final output, we want to `COUNT` the number of such visits associated with each `customer_id`, and have the aggregated value grouped at the `customer_id` level. Lastly, we update the column as requested in the original problem statement.#### Implementation\n\n```mysql []\nSELECT \n  customer_id, \n  COUNT(*) AS count_no_trans \nFROM \n  Visits AS v \n  LEFT JOIN Transactions AS t ON v.visit_id = t.visit_id \nWHERE \n  t.visit_id IS NULL \nGROUP BY \n  customer_id\n```\n----"
}
{
  "title": "Flatten a Multilevel Doubly Linked List",
  "problem_id": "766",
  "frontend_id": "430",
  "difficulty": "Medium",
  "problem_slug": "flatten-a-multilevel-doubly-linked-list",
  "topics": [
    "Linked List",
    "Depth-First Search",
    "Doubly-Linked List"
  ],
  "description": "You are given a doubly linked list, which contains nodes that have a next pointer, a previous pointer, and an additional child pointer. This child pointer may or may not point to a separate doubly linked list, also containing these special nodes. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure as shown in the example below.\nGiven the head of the first level of the list, flatten the list so that all the nodes appear in a single-level, doubly linked list. Let curr be a node with a child list. The nodes in the child list should appear after curr and before curr.next in the flattened list.\nReturn the head of the flattened list. The nodes in the list must have all of their child pointers set to null.\nExample 1:\nExample 2:\nExample 3:\nConstraints:\nHow the multilevel linked list is represented in test cases:\nWe use the multilevel linked list from Example 1 above:\nThe serialization of each level is as follows:\nTo serialize all levels together, we will add nulls in each level to signify no node connects to the upper node of the previous level. The serialization becomes:\nMerging the serialization of each level and removing trailing nulls we obtain:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\nOutput: [1,2,3,7,8,11,12,9,10,4,5,6]\nExplanation: The multilevel linked list in the input is shown.\nAfter flattening the multilevel linked list it becomes:",
      "images": [
        "https://assets.leetcode.com/uploads/2021/11/09/flatten11.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: head = [1,2,null,3]\nOutput: [1,3,2]\nExplanation: The multilevel linked list in the input is shown.\nAfter flattening the multilevel linked list it becomes:",
      "images": [
        "https://assets.leetcode.com/uploads/2021/11/09/flatten2.1jpg"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: head = []\nOutput: []\nExplanation: There could be empty list in the input.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/11/24/list.jpg"
      ]
    },
    {
      "example_num": 4,
      "example_text": "1---2---3---4---5---6--NULL\n         |\n         7---8---9---10--NULL\n             |\n             11--12--NULL",
      "images": [
        "https://assets.leetcode.com/uploads/2021/11/24/list.jpg"
      ]
    },
    {
      "example_num": 5,
      "example_text": "[1,2,3,4,5,6,null]\n[7,8,9,10,null]\n[11,12,null]",
      "images": [
        "https://assets.leetcode.com/uploads/2021/11/24/list.jpg"
      ]
    },
    {
      "example_num": 6,
      "example_text": "[1,    2,    3, 4, 5, 6, null]\n             |\n[null, null, 7,    8, 9, 10, null]\n                   |\n[            null, 11, 12, null]",
      "images": [
        "https://assets.leetcode.com/uploads/2021/11/24/list.jpg"
      ]
    },
    {
      "example_num": 7,
      "example_text": "[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]",
      "images": [
        "https://assets.leetcode.com/uploads/2021/11/24/list.jpg"
      ]
    }
  ],
  "constraints": [
    "The number of Nodes will not exceed 1000.",
    "1 <= Node.val <= 105"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* prev;\n    Node* next;\n    Node* child;\n};\n*/\n\nclass Solution {\npublic:\n    Node* flatten(Node* head) {\n        \n    }\n};",
    "java": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node prev;\n    public Node next;\n    public Node child;\n};\n*/\n\nclass Solution {\n    public Node flatten(Node head) {\n        \n    }\n}",
    "python": "\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val, prev, next, child):\n        self.val = val\n        self.prev = prev\n        self.next = next\n        self.child = child\n\"\"\"\n\nclass Solution(object):\n    def flatten(self, head):\n        \"\"\"\n        :type head: Node\n        :rtype: Node\n        \"\"\"\n        ",
    "python3": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val, prev, next, child):\n        self.val = val\n        self.prev = prev\n        self.next = next\n        self.child = child\n\"\"\"\n\nclass Solution:\n    def flatten(self, head: 'Optional[Node]') -> 'Optional[Node]':\n        ",
    "csharp": "/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public Node prev;\n    public Node next;\n    public Node child;\n}\n*/\n\npublic class Solution {\n    public Node Flatten(Node head) {\n        \n    }\n}",
    "javascript": "/**\n * // Definition for a _Node.\n * function _Node(val,prev,next,child) {\n *    this.val = val;\n *    this.prev = prev;\n *    this.next = next;\n *    this.child = child;\n * };\n */\n\n/**\n * @param {_Node} head\n * @return {_Node}\n */\nvar flatten = function(head) {\n    \n};",
    "typescript": "/**\n * Definition for _Node.\n * class _Node {\n *     val: number\n *     prev: _Node | null\n *     next: _Node | null\n *     child: _Node | null\n *     \n *     constructor(val?: number, prev? : _Node, next? : _Node, child? : _Node) {\n *         this.val = (val===undefined ? 0 : val);\n *         this.prev = (prev===undefined ? null : prev);\n *         this.next = (next===undefined ? null : next);\n *         this.child = (child===undefined ? null : child);\n *     }\n * }\n */\n\n\nfunction flatten(head: _Node | null): _Node | null {\n\n};",
    "php": "/**\n * Definition for a Node.\n * class Node {\n *     public $val = null;\n *     public $prev = null;\n *     public $next = null;\n *     public $child = null;\n *     function __construct($val = 0) {\n *         $this->val = $val;\n *         $this->prev = null;\n *         $this->next = null;\n *         $this->child = null;\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Node $head\n     * @return Node\n     */\n    function flatten($head) {\n        \n    }\n}",
    "swift": "/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Int\n *     public var prev: Node?\n *     public var next: Node?\n *     public var child: Node?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.prev = nil\n *         self.next = nil\n *         self.child  = nil\n *     }\n * }\n */\n\nclass Solution {\n    func flatten(_ head: Node?) -> Node? {\n        \n    }\n}",
    "kotlin": "/**\n * Definition for a Node.\n * class Node(var `val`: Int) {\n *     var prev: Node? = null\n *     var next: Node? = null\n *     var child: Node? = null\n * }\n */\n\nclass Solution {\n    fun flatten(root: Node?): Node? {\n        \n    }\n}",
    "golang": "/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Prev *Node\n *     Next *Node\n *     Child *Node\n * }\n */\n\nfunc flatten(root *Node) *Node {\n    \n}",
    "ruby": "# Definition for a Node.\n# class Node\n#     attr_accessor :val, :prev, :next, :child\n#     def initialize(val=nil, prev=nil, next_=nil, child=nil)\n#         @val = val\n#         @prev = prev\n#         @next = next_\n#         @child = child\n#     end\n# end\n\n# @param {Node} root\n# @return {Node}\ndef flatten(root)\n    \nend",
    "scala": "/**\n * Definition for a Node.\n * class Node(var _value: Int) {\n *   var value: Int = _value\n *   var prev: Node = null\n *   var next: Node = null\n *   var child: Node = null\n * }\n */\n\nobject Solution {\n    def flatten(head: Node): Node = {\n    \t\n    }\n}"
  }
}
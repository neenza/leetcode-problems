{
  "title": "Find the Distance Value Between Two Arrays",
  "problem_id": "1486",
  "frontend_id": "1385",
  "difficulty": "Easy",
  "problem_slug": "find-the-distance-value-between-two-arrays",
  "topics": [
    "Array",
    "Two Pointers",
    "Binary Search",
    "Sorting"
  ],
  "description": "Given two integer arrays arr1 and arr2, and the integer d, return the distance value between the two arrays.\nThe distance value is defined as the number of elements arr1[i] such that there is not any element arr2[j] where |arr1[i]-arr2[j]| <= d.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2\nOutput: 2\nExplanation: \nFor arr1[0]=4 we have: \n|4-10|=6 > d=2 \n|4-9|=5 > d=2 \n|4-1|=3 > d=2 \n|4-8|=4 > d=2 \nFor arr1[1]=5 we have: \n|5-10|=5 > d=2 \n|5-9|=4 > d=2 \n|5-1|=4 > d=2 \n|5-8|=3 > d=2\nFor arr1[2]=8 we have:\n|8-10|=2 <= d=2\n|8-9|=1 <= d=2\n|8-1|=7 > d=2\n|8-8|=0 <= d=2",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3\nOutput: 2",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6\nOutput: 1",
      "images": []
    }
  ],
  "constraints": [
    "1 <= arr1.length, arr2.length <= 500",
    "-1000 <= arr1[i], arr2[j] <= 1000",
    "0 <= d <= 100"
  ],
  "follow_ups": [],
  "hints": [
    "Sort 'arr2' and use binary search to get the closest element for each 'arr1[i]', it gives a time complexity of O(nlogn)."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int findTheDistanceValue(vector<int>& arr1, vector<int>& arr2, int d) {\n        \n    }\n};",
    "java": "class Solution {\n    public int findTheDistanceValue(int[] arr1, int[] arr2, int d) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findTheDistanceValue(self, arr1, arr2, d):\n        \"\"\"\n        :type arr1: List[int]\n        :type arr2: List[int]\n        :type d: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        ",
    "c": "int findTheDistanceValue(int* arr1, int arr1Size, int* arr2, int arr2Size, int d) {\n    \n}",
    "csharp": "public class Solution {\n    public int FindTheDistanceValue(int[] arr1, int[] arr2, int d) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} arr1\n * @param {number[]} arr2\n * @param {number} d\n * @return {number}\n */\nvar findTheDistanceValue = function(arr1, arr2, d) {\n    \n};",
    "typescript": "function findTheDistanceValue(arr1: number[], arr2: number[], d: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $arr1\n     * @param Integer[] $arr2\n     * @param Integer $d\n     * @return Integer\n     */\n    function findTheDistanceValue($arr1, $arr2, $d) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findTheDistanceValue(_ arr1: [Int], _ arr2: [Int], _ d: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findTheDistanceValue(arr1: IntArray, arr2: IntArray, d: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int findTheDistanceValue(List<int> arr1, List<int> arr2, int d) {\n    \n  }\n}",
    "golang": "func findTheDistanceValue(arr1 []int, arr2 []int, d int) int {\n    \n}",
    "ruby": "# @param {Integer[]} arr1\n# @param {Integer[]} arr2\n# @param {Integer} d\n# @return {Integer}\ndef find_the_distance_value(arr1, arr2, d)\n    \nend",
    "scala": "object Solution {\n    def findTheDistanceValue(arr1: Array[Int], arr2: Array[Int], d: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_the_distance_value(arr1: Vec<i32>, arr2: Vec<i32>, d: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (find-the-distance-value arr1 arr2 d)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec find_the_distance_value(Arr1 :: [integer()], Arr2 :: [integer()], D :: integer()) -> integer().\nfind_the_distance_value(Arr1, Arr2, D) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_the_distance_value(arr1 :: [integer], arr2 :: [integer], d :: integer) :: integer\n  def find_the_distance_value(arr1, arr2, d) do\n    \n  end\nend"
  }
}
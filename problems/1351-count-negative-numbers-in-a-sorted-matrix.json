{
  "title": "Count Negative Numbers in a Sorted Matrix",
  "problem_id": "1476",
  "frontend_id": "1351",
  "difficulty": "Easy",
  "problem_slug": "count-negative-numbers-in-a-sorted-matrix",
  "topics": [
    "Array",
    "Binary Search",
    "Matrix"
  ],
  "description": "Given a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in grid.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]\nOutput: 8\nExplanation: There are 8 negatives number in the matrix.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: grid = [[3,2],[1,0]]\nOutput: 0",
      "images": []
    }
  ],
  "constraints": [
    "m == grid.length",
    "n == grid[i].length",
    "1 <= m, n <= 100",
    "-100 <= grid[i][j] <= 100"
  ],
  "follow_ups": [],
  "hints": [
    "Use binary search for optimization or simply brute force."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int countNegatives(vector<vector<int>>& grid) {\n        \n    }\n};",
    "java": "class Solution {\n    public int countNegatives(int[][] grid) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countNegatives(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        ",
    "c": "int countNegatives(int** grid, int gridSize, int* gridColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int CountNegatives(int[][] grid) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar countNegatives = function(grid) {\n    \n};",
    "typescript": "function countNegatives(grid: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function countNegatives($grid) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countNegatives(_ grid: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countNegatives(grid: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int countNegatives(List<List<int>> grid) {\n    \n  }\n}",
    "golang": "func countNegatives(grid [][]int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} grid\n# @return {Integer}\ndef count_negatives(grid)\n    \nend",
    "scala": "object Solution {\n    def countNegatives(grid: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_negatives(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (count-negatives grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec count_negatives(Grid :: [[integer()]]) -> integer().\ncount_negatives(Grid) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_negatives(grid :: [[integer]]) :: integer\n  def count_negatives(grid) do\n    \n  end\nend"
  }
}
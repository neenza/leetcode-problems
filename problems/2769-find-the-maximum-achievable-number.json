{
  "title": "Find the Maximum Achievable Number",
  "problem_id": "2812",
  "frontend_id": "2769",
  "difficulty": "Easy",
  "problem_slug": "find-the-maximum-achievable-number",
  "topics": [
    "Math"
  ],
  "description": "Given two integers, num and t. A number x is achievable if it can become equal to num after applying the following operation at most t times:\nReturn the maximum possible value of x.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: num = 4, t = 1\nOutput: 6\nExplanation:\nApply the following operation once to make the maximum achievable number equal to num :",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: num = 3, t = 2\nOutput: 7\nExplanation:\nApply the following operation twice to make the maximum achievable number equal to num :",
      "images": []
    }
  ],
  "constraints": [
    "1 <= num, t <= 50"
  ],
  "follow_ups": [],
  "hints": [
    "Let x be the answer, it’s always optimal to decrease x in each operation and increase nums."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int theMaximumAchievableX(int num, int t) {\n        \n    }\n};",
    "java": "class Solution {\n    public int theMaximumAchievableX(int num, int t) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def theMaximumAchievableX(self, num, t):\n        \"\"\"\n        :type num: int\n        :type t: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def theMaximumAchievableX(self, num: int, t: int) -> int:\n        ",
    "c": "int theMaximumAchievableX(int num, int t) {\n    \n}",
    "csharp": "public class Solution {\n    public int TheMaximumAchievableX(int num, int t) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} num\n * @param {number} t\n * @return {number}\n */\nvar theMaximumAchievableX = function(num, t) {\n    \n};",
    "typescript": "function theMaximumAchievableX(num: number, t: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @param Integer $t\n     * @return Integer\n     */\n    function theMaximumAchievableX($num, $t) {\n        \n    }\n}",
    "swift": "class Solution {\n    func theMaximumAchievableX(_ num: Int, _ t: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun theMaximumAchievableX(num: Int, t: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int theMaximumAchievableX(int num, int t) {\n    \n  }\n}",
    "golang": "func theMaximumAchievableX(num int, t int) int {\n    \n}",
    "ruby": "# @param {Integer} num\n# @param {Integer} t\n# @return {Integer}\ndef the_maximum_achievable_x(num, t)\n    \nend",
    "scala": "object Solution {\n    def theMaximumAchievableX(num: Int, t: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn the_maximum_achievable_x(num: i32, t: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (the-maximum-achievable-x num t)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec the_maximum_achievable_x(Num :: integer(), T :: integer()) -> integer().\nthe_maximum_achievable_x(Num, T) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec the_maximum_achievable_x(num :: integer, t :: integer) :: integer\n  def the_maximum_achievable_x(num, t) do\n    \n  end\nend"
  }
}
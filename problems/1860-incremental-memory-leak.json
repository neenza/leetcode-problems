{
  "title": "Incremental Memory Leak",
  "problem_id": "1971",
  "frontend_id": "1860",
  "difficulty": "Medium",
  "problem_slug": "incremental-memory-leak",
  "topics": [
    "Math",
    "Simulation"
  ],
  "description": "You are given two integers memory1 and memory2 representing the available memory in bits on two memory sticks. There is currently a faulty program running that consumes an increasing amount of memory every second.\nAt the ith second (starting from 1), i bits of memory are allocated to the stick with more available memory (or from the first memory stick if both have the same available memory). If neither stick has at least i bits of available memory, the program crashes.\nReturn an array containing [crashTime, memory1crash, memory2crash], where crashTime is the time (in seconds) when the program crashed and memory1crash and memory2crash are the available bits of memory in the first and second sticks respectively.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: memory1 = 2, memory2 = 2\nOutput: [3,1,0]\nExplanation: The memory is allocated as follows:\n- At the 1st second, 1 bit of memory is allocated to stick 1. The first stick now has 1 bit of available memory.\n- At the 2nd second, 2 bits of memory are allocated to stick 2. The second stick now has 0 bits of available memory.\n- At the 3rd second, the program crashes. The sticks have 1 and 0 bits available respectively.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: memory1 = 8, memory2 = 11\nOutput: [6,0,4]\nExplanation: The memory is allocated as follows:\n- At the 1st second, 1 bit of memory is allocated to stick 2. The second stick now has 10 bit of available memory.\n- At the 2nd second, 2 bits of memory are allocated to stick 2. The second stick now has 8 bits of available memory.\n- At the 3rd second, 3 bits of memory are allocated to stick 1. The first stick now has 5 bits of available memory.\n- At the 4th second, 4 bits of memory are allocated to stick 2. The second stick now has 4 bits of available memory.\n- At the 5th second, 5 bits of memory are allocated to stick 1. The first stick now has 0 bits of available memory.\n- At the 6th second, the program crashes. The sticks have 0 and 4 bits available respectively.",
      "images": []
    }
  ],
  "constraints": [
    "0 <= memory1, memory2 <= 231 - 1"
  ],
  "follow_ups": [],
  "hints": [
    "What is the upper bound for the number of seconds?",
    "Simulate the process of allocating memory."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> memLeak(int memory1, int memory2) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] memLeak(int memory1, int memory2) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def memLeak(self, memory1, memory2):\n        \"\"\"\n        :type memory1: int\n        :type memory2: int\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def memLeak(self, memory1: int, memory2: int) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* memLeak(int memory1, int memory2, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] MemLeak(int memory1, int memory2) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} memory1\n * @param {number} memory2\n * @return {number[]}\n */\nvar memLeak = function(memory1, memory2) {\n    \n};",
    "typescript": "function memLeak(memory1: number, memory2: number): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $memory1\n     * @param Integer $memory2\n     * @return Integer[]\n     */\n    function memLeak($memory1, $memory2) {\n        \n    }\n}",
    "swift": "class Solution {\n    func memLeak(_ memory1: Int, _ memory2: Int) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun memLeak(memory1: Int, memory2: Int): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> memLeak(int memory1, int memory2) {\n    \n  }\n}",
    "golang": "func memLeak(memory1 int, memory2 int) []int {\n    \n}",
    "ruby": "# @param {Integer} memory1\n# @param {Integer} memory2\n# @return {Integer[]}\ndef mem_leak(memory1, memory2)\n    \nend",
    "scala": "object Solution {\n    def memLeak(memory1: Int, memory2: Int): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn mem_leak(memory1: i32, memory2: i32) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (mem-leak memory1 memory2)\n  (-> exact-integer? exact-integer? (listof exact-integer?))\n  )",
    "erlang": "-spec mem_leak(Memory1 :: integer(), Memory2 :: integer()) -> [integer()].\nmem_leak(Memory1, Memory2) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec mem_leak(memory1 :: integer, memory2 :: integer) :: [integer]\n  def mem_leak(memory1, memory2) do\n    \n  end\nend"
  }
}
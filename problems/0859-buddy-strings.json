{
  "title": "Buddy Strings",
  "problem_id": "889",
  "frontend_id": "859",
  "difficulty": "Easy",
  "problem_slug": "buddy-strings",
  "topics": [
    "Hash Table",
    "String"
  ],
  "description": "Given two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false.\nSwapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"ab\", goal = \"ba\"\nOutput: true\nExplanation: You can swap s[0] = 'a' and s[1] = 'b' to get \"ba\", which is equal to goal.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"ab\", goal = \"ab\"\nOutput: false\nExplanation: The only letters you can swap are s[0] = 'a' and s[1] = 'b', which results in \"ba\" != goal.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"aa\", goal = \"aa\"\nOutput: true\nExplanation: You can swap s[0] = 'a' and s[1] = 'a' to get \"aa\", which is equal to goal.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length, goal.length <= 2 * 104",
    "s and goal consist of lowercase letters."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool buddyStrings(string s, string goal) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean buddyStrings(String s, String goal) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def buddyStrings(self, s, goal):\n        \"\"\"\n        :type s: str\n        :type goal: str\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def buddyStrings(self, s: str, goal: str) -> bool:\n        ",
    "c": "bool buddyStrings(char* s, char* goal) {\n    \n}",
    "csharp": "public class Solution {\n    public bool BuddyStrings(string s, string goal) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @param {string} goal\n * @return {boolean}\n */\nvar buddyStrings = function(s, goal) {\n    \n};",
    "typescript": "function buddyStrings(s: string, goal: string): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $goal\n     * @return Boolean\n     */\n    function buddyStrings($s, $goal) {\n        \n    }\n}",
    "swift": "class Solution {\n    func buddyStrings(_ s: String, _ goal: String) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun buddyStrings(s: String, goal: String): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool buddyStrings(String s, String goal) {\n    \n  }\n}",
    "golang": "func buddyStrings(s string, goal string) bool {\n    \n}",
    "ruby": "# @param {String} s\n# @param {String} goal\n# @return {Boolean}\ndef buddy_strings(s, goal)\n    \nend",
    "scala": "object Solution {\n    def buddyStrings(s: String, goal: String): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn buddy_strings(s: String, goal: String) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (buddy-strings s goal)\n  (-> string? string? boolean?)\n  )",
    "erlang": "-spec buddy_strings(S :: unicode:unicode_binary(), Goal :: unicode:unicode_binary()) -> boolean().\nbuddy_strings(S, Goal) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec buddy_strings(s :: String.t, goal :: String.t) :: boolean\n  def buddy_strings(s, goal) do\n    \n  end\nend"
  }
}
{
  "title": "Russian Doll Envelopes",
  "problem_id": "354",
  "frontend_id": "354",
  "difficulty": "Hard",
  "problem_slug": "russian-doll-envelopes",
  "topics": [
    "Array",
    "Binary Search",
    "Dynamic Programming",
    "Sorting"
  ],
  "description": "You are given a 2D array of integers envelopes where envelopes[i] = [wi, hi] represents the width and the height of an envelope.\nOne envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height.\nReturn the maximum number of envelopes you can Russian doll (i.e., put one inside the other).\nNote: You cannot rotate an envelope.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: envelopes = [[5,4],[6,4],[6,7],[2,3]]\nOutput: 3\nExplanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] => [5,4] => [6,7]).",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: envelopes = [[1,1],[1,1],[1,1]]\nOutput: 1",
      "images": []
    }
  ],
  "constraints": [
    "1 <= envelopes.length <= 105",
    "envelopes[i].length == 2",
    "1 <= wi, hi <= 105"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxEnvelopes(vector<vector<int>>& envelopes) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxEnvelopes(int[][] envelopes) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxEnvelopes(self, envelopes: List[List[int]]) -> int:\n        ",
    "c": "int maxEnvelopes(int** envelopes, int envelopesSize, int* envelopesColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxEnvelopes(int[][] envelopes) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} envelopes\n * @return {number}\n */\nvar maxEnvelopes = function(envelopes) {\n    \n};",
    "typescript": "function maxEnvelopes(envelopes: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $envelopes\n     * @return Integer\n     */\n    function maxEnvelopes($envelopes) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxEnvelopes(_ envelopes: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxEnvelopes(envelopes: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxEnvelopes(List<List<int>> envelopes) {\n    \n  }\n}",
    "golang": "func maxEnvelopes(envelopes [][]int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} envelopes\n# @return {Integer}\ndef max_envelopes(envelopes)\n    \nend",
    "scala": "object Solution {\n    def maxEnvelopes(envelopes: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_envelopes(envelopes: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-envelopes envelopes)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec max_envelopes(Envelopes :: [[integer()]]) -> integer().\nmax_envelopes(Envelopes) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_envelopes(envelopes :: [[integer]]) :: integer\n  def max_envelopes(envelopes) do\n    \n  end\nend"
  }
}
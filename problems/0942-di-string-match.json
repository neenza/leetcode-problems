{
  "title": "DI String Match",
  "problem_id": "979",
  "frontend_id": "942",
  "difficulty": "Easy",
  "problem_slug": "di-string-match",
  "topics": [
    "Array",
    "Two Pointers",
    "String",
    "Greedy"
  ],
  "description": "A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:\nGiven a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return any of them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"IDID\"\nOutput: [0,4,1,3,2]",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"III\"\nOutput: [0,1,2,3]",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"DDI\"\nOutput: [3,2,0,1]",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 105",
    "s[i] is either 'I' or 'D'."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> diStringMatch(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] diStringMatch(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def diStringMatch(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def diStringMatch(self, s: str) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* diStringMatch(char* s, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] DiStringMatch(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {number[]}\n */\nvar diStringMatch = function(s) {\n    \n};",
    "typescript": "function diStringMatch(s: string): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer[]\n     */\n    function diStringMatch($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func diStringMatch(_ s: String) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun diStringMatch(s: String): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> diStringMatch(String s) {\n    \n  }\n}",
    "golang": "func diStringMatch(s string) []int {\n    \n}",
    "ruby": "# @param {String} s\n# @return {Integer[]}\ndef di_string_match(s)\n    \nend",
    "scala": "object Solution {\n    def diStringMatch(s: String): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn di_string_match(s: String) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (di-string-match s)\n  (-> string? (listof exact-integer?))\n  )",
    "erlang": "-spec di_string_match(S :: unicode:unicode_binary()) -> [integer()].\ndi_string_match(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec di_string_match(s :: String.t) :: [integer]\n  def di_string_match(s) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n---\n### Approach 1: Ad-Hoc\n\n#### Intuition\n\nIf we see `S[0] == 'I'`, we can always put `0` as the first element; similarly, if we see `S[0] == 'D'`, we can always put `N` as the first element.\n\nSay we have a match for the rest of the string `S[1], S[2], ...` using `N` distinct elements.  Notice it doesn't matter what the elements are, only that they are distinct and totally ordered.  Then, putting `0` or `N` at the first character will match, and the rest of the elements (`1, 2, ..., N` or `0, 1, ..., N-1`) can use the matching we have.\n\n#### Algorithm\n\nKeep track of the smallest and largest element we haven't placed.  If we see an `'I'`, place the small element; otherwise place the large element.\n\n#### Implementation#### Complexity Analysis\n\n* Time Complexity:  $$O(N)$$, where $$N$$ is the length of `S`.\n\n* Space Complexity:  $$O(1)$$, we don't count the answer as part of the space complexity."
}
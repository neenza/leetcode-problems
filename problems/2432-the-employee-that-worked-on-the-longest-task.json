{
  "title": "The Employee That Worked on the Longest Task",
  "problem_id": "2518",
  "frontend_id": "2432",
  "difficulty": "Easy",
  "problem_slug": "the-employee-that-worked-on-the-longest-task",
  "topics": [
    "Array"
  ],
  "description": "There are n employees, each with a unique id from 0 to n - 1.\nYou are given a 2D integer array logs where logs[i] = [idi, leaveTimei] where:\nNote that the ith task starts the moment right after the (i - 1)th task ends, and the 0th task starts at time 0.\nReturn the id of the employee that worked the task with the longest time. If there is a tie between two or more employees, return the smallest id among them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 10, logs = [[0,3],[2,5],[0,9],[1,15]]\nOutput: 1\nExplanation: \nTask 0 started at 0 and ended at 3 with 3 units of times.\nTask 1 started at 3 and ended at 5 with 2 units of times.\nTask 2 started at 5 and ended at 9 with 4 units of times.\nTask 3 started at 9 and ended at 15 with 6 units of times.\nThe task with the longest time is task 3 and the employee with id 1 is the one that worked on it, so we return 1.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 26, logs = [[1,1],[3,7],[2,12],[7,17]]\nOutput: 3\nExplanation: \nTask 0 started at 0 and ended at 1 with 1 unit of times.\nTask 1 started at 1 and ended at 7 with 6 units of times.\nTask 2 started at 7 and ended at 12 with 5 units of times.\nTask 3 started at 12 and ended at 17 with 5 units of times.\nThe tasks with the longest time is task 1. The employee that worked on it is 3, so we return 3.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 2, logs = [[0,10],[1,20]]\nOutput: 0\nExplanation: \nTask 0 started at 0 and ended at 10 with 10 units of times.\nTask 1 started at 10 and ended at 20 with 10 units of times.\nThe tasks with the longest time are tasks 0 and 1. The employees that worked on them are 0 and 1, so we return the smallest id 0.",
      "images": []
    }
  ],
  "constraints": [
    "2 <= n <= 500",
    "1 <= logs.length <= 500",
    "logs[i].length == 2",
    "0 <= idi <= n - 1",
    "1 <= leaveTimei <= 500",
    "idi != idi+1",
    "leaveTimei are sorted in a strictly increasing order."
  ],
  "follow_ups": [],
  "hints": [
    "Find the time of the longest task",
    "Store each employeeâ€™s longest task time in a hash table",
    "For employees that have the same longest task time, we only need the employee with the smallest ID"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int hardestWorker(int n, vector<vector<int>>& logs) {\n        \n    }\n};",
    "java": "class Solution {\n    public int hardestWorker(int n, int[][] logs) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def hardestWorker(self, n, logs):\n        \"\"\"\n        :type n: int\n        :type logs: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def hardestWorker(self, n: int, logs: List[List[int]]) -> int:\n        ",
    "c": "int hardestWorker(int n, int** logs, int logsSize, int* logsColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int HardestWorker(int n, int[][] logs) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number[][]} logs\n * @return {number}\n */\nvar hardestWorker = function(n, logs) {\n    \n};",
    "typescript": "function hardestWorker(n: number, logs: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $logs\n     * @return Integer\n     */\n    function hardestWorker($n, $logs) {\n        \n    }\n}",
    "swift": "class Solution {\n    func hardestWorker(_ n: Int, _ logs: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun hardestWorker(n: Int, logs: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int hardestWorker(int n, List<List<int>> logs) {\n    \n  }\n}",
    "golang": "func hardestWorker(n int, logs [][]int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer[][]} logs\n# @return {Integer}\ndef hardest_worker(n, logs)\n    \nend",
    "scala": "object Solution {\n    def hardestWorker(n: Int, logs: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn hardest_worker(n: i32, logs: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (hardest-worker n logs)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec hardest_worker(N :: integer(), Logs :: [[integer()]]) -> integer().\nhardest_worker(N, Logs) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec hardest_worker(n :: integer, logs :: [[integer]]) :: integer\n  def hardest_worker(n, logs) do\n    \n  end\nend"
  }
}
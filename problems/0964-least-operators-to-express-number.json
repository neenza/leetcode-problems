{
  "title": "Least Operators to Express Number",
  "problem_id": "1004",
  "frontend_id": "964",
  "difficulty": "Hard",
  "problem_slug": "least-operators-to-express-number",
  "topics": [
    "Math",
    "Dynamic Programming",
    "Memoization"
  ],
  "description": "Given a single positive integer x, we will write an expression of the form x (op1) x (op2) x (op3) x ... where each operator op1, op2, etc. is either addition, subtraction, multiplication, or division (+, -, *, or /). For example, with x = 3, we might write 3 * 3 / 3 + 3 - 3 which is a value of 3.\nWhen writing such an expression, we adhere to the following conventions:\nWe would like to write an expression with the least number of operators such that the expression equals the given target. Return the least number of operators used.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: x = 3, target = 19\nOutput: 5\nExplanation: 3 * 3 + 3 * 3 + 3 / 3.\nThe expression contains 5 operations.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: x = 5, target = 501\nOutput: 8\nExplanation: 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.\nThe expression contains 8 operations.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: x = 100, target = 100000000\nOutput: 3\nExplanation: 100 * 100 * 100 * 100.\nThe expression contains 3 operations.",
      "images": []
    }
  ],
  "constraints": [
    "2 <= x <= 100",
    "1 <= target <= 2 * 108"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int leastOpsExpressTarget(int x, int target) {\n        \n    }\n};",
    "java": "class Solution {\n    public int leastOpsExpressTarget(int x, int target) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def leastOpsExpressTarget(self, x, target):\n        \"\"\"\n        :type x: int\n        :type target: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def leastOpsExpressTarget(self, x: int, target: int) -> int:\n        ",
    "c": "int leastOpsExpressTarget(int x, int target) {\n    \n}",
    "csharp": "public class Solution {\n    public int LeastOpsExpressTarget(int x, int target) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} x\n * @param {number} target\n * @return {number}\n */\nvar leastOpsExpressTarget = function(x, target) {\n    \n};",
    "typescript": "function leastOpsExpressTarget(x: number, target: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @param Integer $target\n     * @return Integer\n     */\n    function leastOpsExpressTarget($x, $target) {\n        \n    }\n}",
    "swift": "class Solution {\n    func leastOpsExpressTarget(_ x: Int, _ target: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun leastOpsExpressTarget(x: Int, target: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int leastOpsExpressTarget(int x, int target) {\n    \n  }\n}",
    "golang": "func leastOpsExpressTarget(x int, target int) int {\n    \n}",
    "ruby": "# @param {Integer} x\n# @param {Integer} target\n# @return {Integer}\ndef least_ops_express_target(x, target)\n    \nend",
    "scala": "object Solution {\n    def leastOpsExpressTarget(x: Int, target: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn least_ops_express_target(x: i32, target: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (least-ops-express-target x target)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec least_ops_express_target(X :: integer(), Target :: integer()) -> integer().\nleast_ops_express_target(X, Target) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec least_ops_express_target(x :: integer, target :: integer) :: integer\n  def least_ops_express_target(x, target) do\n    \n  end\nend"
  }
}
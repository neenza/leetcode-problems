{
  "title": "Find Beautiful Indices in the Given Array I",
  "problem_id": "3245",
  "frontend_id": "3006",
  "difficulty": "Medium",
  "problem_slug": "find-beautiful-indices-in-the-given-array-i",
  "topics": [
    "Two Pointers",
    "String",
    "Binary Search",
    "Rolling Hash",
    "String Matching",
    "Hash Function"
  ],
  "description": "You are given a 0-indexed string s, a string a, a string b, and an integer k.\nAn index i is beautiful if:\nReturn the array that contains beautiful indices in sorted order from smallest to largest.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"isawsquirrelnearmysquirrelhouseohmy\", a = \"my\", b = \"squirrel\", k = 15\nOutput: [16,33]\nExplanation: There are 2 beautiful indices: [16,33].\n- The index 16 is beautiful as s[16..17] == \"my\" and there exists an index 4 with s[4..11] == \"squirrel\" and |16 - 4| <= 15.\n- The index 33 is beautiful as s[33..34] == \"my\" and there exists an index 18 with s[18..25] == \"squirrel\" and |33 - 18| <= 15.\nThus we return [16,33] as the result.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"abcd\", a = \"a\", b = \"a\", k = 4\nOutput: [0]\nExplanation: There is 1 beautiful index: [0].\n- The index 0 is beautiful as s[0..0] == \"a\" and there exists an index 0 with s[0..0] == \"a\" and |0 - 0| <= 4.\nThus we return [0] as the result.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= k <= s.length <= 105",
    "1 <= a.length, b.length <= 10",
    "s, a, and b contain only lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [
    "For each <code>i</code>, you can iterate over all <code>j</code>s and determine if <code>i</code> is beautiful or not."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> beautifulIndices(string s, string a, string b, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<Integer> beautifulIndices(String s, String a, String b, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def beautifulIndices(self, s, a, b, k):\n        \"\"\"\n        :type s: str\n        :type a: str\n        :type b: str\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def beautifulIndices(self, s: str, a: str, b: str, k: int) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* beautifulIndices(char* s, char* a, char* b, int k, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<int> BeautifulIndices(string s, string a, string b, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @param {string} a\n * @param {string} b\n * @param {number} k\n * @return {number[]}\n */\nvar beautifulIndices = function(s, a, b, k) {\n    \n};",
    "typescript": "function beautifulIndices(s: string, a: string, b: string, k: number): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @param String $a\n     * @param String $b\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function beautifulIndices($s, $a, $b, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func beautifulIndices(_ s: String, _ a: String, _ b: String, _ k: Int) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun beautifulIndices(s: String, a: String, b: String, k: Int): List<Int> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> beautifulIndices(String s, String a, String b, int k) {\n    \n  }\n}",
    "golang": "func beautifulIndices(s string, a string, b string, k int) []int {\n    \n}",
    "ruby": "# @param {String} s\n# @param {String} a\n# @param {String} b\n# @param {Integer} k\n# @return {Integer[]}\ndef beautiful_indices(s, a, b, k)\n    \nend",
    "scala": "object Solution {\n    def beautifulIndices(s: String, a: String, b: String, k: Int): List[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn beautiful_indices(s: String, a: String, b: String, k: i32) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (beautiful-indices s a b k)\n  (-> string? string? string? exact-integer? (listof exact-integer?))\n  )",
    "erlang": "-spec beautiful_indices(S :: unicode:unicode_binary(), A :: unicode:unicode_binary(), B :: unicode:unicode_binary(), K :: integer()) -> [integer()].\nbeautiful_indices(S, A, B, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec beautiful_indices(s :: String.t, a :: String.t, b :: String.t, k :: integer) :: [integer]\n  def beautiful_indices(s, a, b, k) do\n    \n  end\nend"
  }
}
{
  "title": "Spiral Matrix IV",
  "problem_id": "2411",
  "frontend_id": "2326",
  "difficulty": "Medium",
  "problem_slug": "spiral-matrix-iv",
  "topics": [
    "Array",
    "Linked List",
    "Matrix",
    "Simulation"
  ],
  "description": "You are given two integers m and n, which represent the dimensions of a matrix.\nYou are also given the head of a linked list of integers.\nGenerate an m x n matrix that contains the integers in the linked list presented in spiral order (clockwise), starting from the top-left of the matrix. If there are remaining empty spaces, fill them with -1.\nReturn the generated matrix.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: m = 3, n = 5, head = [3,0,2,6,8,1,7,9,4,2,5,5,0]\nOutput: [[3,0,2,6,8],[5,0,-1,-1,1],[5,2,4,9,7]]\nExplanation: The diagram above shows how the values are printed in the matrix.\nNote that the remaining spaces in the matrix are filled with -1.",
      "images": [
        "https://assets.leetcode.com/uploads/2022/05/09/ex1new.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: m = 1, n = 4, head = [0,1,2]\nOutput: [[0,1,2,-1]]\nExplanation: The diagram above shows how the values are printed from left to right in the matrix.\nThe last space in the matrix is set to -1.",
      "images": [
        "https://assets.leetcode.com/uploads/2022/05/11/ex2.jpg"
      ]
    }
  ],
  "constraints": [
    "1 <= m, n <= 105",
    "1 <= m * n <= 105",
    "The number of nodes in the list is in the range [1, m * n].",
    "0 <= Node.val <= 1000"
  ],
  "follow_ups": [],
  "hints": [
    "First, generate an m x n matrix filled with -1s.",
    "Navigate within the matrix at (i, j) with the help of a direction vector ⟨di, dj⟩. At (i, j), you need to decide if you can keep going in the current direction.",
    "If you cannot keep going, rotate the direction vector clockwise by 90 degrees."
  ],
  "code_snippets": {
    "cpp": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> spiralMatrix(int m, int n, ListNode* head) {\n        \n    }\n};",
    "java": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public int[][] spiralMatrix(int m, int n, ListNode head) {\n        \n    }\n}",
    "python": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def spiralMatrix(self, m, n, head):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type head: Optional[ListNode]\n        :rtype: List[List[int]]\n        \"\"\"\n        ",
    "python3": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def spiralMatrix(self, m: int, n: int, head: Optional[ListNode]) -> List[List[int]]:\n        ",
    "c": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** spiralMatrix(int m, int n, struct ListNode* head, int* returnSize, int** returnColumnSizes) {\n    \n}",
    "csharp": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int val=0, ListNode next=null) {\n *         this.val = val;\n *         this.next = next;\n *     }\n * }\n */\npublic class Solution {\n    public int[][] SpiralMatrix(int m, int n, ListNode head) {\n        \n    }\n}",
    "javascript": "/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {number} m\n * @param {number} n\n * @param {ListNode} head\n * @return {number[][]}\n */\nvar spiralMatrix = function(m, n, head) {\n    \n};",
    "typescript": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *     val: number\n *     next: ListNode | null\n *     constructor(val?: number, next?: ListNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.next = (next===undefined ? null : next)\n *     }\n * }\n */\n\nfunction spiralMatrix(m: number, n: number, head: ListNode | null): number[][] {\n    \n};",
    "php": "/**\n * Definition for a singly-linked list.\n * class ListNode {\n *     public $val = 0;\n *     public $next = null;\n *     function __construct($val = 0, $next = null) {\n *         $this->val = $val;\n *         $this->next = $next;\n *     }\n * }\n */\nclass Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @param ListNode $head\n     * @return Integer[][]\n     */\n    function spiralMatrix($m, $n, $head) {\n        \n    }\n}",
    "swift": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init() { self.val = 0; self.next = nil; }\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\n * }\n */\nclass Solution {\n    func spiralMatrix(_ m: Int, _ n: Int, _ head: ListNode?) -> [[Int]] {\n        \n    }\n}",
    "kotlin": "/**\n * Example:\n * var li = ListNode(5)\n * var v = li.`val`\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun spiralMatrix(m: Int, n: Int, head: ListNode?): Array<IntArray> {\n        \n    }\n}",
    "dart": "/**\n * Definition for singly-linked list.\n * class ListNode {\n *   int val;\n *   ListNode? next;\n *   ListNode([this.val = 0, this.next]);\n * }\n */\nclass Solution {\n  List<List<int>> spiralMatrix(int m, int n, ListNode? head) {\n    \n  }\n}",
    "golang": "/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc spiralMatrix(m int, n int, head *ListNode) [][]int {\n    \n}",
    "ruby": "# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val = 0, _next = nil)\n#         @val = val\n#         @next = _next\n#     end\n# end\n# @param {Integer} m\n# @param {Integer} n\n# @param {ListNode} head\n# @return {Integer[][]}\ndef spiral_matrix(m, n, head)\n    \nend",
    "scala": "/**\n * Definition for singly-linked list.\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\n *   var next: ListNode = _next\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def spiralMatrix(m: Int, n: Int, head: ListNode): Array[Array[Int]] = {\n        \n    }\n}",
    "rust": "// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn spiral_matrix(m: i32, n: i32, head: Option<Box<ListNode>>) -> Vec<Vec<i32>> {\n        \n    }\n}",
    "racket": "; Definition for singly-linked list:\n#|\n\n; val : integer?\n; next : (or/c list-node? #f)\n(struct list-node\n  (val next) #:mutable #:transparent)\n\n; constructor\n(define (make-list-node [val 0])\n  (list-node val #f))\n\n|#\n\n(define/contract (spiral-matrix m n head)\n  (-> exact-integer? exact-integer? (or/c list-node? #f) (listof (listof exact-integer?)))\n  )",
    "erlang": "%% Definition for singly-linked list.\n%%\n%% -record(list_node, {val = 0 :: integer(),\n%%                     next = null :: 'null' | #list_node{}}).\n\n-spec spiral_matrix(M :: integer(), N :: integer(), Head :: #list_node{} | null) -> [[integer()]].\nspiral_matrix(M, N, Head) ->\n  .",
    "elixir": "# Definition for singly-linked list.\n#\n# defmodule ListNode do\n#   @type t :: %__MODULE__{\n#           val: integer,\n#           next: ListNode.t() | nil\n#         }\n#   defstruct val: 0, next: nil\n# end\n\ndefmodule Solution do\n  @spec spiral_matrix(m :: integer, n :: integer, head :: ListNode.t | nil) :: [[integer]]\n  def spiral_matrix(m, n, head) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n\n---\n\n### Approach: Simulation\n\n#### Intuition\n\nWe have two integers, `m` and `n`, representing the dimensions of a matrix. We are also given the `head` of a linked list containing the elements of the matrix in spiral order. Our task is to reconstruct the original matrix.\n\nWe can simulate the spiral movement by following these steps:\n\n- Start by moving to the right until reaching the boundary.\n- Then move downwards until reaching the boundary.\n- Next, move to the left until reaching the boundary.\n- Finally, move upwards until reaching the boundary.\n- Repeat these steps until all elements are placed in the matrix.\n\nThe movement pattern repeats in the order of right, down, left, and up. We can store these directional movements in an array. For example, moving right corresponds to `(x+0, y+1)` and moving down to `(x+1, y+0)`. We simulate the process by following each direction until we reach the matrix boundary, then switch to the next direction, continuing until all nodes in the linked list are used.\n\n#### Algorithm\n\n1. Set `i` (row index) to 0, `j` (column index) to 0, and `cur_d` (current direction) to 0.\n2. Define a `movement` matrix that stores the directions for east, south, west, and north movements:\n    - `East: (0, 1)`\n    - `South: (1, 0)`\n    - `West: (0, -1)`\n    - `North: (-1, 0)`\n3. Initialize a 2D matrix `res` with dimensions `m x n`, filled with -1.\n4. Iterate over the linked list until you reach the end (`head` is not `nullptr`):\n    - Assign the current node's value `head->val` to the matrix at position `res[i][j]`.\n    - Calculate the next position `newi` and `newj` using the current direction from the movement matrix.\n    - If the next position `newi, newj` is out of the matrix bounds (less than 0 or greater than/equal to m or n), or is already filled (`res[newi][newj]` is not -1):\n        - Then, change the direction by incrementing `cur_d` (`modulus 4` to keep within the bounds of the direction matrix).\n    - Update the current position `i, j` using the updated direction.\n5. Once the linked list is fully traversed and the matrix is filled, return the resulting matrix `res`.\n\n!?!../Documents/2326/slideshow.json:960,540!?!\n\n#### Implementation#### Complexity Analysis\n\nLet $k$ be the size of the linked list with the first node `head`.\n\n- Time complexity: $O(n \\cdot m)$\n\n    We start by creating a matrix of size `n * m` and fill it with `-1`, which takes $O(n \\cdot m)$ time. After that, we loop through the linked list once. In the worst case, the list has `k` nodes, which can go up to `n * m`. So, the overall time complexity is $O(n \\cdot m)$.\n\n- Space complexity: $O(1)$\n\n    No additional space is used proportional to the list size `k`. Therefore, the space complexity is given by $O(1)$.\n\n---"
}
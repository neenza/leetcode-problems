{
  "title": "Length of Longest V-Shaped Diagonal Segment",
  "problem_id": "3733",
  "frontend_id": "3459",
  "difficulty": "Hard",
  "problem_slug": "length-of-longest-v-shaped-diagonal-segment",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Memoization",
    "Matrix"
  ],
  "description": "You are given a 2D integer matrix grid of size n x m, where each element is either 0, 1, or 2.\nA V-shaped diagonal segment is defined as:\nReturn the length of the longest V-shaped diagonal segment. If no valid segment exists, return 0.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: grid = [[2,2,1,2,2],[2,0,2,2,0],[2,0,1,1,0],[1,0,2,2,2],[2,0,0,2,2]]\nOutput: 5\nExplanation:\n\nThe longest V-shaped diagonal segment has a length of 5 and follows these coordinates: (0,2) → (1,3) → (2,4) , takes a 90-degree clockwise turn at (2,4) , and continues as (3,3) → (4,2) .",
      "images": [
        "https://assets.leetcode.com/uploads/2024/12/09/matrix_1-2.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: grid = [[2,2,2,2,2],[2,0,2,2,0],[2,0,1,1,0],[1,0,2,2,2],[2,0,0,2,2]]\nOutput: 4\nExplanation:\n\nThe longest V-shaped diagonal segment has a length of 4 and follows these coordinates: (2,3) → (3,2) , takes a 90-degree clockwise turn at (3,2) , and continues as (2,1) → (1,0) .",
      "images": [
        "https://assets.leetcode.com/uploads/2024/12/09/matrix_2.jpg"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: grid = [[1,2,2,2,2],[2,2,2,2,0],[2,0,0,0,0],[0,0,2,2,2],[2,0,0,2,0]]\nOutput: 5\nExplanation:\n\nThe longest V-shaped diagonal segment has a length of 5 and follows these coordinates: (0,0) → (1,1) → (2,2) → (3,3) → (4,4) .",
      "images": [
        "https://assets.leetcode.com/uploads/2024/12/09/matrix_3.jpg"
      ]
    },
    {
      "example_num": 4,
      "example_text": "Input: grid = [[1]]\nOutput: 1\nExplanation:\nThe longest V-shaped diagonal segment has a length of 1 and follows these coordinates: (0,0) .",
      "images": []
    }
  ],
  "constraints": [
    "n == grid.length",
    "m == grid[i].length",
    "1 <= n, m <= 500",
    "grid[i][j] is either 0, 1 or 2."
  ],
  "follow_ups": [],
  "hints": [
    "Use dynamic programming to determine the best point to make a 90-degree rotation in the diagonal path while maintaining the required sequence.",
    "Represent dynamic programming states as <code>(row, col, currentDirection, hasMadeTurnYet)</code>. Track the current position, direction of traversal, and whether a turn has already been made, and take transitions accordingly to find the longest V-shaped diagonal segment."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int lenOfVDiagonal(vector<vector<int>>& grid) {\n        \n    }\n};",
    "java": "class Solution {\n    public int lenOfVDiagonal(int[][] grid) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def lenOfVDiagonal(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def lenOfVDiagonal(self, grid: List[List[int]]) -> int:\n        ",
    "c": "int lenOfVDiagonal(int** grid, int gridSize, int* gridColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int LenOfVDiagonal(int[][] grid) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar lenOfVDiagonal = function(grid) {\n    \n};",
    "typescript": "function lenOfVDiagonal(grid: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function lenOfVDiagonal($grid) {\n        \n    }\n}",
    "swift": "class Solution {\n    func lenOfVDiagonal(_ grid: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun lenOfVDiagonal(grid: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int lenOfVDiagonal(List<List<int>> grid) {\n    \n  }\n}",
    "golang": "func lenOfVDiagonal(grid [][]int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} grid\n# @return {Integer}\ndef len_of_v_diagonal(grid)\n    \nend",
    "scala": "object Solution {\n    def lenOfVDiagonal(grid: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn len_of_v_diagonal(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (len-of-v-diagonal grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec len_of_v_diagonal(Grid :: [[integer()]]) -> integer().\nlen_of_v_diagonal(Grid) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec len_of_v_diagonal(grid :: [[integer]]) :: integer\n  def len_of_v_diagonal(grid) do\n    \n  end\nend"
  }
}
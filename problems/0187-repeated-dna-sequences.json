{
  "title": "Repeated DNA Sequences",
  "problem_id": "187",
  "frontend_id": "187",
  "difficulty": "Medium",
  "problem_slug": "repeated-dna-sequences",
  "topics": [
    "Hash Table",
    "String",
    "Bit Manipulation",
    "Sliding Window",
    "Rolling Hash",
    "Hash Function"
  ],
  "description": "The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.\nWhen studying DNA, it is useful to identify repeated sequences within the DNA.\nGiven a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\nOutput: [\"AAAAACCCCC\",\"CCCCCAAAAA\"]",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"AAAAAAAAAAAAA\"\nOutput: [\"AAAAAAAAAA\"]",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 105",
    "s[i] is either 'A', 'C', 'G', or 'T'."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<string> findRepeatedDnaSequences(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<String> findRepeatedDnaSequences(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findRepeatedDnaSequences(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findRepeatedDnaSequences(self, s: str) -> List[str]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** findRepeatedDnaSequences(char* s, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<string> FindRepeatedDnaSequences(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {string[]}\n */\nvar findRepeatedDnaSequences = function(s) {\n    \n};",
    "typescript": "function findRepeatedDnaSequences(s: string): string[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String[]\n     */\n    function findRepeatedDnaSequences($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findRepeatedDnaSequences(_ s: String) -> [String] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findRepeatedDnaSequences(s: String): List<String> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<String> findRepeatedDnaSequences(String s) {\n    \n  }\n}",
    "golang": "func findRepeatedDnaSequences(s string) []string {\n    \n}",
    "ruby": "# @param {String} s\n# @return {String[]}\ndef find_repeated_dna_sequences(s)\n    \nend",
    "scala": "object Solution {\n    def findRepeatedDnaSequences(s: String): List[String] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_repeated_dna_sequences(s: String) -> Vec<String> {\n        \n    }\n}",
    "racket": "(define/contract (find-repeated-dna-sequences s)\n  (-> string? (listof string?))\n  )",
    "erlang": "-spec find_repeated_dna_sequences(S :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\nfind_repeated_dna_sequences(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_repeated_dna_sequences(s :: String.t) :: [String.t]\n  def find_repeated_dna_sequences(s) do\n    \n  end\nend"
  }
}
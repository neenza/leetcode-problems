{
  "title": "Fibonacci Number",
  "problem_id": "1013",
  "frontend_id": "509",
  "difficulty": "Easy",
  "problem_slug": "fibonacci-number",
  "topics": [
    "Math",
    "Dynamic Programming",
    "Recursion",
    "Memoization"
  ],
  "description": "The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,\nGiven n, calculate F(n).\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "F(0) = 0, F(1) = 1\nF(n) = F(n - 1) + F(n - 2), for n > 1.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 2\nOutput: 1\nExplanation: F(2) = F(1) + F(0) = 1 + 0 = 1.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 3\nOutput: 2\nExplanation: F(3) = F(2) + F(1) = 1 + 1 = 2.",
      "images": []
    },
    {
      "example_num": 4,
      "example_text": "Input: n = 4\nOutput: 3\nExplanation: F(4) = F(3) + F(2) = 2 + 1 = 3.",
      "images": []
    }
  ],
  "constraints": [
    "0 <= n <= 30"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int fib(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int fib(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def fib(self, n: int) -> int:\n        ",
    "c": "\n\nint fib(int n){\n\n}",
    "csharp": "public class Solution {\n    public int Fib(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar fib = function(n) {\n    \n};",
    "typescript": "function fib(n: number): number {\n\n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function fib($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func fib(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun fib(n: Int): Int {\n        \n    }\n}",
    "golang": "func fib(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef fib(n)\n    \nend",
    "scala": "object Solution {\n    def fib(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn fib(n: i32) -> i32 {\n        \n    }\n}"
  }
}
{
  "title": "Palindrome Partitioning",
  "problem_id": "131",
  "frontend_id": "131",
  "difficulty": "Medium",
  "problem_slug": "palindrome-partitioning",
  "topics": [
    "String",
    "Dynamic Programming",
    "Backtracking"
  ],
  "description": "Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"aab\"\nOutput: [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"a\"\nOutput: [[\"a\"]]",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 16",
    "s contains only lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<vector<string>> partition(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<List<String>> partition(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        ",
    "c": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar*** partition(char* s, int* returnSize, int** returnColumnSizes) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<IList<string>> Partition(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {string[][]}\n */\nvar partition = function(s) {\n    \n};",
    "typescript": "function partition(s: string): string[][] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String[][]\n     */\n    function partition($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func partition(_ s: String) -> [[String]] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun partition(s: String): List<List<String>> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<List<String>> partition(String s) {\n    \n  }\n}",
    "golang": "func partition(s string) [][]string {\n    \n}",
    "ruby": "# @param {String} s\n# @return {String[][]}\ndef partition(s)\n    \nend",
    "scala": "object Solution {\n    def partition(s: String): List[List[String]] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn partition(s: String) -> Vec<Vec<String>> {\n        \n    }\n}",
    "racket": "(define/contract (partition s)\n  (-> string? (listof (listof string?)))\n  )",
    "erlang": "-spec partition(S :: unicode:unicode_binary()) -> [[unicode:unicode_binary()]].\npartition(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec partition(s :: String.t) :: [[String.t]]\n  def partition(s) do\n    \n  end\nend"
  }
}
{
  "title": "Nth Digit",
  "problem_id": "400",
  "frontend_id": "400",
  "difficulty": "Medium",
  "problem_slug": "nth-digit",
  "topics": [
    "Math",
    "Binary Search"
  ],
  "description": "Given an integer n, return the nth digit of the infinite integer sequence [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...].\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 3\nOutput: 3",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 11\nOutput: 0\nExplanation: The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 231 - 1"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int findNthDigit(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int findNthDigit(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findNthDigit(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findNthDigit(self, n: int) -> int:\n        ",
    "c": "int findNthDigit(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int FindNthDigit(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar findNthDigit = function(n) {\n    \n};",
    "typescript": "function findNthDigit(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function findNthDigit($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findNthDigit(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findNthDigit(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int findNthDigit(int n) {\n    \n  }\n}",
    "golang": "func findNthDigit(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef find_nth_digit(n)\n    \nend",
    "scala": "object Solution {\n    def findNthDigit(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_nth_digit(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (find-nth-digit n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec find_nth_digit(N :: integer()) -> integer().\nfind_nth_digit(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_nth_digit(n :: integer) :: integer\n  def find_nth_digit(n) do\n    \n  end\nend"
  }
}
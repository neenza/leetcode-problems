{
  "title": "Optimal Partition of String",
  "problem_id": "2487",
  "frontend_id": "2405",
  "difficulty": "Medium",
  "problem_slug": "optimal-partition-of-string",
  "topics": [
    "Hash Table",
    "String",
    "Greedy"
  ],
  "description": "Given a string s, partition the string into one or more substrings such that the characters in each substring are unique. That is, no letter appears in a single substring more than once.\nReturn the minimum number of substrings in such a partition.\nNote that each character should belong to exactly one substring in a partition.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"abacaba\"\nOutput: 4\nExplanation:\nTwo possible partitions are (\"a\",\"ba\",\"cab\",\"a\") and (\"ab\",\"a\",\"ca\",\"ba\").\nIt can be shown that 4 is the minimum number of substrings needed.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"ssssss\"\nOutput: 6\nExplanation:\nThe only valid partition is (\"s\",\"s\",\"s\",\"s\",\"s\",\"s\").",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 105",
    "s consists of only English lowercase letters."
  ],
  "follow_ups": [],
  "hints": [
    "Try to come up with a greedy approach.",
    "From left to right, extend every substring in the partition as much as possible."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int partitionString(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public int partitionString(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def partitionString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def partitionString(self, s: str) -> int:\n        ",
    "c": "int partitionString(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public int PartitionString(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {number}\n */\nvar partitionString = function(s) {\n    \n};",
    "typescript": "function partitionString(s: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function partitionString($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func partitionString(_ s: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun partitionString(s: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int partitionString(String s) {\n    \n  }\n}",
    "golang": "func partitionString(s string) int {\n    \n}",
    "ruby": "# @param {String} s\n# @return {Integer}\ndef partition_string(s)\n    \nend",
    "scala": "object Solution {\n    def partitionString(s: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn partition_string(s: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (partition-string s)\n  (-> string? exact-integer?)\n  )",
    "erlang": "-spec partition_string(S :: unicode:unicode_binary()) -> integer().\npartition_string(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec partition_string(s :: String.t) :: integer\n  def partition_string(s) do\n    \n  end\nend"
  }
}
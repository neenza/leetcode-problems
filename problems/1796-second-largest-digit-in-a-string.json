{
  "title": "Second Largest Digit in a String",
  "problem_id": "1904",
  "frontend_id": "1796",
  "difficulty": "Easy",
  "problem_slug": "second-largest-digit-in-a-string",
  "topics": [
    "Hash Table",
    "String"
  ],
  "description": "Given an alphanumeric string s, return the second largest numerical digit that appears in s, or -1 if it does not exist.\nAn alphanumeric string is a string consisting of lowercase English letters and digits.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"dfa12321afd\"\nOutput: 2\nExplanation: The digits that appear in s are [1, 2, 3]. The second largest digit is 2.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"abc1111\"\nOutput: -1\nExplanation: The digits that appear in s are [1]. There is no second largest digit.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 500",
    "s consists of only lowercase English letters and digits."
  ],
  "follow_ups": [],
  "hints": [
    "First of all, get the distinct characters since we are only interested in those",
    "Let's note that there might not be any digits."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int secondHighest(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public int secondHighest(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def secondHighest(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def secondHighest(self, s: str) -> int:\n        ",
    "c": "int secondHighest(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public int SecondHighest(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {number}\n */\nvar secondHighest = function(s) {\n    \n};",
    "typescript": "function secondHighest(s: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function secondHighest($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func secondHighest(_ s: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun secondHighest(s: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int secondHighest(String s) {\n    \n  }\n}",
    "golang": "func secondHighest(s string) int {\n    \n}",
    "ruby": "# @param {String} s\n# @return {Integer}\ndef second_highest(s)\n    \nend",
    "scala": "object Solution {\n    def secondHighest(s: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn second_highest(s: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (second-highest s)\n  (-> string? exact-integer?)\n  )",
    "erlang": "-spec second_highest(S :: unicode:unicode_binary()) -> integer().\nsecond_highest(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec second_highest(s :: String.t) :: integer\n  def second_highest(s) do\n    \n  end\nend"
  }
}
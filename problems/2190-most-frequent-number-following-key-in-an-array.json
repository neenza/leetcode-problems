{
  "title": "Most Frequent Number Following Key In an Array",
  "problem_id": "2312",
  "frontend_id": "2190",
  "difficulty": "Easy",
  "problem_slug": "most-frequent-number-following-key-in-an-array",
  "topics": [
    "Array",
    "Hash Table",
    "Counting"
  ],
  "description": "You are given a 0-indexed integer array nums. You are also given an integer key, which is present in nums.\nFor every unique integer target in nums, count the number of times target immediately follows an occurrence of key in nums. In other words, count the number of indices i such that:\nReturn the target with the maximum count. The test cases will be generated such that the target with maximum count is unique.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,100,200,1,100], key = 1\nOutput: 100\nExplanation: For target = 100, there are 2 occurrences at indices 1 and 4 which follow an occurrence of key.\nNo other integers follow an occurrence of key, so we return 100.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [2,2,2,2,3], key = 2\nOutput: 2\nExplanation: For target = 2, there are 3 occurrences at indices 1, 2, and 3 which follow an occurrence of key.\nFor target = 3, there is only one occurrence at index 4 which follows an occurrence of key.\ntarget = 2 has the maximum number of occurrences following an occurrence of key, so we return 2.",
      "images": []
    }
  ],
  "constraints": [
    "2 <= nums.length <= 1000",
    "1 <= nums[i] <= 1000",
    "The test cases will be generated such that the answer is unique."
  ],
  "follow_ups": [],
  "hints": [
    "Count the number of times each target value follows the key in the array.",
    "Choose the target with the maximum count and return it."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int mostFrequent(vector<int>& nums, int key) {\n        \n    }\n};",
    "java": "class Solution {\n    public int mostFrequent(int[] nums, int key) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def mostFrequent(self, nums, key):\n        \"\"\"\n        :type nums: List[int]\n        :type key: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def mostFrequent(self, nums: List[int], key: int) -> int:\n        ",
    "c": "int mostFrequent(int* nums, int numsSize, int key) {\n    \n}",
    "csharp": "public class Solution {\n    public int MostFrequent(int[] nums, int key) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} key\n * @return {number}\n */\nvar mostFrequent = function(nums, key) {\n    \n};",
    "typescript": "function mostFrequent(nums: number[], key: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $key\n     * @return Integer\n     */\n    function mostFrequent($nums, $key) {\n        \n    }\n}",
    "swift": "class Solution {\n    func mostFrequent(_ nums: [Int], _ key: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun mostFrequent(nums: IntArray, key: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int mostFrequent(List<int> nums, int key) {\n    \n  }\n}",
    "golang": "func mostFrequent(nums []int, key int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} key\n# @return {Integer}\ndef most_frequent(nums, key)\n    \nend",
    "scala": "object Solution {\n    def mostFrequent(nums: Array[Int], key: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn most_frequent(nums: Vec<i32>, key: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (most-frequent nums key)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec most_frequent(Nums :: [integer()], Key :: integer()) -> integer().\nmost_frequent(Nums, Key) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec most_frequent(nums :: [integer], key :: integer) :: integer\n  def most_frequent(nums, key) do\n    \n  end\nend"
  }
}
{
  "title": "Minimum Degree of a Connected Trio in a Graph",
  "problem_id": "1887",
  "frontend_id": "1761",
  "difficulty": "Hard",
  "problem_slug": "minimum-degree-of-a-connected-trio-in-a-graph",
  "topics": [
    "Graph",
    "Enumeration"
  ],
  "description": "You are given an undirected graph. You are given an integer n which is the number of nodes in the graph and an array edges, where each edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi.\nA connected trio is a set of three nodes where there is an edge between every pair of them.\nThe degree of a connected trio is the number of edges where one endpoint is in the trio, and the other is not.\nReturn the minimum degree of a connected trio in the graph, or -1 if the graph has no connected trios.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]\nOutput: 3\nExplanation: There is exactly one trio, which is [1,2,3]. The edges that form its degree are bolded in the figure above.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/01/26/trios1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]\nOutput: 0\nExplanation: There are exactly three trios:\n1) [1,4,3] with degree 0.\n2) [2,5,6] with degree 2.\n3) [5,6,7] with degree 2.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/01/26/trios2.png"
      ]
    }
  ],
  "constraints": [
    "2 <= n <= 400",
    "edges[i].length == 2",
    "1 <= edges.length <= n * (n-1) / 2",
    "1 <= ui, vi <= n",
    "ui != vi",
    "There are no repeated edges."
  ],
  "follow_ups": [],
  "hints": [
    "Consider a trio with nodes u, v, and w. The degree of the trio is just degree(u) + degree(v) + degree(w) - 6. The -6 comes from subtracting the edges u-v, u-w, and v-w, which are counted twice each in the vertex degree calculation.",
    "To get the trios (u,v,w), you can iterate on u, then iterate on each w,v such that w and v are neighbors of u and are neighbors of each other."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minTrioDegree(int n, vector<vector<int>>& edges) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minTrioDegree(int n, int[][] edges) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minTrioDegree(self, n, edges):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minTrioDegree(self, n: int, edges: List[List[int]]) -> int:\n        ",
    "c": "int minTrioDegree(int n, int** edges, int edgesSize, int* edgesColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinTrioDegree(int n, int[][] edges) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {number}\n */\nvar minTrioDegree = function(n, edges) {\n    \n};",
    "typescript": "function minTrioDegree(n: number, edges: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @return Integer\n     */\n    function minTrioDegree($n, $edges) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minTrioDegree(_ n: Int, _ edges: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minTrioDegree(n: Int, edges: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minTrioDegree(int n, List<List<int>> edges) {\n    \n  }\n}",
    "golang": "func minTrioDegree(n int, edges [][]int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @return {Integer}\ndef min_trio_degree(n, edges)\n    \nend",
    "scala": "object Solution {\n    def minTrioDegree(n: Int, edges: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_trio_degree(n: i32, edges: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-trio-degree n edges)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec min_trio_degree(N :: integer(), Edges :: [[integer()]]) -> integer().\nmin_trio_degree(N, Edges) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_trio_degree(n :: integer, edges :: [[integer]]) :: integer\n  def min_trio_degree(n, edges) do\n    \n  end\nend"
  }
}
{
  "title": "Length of the Longest Increasing Path",
  "problem_id": "3571",
  "frontend_id": "3288",
  "difficulty": "Hard",
  "problem_slug": "length-of-the-longest-increasing-path",
  "topics": [
    "Array",
    "Binary Search",
    "Sorting"
  ],
  "description": "You are given a 2D array of integers coordinates of length n and an integer k, where 0 <= k < n.\ncoordinates[i] = [xi, yi] indicates the point (xi, yi) in a 2D plane.\nAn increasing path of length m is defined as a list of points (x1, y1), (x2, y2), (x3, y3), ..., (xm, ym) such that:\nReturn the maximum length of an increasing path that contains coordinates[k].\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: coordinates = [[3,1],[2,2],[4,1],[0,0],[5,3]], k = 1\nOutput: 3\nExplanation:\n(0, 0) , (2, 2) , (5, 3) is the longest increasing path that contains (2, 2) .",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: coordinates = [[2,1],[7,0],[5,6]], k = 2\nOutput: 2\nExplanation:\n(2, 1) , (5, 6) is the longest increasing path that contains (5, 6) .",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n == coordinates.length <= 105",
    "coordinates[i].length == 2",
    "0 <= coordinates[i][0], coordinates[i][1] <= 109",
    "All elements in coordinates are distinct.",
    "0 <= k <= n - 1"
  ],
  "follow_ups": [],
  "hints": [
    "Only keep coordinates with both <code>x</code> and <code>y</code> being strictly less than <code>coordinates[k]</code>.",
    "Sort them by <code>x</code>â€™s, in the case of equal, the <code>y</code> values should be decreasing.",
    "Calculate LIS only using <code>y</code> values.",
    "Do the same for coordinates with both <code>x</code> and <code>y</code> being strictly larger than <code>coordinates[k]</code>."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxPathLength(vector<vector<int>>& coordinates, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxPathLength(int[][] coordinates, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxPathLength(self, coordinates, k):\n        \"\"\"\n        :type coordinates: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxPathLength(self, coordinates: List[List[int]], k: int) -> int:\n        ",
    "c": "int maxPathLength(int** coordinates, int coordinatesSize, int* coordinatesColSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxPathLength(int[][] coordinates, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} coordinates\n * @param {number} k\n * @return {number}\n */\nvar maxPathLength = function(coordinates, k) {\n    \n};",
    "typescript": "function maxPathLength(coordinates: number[][], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $coordinates\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxPathLength($coordinates, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxPathLength(_ coordinates: [[Int]], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxPathLength(coordinates: Array<IntArray>, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxPathLength(List<List<int>> coordinates, int k) {\n    \n  }\n}",
    "golang": "func maxPathLength(coordinates [][]int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} coordinates\n# @param {Integer} k\n# @return {Integer}\ndef max_path_length(coordinates, k)\n    \nend",
    "scala": "object Solution {\n    def maxPathLength(coordinates: Array[Array[Int]], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_path_length(coordinates: Vec<Vec<i32>>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-path-length coordinates k)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec max_path_length(Coordinates :: [[integer()]], K :: integer()) -> integer().\nmax_path_length(Coordinates, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_path_length(coordinates :: [[integer]], k :: integer) :: integer\n  def max_path_length(coordinates, k) do\n    \n  end\nend"
  }
}
{
  "title": "Find Winner on a Tic Tac Toe Game",
  "problem_id": "1400",
  "frontend_id": "1275",
  "difficulty": "Easy",
  "problem_slug": "find-winner-on-a-tic-tac-toe-game",
  "topics": [
    "Array",
    "Hash Table",
    "Matrix",
    "Simulation"
  ],
  "description": "Tic-tac-toe is played by two players A and B on a 3 x 3 grid. The rules of Tic-Tac-Toe are:\nGiven a 2D integer array moves where moves[i] = [rowi, coli] indicates that the ith move will be played on grid[rowi][coli]. return the winner of the game if it exists (A or B). In case the game ends in a draw return \"Draw\". If there are still movements to play return \"Pending\".\nYou can assume that moves is valid (i.e., it follows the rules of Tic-Tac-Toe), the grid is initially empty, and A will play first.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]\nOutput: \"A\"\nExplanation: A wins, they always play first.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/09/22/xo1-grid.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]\nOutput: \"B\"\nExplanation: B wins.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/09/22/xo2-grid.jpg"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]\nOutput: \"Draw\"\nExplanation: The game ends in a draw since there are no moves to make.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/09/22/xo3-grid.jpg"
      ]
    }
  ],
  "constraints": [
    "1 <= moves.length <= 9",
    "moves[i].length == 2",
    "0 <= rowi, coli <= 2",
    "There are no repeated elements on moves.",
    "moves follow the rules of tic tac toe."
  ],
  "follow_ups": [],
  "hints": [
    "It's straightforward to check if A or B won or not, check for each row/column/diag if all the three are the same.",
    "Then if no one wins, the game is a draw iff the board is full, i.e. moves.length = 9 otherwise is pending."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string tictactoe(vector<vector<int>>& moves) {\n        \n    }\n};",
    "java": "class Solution {\n    public String tictactoe(int[][] moves) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def tictactoe(self, moves):\n        \"\"\"\n        :type moves: List[List[int]]\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def tictactoe(self, moves: List[List[int]]) -> str:\n        ",
    "c": "char* tictactoe(int** moves, int movesSize, int* movesColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public string Tictactoe(int[][] moves) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} moves\n * @return {string}\n */\nvar tictactoe = function(moves) {\n    \n};",
    "typescript": "function tictactoe(moves: number[][]): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $moves\n     * @return String\n     */\n    function tictactoe($moves) {\n        \n    }\n}",
    "swift": "class Solution {\n    func tictactoe(_ moves: [[Int]]) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun tictactoe(moves: Array<IntArray>): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String tictactoe(List<List<int>> moves) {\n    \n  }\n}",
    "golang": "func tictactoe(moves [][]int) string {\n    \n}",
    "ruby": "# @param {Integer[][]} moves\n# @return {String}\ndef tictactoe(moves)\n    \nend",
    "scala": "object Solution {\n    def tictactoe(moves: Array[Array[Int]]): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn tictactoe(moves: Vec<Vec<i32>>) -> String {\n        \n    }\n}",
    "racket": "(define/contract (tictactoe moves)\n  (-> (listof (listof exact-integer?)) string?)\n  )",
    "erlang": "-spec tictactoe(Moves :: [[integer()]]) -> unicode:unicode_binary().\ntictactoe(Moves) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec tictactoe(moves :: [[integer]]) :: String.t\n  def tictactoe(moves) do\n    \n  end\nend"
  }
}
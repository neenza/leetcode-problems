{
  "title": "XOR Operation in an Array",
  "problem_id": "1610",
  "frontend_id": "1486",
  "difficulty": "Easy",
  "problem_slug": "xor-operation-in-an-array",
  "topics": [
    "Math",
    "Bit Manipulation"
  ],
  "description": "You are given an integer n and an integer start.\nDefine an array nums where nums[i] = start + 2 * i (0-indexed) and n == nums.length.\nReturn the bitwise XOR of all elements of nums.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 5, start = 0\nOutput: 8\nExplanation: Array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.\nWhere \"^\" corresponds to bitwise XOR operator.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 4, start = 3\nOutput: 8\nExplanation: Array nums is equal to [3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 1000",
    "0 <= start <= 1000",
    "n == nums.length"
  ],
  "follow_ups": [],
  "hints": [
    "Simulate the process, create an array nums and return the Bitwise XOR of all elements of it."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int xorOperation(int n, int start) {\n        \n    }\n};",
    "java": "class Solution {\n    public int xorOperation(int n, int start) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def xorOperation(self, n, start):\n        \"\"\"\n        :type n: int\n        :type start: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def xorOperation(self, n: int, start: int) -> int:\n        ",
    "c": "int xorOperation(int n, int start) {\n    \n}",
    "csharp": "public class Solution {\n    public int XorOperation(int n, int start) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number} start\n * @return {number}\n */\nvar xorOperation = function(n, start) {\n    \n};",
    "typescript": "function xorOperation(n: number, start: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $start\n     * @return Integer\n     */\n    function xorOperation($n, $start) {\n        \n    }\n}",
    "swift": "class Solution {\n    func xorOperation(_ n: Int, _ start: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun xorOperation(n: Int, start: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int xorOperation(int n, int start) {\n    \n  }\n}",
    "golang": "func xorOperation(n int, start int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer} start\n# @return {Integer}\ndef xor_operation(n, start)\n    \nend",
    "scala": "object Solution {\n    def xorOperation(n: Int, start: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn xor_operation(n: i32, start: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (xor-operation n start)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec xor_operation(N :: integer(), Start :: integer()) -> integer().\nxor_operation(N, Start) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec xor_operation(n :: integer, start :: integer) :: integer\n  def xor_operation(n, start) do\n    \n  end\nend"
  }
}
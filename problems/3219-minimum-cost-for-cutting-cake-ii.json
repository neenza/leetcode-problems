{
  "title": "Minimum Cost for Cutting Cake II",
  "problem_id": "3500",
  "frontend_id": "3219",
  "difficulty": "Hard",
  "problem_slug": "minimum-cost-for-cutting-cake-ii",
  "topics": [
    "Array",
    "Greedy",
    "Sorting"
  ],
  "description": "There is an m x n cake that needs to be cut into 1 x 1 pieces.\nYou are given integers m, n, and two arrays:\nIn one operation, you can choose any piece of cake that is not yet a 1 x 1 square and perform one of the following cuts:\nAfter the cut, the piece of cake is divided into two distinct pieces.\nThe cost of a cut depends only on the initial cost of the line and does not change.\nReturn the minimum total cost to cut the entire cake into 1 x 1 pieces.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: m = 3, n = 2, horizontalCut = [1,3], verticalCut = [5]\nOutput: 13\nExplanation:\n\nThe total cost is 5 + 1 + 1 + 3 + 3 = 13 .",
      "images": [
        "https://assets.leetcode.com/uploads/2024/06/04/ezgifcom-animated-gif-maker-1.gif"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: m = 2, n = 2, horizontalCut = [7], verticalCut = [4]\nOutput: 15\nExplanation:\nThe total cost is 7 + 4 + 4 = 15 .",
      "images": []
    }
  ],
  "constraints": [
    "1 <= m, n <= 105",
    "horizontalCut.length == m - 1",
    "verticalCut.length == n - 1",
    "1 <= horizontalCut[i], verticalCut[i] <= 103"
  ],
  "follow_ups": [],
  "hints": [
    "The intended solution uses a Greedy approach.",
    "At each step, we will perform a cut on the line with the highest cost.",
    "If you perform a horizontal cut, can you count the contribution that it adds to each row cut that comes afterward?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        \n    }\n};",
    "java": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumCost(self, m, n, horizontalCut, verticalCut):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type horizontalCut: List[int]\n        :type verticalCut: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        ",
    "c": "long long minimumCost(int m, int n, int* horizontalCut, int horizontalCutSize, int* verticalCut, int verticalCutSize) {\n    \n}",
    "csharp": "public class Solution {\n    public long MinimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} m\n * @param {number} n\n * @param {number[]} horizontalCut\n * @param {number[]} verticalCut\n * @return {number}\n */\nvar minimumCost = function(m, n, horizontalCut, verticalCut) {\n    \n};",
    "typescript": "function minimumCost(m: number, n: number, horizontalCut: number[], verticalCut: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @param Integer[] $horizontalCut\n     * @param Integer[] $verticalCut\n     * @return Integer\n     */\n    function minimumCost($m, $n, $horizontalCut, $verticalCut) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumCost(_ m: Int, _ n: Int, _ horizontalCut: [Int], _ verticalCut: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumCost(m: Int, n: Int, horizontalCut: IntArray, verticalCut: IntArray): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumCost(int m, int n, List<int> horizontalCut, List<int> verticalCut) {\n    \n  }\n}",
    "golang": "func minimumCost(m int, n int, horizontalCut []int, verticalCut []int) int64 {\n    \n}",
    "ruby": "# @param {Integer} m\n# @param {Integer} n\n# @param {Integer[]} horizontal_cut\n# @param {Integer[]} vertical_cut\n# @return {Integer}\ndef minimum_cost(m, n, horizontal_cut, vertical_cut)\n    \nend",
    "scala": "object Solution {\n    def minimumCost(m: Int, n: Int, horizontalCut: Array[Int], verticalCut: Array[Int]): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_cost(m: i32, n: i32, horizontal_cut: Vec<i32>, vertical_cut: Vec<i32>) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-cost m n horizontalCut verticalCut)\n  (-> exact-integer? exact-integer? (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec minimum_cost(M :: integer(), N :: integer(), HorizontalCut :: [integer()], VerticalCut :: [integer()]) -> integer().\nminimum_cost(M, N, HorizontalCut, VerticalCut) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_cost(m :: integer, n :: integer, horizontal_cut :: [integer], vertical_cut :: [integer]) :: integer\n  def minimum_cost(m, n, horizontal_cut, vertical_cut) do\n    \n  end\nend"
  }
}
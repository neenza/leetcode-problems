{
  "title": "Repeated Substring Pattern",
  "problem_id": "459",
  "frontend_id": "459",
  "difficulty": "Easy",
  "problem_slug": "repeated-substring-pattern",
  "topics": [
    "String",
    "String Matching"
  ],
  "description": "Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"abab\"\nOutput: true\nExplanation: It is the substring \"ab\" twice.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"aba\"\nOutput: false",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"abcabcabcabc\"\nOutput: true\nExplanation: It is the substring \"abc\" four times or the substring \"abcabc\" twice.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 104",
    "s consists of lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool repeatedSubstringPattern(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean repeatedSubstringPattern(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def repeatedSubstringPattern(self, s: str) -> bool:\n        ",
    "c": "bool repeatedSubstringPattern(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public bool RepeatedSubstringPattern(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar repeatedSubstringPattern = function(s) {\n    \n};",
    "typescript": "function repeatedSubstringPattern(s: string): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function repeatedSubstringPattern($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func repeatedSubstringPattern(_ s: String) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun repeatedSubstringPattern(s: String): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool repeatedSubstringPattern(String s) {\n    \n  }\n}",
    "golang": "func repeatedSubstringPattern(s string) bool {\n    \n}",
    "ruby": "# @param {String} s\n# @return {Boolean}\ndef repeated_substring_pattern(s)\n    \nend",
    "scala": "object Solution {\n    def repeatedSubstringPattern(s: String): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn repeated_substring_pattern(s: String) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (repeated-substring-pattern s)\n  (-> string? boolean?)\n  )",
    "erlang": "-spec repeated_substring_pattern(S :: unicode:unicode_binary()) -> boolean().\nrepeated_substring_pattern(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec repeated_substring_pattern(s :: String.t) :: boolean\n  def repeated_substring_pattern(s) do\n    \n  end\nend"
  }
}
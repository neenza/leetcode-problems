{
  "title": "Contains Duplicate II",
  "problem_id": "219",
  "frontend_id": "219",
  "difficulty": "Easy",
  "problem_slug": "contains-duplicate-ii",
  "topics": [
    "Array",
    "Hash Table",
    "Sliding Window"
  ],
  "description": "Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,3,1], k = 3\nOutput: true",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,0,1,1], k = 1\nOutput: true",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,2,3,1,2,3], k = 2\nOutput: false",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "-109 <= nums[i] <= 109",
    "0 <= k <= 105"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool containsNearbyDuplicate(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean containsNearbyDuplicate(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\n        ",
    "c": "bool containsNearbyDuplicate(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public bool ContainsNearbyDuplicate(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */\nvar containsNearbyDuplicate = function(nums, k) {\n    \n};",
    "typescript": "function containsNearbyDuplicate(nums: number[], k: number): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Boolean\n     */\n    function containsNearbyDuplicate($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func containsNearbyDuplicate(_ nums: [Int], _ k: Int) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun containsNearbyDuplicate(nums: IntArray, k: Int): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool containsNearbyDuplicate(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func containsNearbyDuplicate(nums []int, k int) bool {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Boolean}\ndef contains_nearby_duplicate(nums, k)\n    \nend",
    "scala": "object Solution {\n    def containsNearbyDuplicate(nums: Array[Int], k: Int): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn contains_nearby_duplicate(nums: Vec<i32>, k: i32) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (contains-nearby-duplicate nums k)\n  (-> (listof exact-integer?) exact-integer? boolean?)\n  )",
    "erlang": "-spec contains_nearby_duplicate(Nums :: [integer()], K :: integer()) -> boolean().\ncontains_nearby_duplicate(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec contains_nearby_duplicate(nums :: [integer], k :: integer) :: boolean\n  def contains_nearby_duplicate(nums, k) do\n    \n  end\nend"
  }
}
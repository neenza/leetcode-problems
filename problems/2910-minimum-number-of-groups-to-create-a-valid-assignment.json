{
  "title": "Minimum Number of Groups to Create a Valid Assignment",
  "problem_id": "3166",
  "frontend_id": "2910",
  "difficulty": "Medium",
  "problem_slug": "minimum-number-of-groups-to-create-a-valid-assignment",
  "topics": [
    "Array",
    "Hash Table",
    "Greedy"
  ],
  "description": "You are given a collection of numbered balls and instructed to sort them into boxes for a nearly balanced distribution. There are two rules you must follow:\n​Return the fewest number of boxes to sort these balls following these rules.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: balls = [3,2,3,2,3]\nOutput: 2\nExplanation:\nWe can sort balls into boxes as follows:\nThe size difference between the two boxes doesn't exceed one.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: balls = [10,10,10,3,1,1]\nOutput: 4\nExplanation:\nWe can sort balls into boxes as follows:\nYou can't use fewer than four boxes while still following the rules. For example, putting all three balls numbered 10 in one box would break the rule about the maximum size difference between boxes.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "1 <= nums[i] <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "Calculate the frequency of each number.",
    "For each <code>x</code> in the range <code>[1, minimum_frequency]</code>, try to create groups with either <code>x</code> or <code>x + 1</code> indices assigned to them while minimizing the total number of groups.",
    "For each distinct number, using its frequency, check that all its occurrences can be assigned to groups of size <code>x</code> or <code>x + 1</code> while minimizing the number of groups used.",
    "To get the minimum number of groups needed for a number having frequency <code>f</code> to be assigned to groups of size <code>x</code> or <code>x + 1</code>, let <code>a = f / (x + 1)</code> and <code>b = f % (x + 1)</code>. <ul> <li>If <code>b == 0</code>, then we can simply create <code>a</code> groups of size <code>x + 1</code>.</li> <li>If <code>x - b <= a</code>, we can have <code>a - (x - b)</code> groups of size <code>x + 1</code> and <code>x - b + 1</code> groups of size <code>x</code>. So, in total, we have <code>a + 1</code> groups.</li> <li>Otherwise, it's impossible.</li> </ul>",
    "The minimum number of groups needed for some <code>x</code> is the total minimized number of groups needed for each distinct number.",
    "The answer is the minimum number of groups needed for each <code>x</code> in the range <code>[1, minimum_frequency]</code>."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minGroupsForValidAssignment(vector<int>& balls) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minGroupsForValidAssignment(int[] balls) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minGroupsForValidAssignment(self, balls):\n        \"\"\"\n        :type balls: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minGroupsForValidAssignment(self, balls: List[int]) -> int:\n        ",
    "c": "int minGroupsForValidAssignment(int* balls, int ballsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinGroupsForValidAssignment(int[] balls) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} balls\n * @return {number}\n */\nvar minGroupsForValidAssignment = function(balls) {\n    \n};",
    "typescript": "function minGroupsForValidAssignment(balls: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $balls\n     * @return Integer\n     */\n    function minGroupsForValidAssignment($balls) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minGroupsForValidAssignment(_ balls: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minGroupsForValidAssignment(balls: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minGroupsForValidAssignment(List<int> balls) {\n    \n  }\n}",
    "golang": "func minGroupsForValidAssignment(balls []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} balls\n# @return {Integer}\ndef min_groups_for_valid_assignment(balls)\n    \nend",
    "scala": "object Solution {\n    def minGroupsForValidAssignment(balls: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_groups_for_valid_assignment(balls: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-groups-for-valid-assignment balls)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec min_groups_for_valid_assignment(Balls :: [integer()]) -> integer().\nmin_groups_for_valid_assignment(Balls) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_groups_for_valid_assignment(balls :: [integer]) :: integer\n  def min_groups_for_valid_assignment(balls) do\n    \n  end\nend"
  }
}
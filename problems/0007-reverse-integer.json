{
  "title": "Reverse Integer",
  "problem_id": "7",
  "frontend_id": "7",
  "difficulty": "Medium",
  "problem_slug": "reverse-integer",
  "topics": [
    "Math"
  ],
  "description": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: x = 123\nOutput: 321",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: x = -123\nOutput: -321",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: x = 120\nOutput: 21",
      "images": []
    }
  ],
  "constraints": [
    "-231 <= x <= 231 - 1"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int reverse(int x) {\n        \n    }\n};",
    "java": "class Solution {\n    public int reverse(int x) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def reverse(self, x: int) -> int:\n        ",
    "c": "int reverse(int x){\n\n}",
    "csharp": "public class Solution {\n    public int Reverse(int x) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} x\n * @return {number}\n */\nvar reverse = function(x) {\n    \n};",
    "typescript": "function reverse(x: number): number {\n\n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Integer\n     */\n    function reverse($x) {\n        \n    }\n}",
    "swift": "class Solution {\n    func reverse(_ x: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun reverse(x: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int reverse(int x) {\n\n  }\n}",
    "golang": "func reverse(x int) int {\n    \n}",
    "ruby": "# @param {Integer} x\n# @return {Integer}\ndef reverse(x)\n    \nend",
    "scala": "object Solution {\n    def reverse(x: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn reverse(x: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (reverse x)\n  (-> exact-integer? exact-integer?)\n\n  )",
    "erlang": "-spec reverse(X :: integer()) -> integer().\nreverse(X) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec reverse(x :: integer) :: integer\n  def reverse(x) do\n\n  end\nend"
  },
  "solution": "[TOC]\n\n## Video Solution\n---## Solution Article\n\n---\n\n### Approach 1: Pop and Push Digits & Check before Overflow\n\n**Intuition**\n\nWe can build up the reverse integer one digit at a time.\nWhile doing so, we can check beforehand whether or not appending another digit would cause overflow.\n\n**Algorithm**\n\nReversing an integer can be done similarly to reversing a string.\n\nWe want to repeatedly \"pop\" the last digit off of $$x$$ and \"push\" it to the back of the $$\\text{rev}$$. In the end, $$\\text{rev}$$ will be the reverse of the $$x$$.\n\nTo \"pop\" and \"push\" digits without the help of some auxiliary stack/array, we can use math.\n\n```cpp\n// pop operation:\npop = x % 10;\nx /= 10;\n\n// push operation:\ntemp = rev * 10 + pop;\nrev = temp;\n```\n\nHowever, this approach is dangerous, because the statement $$\\text{temp} = \\text{rev} \\cdot 10 + \\text{pop}$$ can cause overflow.\n\nLuckily, it is easy to check beforehand whether or this statement would cause an overflow.\n\nTo explain, lets assume that $$\\text{rev}$$ is positive.\n\n1. If $$temp = \\text{rev} \\cdot 10 + \\text{pop}$$ causes overflow, then it must be that $$\\text{rev} \\geq \\frac{INTMAX}{10}$$\n2. If $$\\text{rev} > \\frac{INTMAX}{10}$$, then $$temp = \\text{rev} \\cdot 10 + \\text{pop}$$ is guaranteed to overflow.\n3. If $$\\text{rev} == \\frac{INTMAX}{10}$$, then $$temp = \\text{rev} \\cdot 10 + \\text{pop}$$ will overflow if and only if $$\\text{pop} > 7$$\n\nSimilar logic can be applied when $$\\text{rev}$$ is negative.**Complexity Analysis**\n\n* Time Complexity: $$O(\\log(x))$$. There are roughly $$\\log_{10}(x)$$ digits in $$x$$.\n* Space Complexity: $$O(1)$$."
}
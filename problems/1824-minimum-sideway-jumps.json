{
  "title": "Minimum Sideway Jumps",
  "problem_id": "1952",
  "frontend_id": "1824",
  "difficulty": "Medium",
  "problem_slug": "minimum-sideway-jumps",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Greedy"
  ],
  "description": "There is a 3 lane road of length n that consists of n + 1 points labeled from 0 to n. A frog starts at point 0 in the second lane and wants to jump to point n. However, there could be obstacles along the way.\nYou are given an array obstacles of length n + 1 where each obstacles[i] (ranging from 0 to 3) describes an obstacle on the lane obstacles[i] at point i. If obstacles[i] == 0, there are no obstacles at point i. There will be at most one obstacle in the 3 lanes at each point.\nThe frog can only travel from point i to point i + 1 on the same lane if there is not an obstacle on the lane at point i + 1. To avoid obstacles, the frog can also perform a side jump to jump to another lane (even if they are not adjacent) at the same point if there is no obstacle on the new lane.\nReturn the minimum number of side jumps the frog needs to reach any lane at point n starting from lane 2 at point 0.\nNote: There will be no obstacles on points 0 and n.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: obstacles = [0,1,2,3,0]\nOutput: 2 \nExplanation: The optimal solution is shown by the arrows above. There are 2 side jumps (red arrows).\nNote that the frog can jump over obstacles only when making side jumps (as shown at point 2).",
      "images": [
        "https://assets.leetcode.com/uploads/2021/03/25/ic234-q3-ex1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: obstacles = [0,1,1,3,3,0]\nOutput: 0\nExplanation: There are no obstacles on lane 2. No side jumps are required.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/03/25/ic234-q3-ex2.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: obstacles = [0,2,1,0,3,0]\nOutput: 2\nExplanation: The optimal solution is shown by the arrows above. There are 2 side jumps.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/03/25/ic234-q3-ex3.png"
      ]
    }
  ],
  "constraints": [
    "obstacles.length == n + 1",
    "1 <= n <= 5 * 105",
    "0 <= obstacles[i] <= 3",
    "obstacles[0] == obstacles[n] == 0"
  ],
  "follow_ups": [],
  "hints": [
    "At a given point, there are only 3 possible states for where the frog can be.",
    "Check all the ways to move from one point to the next and update the minimum side jumps for each lane."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minSideJumps(vector<int>& obstacles) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minSideJumps(int[] obstacles) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minSideJumps(self, obstacles):\n        \"\"\"\n        :type obstacles: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minSideJumps(self, obstacles: List[int]) -> int:\n        ",
    "c": "int minSideJumps(int* obstacles, int obstaclesSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinSideJumps(int[] obstacles) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} obstacles\n * @return {number}\n */\nvar minSideJumps = function(obstacles) {\n    \n};",
    "typescript": "function minSideJumps(obstacles: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $obstacles\n     * @return Integer\n     */\n    function minSideJumps($obstacles) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minSideJumps(_ obstacles: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minSideJumps(obstacles: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minSideJumps(List<int> obstacles) {\n    \n  }\n}",
    "golang": "func minSideJumps(obstacles []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} obstacles\n# @return {Integer}\ndef min_side_jumps(obstacles)\n    \nend",
    "scala": "object Solution {\n    def minSideJumps(obstacles: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_side_jumps(obstacles: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-side-jumps obstacles)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec min_side_jumps(Obstacles :: [integer()]) -> integer().\nmin_side_jumps(Obstacles) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_side_jumps(obstacles :: [integer]) :: integer\n  def min_side_jumps(obstacles) do\n    \n  end\nend"
  }
}
{
  "title": "Minimum Remove to Make Valid Parentheses",
  "problem_id": "1371",
  "frontend_id": "1249",
  "difficulty": "Medium",
  "problem_slug": "minimum-remove-to-make-valid-parentheses",
  "topics": [
    "String",
    "Stack"
  ],
  "description": "Given a string s of '(' , ')' and lowercase English characters.\nYour task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.\nFormally, a parentheses string is valid if and only if:\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"lee(t(c)o)de)\"\nOutput: \"lee(t(c)o)de\"\nExplanation: \"lee(t(co)de)\" , \"lee(t(c)ode)\" would also be accepted.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"a)b(c)d\"\nOutput: \"ab(c)d\"",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"))((\"\nOutput: \"\"\nExplanation: An empty string is also valid.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 105",
    "s[i] is eitherÂ '(' , ')', or lowercase English letter."
  ],
  "follow_ups": [],
  "hints": [
    "Each prefix of a balanced parentheses has a number of open parentheses greater or equal than closed parentheses, similar idea with each suffix.",
    "Check the array from left to right, remove characters that do not meet the property mentioned above, same idea in backward way."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string minRemoveToMakeValid(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public String minRemoveToMakeValid(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minRemoveToMakeValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minRemoveToMakeValid(self, s: str) -> str:\n        ",
    "c": "char* minRemoveToMakeValid(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public string MinRemoveToMakeValid(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {string}\n */\nvar minRemoveToMakeValid = function(s) {\n    \n};",
    "typescript": "function minRemoveToMakeValid(s: string): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function minRemoveToMakeValid($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minRemoveToMakeValid(_ s: String) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minRemoveToMakeValid(s: String): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String minRemoveToMakeValid(String s) {\n    \n  }\n}",
    "golang": "func minRemoveToMakeValid(s string) string {\n    \n}",
    "ruby": "# @param {String} s\n# @return {String}\ndef min_remove_to_make_valid(s)\n    \nend",
    "scala": "object Solution {\n    def minRemoveToMakeValid(s: String): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_remove_to_make_valid(s: String) -> String {\n        \n    }\n}",
    "racket": "(define/contract (min-remove-to-make-valid s)\n  (-> string? string?)\n  )",
    "erlang": "-spec min_remove_to_make_valid(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmin_remove_to_make_valid(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_remove_to_make_valid(s :: String.t) :: String.t\n  def min_remove_to_make_valid(s) do\n    \n  end\nend"
  }
}
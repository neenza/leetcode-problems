{
  "title": "Monotonic Array",
  "problem_id": "932",
  "frontend_id": "896",
  "difficulty": "Easy",
  "problem_slug": "monotonic-array",
  "topics": [
    "Array"
  ],
  "description": "An array is monotonic if it is either monotone increasing or monotone decreasing.\nAn array nums is monotone increasing if for all i <= j, nums[i] <= nums[j]. An array nums is monotone decreasing if for all i <= j, nums[i] >= nums[j].\nGiven an integer array nums, return true if the given array is monotonic, or false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,2,3]\nOutput: true",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [6,5,4,4]\nOutput: true",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,3,2]\nOutput: false",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "-105 <= nums[i] <= 105"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool isMonotonic(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean isMonotonic(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def isMonotonic(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def isMonotonic(self, nums: List[int]) -> bool:\n        ",
    "c": "bool isMonotonic(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public bool IsMonotonic(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar isMonotonic = function(nums) {\n    \n};",
    "typescript": "function isMonotonic(nums: number[]): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function isMonotonic($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func isMonotonic(_ nums: [Int]) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun isMonotonic(nums: IntArray): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool isMonotonic(List<int> nums) {\n    \n  }\n}",
    "golang": "func isMonotonic(nums []int) bool {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Boolean}\ndef is_monotonic(nums)\n    \nend",
    "scala": "object Solution {\n    def isMonotonic(nums: Array[Int]): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn is_monotonic(nums: Vec<i32>) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (is-monotonic nums)\n  (-> (listof exact-integer?) boolean?)\n  )",
    "erlang": "-spec is_monotonic(Nums :: [integer()]) -> boolean().\nis_monotonic(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec is_monotonic(nums :: [integer]) :: boolean\n  def is_monotonic(nums) do\n    \n  end\nend"
  }
}
{
  "title": "Query Kth Smallest Trimmed Number",
  "problem_id": "2422",
  "frontend_id": "2343",
  "difficulty": "Medium",
  "problem_slug": "query-kth-smallest-trimmed-number",
  "topics": [
    "Array",
    "String",
    "Divide and Conquer",
    "Sorting",
    "Heap (Priority Queue)",
    "Radix Sort",
    "Quickselect"
  ],
  "description": "You are given a 0-indexed array of strings nums, where each string is of equal length and consists of only digits.\nYou are also given a 0-indexed 2D integer array queries where queries[i] = [ki, trimi]. For each queries[i], you need to:\nReturn an array answer of the same length as queries, where answer[i] is the answer to the ith query.\nNote:\nExample 1:\nExample 2:\nConstraints:\nFollow up: Could you use the Radix Sort Algorithm to solve this problem? What will be the complexity of that solution?",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [\"102\",\"473\",\"251\",\"814\"], queries = [[1,1],[2,3],[4,2],[1,2]]\nOutput: [2,2,1,0]\nExplanation:\n1. After trimming to the last digit, nums = [\"2\",\"3\",\"1\",\"4\"]. The smallest number is 1 at index 2.\n2. Trimmed to the last 3 digits, nums is unchanged. The 2nd smallest number is 251 at index 2.\n3. Trimmed to the last 2 digits, nums = [\"02\",\"73\",\"51\",\"14\"]. The 4th smallest number is 73.\n4. Trimmed to the last 2 digits, the smallest number is 2 at index 0.\n   Note that the trimmed number \"02\" is evaluated as 2.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [\"24\",\"37\",\"96\",\"04\"], queries = [[2,1],[2,2]]\nOutput: [3,0]\nExplanation:\n1. Trimmed to the last digit, nums = [\"4\",\"7\",\"6\",\"4\"]. The 2nd smallest number is 4 at index 3.\n   There are two occurrences of 4, but the one at index 0 is considered smaller than the one at index 3.\n2. Trimmed to the last 2 digits, nums is unchanged. The 2nd smallest number is 24.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 100",
    "1 <= nums[i].length <= 100",
    "nums[i] consists of only digits.",
    "All nums[i].length are equal.",
    "1 <= queries.length <= 100",
    "queries[i].length == 2",
    "1 <= ki <= nums.length",
    "1 <= trimi <= nums[i].length"
  ],
  "follow_ups": [
    "Could you use the Radix Sort Algorithm to solve this problem? What will be the complexity of that solution?"
  ],
  "hints": [
    "Run a simulation to follow the requirement of each query."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> smallestTrimmedNumbers(vector<string>& nums, vector<vector<int>>& queries) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] smallestTrimmedNumbers(String[] nums, int[][] queries) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def smallestTrimmedNumbers(self, nums, queries):\n        \"\"\"\n        :type nums: List[str]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def smallestTrimmedNumbers(self, nums: List[str], queries: List[List[int]]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* smallestTrimmedNumbers(char** nums, int numsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] SmallestTrimmedNumbers(string[] nums, int[][] queries) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string[]} nums\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar smallestTrimmedNumbers = function(nums, queries) {\n    \n};",
    "typescript": "function smallestTrimmedNumbers(nums: string[], queries: number[][]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String[] $nums\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function smallestTrimmedNumbers($nums, $queries) {\n        \n    }\n}",
    "swift": "class Solution {\n    func smallestTrimmedNumbers(_ nums: [String], _ queries: [[Int]]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun smallestTrimmedNumbers(nums: Array<String>, queries: Array<IntArray>): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> smallestTrimmedNumbers(List<String> nums, List<List<int>> queries) {\n    \n  }\n}",
    "golang": "func smallestTrimmedNumbers(nums []string, queries [][]int) []int {\n    \n}",
    "ruby": "# @param {String[]} nums\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef smallest_trimmed_numbers(nums, queries)\n    \nend",
    "scala": "object Solution {\n    def smallestTrimmedNumbers(nums: Array[String], queries: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn smallest_trimmed_numbers(nums: Vec<String>, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (smallest-trimmed-numbers nums queries)\n  (-> (listof string?) (listof (listof exact-integer?)) (listof exact-integer?))\n  )",
    "erlang": "-spec smallest_trimmed_numbers(Nums :: [unicode:unicode_binary()], Queries :: [[integer()]]) -> [integer()].\nsmallest_trimmed_numbers(Nums, Queries) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec smallest_trimmed_numbers(nums :: [String.t], queries :: [[integer]]) :: [integer]\n  def smallest_trimmed_numbers(nums, queries) do\n    \n  end\nend"
  }
}
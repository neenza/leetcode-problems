{
  "title": "Subarrays Distinct Element Sum of Squares II",
  "problem_id": "3139",
  "frontend_id": "2916",
  "difficulty": "Hard",
  "problem_slug": "subarrays-distinct-element-sum-of-squares-ii",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Binary Indexed Tree",
    "Segment Tree"
  ],
  "description": "You are given a 0-indexed integer array nums.\nThe distinct count of a subarray of nums is defined as:\nReturn the sum of the squares of distinct counts of all subarrays of nums.\nSince the answer may be very large, return it modulo 109 + 7.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,1]\nOutput: 15\nExplanation: Six possible subarrays are:\n[1]: 1 distinct value\n[2]: 1 distinct value\n[1]: 1 distinct value\n[1,2]: 2 distinct values\n[2,1]: 2 distinct values\n[1,2,1]: 2 distinct values\nThe sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 + 22 + 22 + 22 = 15.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [2,2]\nOutput: 3\nExplanation: Three possible subarrays are:\n[2]: 1 distinct value\n[2]: 1 distinct value\n[2,2]: 1 distinct value\nThe sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 = 3.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "1 <= nums[i] <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "Consider the sum of the count of distinct values of subarrays ending with index <code>i</code>, letâ€™s call it <code>sum</code>. Now if you need the sum of all subarrays ending with index <code>i + 1</code> think how it can be related to <code>sum</code> and what extra will be needed to add to this.",
    "You can find that extra sum using the segment tree."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int sumCounts(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int sumCounts(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def sumCounts(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def sumCounts(self, nums: List[int]) -> int:\n        ",
    "c": "int sumCounts(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int SumCounts(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar sumCounts = function(nums) {\n    \n};",
    "typescript": "function sumCounts(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function sumCounts($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func sumCounts(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun sumCounts(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int sumCounts(List<int> nums) {\n    \n  }\n}",
    "golang": "func sumCounts(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef sum_counts(nums)\n    \nend",
    "scala": "object Solution {\n    def sumCounts(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn sum_counts(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (sum-counts nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec sum_counts(Nums :: [integer()]) -> integer().\nsum_counts(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec sum_counts(nums :: [integer]) :: integer\n  def sum_counts(nums) do\n    \n  end\nend"
  }
}
{
  "title": "Construct 2D Grid Matching Graph Layout",
  "problem_id": "3578",
  "frontend_id": "3311",
  "difficulty": "Hard",
  "problem_slug": "construct-2d-grid-matching-graph-layout",
  "topics": [
    "Array",
    "Hash Table",
    "Graph",
    "Matrix"
  ],
  "description": "You are given a 2D integer array edges representing an undirected graph having n nodes, where edges[i] = [ui, vi] denotes an edge between nodes ui and vi.\nConstruct a 2D grid that satisfies these conditions:\nIt is guaranteed that edges can form a 2D grid that satisfies the conditions.\nReturn a 2D integer array satisfying the conditions above. If there are multiple solutions, return any of them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 4, edges = [[0,1],[0,2],[1,3],[2,3]]\nOutput: [[3,1],[2,0]]\nExplanation:\n",
      "images": [
        "https://assets.leetcode.com/uploads/2024/08/11/screenshot-from-2024-08-11-14-07-59.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 5, edges = [[0,1],[1,3],[2,3],[2,4]]\nOutput: [[4,2,3,1,0]]\nExplanation:\n",
      "images": [
        "https://assets.leetcode.com/uploads/2024/08/11/screenshot-from-2024-08-11-14-06-02.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 9, edges = [[0,1],[0,4],[0,5],[1,7],[2,3],[2,4],[2,5],[3,6],[4,6],[4,7],[6,8],[7,8]]\nOutput: [[8,6,3],[7,4,2],[1,0,5]]\nExplanation:\n",
      "images": [
        "https://assets.leetcode.com/uploads/2024/08/11/screenshot-from-2024-08-11-14-06-38.png"
      ]
    }
  ],
  "constraints": [
    "2 <= n <= 5 * 104",
    "1 <= edges.length <= 105",
    "edges[i] = [ui, vi]",
    "0 <= ui < vi < n",
    "All the edges are distinct.",
    "The input is generated such that edges can form a 2D grid that satisfies the conditions."
  ],
  "follow_ups": [],
  "hints": [
    "Observe the indegrees of the nodes.",
    "The case where there are two nodes with an indegree of 1, and all the others have an indegree of 2 can be handled separately.",
    "The nodes with the smallest degrees are the corners.",
    "You can simulate the grid creation process using BFS or a similar approach after making some observations on the indegrees."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<vector<int>> constructGridLayout(int n, vector<vector<int>>& edges) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[][] constructGridLayout(int n, int[][] edges) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def constructGridLayout(self, n, edges):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def constructGridLayout(self, n: int, edges: List[List[int]]) -> List[List[int]]:\n        ",
    "c": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** constructGridLayout(int n, int** edges, int edgesSize, int* edgesColSize, int* returnSize, int** returnColumnSizes) {\n    \n}",
    "csharp": "public class Solution {\n    public int[][] ConstructGridLayout(int n, int[][] edges) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {number[][]}\n */\nvar constructGridLayout = function(n, edges) {\n    \n};",
    "typescript": "function constructGridLayout(n: number, edges: number[][]): number[][] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @return Integer[][]\n     */\n    function constructGridLayout($n, $edges) {\n        \n    }\n}",
    "swift": "class Solution {\n    func constructGridLayout(_ n: Int, _ edges: [[Int]]) -> [[Int]] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun constructGridLayout(n: Int, edges: Array<IntArray>): Array<IntArray> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<List<int>> constructGridLayout(int n, List<List<int>> edges) {\n    \n  }\n}",
    "golang": "func constructGridLayout(n int, edges [][]int) [][]int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @return {Integer[][]}\ndef construct_grid_layout(n, edges)\n    \nend",
    "scala": "object Solution {\n    def constructGridLayout(n: Int, edges: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn construct_grid_layout(n: i32, edges: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        \n    }\n}",
    "racket": "(define/contract (construct-grid-layout n edges)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof (listof exact-integer?)))\n  )",
    "erlang": "-spec construct_grid_layout(N :: integer(), Edges :: [[integer()]]) -> [[integer()]].\nconstruct_grid_layout(N, Edges) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec construct_grid_layout(n :: integer, edges :: [[integer]]) :: [[integer]]\n  def construct_grid_layout(n, edges) do\n    \n  end\nend"
  }
}
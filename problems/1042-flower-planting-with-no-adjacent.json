{
  "title": "Flower Planting With No Adjacent",
  "problem_id": "1120",
  "frontend_id": "1042",
  "difficulty": "Medium",
  "problem_slug": "flower-planting-with-no-adjacent",
  "topics": [
    "Depth-First Search",
    "Breadth-First Search",
    "Graph"
  ],
  "description": "You have n gardens, labeled from 1 to n, and an array paths where paths[i] = [xi, yi] describes a bidirectional path between garden xi to garden yi. In each garden, you want to plant one of 4 types of flowers.\nAll gardens have at most 3 paths coming into or leaving it.\nYour task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers.\nReturn any such a choice as an array answer, where answer[i] is the type of flower planted in the (i+1)th garden. The flower types are denoted 1, 2, 3, or 4. It is guaranteed an answer exists.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 3, paths = [[1,2],[2,3],[3,1]]\nOutput: [1,2,3]\nExplanation:\nGardens 1 and 2 have different types.\nGardens 2 and 3 have different types.\nGardens 3 and 1 have different types.\nHence, [1,2,3] is a valid answer. Other valid answers include [1,2,4], [1,4,2], and [3,2,1].",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 4, paths = [[1,2],[3,4]]\nOutput: [1,2,1,2]",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]\nOutput: [1,2,3,4]",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 104",
    "0 <= paths.length <= 2 * 104",
    "paths[i].length == 2",
    "1 <= xi, yi <= n",
    "xi != yi",
    "Every garden has at most 3 paths coming into or leaving it."
  ],
  "follow_ups": [],
  "hints": [
    "Since each garden is connected to at most 3 gardens, there's always an available color for each garden.  For example, if one garden is next to gardens with colors 1, 3, 4,  then color #2 is available."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> gardenNoAdj(int n, vector<vector<int>>& paths) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] gardenNoAdj(int n, int[][] paths) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def gardenNoAdj(self, n, paths):\n        \"\"\"\n        :type n: int\n        :type paths: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def gardenNoAdj(self, n: int, paths: List[List[int]]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* gardenNoAdj(int n, int** paths, int pathsSize, int* pathsColSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] GardenNoAdj(int n, int[][] paths) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number[][]} paths\n * @return {number[]}\n */\nvar gardenNoAdj = function(n, paths) {\n    \n};",
    "typescript": "function gardenNoAdj(n: number, paths: number[][]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $paths\n     * @return Integer[]\n     */\n    function gardenNoAdj($n, $paths) {\n        \n    }\n}",
    "swift": "class Solution {\n    func gardenNoAdj(_ n: Int, _ paths: [[Int]]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun gardenNoAdj(n: Int, paths: Array<IntArray>): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> gardenNoAdj(int n, List<List<int>> paths) {\n    \n  }\n}",
    "golang": "func gardenNoAdj(n int, paths [][]int) []int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer[][]} paths\n# @return {Integer[]}\ndef garden_no_adj(n, paths)\n    \nend",
    "scala": "object Solution {\n    def gardenNoAdj(n: Int, paths: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn garden_no_adj(n: i32, paths: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (garden-no-adj n paths)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof exact-integer?))\n  )",
    "erlang": "-spec garden_no_adj(N :: integer(), Paths :: [[integer()]]) -> [integer()].\ngarden_no_adj(N, Paths) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec garden_no_adj(n :: integer, paths :: [[integer]]) :: [integer]\n  def garden_no_adj(n, paths) do\n    \n  end\nend"
  }
}
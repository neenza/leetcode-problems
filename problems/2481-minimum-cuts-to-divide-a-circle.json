{
  "title": "Minimum Cuts to Divide a Circle",
  "problem_id": "2575",
  "frontend_id": "2481",
  "difficulty": "Easy",
  "problem_slug": "minimum-cuts-to-divide-a-circle",
  "topics": [
    "Math",
    "Geometry"
  ],
  "description": "A valid cut in a circle can be:\nSome valid and invalid cuts are shown in the figures below.\nGiven the integer n, return the minimum number of cuts needed to divide a circle into n equal slices.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 4\nOutput: 2\nExplanation: \nThe above figure shows how cutting the circle twice through the middle divides it into 4 equal slices.",
      "images": [
        "https://assets.leetcode.com/uploads/2022/10/24/11drawio.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 3\nOutput: 3\nExplanation:\nAt least 3 cuts are needed to divide the circle into 3 equal slices. \nIt can be shown that less than 3 cuts cannot result in 3 slices of equal size and shape.\nAlso note that the first cut will not divide the circle into distinct parts.",
      "images": [
        "https://assets.leetcode.com/uploads/2022/10/24/22drawio.png"
      ]
    }
  ],
  "constraints": [
    "1 <= n <= 100"
  ],
  "follow_ups": [],
  "hints": [
    "Think about odd and even values separately.",
    "When will we not have to cut the circle at all?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int numberOfCuts(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int numberOfCuts(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numberOfCuts(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numberOfCuts(self, n: int) -> int:\n        ",
    "c": "int numberOfCuts(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int NumberOfCuts(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar numberOfCuts = function(n) {\n    \n};",
    "typescript": "function numberOfCuts(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function numberOfCuts($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numberOfCuts(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numberOfCuts(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int numberOfCuts(int n) {\n    \n  }\n}",
    "golang": "func numberOfCuts(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef number_of_cuts(n)\n    \nend",
    "scala": "object Solution {\n    def numberOfCuts(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn number_of_cuts(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (number-of-cuts n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec number_of_cuts(N :: integer()) -> integer().\nnumber_of_cuts(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec number_of_cuts(n :: integer) :: integer\n  def number_of_cuts(n) do\n    \n  end\nend"
  }
}
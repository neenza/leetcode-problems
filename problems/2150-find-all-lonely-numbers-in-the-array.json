{
  "title": "Find All Lonely Numbers in the Array",
  "problem_id": "2270",
  "frontend_id": "2150",
  "difficulty": "Medium",
  "problem_slug": "find-all-lonely-numbers-in-the-array",
  "topics": [
    "Array",
    "Hash Table",
    "Counting"
  ],
  "description": "You are given an integer array nums. A number x is lonely when it appears only once, and no adjacent numbers (i.e. x + 1 and x - 1) appear in the array.\nReturn all lonely numbers in nums. You may return the answer in any order.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [10,6,5,8]\nOutput: [10,8]\nExplanation: \n- 10 is a lonely number since it appears exactly once and 9 and 11 does not appear in nums.\n- 8 is a lonely number since it appears exactly once and 7 and 9 does not appear in nums.\n- 5 is not a lonely number since 6 appears in nums and vice versa.\nHence, the lonely numbers in nums are [10, 8].\nNote that [8, 10] may also be returned.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,3,5,3]\nOutput: [1,5]\nExplanation: \n- 1 is a lonely number since it appears exactly once and 0 and 2 does not appear in nums.\n- 5 is a lonely number since it appears exactly once and 4 and 6 does not appear in nums.\n- 3 is not a lonely number since it appears twice.\nHence, the lonely numbers in nums are [1, 5].\nNote that [5, 1] may also be returned.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "0 <= nums[i] <= 106"
  ],
  "follow_ups": [],
  "hints": [
    "For a given element x, how can you quickly check if x - 1 and x + 1 are present in the array without reiterating through the entire array?",
    "Use a set or a hash map."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> findLonely(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<Integer> findLonely(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findLonely(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findLonely(self, nums: List[int]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findLonely(int* nums, int numsSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<int> FindLonely(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findLonely = function(nums) {\n    \n};",
    "typescript": "function findLonely(nums: number[]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function findLonely($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findLonely(_ nums: [Int]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findLonely(nums: IntArray): List<Int> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> findLonely(List<int> nums) {\n    \n  }\n}",
    "golang": "func findLonely(nums []int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer[]}\ndef find_lonely(nums)\n    \nend",
    "scala": "object Solution {\n    def findLonely(nums: Array[Int]): List[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_lonely(nums: Vec<i32>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (find-lonely nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )",
    "erlang": "-spec find_lonely(Nums :: [integer()]) -> [integer()].\nfind_lonely(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_lonely(nums :: [integer]) :: [integer]\n  def find_lonely(nums) do\n    \n  end\nend"
  }
}
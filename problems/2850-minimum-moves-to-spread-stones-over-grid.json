{
  "title": "Minimum Moves to Spread Stones Over Grid",
  "problem_id": "3092",
  "frontend_id": "2850",
  "difficulty": "Medium",
  "problem_slug": "minimum-moves-to-spread-stones-over-grid",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Breadth-First Search",
    "Matrix"
  ],
  "description": "You are given a 0-indexed 2D integer matrix grid of size 3 * 3, representing the number of stones in each cell. The grid contains exactly 9 stones, and there can be multiple stones in a single cell.\nIn one move, you can move a single stone from its current cell to any other cell if the two cells share a side.\nReturn the minimum number of moves required to place one stone in each cell.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: grid = [[1,1,0],[1,1,1],[1,2,1]]\nOutput: 3\nExplanation: One possible sequence of moves to place one stone in each cell is: \n1- Move one stone from cell (2,1) to cell (2,2).\n2- Move one stone from cell (2,2) to cell (1,2).\n3- Move one stone from cell (1,2) to cell (0,2).\nIn total, it takes 3 moves to place one stone in each cell of the grid.\nIt can be shown that 3 is the minimum number of moves required to place one stone in each cell.",
      "images": [
        "https://assets.leetcode.com/uploads/2023/08/23/example1-3.svg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: grid = [[1,3,0],[1,0,0],[1,0,3]]\nOutput: 4\nExplanation: One possible sequence of moves to place one stone in each cell is:\n1- Move one stone from cell (0,1) to cell (0,2).\n2- Move one stone from cell (0,1) to cell (1,1).\n3- Move one stone from cell (2,2) to cell (1,2).\n4- Move one stone from cell (2,2) to cell (2,1).\nIn total, it takes 4 moves to place one stone in each cell of the grid.\nIt can be shown that 4 is the minimum number of moves required to place one stone in each cell.",
      "images": [
        "https://assets.leetcode.com/uploads/2023/08/23/example2-2.svg"
      ]
    }
  ],
  "constraints": [
    "grid.length == grid[i].length == 3",
    "0 <= grid[i][j] <= 9",
    "Sum of grid is equal to 9."
  ],
  "follow_ups": [],
  "hints": [
    "There are at most <code>4</code> cells with more than one stone.",
    "Let <code>a</code> be the number of cells containing more than one stone, and <code>b</code> be the number of cells containing no stones. <code></code>. <code>b^a â‰¤ 6561</code>. Use this fact to come up with a bruteforce.",
    "For all empty cells, bruteforce over all possible cells from which a stone can come. Note that a stone will always come from a cell containing at least 2 stones."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimumMoves(vector<vector<int>>& grid) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimumMoves(int[][] grid) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumMoves(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumMoves(self, grid: List[List[int]]) -> int:\n        ",
    "c": "int minimumMoves(int** grid, int gridSize, int* gridColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimumMoves(int[][] grid) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar minimumMoves = function(grid) {\n    \n};",
    "typescript": "function minimumMoves(grid: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function minimumMoves($grid) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumMoves(_ grid: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumMoves(grid: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumMoves(List<List<int>> grid) {\n    \n  }\n}",
    "golang": "func minimumMoves(grid [][]int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} grid\n# @return {Integer}\ndef minimum_moves(grid)\n    \nend",
    "scala": "object Solution {\n    def minimumMoves(grid: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_moves(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-moves grid)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec minimum_moves(Grid :: [[integer()]]) -> integer().\nminimum_moves(Grid) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_moves(grid :: [[integer]]) :: integer\n  def minimum_moves(grid) do\n    \n  end\nend"
  }
}
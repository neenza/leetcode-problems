{
  "title": "Minimum Increments for Target Multiples in an Array",
  "problem_id": "3697",
  "frontend_id": "3444",
  "difficulty": "Hard",
  "problem_slug": "minimum-increments-for-target-multiples-in-an-array",
  "topics": [
    "Array",
    "Math",
    "Dynamic Programming",
    "Bit Manipulation",
    "Number Theory",
    "Bitmask"
  ],
  "description": "You are given two arrays, nums and target.\nIn a single operation, you may increment any element of nums by 1.\nReturn the minimum number of operations required so that each element in target has at least one multiple in nums.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,3], target = [4]\nOutput: 1\nExplanation:\nThe minimum number of operations required to satisfy the condition is 1.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [8,4], target = [10,5]\nOutput: 2\nExplanation:\nThe minimum number of operations required to satisfy the condition is 2.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [7,9,10], target = [7]\nOutput: 0\nExplanation:\nTarget 7 already has a multiple in nums, so no additional operations are needed.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 5 * 104",
    "1 <= target.length <= 4",
    "target.length <= nums.length",
    "1 <= nums[i], target[i] <= 104"
  ],
  "follow_ups": [],
  "hints": [
    "Use bitmask dynamic programming."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimumIncrements(vector<int>& nums, vector<int>& target) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimumIncrements(int[] nums, int[] target) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumIncrements(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumIncrements(self, nums: List[int], target: List[int]) -> int:\n        ",
    "c": "int minimumIncrements(int* nums, int numsSize, int* target, int targetSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimumIncrements(int[] nums, int[] target) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number[]} target\n * @return {number}\n */\nvar minimumIncrements = function(nums, target) {\n    \n};",
    "typescript": "function minimumIncrements(nums: number[], target: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $target\n     * @return Integer\n     */\n    function minimumIncrements($nums, $target) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumIncrements(_ nums: [Int], _ target: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumIncrements(nums: IntArray, target: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumIncrements(List<int> nums, List<int> target) {\n    \n  }\n}",
    "golang": "func minimumIncrements(nums []int, target []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer[]} target\n# @return {Integer}\ndef minimum_increments(nums, target)\n    \nend",
    "scala": "object Solution {\n    def minimumIncrements(nums: Array[Int], target: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_increments(nums: Vec<i32>, target: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-increments nums target)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec minimum_increments(Nums :: [integer()], Target :: [integer()]) -> integer().\nminimum_increments(Nums, Target) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_increments(nums :: [integer], target :: [integer]) :: integer\n  def minimum_increments(nums, target) do\n    \n  end\nend"
  }
}
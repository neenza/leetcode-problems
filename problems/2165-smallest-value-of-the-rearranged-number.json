{
  "title": "Smallest Value of the Rearranged Number",
  "problem_id": "2284",
  "frontend_id": "2165",
  "difficulty": "Medium",
  "problem_slug": "smallest-value-of-the-rearranged-number",
  "topics": [
    "Math",
    "Sorting"
  ],
  "description": "You are given an integer num. Rearrange the digits of num such that its value is minimized and it does not contain any leading zeros.\nReturn the rearranged number with minimal value.\nNote that the sign of the number does not change after rearranging the digits.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: num = 310\nOutput: 103\nExplanation: The possible arrangements for the digits of 310 are 013, 031, 103, 130, 301, 310. \nThe arrangement with the smallest value that does not contain any leading zeros is 103.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: num = -7605\nOutput: -7650\nExplanation: Some possible arrangements for the digits of -7605 are -7650, -6705, -5076, -0567.\nThe arrangement with the smallest value that does not contain any leading zeros is -7650.",
      "images": []
    }
  ],
  "constraints": [
    "-1015 <= num <= 1015"
  ],
  "follow_ups": [],
  "hints": [
    "For positive numbers, the leading digit should be the smallest nonzero digit. Then the remaining digits follow in ascending order.",
    "For negative numbers, the digits should be arranged in descending order."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long smallestNumber(long long num) {\n        \n    }\n};",
    "java": "class Solution {\n    public long smallestNumber(long num) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def smallestNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def smallestNumber(self, num: int) -> int:\n        ",
    "c": "long long smallestNumber(long long num) {\n    \n}",
    "csharp": "public class Solution {\n    public long SmallestNumber(long num) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} num\n * @return {number}\n */\nvar smallestNumber = function(num) {\n    \n};",
    "typescript": "function smallestNumber(num: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer\n     */\n    function smallestNumber($num) {\n        \n    }\n}",
    "swift": "class Solution {\n    func smallestNumber(_ num: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun smallestNumber(num: Long): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int smallestNumber(int num) {\n    \n  }\n}",
    "golang": "func smallestNumber(num int64) int64 {\n    \n}",
    "ruby": "# @param {Integer} num\n# @return {Integer}\ndef smallest_number(num)\n    \nend",
    "scala": "object Solution {\n    def smallestNumber(num: Long): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn smallest_number(num: i64) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (smallest-number num)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec smallest_number(Num :: integer()) -> integer().\nsmallest_number(Num) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec smallest_number(num :: integer) :: integer\n  def smallest_number(num) do\n    \n  end\nend"
  }
}
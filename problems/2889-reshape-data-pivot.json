{
  "title": "Reshape Data: Pivot",
  "problem_id": "3072",
  "frontend_id": "2889",
  "difficulty": "Easy",
  "problem_slug": "reshape-data-pivot",
  "topics": [],
  "description": "Write a solution to pivot the data so that each row represents temperatures for a specific month, and each city is a separate column.\nThe result format is in the following example.",
  "examples": [
    {
      "example_num": 1,
      "example_text": "DataFrame weather\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| city        | object |\n| month       | object |\n| temperature | int    |\n+-------------+--------+",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Example 1:\nInput:\n+--------------+----------+-------------+\n| city         | month    | temperature |\n+--------------+----------+-------------+\n| Jacksonville | January  | 13          |\n| Jacksonville | February | 23          |\n| Jacksonville | March    | 38          |\n| Jacksonville | April    | 5           |\n| Jacksonville | May      | 34          |\n| ElPaso       | January  | 20          |\n| ElPaso       | February | 6           |\n| ElPaso       | March    | 26          |\n| ElPaso       | April    | 2           |\n| ElPaso       | May      | 43          |\n+--------------+----------+-------------+\nOutput:\n+----------+--------+--------------+\n| month    | ElPaso | Jacksonville |\n+----------+--------+--------------+\n| April    | 2      | 5            |\n| February | 6      | 23           |\n| January  | 20     | 13           |\n| March    | 26     | 38           |\n| May      | 43     | 34           |\n+----------+--------+--------------+\nExplanation:\nThe table is pivoted, each column represents a city, and each row represents a specific month.",
      "images": []
    }
  ],
  "constraints": [],
  "follow_ups": [],
  "hints": [
    "Consider using a built-in function in pandas library to transform the data"
  ],
  "code_snippets": {
    "pythondata": "import pandas as pd\n\ndef pivotTable(weather: pd.DataFrame) -> pd.DataFrame:\n    "
  },
  "solution": "[TOC]\n\n## Solution\n--- \n### Overview\n\nIn this solution we focus on how to pivot a DataFrame. Pivoting a table means reshaping it in such a way that you convert a long-format table into a wide-format table. Let's unravel the solution and the usage of the `pivot` function in detail.\n\n**Key Concepts**:\n1. **`pivot` Function:** The `pivot` function in pandas is used to reshape data based on column values and get a new DataFrame out of it. `pivot` takes the following arguments which we will utilize:\n   - `index`: Determines the rows in the new DataFrame. \n   - `columns`: Determines the columns in the new DataFrame. \n   - `values`: Specifies the values to be used when the table is reshaped. \n\n### Intuition\n\nLet's break the solution down step by step:\n\n**1. Importing pandas:**\n```python\nimport pandas as pd\n```\n\nThis imports the pandas library and gives it an alias `pd`. pandas is a fast, powerful, flexible, and easy-to-use open-source data analysis and data manipulation library built on top of the Python programming language.\n\n**2. The `pivot` Function**\n```python\nans = weather.pivot(index='month', columns='city', values='temperature')\n```\n\nHere's what each argument in the `pivot` function does:\n - `index`: It determines the rows in the new DataFrame. For this example, we use the `month` column from the original DataFrame as the index, which means our pivoted table will have one row for each unique value in the `month` column.\n- `columns`: It determines the columns in the new DataFrame. Here, we're using the `city` column, which means our pivoted table will have one column for each unique value in the `city` column.\n - `values`: This argument specifies the values to be used when the table is reshaped. For this example, we use the `temperature` column from the original DataFrame.\n\n**3. Returning the modified DataFrame:**\n```python\nreturn ans\n```\n\nThis line of code returns the pivoted DataFrame.\n\n**Using the Solution**\n\n**Visualization of `pivot` function**\n\n![fig](../Figures/3316/3316-1.png)\n\nWhen you pass this DataFrame to the function:citymonthtemperatureJacksonvilleJanuary13JacksonvilleFebruary23JacksonvilleMarch38JacksonvilleApril5JacksonvilleMay34ElPasoJanuary20ElPasoFebruary6ElPasoMarch26ElPasoApril2ElPasoMay43It will return:monthElPasoJacksonvilleApril25February623January2013March2638May4334**Notes:** \n - **Missing Data:** The pivot function does not handle duplicated entries for the same index/column combination. If there are duplicates, you might consider using `pivot_table` which can aggregate over duplicate entries.\n - **Data Type:** As per the table given, the `city` and `month` columns are of \"object\" data type which is equivalent to string type in pandas, while `temperature` is of integer type.\n - **Order:** The output may not necessarily be in the same order as in the example (i.e., January to May). If you want it in a specific order, you'd have to sort it after pivoting.\n\n**Complete Sample Solution with Sorting:**\n```python\nimport pandas as pd\n\ndef pivotTable(weather: pd.DataFrame) -> pd.DataFrame:\n    ans = weather.pivot(index='month', columns='city', values='temperature')\n    month_order = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    ans = ans.reindex(month_order)\n    return ans\n```\nIn this solution, after pivoting, the DataFrame is sorted based on the predefined order of months. The resulting DataFrame would be:monthElPasoJacksonvilleJanuary2013February623March2638April25May4334### Implementation"
}
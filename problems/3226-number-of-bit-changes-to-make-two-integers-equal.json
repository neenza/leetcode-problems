{
  "title": "Number of Bit Changes to Make Two Integers Equal",
  "problem_id": "3508",
  "frontend_id": "3226",
  "difficulty": "Easy",
  "problem_slug": "number-of-bit-changes-to-make-two-integers-equal",
  "topics": [
    "Bit Manipulation"
  ],
  "description": "You are given two positive integers n and k.\nYou can choose any bit in the binary representation of n that is equal to 1 and change it to 0.\nReturn the number of changes needed to make n equal to k. If it is impossible, return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 13, k = 4\nOutput: 2\nExplanation: Initially, the binary representations of n and k are n = (1101) 2 and k = (0100) 2 . We can change the first and fourth bits of n . The resulting integer is n = ( 0 10 0 ) 2 = k .",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 21, k = 21\nOutput: 0\nExplanation: n and k are already equal, so no changes are needed.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 14, k = 13\nOutput: -1\nExplanation: It is not possible to make n equal to k .",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n, k <= 106"
  ],
  "follow_ups": [],
  "hints": [
    "Find the binary representations of <code>n</code> and <code>k</code>.",
    "Any bit that is equal to 1 in <code>n</code> and equal to 0 in <code>k</code> needs to be changed."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minChanges(int n, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minChanges(int n, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minChanges(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minChanges(self, n: int, k: int) -> int:\n        ",
    "c": "int minChanges(int n, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinChanges(int n, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar minChanges = function(n, k) {\n    \n};",
    "typescript": "function minChanges(n: number, k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer\n     */\n    function minChanges($n, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minChanges(_ n: Int, _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minChanges(n: Int, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minChanges(int n, int k) {\n    \n  }\n}",
    "golang": "func minChanges(n int, k int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef min_changes(n, k)\n    \nend",
    "scala": "object Solution {\n    def minChanges(n: Int, k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_changes(n: i32, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-changes n k)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec min_changes(N :: integer(), K :: integer()) -> integer().\nmin_changes(N, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_changes(n :: integer, k :: integer) :: integer\n  def min_changes(n, k) do\n    \n  end\nend"
  }
}
{
  "title": "Letter Case Permutation",
  "problem_id": "800",
  "frontend_id": "784",
  "difficulty": "Medium",
  "problem_slug": "letter-case-permutation",
  "topics": [
    "String",
    "Backtracking",
    "Bit Manipulation"
  ],
  "description": "Given a string s, youÂ can transform every letter individually to be lowercase or uppercase to create another string.\nReturn a list of all possible strings we could create. Return the output in any order.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"a1b2\"\nOutput: [\"a1b2\",\"a1B2\",\"A1b2\",\"A1B2\"]",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"3z4\"\nOutput: [\"3z4\",\"3Z4\"]",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 12",
    "s consists of lowercase English letters, uppercase English letters, and digits."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<string> letterCasePermutation(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<String> letterCasePermutation(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def letterCasePermutation(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def letterCasePermutation(self, s: str) -> List[str]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** letterCasePermutation(char* s, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<string> LetterCasePermutation(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {string[]}\n */\nvar letterCasePermutation = function(s) {\n    \n};",
    "typescript": "function letterCasePermutation(s: string): string[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String[]\n     */\n    function letterCasePermutation($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func letterCasePermutation(_ s: String) -> [String] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun letterCasePermutation(s: String): List<String> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<String> letterCasePermutation(String s) {\n    \n  }\n}",
    "golang": "func letterCasePermutation(s string) []string {\n    \n}",
    "ruby": "# @param {String} s\n# @return {String[]}\ndef letter_case_permutation(s)\n    \nend",
    "scala": "object Solution {\n    def letterCasePermutation(s: String): List[String] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn letter_case_permutation(s: String) -> Vec<String> {\n        \n    }\n}",
    "racket": "(define/contract (letter-case-permutation s)\n  (-> string? (listof string?))\n  )",
    "erlang": "-spec letter_case_permutation(S :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\nletter_case_permutation(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec letter_case_permutation(s :: String.t) :: [String.t]\n  def letter_case_permutation(s) do\n    \n  end\nend"
  }
}
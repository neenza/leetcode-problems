{
  "title": "Minimum Deletions to Make Array Beautiful",
  "problem_id": "1355",
  "frontend_id": "2216",
  "difficulty": "Medium",
  "problem_slug": "minimum-deletions-to-make-array-beautiful",
  "topics": [
    "Array",
    "Stack",
    "Greedy"
  ],
  "description": "You are given a 0-indexed integer array nums. The array nums is beautiful if:\nNote that an empty array is considered beautiful.\nYou can delete any number of elements from nums. When you delete an element, all the elements to the right of the deleted element will be shifted one unit to the left to fill the gap created and all the elements to the left of the deleted element will remain unchanged.\nReturn the minimum number of elements to delete from nums to make it beautiful.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,1,2,3,5]\nOutput: 1\nExplanation: You can delete either nums[0] or nums[1] to make nums = [1,2,3,5] which is beautiful. It can be proven you need at least 1 deletion to make nums beautiful.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,1,2,2,3,3]\nOutput: 2\nExplanation: You can delete nums[0] and nums[5] to make nums = [1,2,2,3] which is beautiful. It can be proven you need at least 2 deletions to make nums beautiful.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "0 <= nums[i] <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "Delete as many adjacent equal elements as necessary.",
    "If the length of nums is odd after the entire process, delete the last element."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minDeletion(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minDeletion(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minDeletion(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minDeletion(self, nums: List[int]) -> int:\n        ",
    "c": "int minDeletion(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinDeletion(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minDeletion = function(nums) {\n    \n};",
    "typescript": "function minDeletion(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minDeletion($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minDeletion(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minDeletion(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minDeletion(List<int> nums) {\n    \n  }\n}",
    "golang": "func minDeletion(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef min_deletion(nums)\n    \nend",
    "scala": "object Solution {\n    def minDeletion(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_deletion(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-deletion nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec min_deletion(Nums :: [integer()]) -> integer().\nmin_deletion(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_deletion(nums :: [integer]) :: integer\n  def min_deletion(nums) do\n    \n  end\nend"
  }
}
{
  "title": "Minimum Absolute Difference Between Elements With Constraint",
  "problem_id": "3000",
  "frontend_id": "2817",
  "difficulty": "Medium",
  "problem_slug": "minimum-absolute-difference-between-elements-with-constraint",
  "topics": [
    "Array",
    "Binary Search",
    "Ordered Set"
  ],
  "description": "You are given a 0-indexed integer array nums and an integer x.\nFind the minimum absolute difference between two elements in the array that are at least x indices apart.\nIn other words, find two indices i and j such that abs(i - j) >= x and abs(nums[i] - nums[j]) is minimized.\nReturn an integer denoting the minimum absolute difference between two elements that are at least x indices apart.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [4,3,2,4], x = 2\nOutput: 0\nExplanation: We can select nums[0] = 4 and nums[3] = 4. \nThey are at least 2 indices apart, and their absolute difference is the minimum, 0. \nIt can be shown that 0 is the optimal answer.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [5,3,2,10,15], x = 1\nOutput: 1\nExplanation: We can select nums[1] = 3 and nums[2] = 2.\nThey are at least 1 index apart, and their absolute difference is the minimum, 1.\nIt can be shown that 1 is the optimal answer.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,2,3,4], x = 3\nOutput: 3\nExplanation: We can select nums[0] = 1 and nums[3] = 4.\nThey are at least 3 indices apart, and their absolute difference is the minimum, 3.\nIt can be shown that 3 is the optimal answer.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "1 <= nums[i] <= 109",
    "0 <= x < nums.length"
  ],
  "follow_ups": [],
  "hints": [
    "<div class=\"_1l1MA\">Let's only consider the cases where <code>i < j</code>, as the problem is symmetric.</div>",
    "<div class=\"_1l1MA\">For an index <code>j</code>, we are interested in an index <code>i</code> in the range <code>[0, j - x]</code> that minimizes <code>abs(nums[i] - nums[j])</code>.</div>",
    "<div class=\"_1l1MA\">For every index <code>j</code>, while going from left to right, add <code>nums[j - x]</code> to a set (C++ set, Java TreeSet, and Python sorted set).</div>",
    "<div class=\"_1l1MA\">After inserting <code>nums[j - x]</code>, we can calculate the closest value to <code>nums[j]</code> in the set using binary search and store the absolute difference. In C++, we can achieve this by using lower_bound and/or upper_bound.</div>",
    "<div class=\"_1l1MA\">Calculate the minimum absolute difference among all indices.</div>"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minAbsoluteDifference(vector<int>& nums, int x) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minAbsoluteDifference(List<Integer> nums, int x) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minAbsoluteDifference(self, nums, x):\n        \"\"\"\n        :type nums: List[int]\n        :type x: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minAbsoluteDifference(self, nums: List[int], x: int) -> int:\n        ",
    "c": "int minAbsoluteDifference(int* nums, int numsSize, int x) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinAbsoluteDifference(IList<int> nums, int x) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} x\n * @return {number}\n */\nvar minAbsoluteDifference = function(nums, x) {\n    \n};",
    "typescript": "function minAbsoluteDifference(nums: number[], x: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $x\n     * @return Integer\n     */\n    function minAbsoluteDifference($nums, $x) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minAbsoluteDifference(_ nums: [Int], _ x: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minAbsoluteDifference(nums: List<Int>, x: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minAbsoluteDifference(List<int> nums, int x) {\n    \n  }\n}",
    "golang": "func minAbsoluteDifference(nums []int, x int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} x\n# @return {Integer}\ndef min_absolute_difference(nums, x)\n    \nend",
    "scala": "object Solution {\n    def minAbsoluteDifference(nums: List[Int], x: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_absolute_difference(nums: Vec<i32>, x: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-absolute-difference nums x)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec min_absolute_difference(Nums :: [integer()], X :: integer()) -> integer().\nmin_absolute_difference(Nums, X) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_absolute_difference(nums :: [integer], x :: integer) :: integer\n  def min_absolute_difference(nums, x) do\n    \n  end\nend"
  }
}
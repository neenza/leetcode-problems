{
  "title": "Convert a Number to Hexadecimal",
  "problem_id": "405",
  "frontend_id": "405",
  "difficulty": "Easy",
  "problem_slug": "convert-a-number-to-hexadecimal",
  "topics": [
    "Math",
    "String",
    "Bit Manipulation"
  ],
  "description": "Given a 32-bit integer num, return a string representing its hexadecimal representation. For negative integers, two’s complement method is used.\nAll the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.\nNote: You are not allowed to use any built-in library method to directly solve this problem.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: num = 26\nOutput: \"1a\"",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: num = -1\nOutput: \"ffffffff\"",
      "images": []
    }
  ],
  "constraints": [
    "-231 <= num <= 231 - 1"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string toHex(int num) {\n        \n    }\n};",
    "java": "class Solution {\n    public String toHex(int num) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def toHex(self, num: int) -> str:\n        ",
    "c": "char* toHex(int num) {\n    \n}",
    "csharp": "public class Solution {\n    public string ToHex(int num) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} num\n * @return {string}\n */\nvar toHex = function(num) {\n    \n};",
    "typescript": "function toHex(num: number): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return String\n     */\n    function toHex($num) {\n        \n    }\n}",
    "swift": "class Solution {\n    func toHex(_ num: Int) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun toHex(num: Int): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String toHex(int num) {\n    \n  }\n}",
    "golang": "func toHex(num int) string {\n    \n}",
    "ruby": "# @param {Integer} num\n# @return {String}\ndef to_hex(num)\n    \nend",
    "scala": "object Solution {\n    def toHex(num: Int): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn to_hex(num: i32) -> String {\n        \n    }\n}",
    "racket": "(define/contract (to-hex num)\n  (-> exact-integer? string?)\n  )",
    "erlang": "-spec to_hex(Num :: integer()) -> unicode:unicode_binary().\nto_hex(Num) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec to_hex(num :: integer) :: String.t\n  def to_hex(num) do\n    \n  end\nend"
  }
}
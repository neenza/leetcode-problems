{
  "title": "Race Car",
  "problem_id": "836",
  "frontend_id": "818",
  "difficulty": "Hard",
  "problem_slug": "race-car",
  "topics": [
    "Dynamic Programming"
  ],
  "description": "Your car starts at position 0 and speed +1 on an infinite number line. Your car can go into negative positions. Your car drives automatically according to a sequence of instructions 'A' (accelerate) and 'R' (reverse):\nFor example, after commands \"AAR\", your car goes to positions 0 --> 1 --> 3 --> 3, and your speed goes to 1 --> 2 --> 4 --> -1.\nGiven a target position target, return the length of the shortest sequence of instructions to get there.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: target = 3\nOutput: 2\nExplanation: \nThe shortest instruction sequence is \"AA\".\nYour position goes from 0 --> 1 --> 3.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: target = 6\nOutput: 5\nExplanation: \nThe shortest instruction sequence is \"AAARA\".\nYour position goes from 0 --> 1 --> 3 --> 7 --> 7 --> 6.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= target <= 104"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int racecar(int target) {\n        \n    }\n};",
    "java": "class Solution {\n    public int racecar(int target) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def racecar(self, target):\n        \"\"\"\n        :type target: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def racecar(self, target: int) -> int:\n        ",
    "c": "int racecar(int target) {\n    \n}",
    "csharp": "public class Solution {\n    public int Racecar(int target) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} target\n * @return {number}\n */\nvar racecar = function(target) {\n    \n};",
    "typescript": "function racecar(target: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $target\n     * @return Integer\n     */\n    function racecar($target) {\n        \n    }\n}",
    "swift": "class Solution {\n    func racecar(_ target: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun racecar(target: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int racecar(int target) {\n    \n  }\n}",
    "golang": "func racecar(target int) int {\n    \n}",
    "ruby": "# @param {Integer} target\n# @return {Integer}\ndef racecar(target)\n    \nend",
    "scala": "object Solution {\n    def racecar(target: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn racecar(target: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (racecar target)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec racecar(Target :: integer()) -> integer().\nracecar(Target) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec racecar(target :: integer) :: integer\n  def racecar(target) do\n    \n  end\nend"
  }
}
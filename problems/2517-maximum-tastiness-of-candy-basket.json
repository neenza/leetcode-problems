{
  "title": "Maximum Tastiness of Candy Basket",
  "problem_id": "2600",
  "frontend_id": "2517",
  "difficulty": "Medium",
  "problem_slug": "maximum-tastiness-of-candy-basket",
  "topics": [
    "Array",
    "Binary Search",
    "Greedy",
    "Sorting"
  ],
  "description": "You are given an array of positive integers price where price[i] denotes the price of the ith candy and a positive integer k.\nThe store sells baskets of k distinct candies. The tastiness of a candy basket is the smallest absolute difference of the prices of any two candies in the basket.\nReturn the maximum tastiness of a candy basket.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: price = [13,5,1,8,21,2], k = 3\nOutput: 8\nExplanation: Choose the candies with the prices [13,5,21].\nThe tastiness of the candy basket is: min(|13 - 5|, |13 - 21|, |5 - 21|) = min(8, 8, 16) = 8.\nIt can be proven that 8 is the maximum tastiness that can be achieved.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: price = [1,3,1], k = 2\nOutput: 2\nExplanation: Choose the candies with the prices [1,3].\nThe tastiness of the candy basket is: min(|1 - 3|) = min(2) = 2.\nIt can be proven that 2 is the maximum tastiness that can be achieved.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: price = [7,7,7,7], k = 2\nOutput: 0\nExplanation: Choosing any two distinct candies from the candies we have will result in a tastiness of 0.",
      "images": []
    }
  ],
  "constraints": [
    "2 <= k <= price.length <= 105",
    "1 <= price[i] <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "The answer is binary searchable.",
    "For some x, we can use a greedy strategy to check if it is possible to pick k distinct candies with tastiness being at least x.",
    "Sort prices and iterate from left to right. For some price[i] check if the price difference between the last taken candy and price[i] is at least x. If so, add the candy i to the basket.",
    "So, a candy basket with tastiness x can be achieved if the basket size is bigger than or equal to k."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maximumTastiness(vector<int>& price, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maximumTastiness(int[] price, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maximumTastiness(self, price, k):\n        \"\"\"\n        :type price: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maximumTastiness(self, price: List[int], k: int) -> int:\n        ",
    "c": "int maximumTastiness(int* price, int priceSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaximumTastiness(int[] price, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} price\n * @param {number} k\n * @return {number}\n */\nvar maximumTastiness = function(price, k) {\n    \n};",
    "typescript": "function maximumTastiness(price: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $price\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumTastiness($price, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maximumTastiness(_ price: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maximumTastiness(price: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maximumTastiness(List<int> price, int k) {\n    \n  }\n}",
    "golang": "func maximumTastiness(price []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} price\n# @param {Integer} k\n# @return {Integer}\ndef maximum_tastiness(price, k)\n    \nend",
    "scala": "object Solution {\n    def maximumTastiness(price: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn maximum_tastiness(price: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (maximum-tastiness price k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec maximum_tastiness(Price :: [integer()], K :: integer()) -> integer().\nmaximum_tastiness(Price, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec maximum_tastiness(price :: [integer], k :: integer) :: integer\n  def maximum_tastiness(price, k) do\n    \n  end\nend"
  }
}
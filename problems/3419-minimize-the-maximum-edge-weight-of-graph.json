{
  "title": "Minimize the Maximum Edge Weight of Graph",
  "problem_id": "3720",
  "frontend_id": "3419",
  "difficulty": "Medium",
  "problem_slug": "minimize-the-maximum-edge-weight-of-graph",
  "topics": [
    "Binary Search",
    "Depth-First Search",
    "Breadth-First Search",
    "Graph",
    "Shortest Path"
  ],
  "description": "You are given two integers, n and threshold, as well as a directed weighted graph of n nodes numbered from 0 to n - 1. The graph is represented by a 2D integer array edges, where edges[i] = [Ai, Bi, Wi] indicates that there is an edge going from node Ai to node Bi with weight Wi.\nYou have to remove some edges from this graph (possibly none), so that it satisfies the following conditions:\nReturn the minimum possible value of the maximum edge weight after removing the necessary edges. If it is impossible for all conditions to be satisfied, return -1.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 5, edges = [[1,0,1],[2,0,2],[3,0,1],[4,3,1],[2,1,1]], threshold = 2\nOutput: 1\nExplanation:\n\nRemove the edge 2 -> 0 . The maximum weight among the remaining edges is 1.",
      "images": [
        "https://assets.leetcode.com/uploads/2024/12/09/s-1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 5, edges = [[0,1,1],[0,2,2],[0,3,1],[0,4,1],[1,2,1],[1,4,1]], threshold = 1\nOutput: -1\nExplanation:\nIt is impossible to reach node 0 from node 2.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 5, edges = [[1,2,1],[1,3,3],[1,4,5],[2,3,2],[3,4,2],[4,0,1]], threshold = 1\nOutput: 2\nExplanation:\n\nRemove the edges 1 -> 3 and 1 -> 4 . The maximum weight among the remaining edges is 2.",
      "images": [
        "https://assets.leetcode.com/uploads/2024/12/09/s2-1.png"
      ]
    },
    {
      "example_num": 4,
      "example_text": "Input: n = 5, edges = [[1,2,1],[1,3,3],[1,4,5],[2,3,2],[4,0,1]], threshold = 1\nOutput: -1",
      "images": []
    }
  ],
  "constraints": [
    "2 <= n <= 105",
    "1 <= threshold <= n - 1",
    "1 <= edges.length <= min(105, n * (n - 1) / 2).",
    "edges[i].length == 3",
    "0 <= Ai, Bi < n",
    "Ai != Bi",
    "1 <= Wi <= 106",
    "There may be multiple edges between a pair of nodes, but they must have unique weights."
  ],
  "follow_ups": [],
  "hints": [
    "Can we use binary search?",
    "Invert the edges in the graph."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minMaxWeight(int n, vector<vector<int>>& edges, int threshold) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minMaxWeight(int n, int[][] edges, int threshold) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minMaxWeight(self, n, edges, threshold):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type threshold: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minMaxWeight(self, n: int, edges: List[List[int]], threshold: int) -> int:\n        ",
    "c": "int minMaxWeight(int n, int** edges, int edgesSize, int* edgesColSize, int threshold) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinMaxWeight(int n, int[][] edges, int threshold) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @param {number} threshold\n * @return {number}\n */\nvar minMaxWeight = function(n, edges, threshold) {\n    \n};",
    "typescript": "function minMaxWeight(n: number, edges: number[][], threshold: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @param Integer $threshold\n     * @return Integer\n     */\n    function minMaxWeight($n, $edges, $threshold) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minMaxWeight(_ n: Int, _ edges: [[Int]], _ threshold: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minMaxWeight(n: Int, edges: Array<IntArray>, threshold: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minMaxWeight(int n, List<List<int>> edges, int threshold) {\n    \n  }\n}",
    "golang": "func minMaxWeight(n int, edges [][]int, threshold int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @param {Integer} threshold\n# @return {Integer}\ndef min_max_weight(n, edges, threshold)\n    \nend",
    "scala": "object Solution {\n    def minMaxWeight(n: Int, edges: Array[Array[Int]], threshold: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_max_weight(n: i32, edges: Vec<Vec<i32>>, threshold: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-max-weight n edges threshold)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec min_max_weight(N :: integer(), Edges :: [[integer()]], Threshold :: integer()) -> integer().\nmin_max_weight(N, Edges, Threshold) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_max_weight(n :: integer, edges :: [[integer]], threshold :: integer) :: integer\n  def min_max_weight(n, edges, threshold) do\n    \n  end\nend"
  }
}
{
  "title": "Number Of Ways To Reconstruct A Tree",
  "problem_id": "1820",
  "frontend_id": "1719",
  "difficulty": "Hard",
  "problem_slug": "number-of-ways-to-reconstruct-a-tree",
  "topics": [
    "Tree",
    "Graph"
  ],
  "description": "You are given an array pairs, where pairs[i] = [xi, yi], and:\nLet ways be the number of rooted trees that satisfy the following conditions:\nTwo ways are considered to be different if there is at least one node that has different parents in both ways.\nReturn:\nA rooted tree is a tree that has a single root node, and all edges are oriented to be outgoing from the root.\nAn ancestor of a node is any node on the path from the root to that node (excluding the node itself). The root has no ancestors.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: pairs = [[1,2],[2,3]]\nOutput: 1\nExplanation: There is exactly one valid rooted tree, which is shown in the above figure.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/12/03/trees2.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: pairs = [[1,2],[2,3],[1,3]]\nOutput: 2\nExplanation: There are multiple valid rooted trees. Three of them are shown in the above figures.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/12/03/tree.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: pairs = [[1,2],[2,3],[2,4],[1,5]]\nOutput: 0\nExplanation: There are no valid rooted trees.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/12/03/tree.png"
      ]
    }
  ],
  "constraints": [
    "1 <= pairs.length <= 105",
    "1 <= xi < yi <= 500",
    "The elements in pairs are unique."
  ],
  "follow_ups": [],
  "hints": [
    "Think inductively. The first step is to get the root. Obviously, the root should be in pairs with all the nodes. If there isn't exactly one such node, then there are 0 ways.",
    "The number of pairs involving a node must be less than or equal to that number of its parent.",
    "Actually, if it's equal, then there is not exactly 1 way, because they can be swapped.",
    "Recursively, given a set of nodes, get the node with the most pairs, then this must be a root and have no parents in the current set of nodes."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int checkWays(vector<vector<int>>& pairs) {\n        \n    }\n};",
    "java": "class Solution {\n    public int checkWays(int[][] pairs) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def checkWays(self, pairs):\n        \"\"\"\n        :type pairs: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def checkWays(self, pairs: List[List[int]]) -> int:\n        ",
    "c": "int checkWays(int** pairs, int pairsSize, int* pairsColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int CheckWays(int[][] pairs) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} pairs\n * @return {number}\n */\nvar checkWays = function(pairs) {\n    \n};",
    "typescript": "function checkWays(pairs: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $pairs\n     * @return Integer\n     */\n    function checkWays($pairs) {\n        \n    }\n}",
    "swift": "class Solution {\n    func checkWays(_ pairs: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun checkWays(pairs: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int checkWays(List<List<int>> pairs) {\n    \n  }\n}",
    "golang": "func checkWays(pairs [][]int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} pairs\n# @return {Integer}\ndef check_ways(pairs)\n    \nend",
    "scala": "object Solution {\n    def checkWays(pairs: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn check_ways(pairs: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (check-ways pairs)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec check_ways(Pairs :: [[integer()]]) -> integer().\ncheck_ways(Pairs) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec check_ways(pairs :: [[integer]]) :: integer\n  def check_ways(pairs) do\n    \n  end\nend"
  }
}
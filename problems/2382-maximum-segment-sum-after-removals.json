{
  "title": "Maximum Segment Sum After Removals",
  "problem_id": "2466",
  "frontend_id": "2382",
  "difficulty": "Hard",
  "problem_slug": "maximum-segment-sum-after-removals",
  "topics": [
    "Array",
    "Union Find",
    "Prefix Sum",
    "Ordered Set"
  ],
  "description": "You are given two 0-indexed integer arrays nums and removeQueries, both of length n. For the ith query, the element in nums at the index removeQueries[i] is removed, splitting nums into different segments.\nA segment is a contiguous sequence of positive integers in nums. A segment sum is the sum of every element in a segment.\nReturn an integer array answer, of length n, where answer[i] is the maximum segment sum after applying the ith removal.\nNote: The same index will not be removed more than once.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,5,6,1], removeQueries = [0,3,2,4,1]\nOutput: [14,7,2,2,0]\nExplanation: Using 0 to indicate a removed element, the answer is as follows:\nQuery 1: Remove the 0th element, nums becomes [0,2,5,6,1] and the maximum segment sum is 14 for segment [2,5,6,1].\nQuery 2: Remove the 3rd element, nums becomes [0,2,5,0,1] and the maximum segment sum is 7 for segment [2,5].\nQuery 3: Remove the 2nd element, nums becomes [0,2,0,0,1] and the maximum segment sum is 2 for segment [2]. \nQuery 4: Remove the 4th element, nums becomes [0,2,0,0,0] and the maximum segment sum is 2 for segment [2]. \nQuery 5: Remove the 1st element, nums becomes [0,0,0,0,0] and the maximum segment sum is 0, since there are no segments.\nFinally, we return [14,7,2,2,0].",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [3,2,11,1], removeQueries = [3,2,1,0]\nOutput: [16,5,3,0]\nExplanation: Using 0 to indicate a removed element, the answer is as follows:\nQuery 1: Remove the 3rd element, nums becomes [3,2,11,0] and the maximum segment sum is 16 for segment [3,2,11].\nQuery 2: Remove the 2nd element, nums becomes [3,2,0,0] and the maximum segment sum is 5 for segment [3,2].\nQuery 3: Remove the 1st element, nums becomes [3,0,0,0] and the maximum segment sum is 3 for segment [3].\nQuery 4: Remove the 0th element, nums becomes [0,0,0,0] and the maximum segment sum is 0, since there are no segments.\nFinally, we return [16,5,3,0].",
      "images": []
    }
  ],
  "constraints": [
    "n == nums.length == removeQueries.length",
    "1 <= n <= 105",
    "1 <= nums[i] <= 109",
    "0 <= removeQueries[i] < n",
    "All the values of removeQueries are unique."
  ],
  "follow_ups": [],
  "hints": [
    "Use a sorted data structure to collect removal points and store the segments.",
    "Use a heap or priority queue to store segment sums and their corresponding boundaries.",
    "Make sure to remove invalid segments from the heap."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<long long> maximumSegmentSum(vector<int>& nums, vector<int>& removeQueries) {\n        \n    }\n};",
    "java": "class Solution {\n    public long[] maximumSegmentSum(int[] nums, int[] removeQueries) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maximumSegmentSum(self, nums, removeQueries):\n        \"\"\"\n        :type nums: List[int]\n        :type removeQueries: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maximumSegmentSum(self, nums: List[int], removeQueries: List[int]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nlong long* maximumSegmentSum(int* nums, int numsSize, int* removeQueries, int removeQueriesSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public long[] MaximumSegmentSum(int[] nums, int[] removeQueries) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number[]} removeQueries\n * @return {number[]}\n */\nvar maximumSegmentSum = function(nums, removeQueries) {\n    \n};",
    "typescript": "function maximumSegmentSum(nums: number[], removeQueries: number[]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $removeQueries\n     * @return Integer[]\n     */\n    function maximumSegmentSum($nums, $removeQueries) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maximumSegmentSum(_ nums: [Int], _ removeQueries: [Int]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maximumSegmentSum(nums: IntArray, removeQueries: IntArray): LongArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> maximumSegmentSum(List<int> nums, List<int> removeQueries) {\n    \n  }\n}",
    "golang": "func maximumSegmentSum(nums []int, removeQueries []int) []int64 {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer[]} remove_queries\n# @return {Integer[]}\ndef maximum_segment_sum(nums, remove_queries)\n    \nend",
    "scala": "object Solution {\n    def maximumSegmentSum(nums: Array[Int], removeQueries: Array[Int]): Array[Long] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn maximum_segment_sum(nums: Vec<i32>, remove_queries: Vec<i32>) -> Vec<i64> {\n        \n    }\n}",
    "racket": "(define/contract (maximum-segment-sum nums removeQueries)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  )",
    "erlang": "-spec maximum_segment_sum(Nums :: [integer()], RemoveQueries :: [integer()]) -> [integer()].\nmaximum_segment_sum(Nums, RemoveQueries) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec maximum_segment_sum(nums :: [integer], remove_queries :: [integer]) :: [integer]\n  def maximum_segment_sum(nums, remove_queries) do\n    \n  end\nend"
  }
}
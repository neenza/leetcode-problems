{
  "title": "Closest Equal Element Queries",
  "problem_id": "3750",
  "frontend_id": "3488",
  "difficulty": "Medium",
  "problem_slug": "closest-equal-element-queries",
  "topics": [
    "Array",
    "Hash Table",
    "Binary Search"
  ],
  "description": "You are given a circular array nums and an array queries.\nFor each query i, you have to find the following:\nReturn an array answer of the same size as queries, where answer[i] represents the result for query i.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,3,1,4,1,3,2], queries = [0,3,5]\nOutput: [2,-1,3]\nExplanation:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,2,3,4], queries = [0,1,2,3]\nOutput: [-1,-1,-1,-1]\nExplanation:\nEach value in nums is unique, so no index shares the same value as the queried element. This results in -1 for all queries.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= queries.length <= nums.length <= 105",
    "1 <= nums[i] <= 106",
    "0 <= queries[i] < nums.length"
  ],
  "follow_ups": [],
  "hints": [
    "Use a dictionary that maps each unique value in the array to a sorted list of its indices.",
    "For each query, use binary search on the sorted indices list to find the nearest occurrences of the target value."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> solveQueries(vector<int>& nums, vector<int>& queries) {\n        \n    }\n};",
    "java": "class Solution {\n    public List<Integer> solveQueries(int[] nums, int[] queries) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def solveQueries(self, nums, queries):\n        \"\"\"\n        :type nums: List[int]\n        :type queries: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def solveQueries(self, nums: List[int], queries: List[int]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* solveQueries(int* nums, int numsSize, int* queries, int queriesSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public IList<int> SolveQueries(int[] nums, int[] queries) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number[]} queries\n * @return {number[]}\n */\nvar solveQueries = function(nums, queries) {\n    \n};",
    "typescript": "function solveQueries(nums: number[], queries: number[]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $queries\n     * @return Integer[]\n     */\n    function solveQueries($nums, $queries) {\n        \n    }\n}",
    "swift": "class Solution {\n    func solveQueries(_ nums: [Int], _ queries: [Int]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun solveQueries(nums: IntArray, queries: IntArray): List<Int> {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> solveQueries(List<int> nums, List<int> queries) {\n    \n  }\n}",
    "golang": "func solveQueries(nums []int, queries []int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer[]} queries\n# @return {Integer[]}\ndef solve_queries(nums, queries)\n    \nend",
    "scala": "object Solution {\n    def solveQueries(nums: Array[Int], queries: Array[Int]): List[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn solve_queries(nums: Vec<i32>, queries: Vec<i32>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (solve-queries nums queries)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  )",
    "erlang": "-spec solve_queries(Nums :: [integer()], Queries :: [integer()]) -> [integer()].\nsolve_queries(Nums, Queries) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec solve_queries(nums :: [integer], queries :: [integer]) :: [integer]\n  def solve_queries(nums, queries) do\n    \n  end\nend"
  }
}
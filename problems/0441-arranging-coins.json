{
  "title": "Arranging Coins",
  "problem_id": "441",
  "frontend_id": "441",
  "difficulty": "Easy",
  "problem_slug": "arranging-coins",
  "topics": [
    "Math",
    "Binary Search"
  ],
  "description": "You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\nGiven the integer n, return the number of complete rows of the staircase you will build.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/04/09/arrangecoins1-grid.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 8\nOutput: 3\nExplanation: Because the 4th row is incomplete, we return 3.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/04/09/arrangecoins2-grid.jpg"
      ]
    }
  ],
  "constraints": [
    "1 <= n <= 231 - 1"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int arrangeCoins(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int arrangeCoins(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def arrangeCoins(self, n: int) -> int:\n        ",
    "c": "int arrangeCoins(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int ArrangeCoins(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar arrangeCoins = function(n) {\n    \n};",
    "typescript": "function arrangeCoins(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function arrangeCoins($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func arrangeCoins(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun arrangeCoins(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int arrangeCoins(int n) {\n    \n  }\n}",
    "golang": "func arrangeCoins(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef arrange_coins(n)\n    \nend",
    "scala": "object Solution {\n    def arrangeCoins(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn arrange_coins(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (arrange-coins n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec arrange_coins(N :: integer()) -> integer().\narrange_coins(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec arrange_coins(n :: integer) :: integer\n  def arrange_coins(n) do\n    \n  end\nend"
  }
}
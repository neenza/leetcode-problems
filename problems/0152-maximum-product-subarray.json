{
  "title": "Maximum Product Subarray",
  "problem_id": "152",
  "frontend_id": "152",
  "difficulty": "Medium",
  "problem_slug": "maximum-product-subarray",
  "topics": [
    "Array",
    "Dynamic Programming"
  ],
  "description": "Given an integer array nums, find a subarray that has the largest product, and return the product.\nThe test cases are generated so that the answer will fit in a 32-bit integer.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [2,3,-2,4]\nOutput: 6\nExplanation: [2,3] has the largest product 6.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [-2,0,-1]\nOutput: 0\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 2 * 104",
    "-10 <= nums[i] <= 10",
    "The product of any subarray of nums is guaranteed to fit in a 32-bit integer."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxProduct(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        ",
    "c": "int maxProduct(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxProduct(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxProduct = function(nums) {\n    \n};",
    "typescript": "function maxProduct(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxProduct($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxProduct(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxProduct(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxProduct(List<int> nums) {\n    \n  }\n}",
    "golang": "func maxProduct(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_product(nums)\n    \nend",
    "scala": "object Solution {\n    def maxProduct(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_product(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-product nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec max_product(Nums :: [integer()]) -> integer().\nmax_product(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_product(nums :: [integer]) :: integer\n  def max_product(nums) do\n    \n  end\nend"
  }
}
{
  "title": "Super Pow",
  "problem_id": "372",
  "frontend_id": "372",
  "difficulty": "Medium",
  "problem_slug": "super-pow",
  "topics": [
    "Math",
    "Divide and Conquer"
  ],
  "description": "Your task is to calculate ab mod 1337 where a is a positive integer and b is an extremely large positive integer given in the form of an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: a = 2, b = [3]\nOutput: 8",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: a = 2, b = [1,0]\nOutput: 1024",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: a = 1, b = [4,3,3,8,5,2]\nOutput: 1",
      "images": []
    }
  ],
  "constraints": [
    "1 <= a <= 231 - 1",
    "1 <= b.length <= 2000",
    "0 <= b[i] <= 9",
    "b does not contain leading zeros."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int superPow(int a, vector<int>& b) {\n        \n    }\n};",
    "java": "class Solution {\n    public int superPow(int a, int[] b) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def superPow(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def superPow(self, a: int, b: List[int]) -> int:\n        ",
    "c": "int superPow(int a, int* b, int bSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int SuperPow(int a, int[] b) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} a\n * @param {number[]} b\n * @return {number}\n */\nvar superPow = function(a, b) {\n    \n};",
    "typescript": "function superPow(a: number, b: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $a\n     * @param Integer[] $b\n     * @return Integer\n     */\n    function superPow($a, $b) {\n        \n    }\n}",
    "swift": "class Solution {\n    func superPow(_ a: Int, _ b: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun superPow(a: Int, b: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int superPow(int a, List<int> b) {\n    \n  }\n}",
    "golang": "func superPow(a int, b []int) int {\n    \n}",
    "ruby": "# @param {Integer} a\n# @param {Integer[]} b\n# @return {Integer}\ndef super_pow(a, b)\n    \nend",
    "scala": "object Solution {\n    def superPow(a: Int, b: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn super_pow(a: i32, b: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (super-pow a b)\n  (-> exact-integer? (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec super_pow(A :: integer(), B :: [integer()]) -> integer().\nsuper_pow(A, B) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec super_pow(a :: integer, b :: [integer]) :: integer\n  def super_pow(a, b) do\n    \n  end\nend"
  }
}
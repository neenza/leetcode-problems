{
  "title": "Node With Highest Edge Score",
  "problem_id": "2455",
  "frontend_id": "2374",
  "difficulty": "Medium",
  "problem_slug": "node-with-highest-edge-score",
  "topics": [
    "Hash Table",
    "Graph"
  ],
  "description": "You are given a directed graph with n nodes labeled from 0 to n - 1, where each node has exactly one outgoing edge.\nThe graph is represented by a given 0-indexed integer array edges of length n, where edges[i] indicates that there is a directed edge from node i to node edges[i].\nThe edge score of a node i is defined as the sum of the labels of all the nodes that have an edge pointing to i.\nReturn the node with the highest edge score. If multiple nodes have the same edge score, return the node with the smallest index.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: edges = [1,0,0,0,0,7,7,5]\nOutput: 7\nExplanation:\n- The nodes 1, 2, 3 and 4 have an edge pointing to node 0. The edge score of node 0 is 1 + 2 + 3 + 4 = 10.\n- The node 0 has an edge pointing to node 1. The edge score of node 1 is 0.\n- The node 7 has an edge pointing to node 5. The edge score of node 5 is 7.\n- The nodes 5 and 6 have an edge pointing to node 7. The edge score of node 7 is 5 + 6 = 11.\nNode 7 has the highest edge score so return 7.",
      "images": [
        "https://assets.leetcode.com/uploads/2022/06/20/image-20220620195403-1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: edges = [2,0,0,2]\nOutput: 0\nExplanation:\n- The nodes 1 and 2 have an edge pointing to node 0. The edge score of node 0 is 1 + 2 = 3.\n- The nodes 0 and 3 have an edge pointing to node 2. The edge score of node 2 is 0 + 3 = 3.\nNodes 0 and 2 both have an edge score of 3. Since node 0 has a smaller index, we return 0.",
      "images": [
        "https://assets.leetcode.com/uploads/2022/06/20/image-20220620200212-3.png"
      ]
    }
  ],
  "constraints": [
    "n == edges.length",
    "2 <= n <= 105",
    "0 <= edges[i] < n",
    "edges[i] != i"
  ],
  "follow_ups": [],
  "hints": [
    "Create an array arr where arr[i] is the edge score for node i.",
    "How does the edge score for node edges[i] change? It increases by i.",
    "The edge score may not fit within a standard 32-bit integer."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int edgeScore(vector<int>& edges) {\n        \n    }\n};",
    "java": "class Solution {\n    public int edgeScore(int[] edges) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def edgeScore(self, edges):\n        \"\"\"\n        :type edges: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def edgeScore(self, edges: List[int]) -> int:\n        ",
    "c": "int edgeScore(int* edges, int edgesSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int EdgeScore(int[] edges) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} edges\n * @return {number}\n */\nvar edgeScore = function(edges) {\n    \n};",
    "typescript": "function edgeScore(edges: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $edges\n     * @return Integer\n     */\n    function edgeScore($edges) {\n        \n    }\n}",
    "swift": "class Solution {\n    func edgeScore(_ edges: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun edgeScore(edges: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int edgeScore(List<int> edges) {\n    \n  }\n}",
    "golang": "func edgeScore(edges []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} edges\n# @return {Integer}\ndef edge_score(edges)\n    \nend",
    "scala": "object Solution {\n    def edgeScore(edges: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn edge_score(edges: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (edge-score edges)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec edge_score(Edges :: [integer()]) -> integer().\nedge_score(Edges) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec edge_score(edges :: [integer]) :: integer\n  def edge_score(edges) do\n    \n  end\nend"
  }
}
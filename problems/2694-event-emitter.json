{
  "title": "Event Emitter",
  "problem_id": "2797",
  "frontend_id": "2694",
  "difficulty": "Medium",
  "problem_slug": "event-emitter",
  "topics": [],
  "description": "Design an EventEmitter class. This interface is similar (but with some differences) to the one found in Node.js or the Event Target interface of the DOM. The EventEmitter should allow for subscribing to events and emitting them.\nYour EventEmitter class should have the following two methods:\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: \nactions = [\"EventEmitter\", \"emit\", \"subscribe\", \"subscribe\", \"emit\"], \nvalues = [[], [\"firstEvent\"], [\"firstEvent\", \"function cb1() { return 5; }\"],  [\"firstEvent\", \"function cb1() { return 6; }\"], [\"firstEvent\"]]\nOutput: [[],[\"emitted\",[]],[\"subscribed\"],[\"subscribed\"],[\"emitted\",[5,6]]]\nExplanation: \nconst emitter = new EventEmitter();\nemitter.emit(\"firstEvent\"); // [], no callback are subscribed yet\nemitter.subscribe(\"firstEvent\", function cb1() { return 5; });\nemitter.subscribe(\"firstEvent\", function cb2() { return 6; });\nemitter.emit(\"firstEvent\"); // [5, 6], returns the output of cb1 and cb2",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: \nactions = [\"EventEmitter\", \"subscribe\", \"emit\", \"emit\"], \nvalues = [[], [\"firstEvent\", \"function cb1(...args) { return args.join(','); }\"], [\"firstEvent\", [1,2,3]], [\"firstEvent\", [3,4,6]]]\nOutput: [[],[\"subscribed\"],[\"emitted\",[\"1,2,3\"]],[\"emitted\",[\"3,4,6\"]]]\nExplanation: Note that the emit method should be able to accept an OPTIONAL array of arguments.\n\nconst emitter = new EventEmitter();\nemitter.subscribe(\"firstEvent, function cb1(...args) { return args.join(','); });\nemitter.emit(\"firstEvent\", [1, 2, 3]); // [\"1,2,3\"]\nemitter.emit(\"firstEvent\", [3, 4, 6]); // [\"3,4,6\"]",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: \nactions = [\"EventEmitter\", \"subscribe\", \"emit\", \"unsubscribe\", \"emit\"], \nvalues = [[], [\"firstEvent\", \"(...args) => args.join(',')\"], [\"firstEvent\", [1,2,3]], [0], [\"firstEvent\", [4,5,6]]]\nOutput: [[],[\"subscribed\"],[\"emitted\",[\"1,2,3\"]],[\"unsubscribed\",0],[\"emitted\",[]]]\nExplanation:\nconst emitter = new EventEmitter();\nconst sub = emitter.subscribe(\"firstEvent\", (...args) => args.join(','));\nemitter.emit(\"firstEvent\", [1, 2, 3]); // [\"1,2,3\"]\nsub.unsubscribe(); // undefined\nemitter.emit(\"firstEvent\", [4, 5, 6]); // [], there are no subscriptions",
      "images": []
    },
    {
      "example_num": 4,
      "example_text": "Input: \nactions = [\"EventEmitter\", \"subscribe\", \"subscribe\", \"unsubscribe\", \"emit\"], \nvalues = [[], [\"firstEvent\", \"x => x + 1\"], [\"firstEvent\", \"x => x + 2\"], [0], [\"firstEvent\", [5]]]\nOutput: [[],[\"subscribed\"],[\"subscribed\"],[\"unsubscribed\",0],[\"emitted\",[7]]]\nExplanation:\nconst emitter = new EventEmitter();\nconst sub1 = emitter.subscribe(\"firstEvent\", x => x + 1);\nconst sub2 = emitter.subscribe(\"firstEvent\", x => x + 2);\nsub1.unsubscribe(); // undefined\nemitter.emit(\"firstEvent\", [5]); // [7]",
      "images": []
    }
  ],
  "constraints": [
    "1 <= actions.length <= 10",
    "values.length === actions.length",
    "All test cases are valid, e.g. you don't need to handle scenarios when unsubscribing from a non-existing subscription.",
    "There are only 4 different actions: EventEmitter, emit, subscribe, and unsubscribe.",
    "The EventEmitter action doesn't take any arguments.",
    "The emit action takes between either 1 or 2 arguments. The first argument is the name of the event we want to emit, and the 2nd argument is passed to the callback functions.",
    "The subscribe action takes 2 arguments, where the first one is the event name and the second is the callback function.",
    "The unsubscribe action takes one argument, which is the 0-indexed order of the subscription made before."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "javascript": "class EventEmitter {\n    \n    /**\n     * @param {string} eventName\n     * @param {Function} callback\n     * @return {Object}\n     */\n    subscribe(eventName, callback) {\n        \n        return {\n            unsubscribe: () => {\n                \n            }\n        };\n    }\n    \n    /**\n     * @param {string} eventName\n     * @param {Array} args\n     * @return {Array}\n     */\n    emit(eventName, args = []) {\n        \n    }\n}\n\n/**\n * const emitter = new EventEmitter();\n *\n * // Subscribe to the onClick event with onClickCallback\n * function onClickCallback() { return 99 }\n * const sub = emitter.subscribe('onClick', onClickCallback);\n *\n * emitter.emit('onClick'); // [99]\n * sub.unsubscribe(); // undefined\n * emitter.emit('onClick'); // []\n */",
    "typescript": "type Callback = (...args: any[]) => any;\ntype Subscription = {\n    unsubscribe: () => void\n}\n\nclass EventEmitter {\n    \n    subscribe(eventName: string, callback: Callback): Subscription {\n        \n        return {\n            unsubscribe: () => {\n                \n            }\n        };\n    }\n    \n    emit(eventName: string, args: any[] = []): any[] {\n        \n    }\n}\n\n/**\n * const emitter = new EventEmitter();\n *\n * // Subscribe to the onClick event with onClickCallback\n * function onClickCallback() { return 99 }\n * const sub = emitter.subscribe('onClick', onClickCallback);\n *\n * emitter.emit('onClick'); // [99]\n * sub.unsubscribe(); // undefined\n * emitter.emit('onClick'); // []\n */"
  }
}
{
  "title": "Maximum Average Subarray I",
  "problem_id": "643",
  "frontend_id": "643",
  "difficulty": "Easy",
  "problem_slug": "maximum-average-subarray-i",
  "topics": [
    "Array",
    "Sliding Window"
  ],
  "description": "You are given an integer array nums consisting of n elements, and an integer k.\nFind a contiguous subarray whose length is equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10-5 will be accepted.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,12,-5,-6,50,3], k = 4\nOutput: 12.75000\nExplanation: Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [5], k = 1\nOutput: 5.00000",
      "images": []
    }
  ],
  "constraints": [
    "n == nums.length",
    "1 <= k <= n <= 105",
    "-104 <= nums[i] <= 104"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    double findMaxAverage(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public double findMaxAverage(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findMaxAverage(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: float\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findMaxAverage(self, nums: List[int], k: int) -> float:\n        ",
    "c": "double findMaxAverage(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public double FindMaxAverage(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findMaxAverage = function(nums, k) {\n    \n};",
    "typescript": "function findMaxAverage(nums: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Float\n     */\n    function findMaxAverage($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findMaxAverage(_ nums: [Int], _ k: Int) -> Double {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findMaxAverage(nums: IntArray, k: Int): Double {\n        \n    }\n}",
    "dart": "class Solution {\n  double findMaxAverage(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func findMaxAverage(nums []int, k int) float64 {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Float}\ndef find_max_average(nums, k)\n    \nend",
    "scala": "object Solution {\n    def findMaxAverage(nums: Array[Int], k: Int): Double = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_max_average(nums: Vec<i32>, k: i32) -> f64 {\n        \n    }\n}",
    "racket": "(define/contract (find-max-average nums k)\n  (-> (listof exact-integer?) exact-integer? flonum?)\n  )",
    "erlang": "-spec find_max_average(Nums :: [integer()], K :: integer()) -> float().\nfind_max_average(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_max_average(nums :: [integer], k :: integer) :: float\n  def find_max_average(nums, k) do\n    \n  end\nend"
  }
}
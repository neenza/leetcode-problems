{
  "title": "Subtract the Product and Sum of Digits of an Integer",
  "problem_id": "1406",
  "frontend_id": "1281",
  "difficulty": "Easy",
  "problem_slug": "subtract-the-product-and-sum-of-digits-of-an-integer",
  "topics": [
    "Math"
  ],
  "description": "Example 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 234\nOutput: 15 \nExplanation: \nProduct of digits = 2 * 3 * 4 = 24 \nSum of digits = 2 + 3 + 4 = 9 \nResult = 24 - 9 = 15",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 4421\nOutput: 21\nExplanation: \nProduct of digits = 4 * 4 * 2 * 1 = 32 \nSum of digits = 4 + 4 + 2 + 1 = 11 \nResult = 32 - 11 = 21",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 10^5"
  ],
  "follow_ups": [],
  "hints": [
    "How to compute all digits of the number ?",
    "Use modulus operator (%) to compute the last digit.",
    "Generalise modulus operator idea to compute all digits."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int subtractProductAndSum(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int subtractProductAndSum(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def subtractProductAndSum(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def subtractProductAndSum(self, n: int) -> int:\n        ",
    "c": "int subtractProductAndSum(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int SubtractProductAndSum(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar subtractProductAndSum = function(n) {\n    \n};",
    "typescript": "function subtractProductAndSum(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function subtractProductAndSum($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func subtractProductAndSum(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun subtractProductAndSum(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int subtractProductAndSum(int n) {\n    \n  }\n}",
    "golang": "func subtractProductAndSum(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef subtract_product_and_sum(n)\n    \nend",
    "scala": "object Solution {\n    def subtractProductAndSum(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn subtract_product_and_sum(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (subtract-product-and-sum n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec subtract_product_and_sum(N :: integer()) -> integer().\nsubtract_product_and_sum(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec subtract_product_and_sum(n :: integer) :: integer\n  def subtract_product_and_sum(n) do\n    \n  end\nend"
  }
}
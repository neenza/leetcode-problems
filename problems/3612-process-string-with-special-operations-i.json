{
  "title": "Process String with Special Operations I",
  "problem_id": "3931",
  "frontend_id": "3612",
  "difficulty": "Medium",
  "problem_slug": "process-string-with-special-operations-i",
  "topics": [
    "String",
    "Simulation"
  ],
  "description": "You are given a string s consisting of lowercase English letters and the special characters: *, #, and %.\nBuild a new string result by processing s according to the following rules from left to right:\nReturn the final string result after processing all characters in s.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"a#b%*\"\nOutput: \"ba\"\nExplanation:\nThus, the final result is \"ba\" .",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"z*#\"\nOutput: \"\"\nExplanation:\nThus, the final result is \"\" .",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 20",
    "s consists of only lowercase English letters and special characters *, #, and %."
  ],
  "follow_ups": [],
  "hints": [
    "Simulate as described"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string processStr(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public String processStr(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def processStr(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def processStr(self, s: str) -> str:\n        ",
    "c": "char* processStr(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public string ProcessStr(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {string}\n */\nvar processStr = function(s) {\n    \n};",
    "typescript": "function processStr(s: string): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function processStr($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func processStr(_ s: String) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun processStr(s: String): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String processStr(String s) {\n    \n  }\n}",
    "golang": "func processStr(s string) string {\n    \n}",
    "ruby": "# @param {String} s\n# @return {String}\ndef process_str(s)\n    \nend",
    "scala": "object Solution {\n    def processStr(s: String): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn process_str(s: String) -> String {\n        \n    }\n}",
    "racket": "(define/contract (process-str s)\n  (-> string? string?)\n  )",
    "erlang": "-spec process_str(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nprocess_str(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec process_str(s :: String.t) :: String.t\n  def process_str(s) do\n    \n  end\nend"
  }
}
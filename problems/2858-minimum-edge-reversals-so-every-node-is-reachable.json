{
  "title": "Minimum Edge Reversals So Every Node Is Reachable",
  "problem_id": "3105",
  "frontend_id": "2858",
  "difficulty": "Hard",
  "problem_slug": "minimum-edge-reversals-so-every-node-is-reachable",
  "topics": [
    "Dynamic Programming",
    "Depth-First Search",
    "Breadth-First Search",
    "Graph"
  ],
  "description": "There is a simple directed graph with n nodes labeled from 0 to n - 1. The graph would form a tree if its edges were bi-directional.\nYou are given an integer n and a 2D integer array edges, where edges[i] = [ui, vi] represents a directed edge going from node ui to node vi.\nAn edge reversal changes the direction of an edge, i.e., a directed edge going from node ui to node vi becomes a directed edge going from node vi to node ui.\nFor every node i in the range [0, n - 1], your task is to independently calculate the minimum number of edge reversals required so it is possible to reach any other node starting from node i through a sequence of directed edges.\nReturn an integer array answer, where answer[i] is the  minimum number of edge reversals required so it is possible to reach any other node starting from node i through a sequence of directed edges.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 4, edges = [[2,0],[2,1],[1,3]]\nOutput: [1,1,0,2]\nExplanation: The image above shows the graph formed by the edges.\nFor node 0: after reversing the edge [2,0], it is possible to reach any other node starting from node 0.\nSo, answer[0] = 1.\nFor node 1: after reversing the edge [2,1], it is possible to reach any other node starting from node 1.\nSo, answer[1] = 1.\nFor node 2: it is already possible to reach any other node starting from node 2.\nSo, answer[2] = 0.\nFor node 3: after reversing the edges [1,3] and [2,1], it is possible to reach any other node starting from node 3.\nSo, answer[3] = 2.",
      "images": [
        "https://assets.leetcode.com/uploads/2023/08/26/image-20230826221104-3.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 3, edges = [[1,2],[2,0]]\nOutput: [2,0,1]\nExplanation: The image above shows the graph formed by the edges.\nFor node 0: after reversing the edges [2,0] and [1,2], it is possible to reach any other node starting from node 0.\nSo, answer[0] = 2.\nFor node 1: it is already possible to reach any other node starting from node 1.\nSo, answer[1] = 0.\nFor node 2: after reversing the edge [1, 2], it is possible to reach any other node starting from node 2.\nSo, answer[2] = 1.",
      "images": [
        "https://assets.leetcode.com/uploads/2023/08/26/image-20230826225541-2.png"
      ]
    }
  ],
  "constraints": [
    "2 <= n <= 105",
    "edges.length == n - 1",
    "edges[i].length == 2",
    "0 <= ui == edges[i][0] < n",
    "0 <= vi == edges[i][1] < n",
    "ui != vi",
    "The input is generated suchÂ that if the edges were bi-directional, the graph would be a tree."
  ],
  "follow_ups": [],
  "hints": [
    "The problem can be solved using tree DP.",
    "Using node <code>0</code> as the root, let <code>dp[x]</code> be the minimum number of edge reversals so node <code>x</code> can reach every node in its subtree.",
    "Using a DFS traversing the edges bidirectionally, we can compute <code>dp</code>.<br />\r\n<code>dp[x] = dp[y] +</code> (<code>1</code> if the edge between <code>x</code> and <code>y</code> is going from <code>y</code> to <code>x</code>; <code>0</code> otherwise), where <code>x</code> is the parent of <code>y</code>.",
    "Let <code>answer[x]</code> be the minimum number of edge reversals so it is possible to reach any other node starting from node <code>x</code>.",
    "Using another DFS starting from node <code>0</code> and traversing the edges bidirectionally, we can compute <code>answer</code>.<br />\r\n<code>answer[0] = dp[0]</code><br />\r\n<code>answer[y] = answer[x] +</code> (<code>1</code> if the edge between <code>x</code> and <code>y</code> is going from <code>x</code> to <code>y</code>; <code>-1</code> otherwise), where <code>x</code> is the parent of <code>y</code>."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> minEdgeReversals(int n, vector<vector<int>>& edges) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] minEdgeReversals(int n, int[][] edges) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minEdgeReversals(self, n, edges):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minEdgeReversals(self, n: int, edges: List[List[int]]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* minEdgeReversals(int n, int** edges, int edgesSize, int* edgesColSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] MinEdgeReversals(int n, int[][] edges) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @return {number[]}\n */\nvar minEdgeReversals = function(n, edges) {\n    \n};",
    "typescript": "function minEdgeReversals(n: number, edges: number[][]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @return Integer[]\n     */\n    function minEdgeReversals($n, $edges) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minEdgeReversals(_ n: Int, _ edges: [[Int]]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minEdgeReversals(n: Int, edges: Array<IntArray>): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> minEdgeReversals(int n, List<List<int>> edges) {\n    \n  }\n}",
    "golang": "func minEdgeReversals(n int, edges [][]int) []int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @return {Integer[]}\ndef min_edge_reversals(n, edges)\n    \nend",
    "scala": "object Solution {\n    def minEdgeReversals(n: Int, edges: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_edge_reversals(n: i32, edges: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (min-edge-reversals n edges)\n  (-> exact-integer? (listof (listof exact-integer?)) (listof exact-integer?))\n  )",
    "erlang": "-spec min_edge_reversals(N :: integer(), Edges :: [[integer()]]) -> [integer()].\nmin_edge_reversals(N, Edges) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_edge_reversals(n :: integer, edges :: [[integer]]) :: [integer]\n  def min_edge_reversals(n, edges) do\n    \n  end\nend"
  }
}
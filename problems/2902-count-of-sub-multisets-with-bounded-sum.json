{
  "title": "Count of Sub-Multisets With Bounded Sum",
  "problem_id": "3091",
  "frontend_id": "2902",
  "difficulty": "Hard",
  "problem_slug": "count-of-sub-multisets-with-bounded-sum",
  "topics": [
    "Array",
    "Hash Table",
    "Dynamic Programming",
    "Sliding Window"
  ],
  "description": "You are given a 0-indexed array nums of non-negative integers, and two integers l and r.\nReturn the count of sub-multisets within nums where the sum of elements in each subset falls within the inclusive range of [l, r].\nSince the answer may be large, return it modulo 109 + 7.\nA sub-multiset is an unordered collection of elements of the array in which a given value x can occur 0, 1, ..., occ[x] times, where occ[x] is the number of occurrences of x in the array.\nNote that:\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,2,3], l = 6, r = 6\nOutput: 1\nExplanation: The only subset of nums that has a sum of 6 is {1, 2, 3}.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [2,1,4,2,7], l = 1, r = 5\nOutput: 7\nExplanation: The subsets of nums that have a sum within the range [1, 5] are {1}, {2}, {4}, {2, 2}, {1, 2}, {1, 4}, and {1, 2, 2}.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,2,1,3,5,2], l = 3, r = 5\nOutput: 9\nExplanation: The subsets of nums that have a sum within the range [3, 5] are {3}, {5}, {1, 2}, {1, 3}, {2, 2}, {2, 3}, {1, 1, 2}, {1, 1, 3}, and {1, 2, 2}.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 2 * 104",
    "0 <= nums[i] <= 2 * 104",
    "Sum of nums does not exceed 2 * 104.",
    "0 <= l <= r <= 2 * 104"
  ],
  "follow_ups": [],
  "hints": [
    "Since the sum of <code>nums</code>is at most <code>20000</code>, the number of distinct elements of nums is <code>200</code>.",
    "Let <code>dp[x]</code> be the number of submultisets of <code>nums</code> with sum <code>x</code>.",
    "The answer to the problem is <code>dp[l] + dp[l+1] + … + dp[r]</code>.",
    "Use coin change dp to transition between states."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int countSubMultisets(vector<int>& nums, int l, int r) {\n        \n    }\n};",
    "java": "class Solution {\n    public int countSubMultisets(List<Integer> nums, int l, int r) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def countSubMultisets(self, nums, l, r):\n        \"\"\"\n        :type nums: List[int]\n        :type l: int\n        :type r: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def countSubMultisets(self, nums: List[int], l: int, r: int) -> int:\n        ",
    "c": "int countSubMultisets(int* nums, int numsSize, int l, int r) {\n    \n}",
    "csharp": "public class Solution {\n    public int CountSubMultisets(IList<int> nums, int l, int r) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} l\n * @param {number} r\n * @return {number}\n */\nvar countSubMultisets = function(nums, l, r) {\n    \n};",
    "typescript": "function countSubMultisets(nums: number[], l: number, r: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $l\n     * @param Integer $r\n     * @return Integer\n     */\n    function countSubMultisets($nums, $l, $r) {\n        \n    }\n}",
    "swift": "class Solution {\n    func countSubMultisets(_ nums: [Int], _ l: Int, _ r: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun countSubMultisets(nums: List<Int>, l: Int, r: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int countSubMultisets(List<int> nums, int l, int r) {\n    \n  }\n}",
    "golang": "func countSubMultisets(nums []int, l int, r int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} l\n# @param {Integer} r\n# @return {Integer}\ndef count_sub_multisets(nums, l, r)\n    \nend",
    "scala": "object Solution {\n    def countSubMultisets(nums: List[Int], l: Int, r: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn count_sub_multisets(nums: Vec<i32>, l: i32, r: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (count-sub-multisets nums l r)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec count_sub_multisets(Nums :: [integer()], L :: integer(), R :: integer()) -> integer().\ncount_sub_multisets(Nums, L, R) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec count_sub_multisets(nums :: [integer], l :: integer, r :: integer) :: integer\n  def count_sub_multisets(nums, l, r) do\n    \n  end\nend"
  }
}
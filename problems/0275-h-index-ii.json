{
  "title": "H-Index II",
  "problem_id": "275",
  "frontend_id": "275",
  "difficulty": "Medium",
  "problem_slug": "h-index-ii",
  "topics": [
    "Array",
    "Binary Search"
  ],
  "description": "Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper and citations is sorted in non-descending order, return the researcher's h-index.\nAccording to the definition of h-index on Wikipedia: The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times.\nYou must write an algorithm that runs in logarithmic time.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: citations = [0,1,3,5,6]\nOutput: 3\nExplanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: citations = [1,2,100]\nOutput: 2",
      "images": []
    }
  ],
  "constraints": [
    "n == citations.length",
    "1 <= n <= 105",
    "0 <= citations[i] <= 1000",
    "citations is sorted in ascending order."
  ],
  "follow_ups": [],
  "hints": [
    "Expected runtime complexity is in <i>O</i>(log <i>n</i>) and the input is sorted."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int hIndex(vector<int>& citations) {\n        \n    }\n};",
    "java": "class Solution {\n    public int hIndex(int[] citations) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def hIndex(self, citations):\n        \"\"\"\n        :type citations: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def hIndex(self, citations: List[int]) -> int:\n        ",
    "c": "int hIndex(int* citations, int citationsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int HIndex(int[] citations) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} citations\n * @return {number}\n */\nvar hIndex = function(citations) {\n    \n};",
    "typescript": "function hIndex(citations: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $citations\n     * @return Integer\n     */\n    function hIndex($citations) {\n        \n    }\n}",
    "swift": "class Solution {\n    func hIndex(_ citations: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun hIndex(citations: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int hIndex(List<int> citations) {\n    \n  }\n}",
    "golang": "func hIndex(citations []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} citations\n# @return {Integer}\ndef h_index(citations)\n    \nend",
    "scala": "object Solution {\n    def hIndex(citations: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn h_index(citations: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (h-index citations)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec h_index(Citations :: [integer()]) -> integer().\nh_index(Citations) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec h_index(citations :: [integer]) :: integer\n  def h_index(citations) do\n    \n  end\nend"
  }
}
{
  "title": "Design Neighbor Sum Service",
  "problem_id": "3516",
  "frontend_id": "3242",
  "difficulty": "Easy",
  "problem_slug": "design-neighbor-sum-service",
  "topics": [
    "Array",
    "Hash Table",
    "Design",
    "Matrix",
    "Simulation"
  ],
  "description": "You are given a n x n 2D array grid containing distinct elements in the range [0, n2 - 1].\nImplement the NeighborSum class:\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input:\n[\"NeighborSum\", \"adjacentSum\", \"adjacentSum\", \"diagonalSum\", \"diagonalSum\"]\n[[[[0, 1, 2], [3, 4, 5], [6, 7, 8]]], [1], [4], [4], [8]]\nOutput: [null, 6, 16, 16, 4]\nExplanation:\n",
      "images": [
        "https://assets.leetcode.com/uploads/2024/06/24/designexample0.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input:\n[\"NeighborSum\", \"adjacentSum\", \"diagonalSum\"]\n[[[[1, 2, 0, 3], [4, 7, 15, 6], [8, 9, 10, 11], [12, 13, 14, 5]]], [15], [9]]\nOutput: [null, 23, 45]\nExplanation:\n",
      "images": [
        "https://assets.leetcode.com/uploads/2024/06/24/designexample2.png"
      ]
    }
  ],
  "constraints": [
    "3 <= n == grid.length == grid[0].length <= 10",
    "0 <= grid[i][j] <= n2 - 1",
    "All grid[i][j] are distinct.",
    "value in adjacentSum and diagonalSum will be in the range [0, n2 - 1].",
    "At most 2 * n2 calls will be made to adjacentSum and diagonalSum."
  ],
  "follow_ups": [],
  "hints": [
    "Find the cell <code>(i, j)</code> in which the element is present.",
    "You can store the coordinates for each value."
  ],
  "code_snippets": {
    "cpp": "class NeighborSum {\npublic:\n    NeighborSum(vector<vector<int>>& grid) {\n        \n    }\n    \n    int adjacentSum(int value) {\n        \n    }\n    \n    int diagonalSum(int value) {\n        \n    }\n};\n\n/**\n * Your NeighborSum object will be instantiated and called as such:\n * NeighborSum* obj = new NeighborSum(grid);\n * int param_1 = obj->adjacentSum(value);\n * int param_2 = obj->diagonalSum(value);\n */",
    "java": "class NeighborSum {\n\n    public NeighborSum(int[][] grid) {\n        \n    }\n    \n    public int adjacentSum(int value) {\n        \n    }\n    \n    public int diagonalSum(int value) {\n        \n    }\n}\n\n/**\n * Your NeighborSum object will be instantiated and called as such:\n * NeighborSum obj = new NeighborSum(grid);\n * int param_1 = obj.adjacentSum(value);\n * int param_2 = obj.diagonalSum(value);\n */",
    "python": "class NeighborSum(object):\n\n    def __init__(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        \"\"\"\n        \n\n    def adjacentSum(self, value):\n        \"\"\"\n        :type value: int\n        :rtype: int\n        \"\"\"\n        \n\n    def diagonalSum(self, value):\n        \"\"\"\n        :type value: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your NeighborSum object will be instantiated and called as such:\n# obj = NeighborSum(grid)\n# param_1 = obj.adjacentSum(value)\n# param_2 = obj.diagonalSum(value)",
    "python3": "class NeighborSum:\n\n    def __init__(self, grid: List[List[int]]):\n        \n\n    def adjacentSum(self, value: int) -> int:\n        \n\n    def diagonalSum(self, value: int) -> int:\n        \n\n\n# Your NeighborSum object will be instantiated and called as such:\n# obj = NeighborSum(grid)\n# param_1 = obj.adjacentSum(value)\n# param_2 = obj.diagonalSum(value)",
    "c": "\n\n\ntypedef struct {\n    \n} NeighborSum;\n\n\nNeighborSum* neighborSumCreate(int** grid, int gridSize, int* gridColSize) {\n    \n}\n\nint neighborSumAdjacentSum(NeighborSum* obj, int value) {\n    \n}\n\nint neighborSumDiagonalSum(NeighborSum* obj, int value) {\n    \n}\n\nvoid neighborSumFree(NeighborSum* obj) {\n    \n}\n\n/**\n * Your NeighborSum struct will be instantiated and called as such:\n * NeighborSum* obj = neighborSumCreate(grid, gridSize, gridColSize);\n * int param_1 = neighborSumAdjacentSum(obj, value);\n \n * int param_2 = neighborSumDiagonalSum(obj, value);\n \n * neighborSumFree(obj);\n*/",
    "csharp": "public class NeighborSum {\n\n    public NeighborSum(int[][] grid) {\n        \n    }\n    \n    public int AdjacentSum(int value) {\n        \n    }\n    \n    public int DiagonalSum(int value) {\n        \n    }\n}\n\n/**\n * Your NeighborSum object will be instantiated and called as such:\n * NeighborSum obj = new NeighborSum(grid);\n * int param_1 = obj.AdjacentSum(value);\n * int param_2 = obj.DiagonalSum(value);\n */",
    "javascript": "/**\n * @param {number[][]} grid\n */\nvar NeighborSum = function(grid) {\n    \n};\n\n/** \n * @param {number} value\n * @return {number}\n */\nNeighborSum.prototype.adjacentSum = function(value) {\n    \n};\n\n/** \n * @param {number} value\n * @return {number}\n */\nNeighborSum.prototype.diagonalSum = function(value) {\n    \n};\n\n/** \n * Your NeighborSum object will be instantiated and called as such:\n * var obj = new NeighborSum(grid)\n * var param_1 = obj.adjacentSum(value)\n * var param_2 = obj.diagonalSum(value)\n */",
    "typescript": "class NeighborSum {\n    constructor(grid: number[][]) {\n        \n    }\n\n    adjacentSum(value: number): number {\n        \n    }\n\n    diagonalSum(value: number): number {\n        \n    }\n}\n\n/**\n * Your NeighborSum object will be instantiated and called as such:\n * var obj = new NeighborSum(grid)\n * var param_1 = obj.adjacentSum(value)\n * var param_2 = obj.diagonalSum(value)\n */",
    "php": "class NeighborSum {\n    /**\n     * @param Integer[][] $grid\n     */\n    function __construct($grid) {\n        \n    }\n  \n    /**\n     * @param Integer $value\n     * @return Integer\n     */\n    function adjacentSum($value) {\n        \n    }\n  \n    /**\n     * @param Integer $value\n     * @return Integer\n     */\n    function diagonalSum($value) {\n        \n    }\n}\n\n/**\n * Your NeighborSum object will be instantiated and called as such:\n * $obj = NeighborSum($grid);\n * $ret_1 = $obj->adjacentSum($value);\n * $ret_2 = $obj->diagonalSum($value);\n */",
    "swift": "\nclass NeighborSum {\n\n    init(_ grid: [[Int]]) {\n        \n    }\n    \n    func adjacentSum(_ value: Int) -> Int {\n        \n    }\n    \n    func diagonalSum(_ value: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your NeighborSum object will be instantiated and called as such:\n * let obj = NeighborSum(grid)\n * let ret_1: Int = obj.adjacentSum(value)\n * let ret_2: Int = obj.diagonalSum(value)\n */",
    "kotlin": "class NeighborSum(grid: Array<IntArray>) {\n\n    fun adjacentSum(value: Int): Int {\n        \n    }\n\n    fun diagonalSum(value: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your NeighborSum object will be instantiated and called as such:\n * var obj = NeighborSum(grid)\n * var param_1 = obj.adjacentSum(value)\n * var param_2 = obj.diagonalSum(value)\n */",
    "dart": "class NeighborSum {\n\n  NeighborSum(List<List<int>> grid) {\n    \n  }\n  \n  int adjacentSum(int value) {\n    \n  }\n  \n  int diagonalSum(int value) {\n    \n  }\n}\n\n/**\n * Your NeighborSum object will be instantiated and called as such:\n * NeighborSum obj = NeighborSum(grid);\n * int param1 = obj.adjacentSum(value);\n * int param2 = obj.diagonalSum(value);\n */",
    "golang": "type NeighborSum struct {\n    \n}\n\n\nfunc Constructor(grid [][]int) NeighborSum {\n    \n}\n\n\nfunc (this *NeighborSum) AdjacentSum(value int) int {\n    \n}\n\n\nfunc (this *NeighborSum) DiagonalSum(value int) int {\n    \n}\n\n\n/**\n * Your NeighborSum object will be instantiated and called as such:\n * obj := Constructor(grid);\n * param_1 := obj.AdjacentSum(value);\n * param_2 := obj.DiagonalSum(value);\n */",
    "ruby": "class NeighborSum\n\n=begin\n    :type grid: Integer[][]\n=end\n    def initialize(grid)\n        \n    end\n\n\n=begin\n    :type value: Integer\n    :rtype: Integer\n=end\n    def adjacent_sum(value)\n        \n    end\n\n\n=begin\n    :type value: Integer\n    :rtype: Integer\n=end\n    def diagonal_sum(value)\n        \n    end\n\n\nend\n\n# Your NeighborSum object will be instantiated and called as such:\n# obj = NeighborSum.new(grid)\n# param_1 = obj.adjacent_sum(value)\n# param_2 = obj.diagonal_sum(value)",
    "scala": "class NeighborSum(_grid: Array[Array[Int]]) {\n\n    def adjacentSum(value: Int): Int = {\n        \n    }\n\n    def diagonalSum(value: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your NeighborSum object will be instantiated and called as such:\n * val obj = new NeighborSum(grid)\n * val param_1 = obj.adjacentSum(value)\n * val param_2 = obj.diagonalSum(value)\n */",
    "rust": "struct NeighborSum {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl NeighborSum {\n\n    fn new(grid: Vec<Vec<i32>>) -> Self {\n        \n    }\n    \n    fn adjacent_sum(&self, value: i32) -> i32 {\n        \n    }\n    \n    fn diagonal_sum(&self, value: i32) -> i32 {\n        \n    }\n}\n\n/**\n * Your NeighborSum object will be instantiated and called as such:\n * let obj = NeighborSum::new(grid);\n * let ret_1: i32 = obj.adjacent_sum(value);\n * let ret_2: i32 = obj.diagonal_sum(value);\n */",
    "racket": "(define neighbor-sum%\n  (class object%\n    (super-new)\n    \n    ; grid : (listof (listof exact-integer?))\n    (init-field\n      grid)\n    \n    ; adjacent-sum : exact-integer? -> exact-integer?\n    (define/public (adjacent-sum value)\n      )\n    ; diagonal-sum : exact-integer? -> exact-integer?\n    (define/public (diagonal-sum value)\n      )))\n\n;; Your neighbor-sum% object will be instantiated and called as such:\n;; (define obj (new neighbor-sum% [grid grid]))\n;; (define param_1 (send obj adjacent-sum value))\n;; (define param_2 (send obj diagonal-sum value))",
    "erlang": "-spec neighbor_sum_init_(Grid :: [[integer()]]) -> any().\nneighbor_sum_init_(Grid) ->\n  .\n\n-spec neighbor_sum_adjacent_sum(Value :: integer()) -> integer().\nneighbor_sum_adjacent_sum(Value) ->\n  .\n\n-spec neighbor_sum_diagonal_sum(Value :: integer()) -> integer().\nneighbor_sum_diagonal_sum(Value) ->\n  .\n\n\n%% Your functions will be called as such:\n%% neighbor_sum_init_(Grid),\n%% Param_1 = neighbor_sum_adjacent_sum(Value),\n%% Param_2 = neighbor_sum_diagonal_sum(Value),\n\n%% neighbor_sum_init_ will be called before every test case, in which you can do some necessary initializations.",
    "elixir": "defmodule NeighborSum do\n  @spec init_(grid :: [[integer]]) :: any\n  def init_(grid) do\n    \n  end\n\n  @spec adjacent_sum(value :: integer) :: integer\n  def adjacent_sum(value) do\n    \n  end\n\n  @spec diagonal_sum(value :: integer) :: integer\n  def diagonal_sum(value) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# NeighborSum.init_(grid)\n# param_1 = NeighborSum.adjacent_sum(value)\n# param_2 = NeighborSum.diagonal_sum(value)\n\n# NeighborSum.init_ will be called before every test case, in which you can do some necessary initializations."
  }
}
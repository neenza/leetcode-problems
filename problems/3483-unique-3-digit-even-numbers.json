{
  "title": "Unique 3-Digit Even Numbers",
  "problem_id": "3799",
  "frontend_id": "3483",
  "difficulty": "Easy",
  "problem_slug": "unique-3-digit-even-numbers",
  "topics": [
    "Array",
    "Hash Table",
    "Recursion",
    "Enumeration"
  ],
  "description": "You are given an array of digits called digits. Your task is to determine the number of distinct three-digit even numbers that can be formed using these digits.\nNote: Each copy of a digit can only be used once per number, and there may not be leading zeros.\nExample 1:\nExample 2:\nExample 3:\nExample 4:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: digits = [1,2,3,4]\nOutput: 12\nExplanation: The 12 distinct 3-digit even numbers that can be formed are 124, 132, 134, 142, 214, 234, 312, 314, 324, 342, 412, and 432. Note that 222 cannot be formed because there is only 1 copy of the digit 2.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: digits = [0,2,2]\nOutput: 2\nExplanation: The only 3-digit even numbers that can be formed are 202 and 220. Note that the digit 2 can be used twice because it appears twice in the array.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: digits = [6,6,6]\nOutput: 1\nExplanation: Only 666 can be formed.",
      "images": []
    },
    {
      "example_num": 4,
      "example_text": "Input: digits = [1,3,5]\nOutput: 0\nExplanation: No even 3-digit numbers can be formed.",
      "images": []
    }
  ],
  "constraints": [
    "3 <= digits.length <= 10",
    "0 <= digits[i] <= 9"
  ],
  "follow_ups": [],
  "hints": [
    "Use brute force to try all possibilities"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int totalNumbers(vector<int>& digits) {\n        \n    }\n};",
    "java": "class Solution {\n    public int totalNumbers(int[] digits) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def totalNumbers(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def totalNumbers(self, digits: List[int]) -> int:\n        ",
    "c": "int totalNumbers(int* digits, int digitsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int TotalNumbers(int[] digits) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} digits\n * @return {number}\n */\nvar totalNumbers = function(digits) {\n    \n};",
    "typescript": "function totalNumbers(digits: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $digits\n     * @return Integer\n     */\n    function totalNumbers($digits) {\n        \n    }\n}",
    "swift": "class Solution {\n    func totalNumbers(_ digits: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun totalNumbers(digits: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int totalNumbers(List<int> digits) {\n    \n  }\n}",
    "golang": "func totalNumbers(digits []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} digits\n# @return {Integer}\ndef total_numbers(digits)\n    \nend",
    "scala": "object Solution {\n    def totalNumbers(digits: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn total_numbers(digits: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (total-numbers digits)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec total_numbers(Digits :: [integer()]) -> integer().\ntotal_numbers(Digits) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec total_numbers(digits :: [integer]) :: integer\n  def total_numbers(digits) do\n    \n  end\nend"
  }
}
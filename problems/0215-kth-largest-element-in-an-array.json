{
  "title": "Kth Largest Element in an Array",
  "problem_id": "215",
  "frontend_id": "215",
  "difficulty": "Medium",
  "problem_slug": "kth-largest-element-in-an-array",
  "topics": [
    "Array",
    "Divide and Conquer",
    "Sorting",
    "Heap (Priority Queue)",
    "Quickselect"
  ],
  "description": "Given an integer array nums and an integer k, return the kth largest element in the array.\nNote that it is the kth largest element in the sorted order, not the kth distinct element.\nCan you solve it without sorting?\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [3,2,1,5,6,4], k = 2\nOutput: 5",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [3,2,3,1,2,4,5,5,6], k = 4\nOutput: 4",
      "images": []
    }
  ],
  "constraints": [
    "1 <= k <= nums.length <= 105",
    "-104 <= nums[i] <= 104"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int findKthLargest(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int findKthLargest(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findKthLargest(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findKthLargest(self, nums: List[int], k: int) -> int:\n        ",
    "c": "int findKthLargest(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int FindKthLargest(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar findKthLargest = function(nums, k) {\n    \n};",
    "typescript": "function findKthLargest(nums: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function findKthLargest($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findKthLargest(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findKthLargest(nums: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int findKthLargest(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func findKthLargest(nums []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef find_kth_largest(nums, k)\n    \nend",
    "scala": "object Solution {\n    def findKthLargest(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_kth_largest(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (find-kth-largest nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec find_kth_largest(Nums :: [integer()], K :: integer()) -> integer().\nfind_kth_largest(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_kth_largest(nums :: [integer], k :: integer) :: integer\n  def find_kth_largest(nums, k) do\n    \n  end\nend"
  }
}
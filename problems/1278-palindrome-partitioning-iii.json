{
  "title": "Palindrome Partitioning III",
  "problem_id": "1403",
  "frontend_id": "1278",
  "difficulty": "Hard",
  "problem_slug": "palindrome-partitioning-iii",
  "topics": [
    "String",
    "Dynamic Programming"
  ],
  "description": "You are given a string s containing lowercase letters and an integer k. You need to :\nReturn the minimal number of characters that you need to change to divide the string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"abc\", k = 2\nOutput: 1\nExplanation: You can split the string into \"ab\" and \"c\", and change 1 character in \"ab\" to make it palindrome.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"aabbc\", k = 3\nOutput: 0\nExplanation: You can split the string into \"aa\", \"bb\" and \"c\", all of them are palindrome.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"leetcode\", k = 8\nOutput: 0",
      "images": []
    }
  ],
  "constraints": [
    "1 <= k <= s.length <= 100.",
    "s only contains lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [
    "For each substring calculate the minimum number of steps to make it palindrome and store it in a table.",
    "Create a dp(pos, cnt) which means the minimum number of characters changed for the suffix of s starting on pos splitting the suffix on cnt chunks."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int palindromePartition(string s, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int palindromePartition(String s, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def palindromePartition(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def palindromePartition(self, s: str, k: int) -> int:\n        ",
    "c": "int palindromePartition(char* s, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int PalindromePartition(string s, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar palindromePartition = function(s, k) {\n    \n};",
    "typescript": "function palindromePartition(s: string, k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function palindromePartition($s, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func palindromePartition(_ s: String, _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun palindromePartition(s: String, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int palindromePartition(String s, int k) {\n    \n  }\n}",
    "golang": "func palindromePartition(s string, k int) int {\n    \n}",
    "ruby": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef palindrome_partition(s, k)\n    \nend",
    "scala": "object Solution {\n    def palindromePartition(s: String, k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn palindrome_partition(s: String, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (palindrome-partition s k)\n  (-> string? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec palindrome_partition(S :: unicode:unicode_binary(), K :: integer()) -> integer().\npalindrome_partition(S, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec palindrome_partition(s :: String.t, k :: integer) :: integer\n  def palindrome_partition(s, k) do\n    \n  end\nend"
  }
}
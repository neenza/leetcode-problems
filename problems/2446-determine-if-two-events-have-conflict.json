{
  "title": "Determine if Two Events Have Conflict",
  "problem_id": "2536",
  "frontend_id": "2446",
  "difficulty": "Easy",
  "problem_slug": "determine-if-two-events-have-conflict",
  "topics": [
    "Array",
    "String"
  ],
  "description": "You are given two arrays of strings that represent two inclusive events that happened on the same day, event1 and event2, where:\nEvent times are valid 24 hours format in the form of HH:MM.\nA conflict happens when two events have some non-empty intersection (i.e., some moment is common to both events).\nReturn true if there is a conflict between two events. Otherwise, return false.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: event1 = [\"01:15\",\"02:00\"], event2 = [\"02:00\",\"03:00\"]\nOutput: true\nExplanation: The two events intersect at time 2:00.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: event1 = [\"01:00\",\"02:00\"], event2 = [\"01:20\",\"03:00\"]\nOutput: true\nExplanation: The two events intersect starting from 01:20 to 02:00.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: event1 = [\"10:00\",\"11:00\"], event2 = [\"14:00\",\"15:00\"]\nOutput: false\nExplanation: The two events do not intersect.",
      "images": []
    }
  ],
  "constraints": [
    "event1.length == event2.length == 2",
    "event1[i].length == event2[i].length == 5",
    "startTime1 <= endTime1",
    "startTime2 <= endTime2",
    "All the event times follow the HH:MM format."
  ],
  "follow_ups": [],
  "hints": [
    "Parse time format to some integer interval first",
    "How would you determine if two intervals overlap?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool haveConflict(vector<string>& event1, vector<string>& event2) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean haveConflict(String[] event1, String[] event2) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def haveConflict(self, event1, event2):\n        \"\"\"\n        :type event1: List[str]\n        :type event2: List[str]\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def haveConflict(self, event1: List[str], event2: List[str]) -> bool:\n        ",
    "c": "bool haveConflict(char** event1, int event1Size, char** event2, int event2Size) {\n    \n}",
    "csharp": "public class Solution {\n    public bool HaveConflict(string[] event1, string[] event2) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string[]} event1\n * @param {string[]} event2\n * @return {boolean}\n */\nvar haveConflict = function(event1, event2) {\n    \n};",
    "typescript": "function haveConflict(event1: string[], event2: string[]): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String[] $event1\n     * @param String[] $event2\n     * @return Boolean\n     */\n    function haveConflict($event1, $event2) {\n        \n    }\n}",
    "swift": "class Solution {\n    func haveConflict(_ event1: [String], _ event2: [String]) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun haveConflict(event1: Array<String>, event2: Array<String>): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool haveConflict(List<String> event1, List<String> event2) {\n    \n  }\n}",
    "golang": "func haveConflict(event1 []string, event2 []string) bool {\n    \n}",
    "ruby": "# @param {String[]} event1\n# @param {String[]} event2\n# @return {Boolean}\ndef have_conflict(event1, event2)\n    \nend",
    "scala": "object Solution {\n    def haveConflict(event1: Array[String], event2: Array[String]): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn have_conflict(event1: Vec<String>, event2: Vec<String>) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (have-conflict event1 event2)\n  (-> (listof string?) (listof string?) boolean?)\n  )",
    "erlang": "-spec have_conflict(Event1 :: [unicode:unicode_binary()], Event2 :: [unicode:unicode_binary()]) -> boolean().\nhave_conflict(Event1, Event2) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec have_conflict(event1 :: [String.t], event2 :: [String.t]) :: boolean\n  def have_conflict(event1, event2) do\n    \n  end\nend"
  }
}
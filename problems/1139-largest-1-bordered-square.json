{
  "title": "Largest 1-Bordered Square",
  "problem_id": "1239",
  "frontend_id": "1139",
  "difficulty": "Medium",
  "problem_slug": "largest-1-bordered-square",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Matrix"
  ],
  "description": "Given a 2D grid of 0s and 1s, return the number of elements in the largest square subgrid that has all 1s on its border, or 0 if such a subgrid doesn't exist in the grid.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: grid = [[1,1,1],[1,0,1],[1,1,1]]\r\nOutput: 9",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: grid = [[1,1,0,0]]\r\nOutput: 1",
      "images": []
    }
  ],
  "constraints": [
    "1 <= grid.length <= 100",
    "1 <= grid[0].length <= 100",
    "grid[i][j] is 0 or 1"
  ],
  "follow_ups": [],
  "hints": [
    "For each square, know how many ones are up, left, down, and right of this square. You can find it in O(N^2) using dynamic programming.",
    "Now for each square ( O(N^3) ), we can evaluate whether that square is 1-bordered in O(1)."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int largest1BorderedSquare(vector<vector<int>>& grid) {\n        \n    }\n};",
    "java": "class Solution {\n    public int largest1BorderedSquare(int[][] grid) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def largest1BorderedSquare(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def largest1BorderedSquare(self, grid: List[List[int]]) -> int:\n        ",
    "c": "\n\nint largest1BorderedSquare(int** grid, int gridSize, int* gridColSize){\n\n}",
    "csharp": "public class Solution {\n    public int Largest1BorderedSquare(int[][] grid) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar largest1BorderedSquare = function(grid) {\n    \n};",
    "typescript": "function largest1BorderedSquare(grid: number[][]): number {\n\n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function largest1BorderedSquare($grid) {\n        \n    }\n}",
    "swift": "class Solution {\n    func largest1BorderedSquare(_ grid: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun largest1BorderedSquare(grid: Array<IntArray>): Int {\n        \n    }\n}",
    "golang": "func largest1BorderedSquare(grid [][]int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} grid\n# @return {Integer}\ndef largest1_bordered_square(grid)\n    \nend",
    "scala": "object Solution {\n    def largest1BorderedSquare(grid: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn largest1_bordered_square(grid: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
  }
}
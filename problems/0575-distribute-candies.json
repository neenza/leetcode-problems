{
  "title": "Distribute Candies",
  "problem_id": "575",
  "frontend_id": "575",
  "difficulty": "Easy",
  "problem_slug": "distribute-candies",
  "topics": [
    "Array",
    "Hash Table"
  ],
  "description": "Alice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor.\nThe doctor advised Alice to only eat n / 2 of the candies she has (n is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.\nGiven the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: candyType = [1,1,2,2,3,3]\nOutput: 3\nExplanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: candyType = [1,1,2,3]\nOutput: 2\nExplanation: Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: candyType = [6,6,6,6]\nOutput: 1\nExplanation: Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type.",
      "images": []
    }
  ],
  "constraints": [
    "n == candyType.length",
    "2 <= n <= 104",
    "nÂ is even.",
    "-105 <= candyType[i] <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "To maximize the number of kinds of candies, we should try to distribute candies such that Alice will gain all kinds.",
    "What is the upper limit of the number of kinds of candies Alice will gain? Remember candies are to distributed equally.",
    "Which data structure is the most suitable for finding the number of kinds of candies?",
    "Will hashset solves the problem? Inserting all candies kind in the hashset and then checking its size with upper limit."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int distributeCandies(vector<int>& candyType) {\n        \n    }\n};",
    "java": "class Solution {\n    public int distributeCandies(int[] candyType) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def distributeCandies(self, candyType):\n        \"\"\"\n        :type candyType: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def distributeCandies(self, candyType: List[int]) -> int:\n        ",
    "c": "int distributeCandies(int* candyType, int candyTypeSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int DistributeCandies(int[] candyType) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} candyType\n * @return {number}\n */\nvar distributeCandies = function(candyType) {\n    \n};",
    "typescript": "function distributeCandies(candyType: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $candyType\n     * @return Integer\n     */\n    function distributeCandies($candyType) {\n        \n    }\n}",
    "swift": "class Solution {\n    func distributeCandies(_ candyType: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun distributeCandies(candyType: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int distributeCandies(List<int> candyType) {\n    \n  }\n}",
    "golang": "func distributeCandies(candyType []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} candy_type\n# @return {Integer}\ndef distribute_candies(candy_type)\n    \nend",
    "scala": "object Solution {\n    def distributeCandies(candyType: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn distribute_candies(candy_type: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (distribute-candies candyType)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec distribute_candies(CandyType :: [integer()]) -> integer().\ndistribute_candies(CandyType) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec distribute_candies(candy_type :: [integer]) :: integer\n  def distribute_candies(candy_type) do\n    \n  end\nend"
  }
}
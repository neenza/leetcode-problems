{
  "title": "Design Underground System",
  "problem_id": "1512",
  "frontend_id": "1396",
  "difficulty": "Medium",
  "problem_slug": "design-underground-system",
  "topics": [
    "Hash Table",
    "String",
    "Design"
  ],
  "description": "An underground railway system is keeping track of customer travel times between different stations. They are using this data to calculate the average time it takes to travel from one station to another.\nImplement the UndergroundSystem class:\nYou may assume all calls to the checkIn and checkOut methods are consistent. If a customer checks in at time t1 then checks out at time t2, then t1 < t2. All events happen in chronological order.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input\n[\"UndergroundSystem\",\"checkIn\",\"checkIn\",\"checkIn\",\"checkOut\",\"checkOut\",\"checkOut\",\"getAverageTime\",\"getAverageTime\",\"checkIn\",\"getAverageTime\",\"checkOut\",\"getAverageTime\"]\n[[],[45,\"Leyton\",3],[32,\"Paradise\",8],[27,\"Leyton\",10],[45,\"Waterloo\",15],[27,\"Waterloo\",20],[32,\"Cambridge\",22],[\"Paradise\",\"Cambridge\"],[\"Leyton\",\"Waterloo\"],[10,\"Leyton\",24],[\"Leyton\",\"Waterloo\"],[10,\"Waterloo\",38],[\"Leyton\",\"Waterloo\"]]\n\nOutput\n[null,null,null,null,null,null,null,14.00000,11.00000,null,11.00000,null,12.00000]\n\nExplanation\nUndergroundSystem undergroundSystem = new UndergroundSystem();\nundergroundSystem.checkIn(45, \"Leyton\", 3);\nundergroundSystem.checkIn(32, \"Paradise\", 8);\nundergroundSystem.checkIn(27, \"Leyton\", 10);\nundergroundSystem.checkOut(45, \"Waterloo\", 15);  // Customer 45 \"Leyton\" -> \"Waterloo\" in 15-3 = 12\nundergroundSystem.checkOut(27, \"Waterloo\", 20);  // Customer 27 \"Leyton\" -> \"Waterloo\" in 20-10 = 10\nundergroundSystem.checkOut(32, \"Cambridge\", 22); // Customer 32 \"Paradise\" -> \"Cambridge\" in 22-8 = 14\nundergroundSystem.getAverageTime(\"Paradise\", \"Cambridge\"); // return 14.00000. One trip \"Paradise\" -> \"Cambridge\", (14) / 1 = 14\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 11.00000. Two trips \"Leyton\" -> \"Waterloo\", (10 + 12) / 2 = 11\nundergroundSystem.checkIn(10, \"Leyton\", 24);\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 11.00000\nundergroundSystem.checkOut(10, \"Waterloo\", 38);  // Customer 10 \"Leyton\" -> \"Waterloo\" in 38-24 = 14\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 12.00000. Three trips \"Leyton\" -> \"Waterloo\", (10 + 12 + 14) / 3 = 12",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input\n[\"UndergroundSystem\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\"]\n[[],[10,\"Leyton\",3],[10,\"Paradise\",8],[\"Leyton\",\"Paradise\"],[5,\"Leyton\",10],[5,\"Paradise\",16],[\"Leyton\",\"Paradise\"],[2,\"Leyton\",21],[2,\"Paradise\",30],[\"Leyton\",\"Paradise\"]]\n\nOutput\n[null,null,null,5.00000,null,null,5.50000,null,null,6.66667]\n\nExplanation\nUndergroundSystem undergroundSystem = new UndergroundSystem();\nundergroundSystem.checkIn(10, \"Leyton\", 3);\nundergroundSystem.checkOut(10, \"Paradise\", 8); // Customer 10 \"Leyton\" -> \"Paradise\" in 8-3 = 5\nundergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 5.00000, (5) / 1 = 5\nundergroundSystem.checkIn(5, \"Leyton\", 10);\nundergroundSystem.checkOut(5, \"Paradise\", 16); // Customer 5 \"Leyton\" -> \"Paradise\" in 16-10 = 6\nundergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 5.50000, (5 + 6) / 2 = 5.5\nundergroundSystem.checkIn(2, \"Leyton\", 21);\nundergroundSystem.checkOut(2, \"Paradise\", 30); // Customer 2 \"Leyton\" -> \"Paradise\" in 30-21 = 9\nundergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 6.66667, (5 + 6 + 9) / 3 = 6.66667",
      "images": []
    }
  ],
  "constraints": [
    "1 <= id, t <= 106",
    "1 <= stationName.length, startStation.length, endStation.length <= 10",
    "All strings consist of uppercase and lowercase English letters and digits.",
    "There will be at most 2 * 104 calls in total to checkIn, checkOut, and getAverageTime.",
    "Answers within 10-5 of the actual value will be accepted."
  ],
  "follow_ups": [],
  "hints": [
    "Use two hash tables. The first to save the check-in time for a customer and the second to update the total time between two stations."
  ],
  "code_snippets": {
    "cpp": "class UndergroundSystem {\npublic:\n    UndergroundSystem() {\n        \n    }\n    \n    void checkIn(int id, string stationName, int t) {\n        \n    }\n    \n    void checkOut(int id, string stationName, int t) {\n        \n    }\n    \n    double getAverageTime(string startStation, string endStation) {\n        \n    }\n};\n\n/**\n * Your UndergroundSystem object will be instantiated and called as such:\n * UndergroundSystem* obj = new UndergroundSystem();\n * obj->checkIn(id,stationName,t);\n * obj->checkOut(id,stationName,t);\n * double param_3 = obj->getAverageTime(startStation,endStation);\n */",
    "java": "class UndergroundSystem {\n\n    public UndergroundSystem() {\n        \n    }\n    \n    public void checkIn(int id, String stationName, int t) {\n        \n    }\n    \n    public void checkOut(int id, String stationName, int t) {\n        \n    }\n    \n    public double getAverageTime(String startStation, String endStation) {\n        \n    }\n}\n\n/**\n * Your UndergroundSystem object will be instantiated and called as such:\n * UndergroundSystem obj = new UndergroundSystem();\n * obj.checkIn(id,stationName,t);\n * obj.checkOut(id,stationName,t);\n * double param_3 = obj.getAverageTime(startStation,endStation);\n */",
    "python": "class UndergroundSystem(object):\n\n    def __init__(self):\n        \n\n    def checkIn(self, id, stationName, t):\n        \"\"\"\n        :type id: int\n        :type stationName: str\n        :type t: int\n        :rtype: None\n        \"\"\"\n        \n\n    def checkOut(self, id, stationName, t):\n        \"\"\"\n        :type id: int\n        :type stationName: str\n        :type t: int\n        :rtype: None\n        \"\"\"\n        \n\n    def getAverageTime(self, startStation, endStation):\n        \"\"\"\n        :type startStation: str\n        :type endStation: str\n        :rtype: float\n        \"\"\"\n        \n\n\n# Your UndergroundSystem object will be instantiated and called as such:\n# obj = UndergroundSystem()\n# obj.checkIn(id,stationName,t)\n# obj.checkOut(id,stationName,t)\n# param_3 = obj.getAverageTime(startStation,endStation)",
    "python3": "class UndergroundSystem:\n\n    def __init__(self):\n        \n\n    def checkIn(self, id: int, stationName: str, t: int) -> None:\n        \n\n    def checkOut(self, id: int, stationName: str, t: int) -> None:\n        \n\n    def getAverageTime(self, startStation: str, endStation: str) -> float:\n        \n\n\n# Your UndergroundSystem object will be instantiated and called as such:\n# obj = UndergroundSystem()\n# obj.checkIn(id,stationName,t)\n# obj.checkOut(id,stationName,t)\n# param_3 = obj.getAverageTime(startStation,endStation)",
    "c": "\n\n\ntypedef struct {\n    \n} UndergroundSystem;\n\n\nUndergroundSystem* undergroundSystemCreate() {\n    \n}\n\nvoid undergroundSystemCheckIn(UndergroundSystem* obj, int id, char* stationName, int t) {\n    \n}\n\nvoid undergroundSystemCheckOut(UndergroundSystem* obj, int id, char* stationName, int t) {\n    \n}\n\ndouble undergroundSystemGetAverageTime(UndergroundSystem* obj, char* startStation, char* endStation) {\n    \n}\n\nvoid undergroundSystemFree(UndergroundSystem* obj) {\n    \n}\n\n/**\n * Your UndergroundSystem struct will be instantiated and called as such:\n * UndergroundSystem* obj = undergroundSystemCreate();\n * undergroundSystemCheckIn(obj, id, stationName, t);\n \n * undergroundSystemCheckOut(obj, id, stationName, t);\n \n * double param_3 = undergroundSystemGetAverageTime(obj, startStation, endStation);\n \n * undergroundSystemFree(obj);\n*/",
    "csharp": "public class UndergroundSystem {\n\n    public UndergroundSystem() {\n        \n    }\n    \n    public void CheckIn(int id, string stationName, int t) {\n        \n    }\n    \n    public void CheckOut(int id, string stationName, int t) {\n        \n    }\n    \n    public double GetAverageTime(string startStation, string endStation) {\n        \n    }\n}\n\n/**\n * Your UndergroundSystem object will be instantiated and called as such:\n * UndergroundSystem obj = new UndergroundSystem();\n * obj.CheckIn(id,stationName,t);\n * obj.CheckOut(id,stationName,t);\n * double param_3 = obj.GetAverageTime(startStation,endStation);\n */",
    "javascript": "\nvar UndergroundSystem = function() {\n    \n};\n\n/** \n * @param {number} id \n * @param {string} stationName \n * @param {number} t\n * @return {void}\n */\nUndergroundSystem.prototype.checkIn = function(id, stationName, t) {\n    \n};\n\n/** \n * @param {number} id \n * @param {string} stationName \n * @param {number} t\n * @return {void}\n */\nUndergroundSystem.prototype.checkOut = function(id, stationName, t) {\n    \n};\n\n/** \n * @param {string} startStation \n * @param {string} endStation\n * @return {number}\n */\nUndergroundSystem.prototype.getAverageTime = function(startStation, endStation) {\n    \n};\n\n/** \n * Your UndergroundSystem object will be instantiated and called as such:\n * var obj = new UndergroundSystem()\n * obj.checkIn(id,stationName,t)\n * obj.checkOut(id,stationName,t)\n * var param_3 = obj.getAverageTime(startStation,endStation)\n */",
    "typescript": "class UndergroundSystem {\n    constructor() {\n        \n    }\n\n    checkIn(id: number, stationName: string, t: number): void {\n        \n    }\n\n    checkOut(id: number, stationName: string, t: number): void {\n        \n    }\n\n    getAverageTime(startStation: string, endStation: string): number {\n        \n    }\n}\n\n/**\n * Your UndergroundSystem object will be instantiated and called as such:\n * var obj = new UndergroundSystem()\n * obj.checkIn(id,stationName,t)\n * obj.checkOut(id,stationName,t)\n * var param_3 = obj.getAverageTime(startStation,endStation)\n */",
    "php": "class UndergroundSystem {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param Integer $id\n     * @param String $stationName\n     * @param Integer $t\n     * @return NULL\n     */\n    function checkIn($id, $stationName, $t) {\n        \n    }\n  \n    /**\n     * @param Integer $id\n     * @param String $stationName\n     * @param Integer $t\n     * @return NULL\n     */\n    function checkOut($id, $stationName, $t) {\n        \n    }\n  \n    /**\n     * @param String $startStation\n     * @param String $endStation\n     * @return Float\n     */\n    function getAverageTime($startStation, $endStation) {\n        \n    }\n}\n\n/**\n * Your UndergroundSystem object will be instantiated and called as such:\n * $obj = UndergroundSystem();\n * $obj->checkIn($id, $stationName, $t);\n * $obj->checkOut($id, $stationName, $t);\n * $ret_3 = $obj->getAverageTime($startStation, $endStation);\n */",
    "swift": "\nclass UndergroundSystem {\n\n    init() {\n        \n    }\n    \n    func checkIn(_ id: Int, _ stationName: String, _ t: Int) {\n        \n    }\n    \n    func checkOut(_ id: Int, _ stationName: String, _ t: Int) {\n        \n    }\n    \n    func getAverageTime(_ startStation: String, _ endStation: String) -> Double {\n        \n    }\n}\n\n/**\n * Your UndergroundSystem object will be instantiated and called as such:\n * let obj = UndergroundSystem()\n * obj.checkIn(id, stationName, t)\n * obj.checkOut(id, stationName, t)\n * let ret_3: Double = obj.getAverageTime(startStation, endStation)\n */",
    "kotlin": "class UndergroundSystem() {\n\n    fun checkIn(id: Int, stationName: String, t: Int) {\n        \n    }\n\n    fun checkOut(id: Int, stationName: String, t: Int) {\n        \n    }\n\n    fun getAverageTime(startStation: String, endStation: String): Double {\n        \n    }\n\n}\n\n/**\n * Your UndergroundSystem object will be instantiated and called as such:\n * var obj = UndergroundSystem()\n * obj.checkIn(id,stationName,t)\n * obj.checkOut(id,stationName,t)\n * var param_3 = obj.getAverageTime(startStation,endStation)\n */",
    "dart": "class UndergroundSystem {\n\n  UndergroundSystem() {\n    \n  }\n  \n  void checkIn(int id, String stationName, int t) {\n    \n  }\n  \n  void checkOut(int id, String stationName, int t) {\n    \n  }\n  \n  double getAverageTime(String startStation, String endStation) {\n    \n  }\n}\n\n/**\n * Your UndergroundSystem object will be instantiated and called as such:\n * UndergroundSystem obj = UndergroundSystem();\n * obj.checkIn(id,stationName,t);\n * obj.checkOut(id,stationName,t);\n * double param3 = obj.getAverageTime(startStation,endStation);\n */",
    "golang": "type UndergroundSystem struct {\n    \n}\n\n\nfunc Constructor() UndergroundSystem {\n    \n}\n\n\nfunc (this *UndergroundSystem) CheckIn(id int, stationName string, t int)  {\n    \n}\n\n\nfunc (this *UndergroundSystem) CheckOut(id int, stationName string, t int)  {\n    \n}\n\n\nfunc (this *UndergroundSystem) GetAverageTime(startStation string, endStation string) float64 {\n    \n}\n\n\n/**\n * Your UndergroundSystem object will be instantiated and called as such:\n * obj := Constructor();\n * obj.CheckIn(id,stationName,t);\n * obj.CheckOut(id,stationName,t);\n * param_3 := obj.GetAverageTime(startStation,endStation);\n */",
    "ruby": "class UndergroundSystem\n    def initialize()\n        \n    end\n\n\n=begin\n    :type id: Integer\n    :type station_name: String\n    :type t: Integer\n    :rtype: Void\n=end\n    def check_in(id, station_name, t)\n        \n    end\n\n\n=begin\n    :type id: Integer\n    :type station_name: String\n    :type t: Integer\n    :rtype: Void\n=end\n    def check_out(id, station_name, t)\n        \n    end\n\n\n=begin\n    :type start_station: String\n    :type end_station: String\n    :rtype: Float\n=end\n    def get_average_time(start_station, end_station)\n        \n    end\n\n\nend\n\n# Your UndergroundSystem object will be instantiated and called as such:\n# obj = UndergroundSystem.new()\n# obj.check_in(id, station_name, t)\n# obj.check_out(id, station_name, t)\n# param_3 = obj.get_average_time(start_station, end_station)",
    "scala": "class UndergroundSystem() {\n\n    def checkIn(id: Int, stationName: String, t: Int): Unit = {\n        \n    }\n\n    def checkOut(id: Int, stationName: String, t: Int): Unit = {\n        \n    }\n\n    def getAverageTime(startStation: String, endStation: String): Double = {\n        \n    }\n\n}\n\n/**\n * Your UndergroundSystem object will be instantiated and called as such:\n * val obj = new UndergroundSystem()\n * obj.checkIn(id,stationName,t)\n * obj.checkOut(id,stationName,t)\n * val param_3 = obj.getAverageTime(startStation,endStation)\n */",
    "rust": "struct UndergroundSystem {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl UndergroundSystem {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn check_in(&self, id: i32, station_name: String, t: i32) {\n        \n    }\n    \n    fn check_out(&self, id: i32, station_name: String, t: i32) {\n        \n    }\n    \n    fn get_average_time(&self, start_station: String, end_station: String) -> f64 {\n        \n    }\n}\n\n/**\n * Your UndergroundSystem object will be instantiated and called as such:\n * let obj = UndergroundSystem::new();\n * obj.check_in(id, stationName, t);\n * obj.check_out(id, stationName, t);\n * let ret_3: f64 = obj.get_average_time(startStation, endStation);\n */",
    "racket": "(define underground-system%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; check-in : exact-integer? string? exact-integer? -> void?\n    (define/public (check-in id station-name t)\n      )\n    ; check-out : exact-integer? string? exact-integer? -> void?\n    (define/public (check-out id station-name t)\n      )\n    ; get-average-time : string? string? -> flonum?\n    (define/public (get-average-time start-station end-station)\n      )))\n\n;; Your underground-system% object will be instantiated and called as such:\n;; (define obj (new underground-system%))\n;; (send obj check-in id station-name t)\n;; (send obj check-out id station-name t)\n;; (define param_3 (send obj get-average-time start-station end-station))",
    "erlang": "-spec underground_system_init_() -> any().\nunderground_system_init_() ->\n  .\n\n-spec underground_system_check_in(Id :: integer(), StationName :: unicode:unicode_binary(), T :: integer()) -> any().\nunderground_system_check_in(Id, StationName, T) ->\n  .\n\n-spec underground_system_check_out(Id :: integer(), StationName :: unicode:unicode_binary(), T :: integer()) -> any().\nunderground_system_check_out(Id, StationName, T) ->\n  .\n\n-spec underground_system_get_average_time(StartStation :: unicode:unicode_binary(), EndStation :: unicode:unicode_binary()) -> float().\nunderground_system_get_average_time(StartStation, EndStation) ->\n  .\n\n\n%% Your functions will be called as such:\n%% underground_system_init_(),\n%% underground_system_check_in(Id, StationName, T),\n%% underground_system_check_out(Id, StationName, T),\n%% Param_3 = underground_system_get_average_time(StartStation, EndStation),\n\n%% underground_system_init_ will be called before every test case, in which you can do some necessary initializations.",
    "elixir": "defmodule UndergroundSystem do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec check_in(id :: integer, station_name :: String.t, t :: integer) :: any\n  def check_in(id, station_name, t) do\n    \n  end\n\n  @spec check_out(id :: integer, station_name :: String.t, t :: integer) :: any\n  def check_out(id, station_name, t) do\n    \n  end\n\n  @spec get_average_time(start_station :: String.t, end_station :: String.t) :: float\n  def get_average_time(start_station, end_station) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# UndergroundSystem.init_()\n# UndergroundSystem.check_in(id, station_name, t)\n# UndergroundSystem.check_out(id, station_name, t)\n# param_3 = UndergroundSystem.get_average_time(start_station, end_station)\n\n# UndergroundSystem.init_ will be called before every test case, in which you can do some necessary initializations."
  }
}
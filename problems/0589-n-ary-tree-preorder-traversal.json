{
  "title": "N-ary Tree Preorder Traversal",
  "problem_id": "775",
  "frontend_id": "589",
  "difficulty": "Easy",
  "problem_slug": "n-ary-tree-preorder-traversal",
  "topics": [
    "Stack",
    "Tree",
    "Depth-First Search"
  ],
  "description": "Given the root of an n-ary tree, return the preorder traversal of its nodes' values.\nNary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)\nExample 1:\nExample 2:\nConstraints:\nFollow up: Recursive solution is trivial, could you do it iteratively?",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: root = [1,null,3,2,4,null,5,6]\nOutput: [1,3,5,6,2,4]",
      "images": [
        "https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: [1,2,3,6,7,11,14,4,8,12,5,9,13,10]",
      "images": [
        "https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png"
      ]
    }
  ],
  "constraints": [
    "The number of nodes in the tree is in the range [0, 104].",
    "0 <= Node.val <= 104",
    "The height of the n-ary tree is less than or equal to 1000."
  ],
  "follow_ups": [
    "Recursive solution is trivial, could you do it iteratively?"
  ],
  "hints": [],
  "code_snippets": {
    "cpp": "/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> children;\n\n    Node() {}\n\n    Node(int _val) {\n        val = _val;\n    }\n\n    Node(int _val, vector<Node*> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    vector<int> preorder(Node* root) {\n        \n    }\n};",
    "java": "/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> children;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, List<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\n    public List<Integer> preorder(Node root) {\n        \n    }\n}",
    "python": "\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\n\nclass Solution(object):\n    def preorder(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val: Optional[int] = None, children: Optional[List['Node']] = None):\n        self.val = val\n        self.children = children\n\"\"\"\n\nclass Solution:\n    def preorder(self, root: 'Node') -> List[int]:\n        ",
    "c": "/**\n * Definition for a Node.\n * struct Node {\n *     int val;\n *     int numChildren;\n *     struct Node** children;\n * };\n */\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* preorder(struct Node* root, int* returnSize) {\n    \n}",
    "csharp": "/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public IList<Node> children;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val,IList<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n}\n*/\n\npublic class Solution {\n    public IList<int> Preorder(Node root) {\n        \n    }\n}",
    "javascript": "/**\n * // Definition for a _Node.\n * function _Node(val, children) {\n *    this.val = val;\n *    this.children = children;\n * };\n */\n\n/**\n * @param {_Node|null} root\n * @return {number[]}\n */\nvar preorder = function(root) {\n    \n};",
    "typescript": "/**\n * Definition for _Node.\n * class _Node {\n *     val: number\n *     children: _Node[]\n * \n *     constructor(val?: number, children?: _Node[]) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.children = (children===undefined ? [] : children)\n *     }\n * }\n */\n\n\nfunction preorder(root: _Node | null): number[] {\n\n};",
    "php": "/**\n * Definition for a Node.\n * class Node {\n *     public $val = null;\n *     public $children = null;\n *     function __construct($val = 0) {\n *         $this->val = $val;\n *         $this->children = array();\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Node $root\n     * @return integer[]\n     */\n    function preorder($root) {\n        \n    }\n}",
    "swift": "/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Int\n *     public var children: [Node]\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.children = []\n *     }\n * }\n */\n\nclass Solution {\n    func preorder(_ root: Node?) -> [Int] {\n    \t\n    }\n}",
    "kotlin": "/**\n * Definition for a Node.\n * class Node(var `val`: Int) {\n *     var children: List<Node?> = listOf()\n * }\n */\n\nclass Solution {\n    fun preorder(root: Node?): List<Int> {\n        \n    }\n}",
    "golang": "/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Children []*Node\n * }\n */\n\nfunc preorder(root *Node) []int {\n    \n}",
    "ruby": "# Definition for a Node.\n# class Node\n#     attr_accessor :val, :children\n#     def initialize(val)\n#         @val = val\n#         @children = []\n#     end\n# end\n\n# @param {Node} root\n# @return {List[int]}\ndef preorder(root)\n    \nend",
    "scala": "/**\n * Definition for a Node.\n * class Node(var _value: Int) {\n *   var value: Int = _value\n *   var children: List[Node] = List()\n * }\n */\n\nobject Solution {\n    def preorder(root: Node): List[Int] = {\n        \n    }\n}"
  }
}
{
  "title": "Length of the Longest Alphabetical Continuous Substring",
  "problem_id": "2492",
  "frontend_id": "2414",
  "difficulty": "Medium",
  "problem_slug": "length-of-the-longest-alphabetical-continuous-substring",
  "topics": [
    "String"
  ],
  "description": "An alphabetical continuous string is a string consisting of consecutive letters in the alphabet. In other words, it is any substring of the string \"abcdefghijklmnopqrstuvwxyz\".\nGiven a string s consisting of lowercase letters only, return the length of the longest alphabetical continuous substring.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"abacaba\"\nOutput: 2\nExplanation: There are 4 distinct continuous substrings: \"a\", \"b\", \"c\" and \"ab\".\n\"ab\" is the longest continuous substring.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"abcde\"\nOutput: 5\nExplanation: \"abcde\" is the longest continuous substring.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 105",
    "s consists of only English lowercase letters."
  ],
  "follow_ups": [],
  "hints": [
    "What is the longest possible continuous substring?",
    "The size of the longest possible continuous substring is at most 26, so we can just brute force the answer."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int longestContinuousSubstring(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public int longestContinuousSubstring(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def longestContinuousSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def longestContinuousSubstring(self, s: str) -> int:\n        ",
    "c": "int longestContinuousSubstring(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public int LongestContinuousSubstring(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {number}\n */\nvar longestContinuousSubstring = function(s) {\n    \n};",
    "typescript": "function longestContinuousSubstring(s: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function longestContinuousSubstring($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func longestContinuousSubstring(_ s: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun longestContinuousSubstring(s: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int longestContinuousSubstring(String s) {\n    \n  }\n}",
    "golang": "func longestContinuousSubstring(s string) int {\n    \n}",
    "ruby": "# @param {String} s\n# @return {Integer}\ndef longest_continuous_substring(s)\n    \nend",
    "scala": "object Solution {\n    def longestContinuousSubstring(s: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn longest_continuous_substring(s: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (longest-continuous-substring s)\n  (-> string? exact-integer?)\n  )",
    "erlang": "-spec longest_continuous_substring(S :: unicode:unicode_binary()) -> integer().\nlongest_continuous_substring(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec longest_continuous_substring(s :: String.t) :: integer\n  def longest_continuous_substring(s) do\n    \n  end\nend"
  }
}
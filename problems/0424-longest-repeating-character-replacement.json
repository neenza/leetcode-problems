{
  "title": "Longest Repeating Character Replacement",
  "problem_id": "424",
  "frontend_id": "424",
  "difficulty": "Medium",
  "problem_slug": "longest-repeating-character-replacement",
  "topics": [
    "Hash Table",
    "String",
    "Sliding Window"
  ],
  "description": "You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.\nReturn the length of the longest substring containing the same letter you can get after performing the above operations.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"ABAB\", k = 2\nOutput: 4\nExplanation: Replace the two 'A's with two 'B's or vice versa.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"AABABBA\", k = 1\nOutput: 4\nExplanation: Replace the one 'A' in the middle with 'B' and form \"AABBBBA\".\nThe substring \"BBBB\" has the longest repeating letters, which is 4.\nThere may exists other ways to achieve this answer too.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 105",
    "s consists of only uppercase English letters.",
    "0 <= k <= s.length"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int characterReplacement(string s, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int characterReplacement(String s, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def characterReplacement(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def characterReplacement(self, s: str, k: int) -> int:\n        ",
    "c": "int characterReplacement(char* s, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int CharacterReplacement(string s, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar characterReplacement = function(s, k) {\n    \n};",
    "typescript": "function characterReplacement(s: string, k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function characterReplacement($s, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func characterReplacement(_ s: String, _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun characterReplacement(s: String, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int characterReplacement(String s, int k) {\n    \n  }\n}",
    "golang": "func characterReplacement(s string, k int) int {\n    \n}",
    "ruby": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef character_replacement(s, k)\n    \nend",
    "scala": "object Solution {\n    def characterReplacement(s: String, k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn character_replacement(s: String, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (character-replacement s k)\n  (-> string? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec character_replacement(S :: unicode:unicode_binary(), K :: integer()) -> integer().\ncharacter_replacement(S, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec character_replacement(s :: String.t, k :: integer) :: integer\n  def character_replacement(s, k) do\n    \n  end\nend"
  }
}
{
  "title": "Maximum Frequency of an Element After Performing Operations I",
  "problem_id": "3622",
  "frontend_id": "3346",
  "difficulty": "Medium",
  "problem_slug": "maximum-frequency-of-an-element-after-performing-operations-i",
  "topics": [
    "Array",
    "Binary Search",
    "Sliding Window",
    "Sorting",
    "Prefix Sum"
  ],
  "description": "You are given an integer array nums and two integers k and numOperations.\nYou must perform an operation numOperations times on nums, where in each operation you:\nReturn the maximum possible frequency of any element in nums after performing the operations.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,4,5], k = 1, numOperations = 2\nOutput: 2\nExplanation:\nWe can achieve a maximum frequency of two by:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [5,11,20,20], k = 5, numOperations = 1\nOutput: 2\nExplanation:\nWe can achieve a maximum frequency of two by:",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "1 <= nums[i] <= 105",
    "0 <= k <= 105",
    "0 <= numOperations <= nums.length"
  ],
  "follow_ups": [],
  "hints": [
    "Sort the array and try each value in range as a candidate."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxFrequency(vector<int>& nums, int k, int numOperations) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxFrequency(int[] nums, int k, int numOperations) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxFrequency(self, nums, k, numOperations):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :type numOperations: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxFrequency(self, nums: List[int], k: int, numOperations: int) -> int:\n        ",
    "c": "int maxFrequency(int* nums, int numsSize, int k, int numOperations) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxFrequency(int[] nums, int k, int numOperations) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @param {number} numOperations\n * @return {number}\n */\nvar maxFrequency = function(nums, k, numOperations) {\n    \n};",
    "typescript": "function maxFrequency(nums: number[], k: number, numOperations: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @param Integer $numOperations\n     * @return Integer\n     */\n    function maxFrequency($nums, $k, $numOperations) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxFrequency(_ nums: [Int], _ k: Int, _ numOperations: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxFrequency(nums: IntArray, k: Int, numOperations: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxFrequency(List<int> nums, int k, int numOperations) {\n    \n  }\n}",
    "golang": "func maxFrequency(nums []int, k int, numOperations int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @param {Integer} num_operations\n# @return {Integer}\ndef max_frequency(nums, k, num_operations)\n    \nend",
    "scala": "object Solution {\n    def maxFrequency(nums: Array[Int], k: Int, numOperations: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_frequency(nums: Vec<i32>, k: i32, num_operations: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-frequency nums k numOperations)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec max_frequency(Nums :: [integer()], K :: integer(), NumOperations :: integer()) -> integer().\nmax_frequency(Nums, K, NumOperations) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_frequency(nums :: [integer], k :: integer, num_operations :: integer) :: integer\n  def max_frequency(nums, k, num_operations) do\n    \n  end\nend"
  }
}
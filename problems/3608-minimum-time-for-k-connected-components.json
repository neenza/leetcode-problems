{
  "title": "Minimum Time for K Connected Components",
  "problem_id": "3908",
  "frontend_id": "3608",
  "difficulty": "Medium",
  "problem_slug": "minimum-time-for-k-connected-components",
  "topics": [
    "Binary Search",
    "Union Find",
    "Graph",
    "Sorting"
  ],
  "description": "You are given an integer n and an undirected graph with n nodes labeled from 0 to n - 1. This is represented by a 2D array edges, where edges[i] = [ui, vi, timei] indicates an undirected edge between nodes ui and vi that can be removed at timei.\nYou are also given an integer k.\nInitially, the graph may be connected or disconnected. Your task is to find the minimum time t such that after removing all edges with time <= t, the graph contains at least k connected components.\nReturn the minimum time t.\nA connected component is a subgraph of a graph in which there exists a path between any two vertices, and no vertex of the subgraph shares an edge with a vertex outside of the subgraph.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 2, edges = [[0,1,3]], k = 2\nOutput: 3\nExplanation:\n",
      "images": [
        "https://assets.leetcode.com/uploads/2025/05/31/screenshot-2025-06-01-at-022724.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 3, edges = [[0,1,2],[1,2,4]], k = 3\nOutput: 4\nExplanation:\n",
      "images": [
        "https://assets.leetcode.com/uploads/2025/05/31/screenshot-2025-06-01-at-022812.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 3, edges = [[0,2,5]], k = 2\nOutput: 0\nExplanation:\n",
      "images": [
        "https://assets.leetcode.com/uploads/2025/05/31/screenshot-2025-06-01-at-022930.png"
      ]
    }
  ],
  "constraints": [
    "1 <= n <= 105",
    "0 <= edges.length <= 105",
    "edges[i] = [ui, vi, timei]",
    "0 <= ui, vi < n",
    "ui != vi",
    "1 <= timei <= 109",
    "1 <= k <= n",
    "There are no duplicate edges."
  ],
  "follow_ups": [],
  "hints": [
    "Binary-search the smallest <code>t</code> such that, after removing all edges with <code>time <= t</code>, the graph splits into >= <code>k</code> connected components."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minTime(int n, vector<vector<int>>& edges, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minTime(int n, int[][] edges, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minTime(self, n, edges, k):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minTime(self, n: int, edges: List[List[int]], k: int) -> int:\n        ",
    "c": "int minTime(int n, int** edges, int edgesSize, int* edgesColSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinTime(int n, int[][] edges, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number[][]} edges\n * @param {number} k\n * @return {number}\n */\nvar minTime = function(n, edges, k) {\n    \n};",
    "typescript": "function minTime(n: number, edges: number[][], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $edges\n     * @param Integer $k\n     * @return Integer\n     */\n    function minTime($n, $edges, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minTime(_ n: Int, _ edges: [[Int]], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minTime(n: Int, edges: Array<IntArray>, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minTime(int n, List<List<int>> edges, int k) {\n    \n  }\n}",
    "golang": "func minTime(n int, edges [][]int, k int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer[][]} edges\n# @param {Integer} k\n# @return {Integer}\ndef min_time(n, edges, k)\n    \nend",
    "scala": "object Solution {\n    def minTime(n: Int, edges: Array[Array[Int]], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_time(n: i32, edges: Vec<Vec<i32>>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-time n edges k)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec min_time(N :: integer(), Edges :: [[integer()]], K :: integer()) -> integer().\nmin_time(N, Edges, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_time(n :: integer, edges :: [[integer]], k :: integer) :: integer\n  def min_time(n, edges, k) do\n    \n  end\nend"
  }
}
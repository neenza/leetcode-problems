{
  "title": "Greatest Sum Divisible by Three",
  "problem_id": "1388",
  "frontend_id": "1262",
  "difficulty": "Medium",
  "problem_slug": "greatest-sum-divisible-by-three",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Greedy",
    "Sorting"
  ],
  "description": "Given an integer array nums, return the maximum possible sum of elements of the array such that it is divisible by three.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [3,6,5,1,8]\nOutput: 18\nExplanation: Pick numbers 3, 6, 1 and 8 their sum is 18 (maximum sum divisible by 3).",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [4]\nOutput: 0\nExplanation: Since 4 is not divisible by 3, do not pick any number.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,2,3,4,4]\nOutput: 12\nExplanation: Pick numbers 1, 3, 4 and 4 their sum is 12 (maximum sum divisible by 3).",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 4 * 104",
    "1 <= nums[i] <= 104"
  ],
  "follow_ups": [],
  "hints": [
    "Represent the state as DP[pos][mod]: maximum possible sum starting in the position \"pos\" in the array where the current sum modulo 3 is equal to mod."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxSumDivThree(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxSumDivThree(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxSumDivThree(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxSumDivThree(self, nums: List[int]) -> int:\n        ",
    "c": "int maxSumDivThree(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxSumDivThree(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSumDivThree = function(nums) {\n    \n};",
    "typescript": "function maxSumDivThree(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxSumDivThree($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxSumDivThree(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxSumDivThree(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxSumDivThree(List<int> nums) {\n    \n  }\n}",
    "golang": "func maxSumDivThree(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_sum_div_three(nums)\n    \nend",
    "scala": "object Solution {\n    def maxSumDivThree(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_sum_div_three(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-sum-div-three nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec max_sum_div_three(Nums :: [integer()]) -> integer().\nmax_sum_div_three(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_sum_div_three(nums :: [integer]) :: integer\n  def max_sum_div_three(nums) do\n    \n  end\nend"
  }
}
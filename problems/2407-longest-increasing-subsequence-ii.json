{
  "title": "Longest Increasing Subsequence II",
  "problem_id": "2526",
  "frontend_id": "2407",
  "difficulty": "Hard",
  "problem_slug": "longest-increasing-subsequence-ii",
  "topics": [
    "Array",
    "Divide and Conquer",
    "Dynamic Programming",
    "Binary Indexed Tree",
    "Segment Tree",
    "Queue",
    "Monotonic Queue"
  ],
  "description": "You are given an integer array nums and an integer k.\nFind the longest subsequence of nums that meets the following requirements:\nReturn the length of the longest subsequence that meets the requirements.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [4,2,1,4,3,4,5,8,15], k = 3\nOutput: 5\nExplanation:\nThe longest subsequence that meets the requirements is [1,3,4,5,8].\nThe subsequence has a length of 5, so we return 5.\nNote that the subsequence [1,3,4,5,8,15] does not meet the requirements because 15 - 8 = 7 is larger than 3.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [7,4,5,1,8,12,4,7], k = 5\nOutput: 4\nExplanation:\nThe longest subsequence that meets the requirements is [4,5,8,12].\nThe subsequence has a length of 4, so we return 4.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,5], k = 1\nOutput: 1\nExplanation:\nThe longest subsequence that meets the requirements is [1].\nThe subsequence has a length of 1, so we return 1.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "1 <= nums[i], k <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "We can use dynamic programming. Let dp[i][val] be the answer using only the first i + 1 elements, and the last element in the subsequence is equal to val.",
    "The only value that might change between dp[i - 1] and dp[i] are dp[i - 1][val] and dp[i][val].",
    "Try using dp[i - 1] and the fact that the second last element in the subsequence has to fall within a range to calculate dp[i][val].",
    "We can use a segment tree to find the maximum value in dp[i - 1] within a certain range."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int lengthOfLIS(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int lengthOfLIS(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def lengthOfLIS(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def lengthOfLIS(self, nums: List[int], k: int) -> int:\n        ",
    "c": "int lengthOfLIS(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int LengthOfLIS(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar lengthOfLIS = function(nums, k) {\n    \n};",
    "typescript": "function lengthOfLIS(nums: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function lengthOfLIS($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func lengthOfLIS(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun lengthOfLIS(nums: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int lengthOfLIS(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func lengthOfLIS(nums []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef length_of_lis(nums, k)\n    \nend",
    "scala": "object Solution {\n    def lengthOfLIS(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn length_of_lis(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (length-of-lis nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec length_of_lis(Nums :: [integer()], K :: integer()) -> integer().\nlength_of_lis(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec length_of_lis(nums :: [integer], k :: integer) :: integer\n  def length_of_lis(nums, k) do\n    \n  end\nend"
  }
}
{
  "title": "Surrounded Regions",
  "problem_id": "130",
  "frontend_id": "130",
  "difficulty": "Medium",
  "problem_slug": "surrounded-regions",
  "topics": [
    "Array",
    "Depth-First Search",
    "Breadth-First Search",
    "Union Find",
    "Matrix"
  ],
  "description": "You are given an m x n matrix board containing letters 'X' and 'O', capture regions that are surrounded:\nTo capture a surrounded region, replace all 'O's with 'X's in-place within the original board. You do not need to return anything.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\nOutput: [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\nExplanation:\nIn the above diagram, the bottom region is not captured because it is on the edge of the board and cannot be surrounded.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/02/19/xogrid.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: board = [[\"X\"]]\nOutput: [[\"X\"]]",
      "images": []
    }
  ],
  "constraints": [
    "m == board.length",
    "n == board[i].length",
    "1 <= m, n <= 200",
    "board[i][j] is 'X' or 'O'."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    void solve(vector<vector<char>>& board) {\n        \n    }\n};",
    "java": "class Solution {\n    public void solve(char[][] board) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        ",
    "c": "void solve(char** board, int boardSize, int* boardColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public void Solve(char[][] board) {\n        \n    }\n}",
    "javascript": "/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nvar solve = function(board) {\n    \n};",
    "typescript": "/**\n Do not return anything, modify board in-place instead.\n */\nfunction solve(board: string[][]): void {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String[][] $board\n     * @return NULL\n     */\n    function solve(&$board) {\n        \n    }\n}",
    "swift": "class Solution {\n    func solve(_ board: inout [[Character]]) {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun solve(board: Array<CharArray>): Unit {\n        \n    }\n}",
    "dart": "class Solution {\n  void solve(List<List<String>> board) {\n    \n  }\n}",
    "golang": "func solve(board [][]byte)  {\n    \n}",
    "ruby": "# @param {Character[][]} board\n# @return {Void} Do not return anything, modify board in-place instead.\ndef solve(board)\n    \nend",
    "scala": "object Solution {\n    def solve(board: Array[Array[Char]]): Unit = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn solve(board: &mut Vec<Vec<char>>) {\n        \n    }\n}"
  }
}
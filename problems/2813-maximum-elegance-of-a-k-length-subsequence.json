{
  "title": "Maximum Elegance of a K-Length Subsequence",
  "problem_id": "2894",
  "frontend_id": "2813",
  "difficulty": "Hard",
  "problem_slug": "maximum-elegance-of-a-k-length-subsequence",
  "topics": [
    "Array",
    "Hash Table",
    "Stack",
    "Greedy",
    "Sorting",
    "Heap (Priority Queue)"
  ],
  "description": "You are given a 0-indexed 2D integer array items of length n and an integer k.\nitems[i] = [profiti, categoryi], where profiti and categoryi denote the profit and category of the ith item respectively.\nLet's define the elegance of a subsequence of items as total_profit + distinct_categories2, where total_profit is the sum of all profits in the subsequence, and distinct_categories is the number of distinct categories from all the categories in the selected subsequence.\nYour task is to find the maximum elegance from all subsequences of size k in items.\nReturn an integer denoting the maximum elegance of a subsequence of items with size exactly k.\nNote: A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: items = [[3,2],[5,1],[10,1]], k = 2\nOutput: 17\nExplanation: In this example, we have to select a subsequence of size 2.\nWe can select items[0] = [3,2] and items[2] = [10,1].\nThe total profit in this subsequence is 3 + 10 = 13, and the subsequence contains 2 distinct categories [2,1].\nHence, the elegance is 13 + 22 = 17, and we can show that it is the maximum achievable elegance.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: items = [[3,1],[3,1],[2,2],[5,3]], k = 3\nOutput: 19\nExplanation: In this example, we have to select a subsequence of size 3. \nWe can select items[0] = [3,1], items[2] = [2,2], and items[3] = [5,3]. \nThe total profit in this subsequence is 3 + 2 + 5 = 10, and the subsequence contains 3 distinct categories [1,2,3]. \nHence, the elegance is 10 + 32 = 19, and we can show that it is the maximum achievable elegance.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: items = [[1,1],[2,1],[3,1]], k = 3\nOutput: 7\nExplanation: In this example, we have to select a subsequence of size 3. \nWe should select all the items. \nThe total profit will be 1 + 2 + 3 = 6, and the subsequence contains 1 distinct category [1]. \nHence, the maximum elegance is 6 + 12 = 7.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= items.length == n <= 105",
    "items[i].length == 2",
    "items[i][0] == profiti",
    "items[i][1] == categoryi",
    "1 <= profiti <= 109",
    "1 <= categoryi <= n",
    "1 <= k <= n"
  ],
  "follow_ups": [],
  "hints": [
    "<div class=\"_1l1MA\">Greedy algorithm.</div>",
    "<div class=\"_1l1MA\">Sort items in non-increasing order of profits.</div>",
    "<div class=\"_1l1MA\">Select the first <code>k</code> items (the top <code>k</code> most profitable items). Keep track of the items as the candidate set.</div>",
    "<div class=\"_1l1MA\">For the remaining <code>n - k</code> items sorted in non-increasing order of profits, try replacing an item in the candidate set using the current item.</div>",
    "<div class=\"_1l1MA\">The replacing item should add a new category to the candidate set and should remove the item with the minimum profit that occurs more than once in the candidate set.</div>"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long findMaximumElegance(vector<vector<int>>& items, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public long findMaximumElegance(int[][] items, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findMaximumElegance(self, items, k):\n        \"\"\"\n        :type items: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findMaximumElegance(self, items: List[List[int]], k: int) -> int:\n        ",
    "c": "long long findMaximumElegance(int** items, int itemsSize, int* itemsColSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public long FindMaximumElegance(int[][] items, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} items\n * @param {number} k\n * @return {number}\n */\nvar findMaximumElegance = function(items, k) {\n    \n};",
    "typescript": "function findMaximumElegance(items: number[][], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $items\n     * @param Integer $k\n     * @return Integer\n     */\n    function findMaximumElegance($items, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findMaximumElegance(_ items: [[Int]], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findMaximumElegance(items: Array<IntArray>, k: Int): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int findMaximumElegance(List<List<int>> items, int k) {\n    \n  }\n}",
    "golang": "func findMaximumElegance(items [][]int, k int) int64 {\n    \n}",
    "ruby": "# @param {Integer[][]} items\n# @param {Integer} k\n# @return {Integer}\ndef find_maximum_elegance(items, k)\n    \nend",
    "scala": "object Solution {\n    def findMaximumElegance(items: Array[Array[Int]], k: Int): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_maximum_elegance(items: Vec<Vec<i32>>, k: i32) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (find-maximum-elegance items k)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec find_maximum_elegance(Items :: [[integer()]], K :: integer()) -> integer().\nfind_maximum_elegance(Items, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_maximum_elegance(items :: [[integer]], k :: integer) :: integer\n  def find_maximum_elegance(items, k) do\n    \n  end\nend"
  }
}
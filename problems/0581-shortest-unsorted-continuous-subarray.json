{
  "title": "Shortest Unsorted Continuous Subarray",
  "problem_id": "581",
  "frontend_id": "581",
  "difficulty": "Medium",
  "problem_slug": "shortest-unsorted-continuous-subarray",
  "topics": [
    "Array",
    "Two Pointers",
    "Stack",
    "Greedy",
    "Sorting",
    "Monotonic Stack"
  ],
  "description": "Given an integer array nums, you need to find one continuous subarray such that if you only sort this subarray in non-decreasing order, then the whole array will be sorted in non-decreasing order.\nReturn the shortest such subarray and output its length.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [2,6,4,8,10,9,15]\nOutput: 5\nExplanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,2,3,4]\nOutput: 0",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1]\nOutput: 0",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 104",
    "-105 <= nums[i] <= 105"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int findUnsortedSubarray(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int findUnsortedSubarray(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def findUnsortedSubarray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def findUnsortedSubarray(self, nums: List[int]) -> int:\n        ",
    "c": "int findUnsortedSubarray(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int FindUnsortedSubarray(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUnsortedSubarray = function(nums) {\n    \n};",
    "typescript": "function findUnsortedSubarray(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findUnsortedSubarray($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func findUnsortedSubarray(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun findUnsortedSubarray(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int findUnsortedSubarray(List<int> nums) {\n    \n  }\n}",
    "golang": "func findUnsortedSubarray(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef find_unsorted_subarray(nums)\n    \nend",
    "scala": "object Solution {\n    def findUnsortedSubarray(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn find_unsorted_subarray(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (find-unsorted-subarray nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec find_unsorted_subarray(Nums :: [integer()]) -> integer().\nfind_unsorted_subarray(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec find_unsorted_subarray(nums :: [integer]) :: integer\n  def find_unsorted_subarray(nums) do\n    \n  end\nend"
  }
}
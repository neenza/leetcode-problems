{
  "title": "Find the Key of the Numbers",
  "problem_id": "3568",
  "frontend_id": "3270",
  "difficulty": "Easy",
  "problem_slug": "find-the-key-of-the-numbers",
  "topics": [
    "Math"
  ],
  "description": "You are given three positive integers num1, num2, and num3.\nThe key of num1, num2, and num3 is defined as a four-digit number such that:\nReturn the key of the three numbers without leading zeros (if any).\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: num1 = 1, num2 = 10, num3 = 1000\nOutput: 0\nExplanation:\nOn padding, num1 becomes \"0001\" , num2 becomes \"0010\" , and num3 remains \"1000\" .\nHence, the key is \"0000\" , i.e. 0.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: num1 = 987, num2 = 879, num3 = 798\nOutput: 777",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: num1 = 1, num2 = 2, num3 = 3\nOutput: 1",
      "images": []
    }
  ],
  "constraints": [
    "1 <= num1, num2, num3 <= 9999"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int generateKey(int num1, int num2, int num3) {\n        \n    }\n};",
    "java": "class Solution {\n    public int generateKey(int num1, int num2, int num3) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def generateKey(self, num1, num2, num3):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :type num3: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        ",
    "c": "int generateKey(int num1, int num2, int num3) {\n    \n}",
    "csharp": "public class Solution {\n    public int GenerateKey(int num1, int num2, int num3) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} num1\n * @param {number} num2\n * @param {number} num3\n * @return {number}\n */\nvar generateKey = function(num1, num2, num3) {\n    \n};",
    "typescript": "function generateKey(num1: number, num2: number, num3: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $num1\n     * @param Integer $num2\n     * @param Integer $num3\n     * @return Integer\n     */\n    function generateKey($num1, $num2, $num3) {\n        \n    }\n}",
    "swift": "class Solution {\n    func generateKey(_ num1: Int, _ num2: Int, _ num3: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun generateKey(num1: Int, num2: Int, num3: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int generateKey(int num1, int num2, int num3) {\n    \n  }\n}",
    "golang": "func generateKey(num1 int, num2 int, num3 int) int {\n    \n}",
    "ruby": "# @param {Integer} num1\n# @param {Integer} num2\n# @param {Integer} num3\n# @return {Integer}\ndef generate_key(num1, num2, num3)\n    \nend",
    "scala": "object Solution {\n    def generateKey(num1: Int, num2: Int, num3: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn generate_key(num1: i32, num2: i32, num3: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (generate-key num1 num2 num3)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec generate_key(Num1 :: integer(), Num2 :: integer(), Num3 :: integer()) -> integer().\ngenerate_key(Num1, Num2, Num3) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec generate_key(num1 :: integer, num2 :: integer, num3 :: integer) :: integer\n  def generate_key(num1, num2, num3) do\n    \n  end\nend"
  }
}
{
  "title": "Minimum Interval to Include Each Query",
  "problem_id": "1977",
  "frontend_id": "1851",
  "difficulty": "Hard",
  "problem_slug": "minimum-interval-to-include-each-query",
  "topics": [
    "Array",
    "Binary Search",
    "Line Sweep",
    "Sorting",
    "Heap (Priority Queue)"
  ],
  "description": "You are given a 2D integer array intervals, where intervals[i] = [lefti, righti] describes the ith interval starting at lefti and ending at righti (inclusive). The size of an interval is defined as the number of integers it contains, or more formally righti - lefti + 1.\nYou are also given an integer array queries. The answer to the jth query is the size of the smallest interval i such that lefti <= queries[j] <= righti. If no such interval exists, the answer is -1.\nReturn an array containing the answers to the queries.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: intervals = [[1,4],[2,4],[3,6],[4,4]], queries = [2,3,4,5]\nOutput: [3,3,1,4]\nExplanation: The queries are processed as follows:\n- Query = 2: The interval [2,4] is the smallest interval containing 2. The answer is 4 - 2 + 1 = 3.\n- Query = 3: The interval [2,4] is the smallest interval containing 3. The answer is 4 - 2 + 1 = 3.\n- Query = 4: The interval [4,4] is the smallest interval containing 4. The answer is 4 - 4 + 1 = 1.\n- Query = 5: The interval [3,6] is the smallest interval containing 5. The answer is 6 - 3 + 1 = 4.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: intervals = [[2,3],[2,5],[1,8],[20,25]], queries = [2,19,5,22]\nOutput: [2,-1,4,6]\nExplanation: The queries are processed as follows:\n- Query = 2: The interval [2,3] is the smallest interval containing 2. The answer is 3 - 2 + 1 = 2.\n- Query = 19: None of the intervals contain 19. The answer is -1.\n- Query = 5: The interval [2,5] is the smallest interval containing 5. The answer is 5 - 2 + 1 = 4.\n- Query = 22: The interval [20,25] is the smallest interval containing 22. The answer is 25 - 20 + 1 = 6.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= intervals.length <= 105",
    "1 <= queries.length <= 105",
    "intervals[i].length == 2",
    "1 <= lefti <= righti <= 107",
    "1 <= queries[j] <= 107"
  ],
  "follow_ups": [],
  "hints": [
    "Is there a way to order the intervals and queries such that it takes less time to query?",
    "Is there a way to add and remove intervals by going from the smallest query to the largest query to find the minimum size?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> minInterval(vector<vector<int>>& intervals, vector<int>& queries) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] minInterval(int[][] intervals, int[] queries) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minInterval(self, intervals, queries):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type queries: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minInterval(self, intervals: List[List[int]], queries: List[int]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* minInterval(int** intervals, int intervalsSize, int* intervalsColSize, int* queries, int queriesSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] MinInterval(int[][] intervals, int[] queries) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} intervals\n * @param {number[]} queries\n * @return {number[]}\n */\nvar minInterval = function(intervals, queries) {\n    \n};",
    "typescript": "function minInterval(intervals: number[][], queries: number[]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $intervals\n     * @param Integer[] $queries\n     * @return Integer[]\n     */\n    function minInterval($intervals, $queries) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minInterval(_ intervals: [[Int]], _ queries: [Int]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minInterval(intervals: Array<IntArray>, queries: IntArray): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> minInterval(List<List<int>> intervals, List<int> queries) {\n    \n  }\n}",
    "golang": "func minInterval(intervals [][]int, queries []int) []int {\n    \n}",
    "ruby": "# @param {Integer[][]} intervals\n# @param {Integer[]} queries\n# @return {Integer[]}\ndef min_interval(intervals, queries)\n    \nend",
    "scala": "object Solution {\n    def minInterval(intervals: Array[Array[Int]], queries: Array[Int]): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_interval(intervals: Vec<Vec<i32>>, queries: Vec<i32>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (min-interval intervals queries)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?) (listof exact-integer?))\n  )",
    "erlang": "-spec min_interval(Intervals :: [[integer()]], Queries :: [integer()]) -> [integer()].\nmin_interval(Intervals, Queries) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_interval(intervals :: [[integer]], queries :: [integer]) :: [integer]\n  def min_interval(intervals, queries) do\n    \n  end\nend"
  }
}
{
  "title": "Minimum Adjacent Swaps for K Consecutive Ones",
  "problem_id": "1805",
  "frontend_id": "1703",
  "difficulty": "Hard",
  "problem_slug": "minimum-adjacent-swaps-for-k-consecutive-ones",
  "topics": [
    "Array",
    "Greedy",
    "Sliding Window",
    "Prefix Sum"
  ],
  "description": "You are given an integer array, nums, and an integer k. nums comprises of only 0's and 1's. In one move, you can choose two adjacent indices and swap their values.\nReturn the minimum number of moves required so that nums has k consecutive 1's.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,0,0,1,0,1], k = 2\nOutput: 1\nExplanation: In 1 move, nums could be [1,0,0,0,1,1] and have 2 consecutive 1's.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,0,0,0,0,0,1,1], k = 3\nOutput: 5\nExplanation: In 5 moves, the leftmost 1 can be shifted right until nums = [0,0,0,0,0,1,1,1].",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1,1,0,1], k = 2\nOutput: 0\nExplanation: nums already has 2 consecutive 1's.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "nums[i] is 0 or 1.",
    "1 <= k <= sum(nums)"
  ],
  "follow_ups": [],
  "hints": [
    "Choose k 1s and determine how many steps are required to move them into 1 group.",
    "Maintain a sliding window of k 1s, and maintain the steps required to group them.",
    "When you slide the window across, should you move the group to the right? Once you move the group to the right, it will never need to slide to the left again."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minMoves(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minMoves(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minMoves(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minMoves(self, nums: List[int], k: int) -> int:\n        ",
    "c": "int minMoves(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinMoves(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minMoves = function(nums, k) {\n    \n};",
    "typescript": "function minMoves(nums: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minMoves($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minMoves(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minMoves(nums: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minMoves(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func minMoves(nums []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef min_moves(nums, k)\n    \nend",
    "scala": "object Solution {\n    def minMoves(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_moves(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-moves nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec min_moves(Nums :: [integer()], K :: integer()) -> integer().\nmin_moves(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_moves(nums :: [integer], k :: integer) :: integer\n  def min_moves(nums, k) do\n    \n  end\nend"
  }
}
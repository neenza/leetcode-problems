{
  "title": "Minimum Number of Seconds to Make Mountain Height Zero",
  "problem_id": "3496",
  "frontend_id": "3296",
  "difficulty": "Medium",
  "problem_slug": "minimum-number-of-seconds-to-make-mountain-height-zero",
  "topics": [
    "Array",
    "Math",
    "Binary Search",
    "Greedy",
    "Heap (Priority Queue)"
  ],
  "description": "You are given an integer mountainHeight denoting the height of a mountain.\nYou are also given an integer array workerTimes representing the work time of workers in seconds.\nThe workers work simultaneously to reduce the height of the mountain. For worker i:\nReturn an integer representing the minimum number of seconds required for the workers to make the height of the mountain 0.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: mountainHeight = 4, workerTimes = [2,1,1]\nOutput: 3\nExplanation:\nOne way the height of the mountain can be reduced to 0 is:\nSince they work simultaneously, the minimum time needed is max(2, 3, 1) = 3 seconds.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: mountainHeight = 10, workerTimes = [3,2,2,4]\nOutput: 12\nExplanation:\nThe number of seconds needed is max(9, 12, 12, 12) = 12 seconds.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: mountainHeight = 5, workerTimes = [1]\nOutput: 15\nExplanation:\nThere is only one worker in this example, so the answer is workerTimes[0] + workerTimes[0] * 2 + workerTimes[0] * 3 + workerTimes[0] * 4 + workerTimes[0] * 5 = 15 .",
      "images": []
    }
  ],
  "constraints": [
    "1 <= mountainHeight <= 105",
    "1 <= workerTimes.length <= 104",
    "1 <= workerTimes[i] <= 106"
  ],
  "follow_ups": [],
  "hints": [
    "Can we use binary search to solve this problem?",
    "Do a binary search on the number of seconds to check if it's enough to reduce the mountain height to 0 or less with all workers working simultaneously."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long minNumberOfSeconds(int mountainHeight, vector<int>& workerTimes) {\n        \n    }\n};",
    "java": "class Solution {\n    public long minNumberOfSeconds(int mountainHeight, int[] workerTimes) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minNumberOfSeconds(self, mountainHeight, workerTimes):\n        \"\"\"\n        :type mountainHeight: int\n        :type workerTimes: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minNumberOfSeconds(self, mountainHeight: int, workerTimes: List[int]) -> int:\n        ",
    "c": "long long minNumberOfSeconds(int mountainHeight, int* workerTimes, int workerTimesSize) {\n    \n}",
    "csharp": "public class Solution {\n    public long MinNumberOfSeconds(int mountainHeight, int[] workerTimes) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} mountainHeight\n * @param {number[]} workerTimes\n * @return {number}\n */\nvar minNumberOfSeconds = function(mountainHeight, workerTimes) {\n    \n};",
    "typescript": "function minNumberOfSeconds(mountainHeight: number, workerTimes: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $mountainHeight\n     * @param Integer[] $workerTimes\n     * @return Integer\n     */\n    function minNumberOfSeconds($mountainHeight, $workerTimes) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minNumberOfSeconds(_ mountainHeight: Int, _ workerTimes: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minNumberOfSeconds(mountainHeight: Int, workerTimes: IntArray): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int minNumberOfSeconds(int mountainHeight, List<int> workerTimes) {\n    \n  }\n}",
    "golang": "func minNumberOfSeconds(mountainHeight int, workerTimes []int) int64 {\n    \n}",
    "ruby": "# @param {Integer} mountain_height\n# @param {Integer[]} worker_times\n# @return {Integer}\ndef min_number_of_seconds(mountain_height, worker_times)\n    \nend",
    "scala": "object Solution {\n    def minNumberOfSeconds(mountainHeight: Int, workerTimes: Array[Int]): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_number_of_seconds(mountain_height: i32, worker_times: Vec<i32>) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (min-number-of-seconds mountainHeight workerTimes)\n  (-> exact-integer? (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec min_number_of_seconds(MountainHeight :: integer(), WorkerTimes :: [integer()]) -> integer().\nmin_number_of_seconds(MountainHeight, WorkerTimes) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_number_of_seconds(mountain_height :: integer, worker_times :: [integer]) :: integer\n  def min_number_of_seconds(mountain_height, worker_times) do\n    \n  end\nend"
  }
}
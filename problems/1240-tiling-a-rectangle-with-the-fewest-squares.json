{
  "title": "Tiling a Rectangle with the Fewest Squares",
  "problem_id": "1361",
  "frontend_id": "1240",
  "difficulty": "Hard",
  "problem_slug": "tiling-a-rectangle-with-the-fewest-squares",
  "topics": [
    "Backtracking"
  ],
  "description": "Given a rectangle of size n x m, return the minimum number of integer-sided squares that tile the rectangle.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 2, m = 3\nOutput: 3\nExplanation: 3 squares are necessary to cover the rectangle.\n2 (squares of 1x1)\n1 (square of 2x2)",
      "images": [
        "https://assets.leetcode.com/uploads/2019/10/17/sample_11_1592.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 5, m = 8\nOutput: 5",
      "images": [
        "https://assets.leetcode.com/uploads/2019/10/17/sample_22_1592.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 11, m = 13\nOutput: 6",
      "images": [
        "https://assets.leetcode.com/uploads/2019/10/17/sample_33_1592.png"
      ]
    }
  ],
  "constraints": [
    "1 <= n, m <= 13"
  ],
  "follow_ups": [],
  "hints": [
    "Can you use backtracking to solve this problem ?.",
    "Suppose you've placed a bunch of squares. Where is the natural spot to place the next square ?.",
    "The maximum number of squares to be placed will be â‰¤ max(n,m)."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int tilingRectangle(int n, int m) {\n        \n    }\n};",
    "java": "class Solution {\n    public int tilingRectangle(int n, int m) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def tilingRectangle(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def tilingRectangle(self, n: int, m: int) -> int:\n        ",
    "c": "int tilingRectangle(int n, int m) {\n    \n}",
    "csharp": "public class Solution {\n    public int TilingRectangle(int n, int m) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number} m\n * @return {number}\n */\nvar tilingRectangle = function(n, m) {\n    \n};",
    "typescript": "function tilingRectangle(n: number, m: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $m\n     * @return Integer\n     */\n    function tilingRectangle($n, $m) {\n        \n    }\n}",
    "swift": "class Solution {\n    func tilingRectangle(_ n: Int, _ m: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun tilingRectangle(n: Int, m: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int tilingRectangle(int n, int m) {\n    \n  }\n}",
    "golang": "func tilingRectangle(n int, m int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer} m\n# @return {Integer}\ndef tiling_rectangle(n, m)\n    \nend",
    "scala": "object Solution {\n    def tilingRectangle(n: Int, m: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn tiling_rectangle(n: i32, m: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (tiling-rectangle n m)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec tiling_rectangle(N :: integer(), M :: integer()) -> integer().\ntiling_rectangle(N, M) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec tiling_rectangle(n :: integer, m :: integer) :: integer\n  def tiling_rectangle(n, m) do\n    \n  end\nend"
  }
}
{
  "title": "Find the Integer Added to Array II",
  "problem_id": "3399",
  "frontend_id": "3132",
  "difficulty": "Medium",
  "problem_slug": "find-the-integer-added-to-array-ii",
  "topics": [
    "Array",
    "Two Pointers",
    "Sorting",
    "Enumeration"
  ],
  "description": "You are given two integer arrays nums1 and nums2.\nFrom nums1 two elements have been removed, and all other elements have been increased (or decreased in the case of negative) by an integer, represented by the variable x.\nAs a result, nums1 becomes equal to nums2. Two arrays are considered equal when they contain the same integers with the same frequencies.\nReturn the minimum possible integer x that achieves this equivalence.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums1 = [4,20,16,12,8], nums2 = [14,18,10]\nOutput: -2\nExplanation:\nAfter removing elements at indices [0,4] and adding -2, nums1 becomes [18,14,10] .",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums1 = [3,5,5,3], nums2 = [7,7]\nOutput: 2\nExplanation:\nAfter removing elements at indices [0,3] and adding 2, nums1 becomes [7,7] .",
      "images": []
    }
  ],
  "constraints": [
    "3 <= nums1.length <= 200",
    "nums2.length == nums1.length - 2",
    "0 <= nums1[i], nums2[i] <= 1000",
    "The test cases are generated in a way that there is an integer x such that nums1 can become equal to nums2 by removing two elements and adding x to each element of nums1."
  ],
  "follow_ups": [],
  "hints": [
    "Try all possibilities to remove 2 elements from <code>nums1</code>.",
    "<code>x</code> should be equal to <code>min(nums2) - min(nums1)</code>, check it naively."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimumAddedInteger(vector<int>& nums1, vector<int>& nums2) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimumAddedInteger(int[] nums1, int[] nums2) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumAddedInteger(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumAddedInteger(self, nums1: List[int], nums2: List[int]) -> int:\n        ",
    "c": "int minimumAddedInteger(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimumAddedInteger(int[] nums1, int[] nums2) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar minimumAddedInteger = function(nums1, nums2) {\n    \n};",
    "typescript": "function minimumAddedInteger(nums1: number[], nums2: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function minimumAddedInteger($nums1, $nums2) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumAddedInteger(_ nums1: [Int], _ nums2: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumAddedInteger(nums1: IntArray, nums2: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumAddedInteger(List<int> nums1, List<int> nums2) {\n    \n  }\n}",
    "golang": "func minimumAddedInteger(nums1 []int, nums2 []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef minimum_added_integer(nums1, nums2)\n    \nend",
    "scala": "object Solution {\n    def minimumAddedInteger(nums1: Array[Int], nums2: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_added_integer(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-added-integer nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec minimum_added_integer(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\nminimum_added_integer(Nums1, Nums2) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_added_integer(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def minimum_added_integer(nums1, nums2) do\n    \n  end\nend"
  }
}
{
  "title": "Find Subarray With Bitwise OR Closest to K",
  "problem_id": "3436",
  "frontend_id": "3171",
  "difficulty": "Hard",
  "problem_slug": "find-subarray-with-bitwise-or-closest-to-k",
  "topics": [
    "Array",
    "Binary Search",
    "Bit Manipulation",
    "Segment Tree"
  ],
  "description": "You are given an array nums and an integer k. You need to find a subarray of nums such that the absolute difference between k and the bitwise OR of the subarray elements is as small as possible. In other words, select a subarray nums[l..r] such that |k - (nums[l] OR nums[l + 1] ... OR nums[r])| is minimum.\nReturn the minimum possible value of the absolute difference.\nA subarray is a contiguous non-empty sequence of elements within an array.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,2,4,5], k = 3\nOutput: 0\nExplanation:\nThe subarray nums[0..1] has OR value 3, which gives the minimum absolute difference |3 - 3| = 0 .",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,3,1,3], k = 2\nOutput: 1\nExplanation:\nThe subarray nums[1..1] has OR value 3, which gives the minimum absolute difference |3 - 2| = 1 .",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1], k = 10\nOutput: 9\nExplanation:\nThere is a single subarray with OR value 1, which gives the minimum absolute difference |10 - 1| = 9 .",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 105",
    "1 <= nums[i] <= 109",
    "1 <= k <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "Let <code>dp[i]</code> be the set of all the bitwise <code>OR</code> of all the subarrays ending at index <code>i</code>.",
    "We start from <code>nums[i]</code>, taking the bitwise <code>OR</code> result by including elements one by one from <code>i</code> towards left. Notice that only unset bits can become set on adding an element, and set bits never become unset again.",
    "Hence <code>dp[i]</code> can contain at most 30 elements."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimumDifference(int[] nums, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumDifference(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        ",
    "c": "int minimumDifference(int* nums, int numsSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimumDifference(int[] nums, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minimumDifference = function(nums, k) {\n    \n};",
    "typescript": "function minimumDifference(nums: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumDifference($nums, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumDifference(_ nums: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumDifference(nums: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumDifference(List<int> nums, int k) {\n    \n  }\n}",
    "golang": "func minimumDifference(nums []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef minimum_difference(nums, k)\n    \nend",
    "scala": "object Solution {\n    def minimumDifference(nums: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_difference(nums: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-difference nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec minimum_difference(Nums :: [integer()], K :: integer()) -> integer().\nminimum_difference(Nums, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_difference(nums :: [integer], k :: integer) :: integer\n  def minimum_difference(nums, k) do\n    \n  end\nend"
  }
}
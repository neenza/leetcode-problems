{
  "title": "Threshold Majority Queries",
  "problem_id": "3955",
  "frontend_id": "3636",
  "difficulty": "Hard",
  "problem_slug": "threshold-majority-queries",
  "topics": [],
  "description": "You are given an integer array nums of length n and an array queries, where queries[i] = [li, ri, thresholdi].\nReturn an array of integers ans where ans[i] is equal to the element in the subarray nums[li...ri] that appears at least thresholdi times, selecting the element with the highest frequency (choosing the smallest in case of a tie), or -1 if no such element exists.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,1,2,2,1,1], queries = [[0,5,4],[0,3,3],[2,3,2]]\nOutput: [1,-1,2]\nExplanation:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [3,2,3,2,3,2,3], queries = [[0,6,4],[1,5,2],[2,4,1],[3,3,1]]\nOutput: [3,2,3,2]\nExplanation:",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length == n <= 104",
    "1 <= nums[i] <= 109",
    "1 <= queries.length <= 5 * 104",
    "queries[i] = [li, ri, thresholdi]",
    "0 <= li <= ri < n",
    "1 <= thresholdi <= ri - li + 1"
  ],
  "follow_ups": [],
  "hints": [
    "Use sqrt decomposition: let <code>B = int(sqrt(n))</code> and sort queries by <code>(l//B, r)</code>",
    "Maintain window <code>[L,R]</code> with a frequency map <code>cnt</code> and buckets <code>bucket[f]</code> of values at count <code>f</code>",
    "Slide <code>L</code> and <code>R</code> per query, updating <code>cnt</code> and <code>bucket</code>, then scan from <code>threshold</code> to max freq to find the smallest valid value or -1"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> subarrayMajority(vector<int>& nums, vector<vector<int>>& queries) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] subarrayMajority(int[] nums, int[][] queries) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def subarrayMajority(self, nums, queries):\n        \"\"\"\n        :type nums: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def subarrayMajority(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* subarrayMajority(int* nums, int numsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] SubarrayMajority(int[] nums, int[][] queries) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar subarrayMajority = function(nums, queries) {\n    \n};",
    "typescript": "function subarrayMajority(nums: number[], queries: number[][]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function subarrayMajority($nums, $queries) {\n        \n    }\n}",
    "swift": "class Solution {\n    func subarrayMajority(_ nums: [Int], _ queries: [[Int]]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun subarrayMajority(nums: IntArray, queries: Array<IntArray>): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> subarrayMajority(List<int> nums, List<List<int>> queries) {\n    \n  }\n}",
    "golang": "func subarrayMajority(nums []int, queries [][]int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef subarray_majority(nums, queries)\n    \nend",
    "scala": "object Solution {\n    def subarrayMajority(nums: Array[Int], queries: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn subarray_majority(nums: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (subarray-majority nums queries)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) (listof exact-integer?))\n  )",
    "erlang": "-spec subarray_majority(Nums :: [integer()], Queries :: [[integer()]]) -> [integer()].\nsubarray_majority(Nums, Queries) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec subarray_majority(nums :: [integer], queries :: [[integer]]) :: [integer]\n  def subarray_majority(nums, queries) do\n    \n  end\nend"
  }
}
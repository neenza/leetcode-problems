{
  "title": "Number of Strings Which Can Be Rearranged to Contain Substring",
  "problem_id": "3200",
  "frontend_id": "2930",
  "difficulty": "Medium",
  "problem_slug": "number-of-strings-which-can-be-rearranged-to-contain-substring",
  "topics": [
    "Math",
    "Dynamic Programming",
    "Combinatorics"
  ],
  "description": "You are given an integer n.\nA string s is called good if it contains only lowercase English characters and it is possible to rearrange the characters of s such that the new string contains \"leet\" as a substring.\nFor example:\nReturn the total number of good strings of length n.\nSince the answer may be large, return it modulo 109 + 7.\nA substring is a contiguous sequence of characters within a string.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 4\nOutput: 12\nExplanation: The 12 strings which can be rearranged to have \"leet\" as a substring are: \"eelt\", \"eetl\", \"elet\", \"elte\", \"etel\", \"etle\", \"leet\", \"lete\", \"ltee\", \"teel\", \"tele\", and \"tlee\".",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 10\nOutput: 83943898\nExplanation: The number of strings with length 10 which can be rearranged to have \"leet\" as a substring is 526083947580. Hence the answer is 526083947580 % (109 + 7) = 83943898.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "A good string must contain at least one <code>l</code>, one <code>t</code>, and two <code>e</code>.",
    "Divide the problem into subproblems and use Dynamic Programming."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int stringCount(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int stringCount(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def stringCount(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def stringCount(self, n: int) -> int:\n        ",
    "c": "int stringCount(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int StringCount(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar stringCount = function(n) {\n    \n};",
    "typescript": "function stringCount(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function stringCount($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func stringCount(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun stringCount(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int stringCount(int n) {\n    \n  }\n}",
    "golang": "func stringCount(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef string_count(n)\n    \nend",
    "scala": "object Solution {\n    def stringCount(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn string_count(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (string-count n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec string_count(N :: integer()) -> integer().\nstring_count(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec string_count(n :: integer) :: integer\n  def string_count(n) do\n    \n  end\nend"
  }
}
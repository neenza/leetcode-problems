{
  "title": "Ugly Number",
  "problem_id": "263",
  "frontend_id": "263",
  "difficulty": "Easy",
  "problem_slug": "ugly-number",
  "topics": [
    "Math"
  ],
  "description": "An ugly number is a positive integer which does not have a prime factor other than 2, 3, and 5.\nGiven an integer n, return true if n is an ugly number.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 6\nOutput: true\nExplanation: 6 = 2 Ã— 3",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 1\nOutput: true\nExplanation: 1 has no prime factors.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: n = 14\nOutput: false\nExplanation: 14 is not ugly since it includes the prime factor 7.",
      "images": []
    }
  ],
  "constraints": [
    "-231 <= n <= 231 - 1"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool isUgly(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean isUgly(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def isUgly(self, n: int) -> bool:\n        ",
    "c": "bool isUgly(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public bool IsUgly(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {boolean}\n */\nvar isUgly = function(n) {\n    \n};",
    "typescript": "function isUgly(n: number): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Boolean\n     */\n    function isUgly($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func isUgly(_ n: Int) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun isUgly(n: Int): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool isUgly(int n) {\n    \n  }\n}",
    "golang": "func isUgly(n int) bool {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Boolean}\ndef is_ugly(n)\n    \nend",
    "scala": "object Solution {\n    def isUgly(n: Int): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn is_ugly(n: i32) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (is-ugly n)\n  (-> exact-integer? boolean?)\n  )",
    "erlang": "-spec is_ugly(N :: integer()) -> boolean().\nis_ugly(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec is_ugly(n :: integer) :: boolean\n  def is_ugly(n) do\n    \n  end\nend"
  }
}
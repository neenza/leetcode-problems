{
  "title": "Reaching Points",
  "problem_id": "796",
  "frontend_id": "780",
  "difficulty": "Hard",
  "problem_slug": "reaching-points",
  "topics": [
    "Math"
  ],
  "description": "Given four integers sx, sy, tx, and ty, return true if it is possible to convert the point (sx, sy) to the point (tx, ty) through some operations, or false otherwise.\nThe allowed operation on some point (x, y) is to convert it to either (x, x + y) or (x + y, y).\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: sx = 1, sy = 1, tx = 3, ty = 5\nOutput: true\nExplanation:\nOne series of moves that transforms the starting point to the target is:\n(1, 1) -> (1, 2)\n(1, 2) -> (3, 2)\n(3, 2) -> (3, 5)",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: sx = 1, sy = 1, tx = 2, ty = 2\nOutput: false",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: sx = 1, sy = 1, tx = 1, ty = 1\nOutput: true",
      "images": []
    }
  ],
  "constraints": [
    "1 <= sx, sy, tx, ty <= 109"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool reachingPoints(int sx, int sy, int tx, int ty) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean reachingPoints(int sx, int sy, int tx, int ty) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def reachingPoints(self, sx: int, sy: int, tx: int, ty: int) -> bool:\n        ",
    "c": "bool reachingPoints(int sx, int sy, int tx, int ty) {\n    \n}",
    "csharp": "public class Solution {\n    public bool ReachingPoints(int sx, int sy, int tx, int ty) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} sx\n * @param {number} sy\n * @param {number} tx\n * @param {number} ty\n * @return {boolean}\n */\nvar reachingPoints = function(sx, sy, tx, ty) {\n    \n};",
    "typescript": "function reachingPoints(sx: number, sy: number, tx: number, ty: number): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $sx\n     * @param Integer $sy\n     * @param Integer $tx\n     * @param Integer $ty\n     * @return Boolean\n     */\n    function reachingPoints($sx, $sy, $tx, $ty) {\n        \n    }\n}",
    "swift": "class Solution {\n    func reachingPoints(_ sx: Int, _ sy: Int, _ tx: Int, _ ty: Int) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun reachingPoints(sx: Int, sy: Int, tx: Int, ty: Int): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool reachingPoints(int sx, int sy, int tx, int ty) {\n    \n  }\n}",
    "golang": "func reachingPoints(sx int, sy int, tx int, ty int) bool {\n    \n}",
    "ruby": "# @param {Integer} sx\n# @param {Integer} sy\n# @param {Integer} tx\n# @param {Integer} ty\n# @return {Boolean}\ndef reaching_points(sx, sy, tx, ty)\n    \nend",
    "scala": "object Solution {\n    def reachingPoints(sx: Int, sy: Int, tx: Int, ty: Int): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn reaching_points(sx: i32, sy: i32, tx: i32, ty: i32) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (reaching-points sx sy tx ty)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer? boolean?)\n  )",
    "erlang": "-spec reaching_points(Sx :: integer(), Sy :: integer(), Tx :: integer(), Ty :: integer()) -> boolean().\nreaching_points(Sx, Sy, Tx, Ty) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec reaching_points(sx :: integer, sy :: integer, tx :: integer, ty :: integer) :: boolean\n  def reaching_points(sx, sy, tx, ty) do\n    \n  end\nend"
  }
}
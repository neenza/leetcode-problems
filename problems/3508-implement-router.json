{
  "title": "Implement Router",
  "problem_id": "3827",
  "frontend_id": "3508",
  "difficulty": "Medium",
  "problem_slug": "implement-router",
  "topics": [
    "Array",
    "Hash Table",
    "Binary Search",
    "Design",
    "Queue",
    "Ordered Set"
  ],
  "description": "Design a data structure that can efficiently manage data packets in a network router. Each data packet consists of the following attributes:\nImplement the Router class:\nRouter(int memoryLimit): Initializes the Router object with a fixed memory limit.\nbool addPacket(int source, int destination, int timestamp): Adds a packet with the given attributes to the router.\nint[] forwardPacket(): Forwards the next packet in FIFO (First In First Out) order.\nint getCount(int destination, int startTime, int endTime):\nNote that queries for addPacket will be made in increasing order of timestamp.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: [\"Router\", \"addPacket\", \"addPacket\", \"addPacket\", \"addPacket\", \"addPacket\", \"forwardPacket\", \"addPacket\", \"getCount\"] [[3], [1, 4, 90], [2, 5, 90], [1, 4, 90], [3, 5, 95], [4, 5, 105], [], [5, 2, 110], [5, 100, 110]]\nOutput: [null, true, true, false, true, true, [2, 5, 90], true, 1]\nExplanation",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: [\"Router\", \"addPacket\", \"forwardPacket\", \"forwardPacket\"] [[2], [7, 4, 90], [], []]\nOutput: [null, true, [7, 4, 90], []]\nExplanation",
      "images": []
    }
  ],
  "constraints": [
    "2 <= memoryLimit <= 105",
    "1 <= source, destination <= 2 * 105",
    "1 <= timestamp <= 109",
    "1 <= startTime <= endTime <= 109",
    "At most 105 calls will be made to addPacket, forwardPacket, and getCount methods altogether.",
    "queries for addPacket will be made in increasing order of timestamp."
  ],
  "follow_ups": [],
  "hints": [
    "A deque can simulate the adding and forwarding of packets efficiently.",
    "Use binary search for counting packets within a timestamp range."
  ],
  "code_snippets": {
    "cpp": "class Router {\npublic:\n    Router(int memoryLimit) {\n        \n    }\n    \n    bool addPacket(int source, int destination, int timestamp) {\n        \n    }\n    \n    vector<int> forwardPacket() {\n        \n    }\n    \n    int getCount(int destination, int startTime, int endTime) {\n        \n    }\n};\n\n/**\n * Your Router object will be instantiated and called as such:\n * Router* obj = new Router(memoryLimit);\n * bool param_1 = obj->addPacket(source,destination,timestamp);\n * vector<int> param_2 = obj->forwardPacket();\n * int param_3 = obj->getCount(destination,startTime,endTime);\n */",
    "java": "class Router {\n\n    public Router(int memoryLimit) {\n        \n    }\n    \n    public boolean addPacket(int source, int destination, int timestamp) {\n        \n    }\n    \n    public int[] forwardPacket() {\n        \n    }\n    \n    public int getCount(int destination, int startTime, int endTime) {\n        \n    }\n}\n\n/**\n * Your Router object will be instantiated and called as such:\n * Router obj = new Router(memoryLimit);\n * boolean param_1 = obj.addPacket(source,destination,timestamp);\n * int[] param_2 = obj.forwardPacket();\n * int param_3 = obj.getCount(destination,startTime,endTime);\n */",
    "python": "class Router(object):\n\n    def __init__(self, memoryLimit):\n        \"\"\"\n        :type memoryLimit: int\n        \"\"\"\n        \n\n    def addPacket(self, source, destination, timestamp):\n        \"\"\"\n        :type source: int\n        :type destination: int\n        :type timestamp: int\n        :rtype: bool\n        \"\"\"\n        \n\n    def forwardPacket(self):\n        \"\"\"\n        :rtype: List[int]\n        \"\"\"\n        \n\n    def getCount(self, destination, startTime, endTime):\n        \"\"\"\n        :type destination: int\n        :type startTime: int\n        :type endTime: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your Router object will be instantiated and called as such:\n# obj = Router(memoryLimit)\n# param_1 = obj.addPacket(source,destination,timestamp)\n# param_2 = obj.forwardPacket()\n# param_3 = obj.getCount(destination,startTime,endTime)",
    "python3": "class Router:\n\n    def __init__(self, memoryLimit: int):\n        \n\n    def addPacket(self, source: int, destination: int, timestamp: int) -> bool:\n        \n\n    def forwardPacket(self) -> List[int]:\n        \n\n    def getCount(self, destination: int, startTime: int, endTime: int) -> int:\n        \n\n\n# Your Router object will be instantiated and called as such:\n# obj = Router(memoryLimit)\n# param_1 = obj.addPacket(source,destination,timestamp)\n# param_2 = obj.forwardPacket()\n# param_3 = obj.getCount(destination,startTime,endTime)",
    "c": "\n\n\ntypedef struct {\n    \n} Router;\n\n\nRouter* routerCreate(int memoryLimit) {\n    \n}\n\nbool routerAddPacket(Router* obj, int source, int destination, int timestamp) {\n    \n}\n\nint* routerForwardPacket(Router* obj, int* retSize) {\n    \n}\n\nint routerGetCount(Router* obj, int destination, int startTime, int endTime) {\n    \n}\n\nvoid routerFree(Router* obj) {\n    \n}\n\n/**\n * Your Router struct will be instantiated and called as such:\n * Router* obj = routerCreate(memoryLimit);\n * bool param_1 = routerAddPacket(obj, source, destination, timestamp);\n \n * int* param_2 = routerForwardPacket(obj, retSize);\n \n * int param_3 = routerGetCount(obj, destination, startTime, endTime);\n \n * routerFree(obj);\n*/",
    "csharp": "public class Router {\n\n    public Router(int memoryLimit) {\n        \n    }\n    \n    public bool AddPacket(int source, int destination, int timestamp) {\n        \n    }\n    \n    public int[] ForwardPacket() {\n        \n    }\n    \n    public int GetCount(int destination, int startTime, int endTime) {\n        \n    }\n}\n\n/**\n * Your Router object will be instantiated and called as such:\n * Router obj = new Router(memoryLimit);\n * bool param_1 = obj.AddPacket(source,destination,timestamp);\n * int[] param_2 = obj.ForwardPacket();\n * int param_3 = obj.GetCount(destination,startTime,endTime);\n */",
    "javascript": "/**\n * @param {number} memoryLimit\n */\nvar Router = function(memoryLimit) {\n    \n};\n\n/** \n * @param {number} source \n * @param {number} destination \n * @param {number} timestamp\n * @return {boolean}\n */\nRouter.prototype.addPacket = function(source, destination, timestamp) {\n    \n};\n\n/**\n * @return {number[]}\n */\nRouter.prototype.forwardPacket = function() {\n    \n};\n\n/** \n * @param {number} destination \n * @param {number} startTime \n * @param {number} endTime\n * @return {number}\n */\nRouter.prototype.getCount = function(destination, startTime, endTime) {\n    \n};\n\n/** \n * Your Router object will be instantiated and called as such:\n * var obj = new Router(memoryLimit)\n * var param_1 = obj.addPacket(source,destination,timestamp)\n * var param_2 = obj.forwardPacket()\n * var param_3 = obj.getCount(destination,startTime,endTime)\n */",
    "typescript": "class Router {\n    constructor(memoryLimit: number) {\n        \n    }\n\n    addPacket(source: number, destination: number, timestamp: number): boolean {\n        \n    }\n\n    forwardPacket(): number[] {\n        \n    }\n\n    getCount(destination: number, startTime: number, endTime: number): number {\n        \n    }\n}\n\n/**\n * Your Router object will be instantiated and called as such:\n * var obj = new Router(memoryLimit)\n * var param_1 = obj.addPacket(source,destination,timestamp)\n * var param_2 = obj.forwardPacket()\n * var param_3 = obj.getCount(destination,startTime,endTime)\n */",
    "php": "class Router {\n    /**\n     * @param Integer $memoryLimit\n     */\n    function __construct($memoryLimit) {\n        \n    }\n  \n    /**\n     * @param Integer $source\n     * @param Integer $destination\n     * @param Integer $timestamp\n     * @return Boolean\n     */\n    function addPacket($source, $destination, $timestamp) {\n        \n    }\n  \n    /**\n     * @return Integer[]\n     */\n    function forwardPacket() {\n        \n    }\n  \n    /**\n     * @param Integer $destination\n     * @param Integer $startTime\n     * @param Integer $endTime\n     * @return Integer\n     */\n    function getCount($destination, $startTime, $endTime) {\n        \n    }\n}\n\n/**\n * Your Router object will be instantiated and called as such:\n * $obj = Router($memoryLimit);\n * $ret_1 = $obj->addPacket($source, $destination, $timestamp);\n * $ret_2 = $obj->forwardPacket();\n * $ret_3 = $obj->getCount($destination, $startTime, $endTime);\n */",
    "swift": "\nclass Router {\n\n    init(_ memoryLimit: Int) {\n        \n    }\n    \n    func addPacket(_ source: Int, _ destination: Int, _ timestamp: Int) -> Bool {\n        \n    }\n    \n    func forwardPacket() -> [Int] {\n        \n    }\n    \n    func getCount(_ destination: Int, _ startTime: Int, _ endTime: Int) -> Int {\n        \n    }\n}\n\n/**\n * Your Router object will be instantiated and called as such:\n * let obj = Router(memoryLimit)\n * let ret_1: Bool = obj.addPacket(source, destination, timestamp)\n * let ret_2: [Int] = obj.forwardPacket()\n * let ret_3: Int = obj.getCount(destination, startTime, endTime)\n */",
    "kotlin": "class Router(memoryLimit: Int) {\n\n    fun addPacket(source: Int, destination: Int, timestamp: Int): Boolean {\n        \n    }\n\n    fun forwardPacket(): IntArray {\n        \n    }\n\n    fun getCount(destination: Int, startTime: Int, endTime: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your Router object will be instantiated and called as such:\n * var obj = Router(memoryLimit)\n * var param_1 = obj.addPacket(source,destination,timestamp)\n * var param_2 = obj.forwardPacket()\n * var param_3 = obj.getCount(destination,startTime,endTime)\n */",
    "dart": "class Router {\n\n  Router(int memoryLimit) {\n    \n  }\n  \n  bool addPacket(int source, int destination, int timestamp) {\n    \n  }\n  \n  List<int> forwardPacket() {\n    \n  }\n  \n  int getCount(int destination, int startTime, int endTime) {\n    \n  }\n}\n\n/**\n * Your Router object will be instantiated and called as such:\n * Router obj = Router(memoryLimit);\n * bool param1 = obj.addPacket(source,destination,timestamp);\n * List<int> param2 = obj.forwardPacket();\n * int param3 = obj.getCount(destination,startTime,endTime);\n */",
    "golang": "type Router struct {\n    \n}\n\n\nfunc Constructor(memoryLimit int) Router {\n    \n}\n\n\nfunc (this *Router) AddPacket(source int, destination int, timestamp int) bool {\n    \n}\n\n\nfunc (this *Router) ForwardPacket() []int {\n    \n}\n\n\nfunc (this *Router) GetCount(destination int, startTime int, endTime int) int {\n    \n}\n\n\n/**\n * Your Router object will be instantiated and called as such:\n * obj := Constructor(memoryLimit);\n * param_1 := obj.AddPacket(source,destination,timestamp);\n * param_2 := obj.ForwardPacket();\n * param_3 := obj.GetCount(destination,startTime,endTime);\n */",
    "ruby": "class Router\n\n=begin\n    :type memory_limit: Integer\n=end\n    def initialize(memory_limit)\n        \n    end\n\n\n=begin\n    :type source: Integer\n    :type destination: Integer\n    :type timestamp: Integer\n    :rtype: Boolean\n=end\n    def add_packet(source, destination, timestamp)\n        \n    end\n\n\n=begin\n    :rtype: Integer[]\n=end\n    def forward_packet()\n        \n    end\n\n\n=begin\n    :type destination: Integer\n    :type start_time: Integer\n    :type end_time: Integer\n    :rtype: Integer\n=end\n    def get_count(destination, start_time, end_time)\n        \n    end\n\n\nend\n\n# Your Router object will be instantiated and called as such:\n# obj = Router.new(memory_limit)\n# param_1 = obj.add_packet(source, destination, timestamp)\n# param_2 = obj.forward_packet()\n# param_3 = obj.get_count(destination, start_time, end_time)",
    "scala": "class Router(_memoryLimit: Int) {\n\n    def addPacket(source: Int, destination: Int, timestamp: Int): Boolean = {\n        \n    }\n\n    def forwardPacket(): Array[Int] = {\n        \n    }\n\n    def getCount(destination: Int, startTime: Int, endTime: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your Router object will be instantiated and called as such:\n * val obj = new Router(memoryLimit)\n * val param_1 = obj.addPacket(source,destination,timestamp)\n * val param_2 = obj.forwardPacket()\n * val param_3 = obj.getCount(destination,startTime,endTime)\n */",
    "rust": "struct Router {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Router {\n\n    fn new(memoryLimit: i32) -> Self {\n        \n    }\n    \n    fn add_packet(&self, source: i32, destination: i32, timestamp: i32) -> bool {\n        \n    }\n    \n    fn forward_packet(&self) -> Vec<i32> {\n        \n    }\n    \n    fn get_count(&self, destination: i32, start_time: i32, end_time: i32) -> i32 {\n        \n    }\n}\n\n/**\n * Your Router object will be instantiated and called as such:\n * let obj = Router::new(memoryLimit);\n * let ret_1: bool = obj.add_packet(source, destination, timestamp);\n * let ret_2: Vec<i32> = obj.forward_packet();\n * let ret_3: i32 = obj.get_count(destination, startTime, endTime);\n */",
    "racket": "(define router%\n  (class object%\n    (super-new)\n    \n    ; memory-limit : exact-integer?\n    (init-field\n      memory-limit)\n    \n    ; add-packet : exact-integer? exact-integer? exact-integer? -> boolean?\n    (define/public (add-packet source destination timestamp)\n      )\n    ; forward-packet : -> (listof exact-integer?)\n    (define/public (forward-packet)\n      )\n    ; get-count : exact-integer? exact-integer? exact-integer? -> exact-integer?\n    (define/public (get-count destination start-time end-time)\n      )))\n\n;; Your router% object will be instantiated and called as such:\n;; (define obj (new router% [memory-limit memory-limit]))\n;; (define param_1 (send obj add-packet source destination timestamp))\n;; (define param_2 (send obj forward-packet))\n;; (define param_3 (send obj get-count destination start-time end-time))",
    "erlang": "-spec router_init_(MemoryLimit :: integer()) -> any().\nrouter_init_(MemoryLimit) ->\n  .\n\n-spec router_add_packet(Source :: integer(), Destination :: integer(), Timestamp :: integer()) -> boolean().\nrouter_add_packet(Source, Destination, Timestamp) ->\n  .\n\n-spec router_forward_packet() -> [integer()].\nrouter_forward_packet() ->\n  .\n\n-spec router_get_count(Destination :: integer(), StartTime :: integer(), EndTime :: integer()) -> integer().\nrouter_get_count(Destination, StartTime, EndTime) ->\n  .\n\n\n%% Your functions will be called as such:\n%% router_init_(MemoryLimit),\n%% Param_1 = router_add_packet(Source, Destination, Timestamp),\n%% Param_2 = router_forward_packet(),\n%% Param_3 = router_get_count(Destination, StartTime, EndTime),\n\n%% router_init_ will be called before every test case, in which you can do some necessary initializations.",
    "elixir": "defmodule Router do\n  @spec init_(memory_limit :: integer) :: any\n  def init_(memory_limit) do\n    \n  end\n\n  @spec add_packet(source :: integer, destination :: integer, timestamp :: integer) :: boolean\n  def add_packet(source, destination, timestamp) do\n    \n  end\n\n  @spec forward_packet() :: [integer]\n  def forward_packet() do\n    \n  end\n\n  @spec get_count(destination :: integer, start_time :: integer, end_time :: integer) :: integer\n  def get_count(destination, start_time, end_time) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# Router.init_(memory_limit)\n# param_1 = Router.add_packet(source, destination, timestamp)\n# param_2 = Router.forward_packet()\n# param_3 = Router.get_count(destination, start_time, end_time)\n\n# Router.init_ will be called before every test case, in which you can do some necessary initializations."
  }
}
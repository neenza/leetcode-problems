{
  "title": "Sum of Digits in Base K",
  "problem_id": "1965",
  "frontend_id": "1837",
  "difficulty": "Easy",
  "problem_slug": "sum-of-digits-in-base-k",
  "topics": [
    "Math"
  ],
  "description": "Given an integer n (in base 10) and a base k, return the sum of the digits of n after converting n from base 10 to base k.\nAfter converting, each digit should be interpreted as a base 10 number, and the sum should be returned in base 10.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 34, k = 6\nOutput: 9\nExplanation: 34 (base 10) expressed in base 6 is 54. 5 + 4 = 9.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 10, k = 10\nOutput: 1\nExplanation: n is already in base 10. 1 + 0 = 1.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 100",
    "2 <= k <= 10"
  ],
  "follow_ups": [],
  "hints": [
    "Convert the given number into base k."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int sumBase(int n, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int sumBase(int n, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def sumBase(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def sumBase(self, n: int, k: int) -> int:\n        ",
    "c": "int sumBase(int n, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int SumBase(int n, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar sumBase = function(n, k) {\n    \n};",
    "typescript": "function sumBase(n: number, k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer\n     */\n    function sumBase($n, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func sumBase(_ n: Int, _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun sumBase(n: Int, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int sumBase(int n, int k) {\n    \n  }\n}",
    "golang": "func sumBase(n int, k int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef sum_base(n, k)\n    \nend",
    "scala": "object Solution {\n    def sumBase(n: Int, k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn sum_base(n: i32, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (sum-base n k)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec sum_base(N :: integer(), K :: integer()) -> integer().\nsum_base(N, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec sum_base(n :: integer, k :: integer) :: integer\n  def sum_base(n, k) do\n    \n  end\nend"
  }
}
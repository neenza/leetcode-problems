{
  "title": "Reachable Nodes In Subdivided Graph",
  "problem_id": "918",
  "frontend_id": "882",
  "difficulty": "Hard",
  "problem_slug": "reachable-nodes-in-subdivided-graph",
  "topics": [
    "Graph",
    "Heap (Priority Queue)",
    "Shortest Path"
  ],
  "description": "You are given an undirected graph (the \"original graph\") with n nodes labeled from 0 to n - 1. You decide to subdivide each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge.\nThe graph is given as a 2D array of edges where edges[i] = [ui, vi, cnti] indicates that there is an edge between nodes ui and vi in the original graph, and cnti is the total number of new nodes that you will subdivide the edge into. Note that cnti == 0 means you will not subdivide the edge.\nTo subdivide the edge [ui, vi], replace it with (cnti + 1) new edges and cnti new nodes. The new nodes are x1, x2, ..., xcnti, and the new edges are [ui, x1], [x1, x2], [x2, x3], ..., [xcnti-1, xcnti], [xcnti, vi].\nIn this new graph, you want to know how many nodes are reachable from the node 0, where a node is reachable if the distance is maxMoves or less.\nGiven the original graph and maxMoves, return the number of nodes that are reachable from node 0 in the new graph.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3\nOutput: 13\nExplanation: The edge subdivisions are shown in the image above.\nThe nodes that are reachable are highlighted in yellow.",
      "images": [
        "https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/01/origfinal.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4\nOutput: 23",
      "images": [
        "https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/01/origfinal.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5\nOutput: 1\nExplanation: Node 0 is disconnected from the rest of the graph, so only node 0 is reachable.",
      "images": [
        "https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/01/origfinal.png"
      ]
    }
  ],
  "constraints": [
    "0 <= edges.length <= min(n * (n - 1) / 2, 104)",
    "edges[i].length == 3",
    "0 <= ui < vi < n",
    "There are no multiple edges in the graph.",
    "0 <= cnti <= 104",
    "0 <= maxMoves <= 109",
    "1 <= n <= 3000"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int reachableNodes(vector<vector<int>>& edges, int maxMoves, int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int reachableNodes(int[][] edges, int maxMoves, int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def reachableNodes(self, edges, maxMoves, n):\n        \"\"\"\n        :type edges: List[List[int]]\n        :type maxMoves: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def reachableNodes(self, edges: List[List[int]], maxMoves: int, n: int) -> int:\n        ",
    "c": "int reachableNodes(int** edges, int edgesSize, int* edgesColSize, int maxMoves, int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int ReachableNodes(int[][] edges, int maxMoves, int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} edges\n * @param {number} maxMoves\n * @param {number} n\n * @return {number}\n */\nvar reachableNodes = function(edges, maxMoves, n) {\n    \n};",
    "typescript": "function reachableNodes(edges: number[][], maxMoves: number, n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $edges\n     * @param Integer $maxMoves\n     * @param Integer $n\n     * @return Integer\n     */\n    function reachableNodes($edges, $maxMoves, $n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func reachableNodes(_ edges: [[Int]], _ maxMoves: Int, _ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun reachableNodes(edges: Array<IntArray>, maxMoves: Int, n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int reachableNodes(List<List<int>> edges, int maxMoves, int n) {\n    \n  }\n}",
    "golang": "func reachableNodes(edges [][]int, maxMoves int, n int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} edges\n# @param {Integer} max_moves\n# @param {Integer} n\n# @return {Integer}\ndef reachable_nodes(edges, max_moves, n)\n    \nend",
    "scala": "object Solution {\n    def reachableNodes(edges: Array[Array[Int]], maxMoves: Int, n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn reachable_nodes(edges: Vec<Vec<i32>>, max_moves: i32, n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (reachable-nodes edges maxMoves n)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec reachable_nodes(Edges :: [[integer()]], MaxMoves :: integer(), N :: integer()) -> integer().\nreachable_nodes(Edges, MaxMoves, N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec reachable_nodes(edges :: [[integer]], max_moves :: integer, n :: integer) :: integer\n  def reachable_nodes(edges, max_moves, n) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n## Solution\n---\n### Approach 1: Dijkstra's\n\n**Intuition**\n\nTreating the original graph as a weighted, undirected graph, we can use Dijkstra's algorithm to find all reachable nodes in the original graph.  However, this won't be enough to solve examples where subdivided edges are only used partially.\n\nWhen we travel along an edge (in either direction), we can keep track of how much we use it.  At the end, we want to know every node we reached in the original graph, plus the sum of the utilization of each edge.\n\n**Algorithm**\n\nWe use *Dijkstra's algorithm* to find the shortest distance from our source to all targets.  This is a textbook algorithm, refer to [this link](https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm) for more details.\n\nAdditionally, for each (directed) edge `(node, nei)`, we'll keep track of how many \"new\" nodes (new from subdivision of the original edge) were `used`.  At the end, we'll sum up the utilization of each edge.\n\nPlease see the inline comments for more details.**Complexity Analysis**\n\n* Time Complexity:  $$O(E \\log N)$$, where $$E$$ is the length of `edges`.\n\n* Space Complexity:  $$O(E)$$."
}
{
  "title": "Number of Strings That Appear as Substrings in Word",
  "problem_id": "2099",
  "frontend_id": "1967",
  "difficulty": "Easy",
  "problem_slug": "number-of-strings-that-appear-as-substrings-in-word",
  "topics": [
    "Array",
    "String"
  ],
  "description": "Given an array of strings patterns and a string word, return the number of strings in patterns that exist as a substring in word.\nA substring is a contiguous sequence of characters within a string.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: patterns = [\"a\",\"abc\",\"bc\",\"d\"], word = \"abc\"\nOutput: 3\nExplanation:\n- \"a\" appears as a substring in \"abc\".\n- \"abc\" appears as a substring in \"abc\".\n- \"bc\" appears as a substring in \"abc\".\n- \"d\" does not appear as a substring in \"abc\".\n3 of the strings in patterns appear as a substring in word.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: patterns = [\"a\",\"b\",\"c\"], word = \"aaaaabbbbb\"\nOutput: 2\nExplanation:\n- \"a\" appears as a substring in \"aaaaabbbbb\".\n- \"b\" appears as a substring in \"aaaaabbbbb\".\n- \"c\" does not appear as a substring in \"aaaaabbbbb\".\n2 of the strings in patterns appear as a substring in word.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: patterns = [\"a\",\"a\",\"a\"], word = \"ab\"\nOutput: 3\nExplanation: Each of the patterns appears as a substring in word \"ab\".",
      "images": []
    }
  ],
  "constraints": [
    "1 <= patterns.length <= 100",
    "1 <= patterns[i].length <= 100",
    "1 <= word.length <= 100",
    "patterns[i] and word consist of lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [
    "Deal with each of the patterns individually.",
    "Use the built-in function in the language you are using to find if the pattern exists as a substring in <code>word</code>."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int numOfStrings(vector<string>& patterns, string word) {\n        \n    }\n};",
    "java": "class Solution {\n    public int numOfStrings(String[] patterns, String word) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numOfStrings(self, patterns, word):\n        \"\"\"\n        :type patterns: List[str]\n        :type word: str\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numOfStrings(self, patterns: List[str], word: str) -> int:\n        ",
    "c": "int numOfStrings(char** patterns, int patternsSize, char* word) {\n    \n}",
    "csharp": "public class Solution {\n    public int NumOfStrings(string[] patterns, string word) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string[]} patterns\n * @param {string} word\n * @return {number}\n */\nvar numOfStrings = function(patterns, word) {\n    \n};",
    "typescript": "function numOfStrings(patterns: string[], word: string): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String[] $patterns\n     * @param String $word\n     * @return Integer\n     */\n    function numOfStrings($patterns, $word) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numOfStrings(_ patterns: [String], _ word: String) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numOfStrings(patterns: Array<String>, word: String): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int numOfStrings(List<String> patterns, String word) {\n    \n  }\n}",
    "golang": "func numOfStrings(patterns []string, word string) int {\n    \n}",
    "ruby": "# @param {String[]} patterns\n# @param {String} word\n# @return {Integer}\ndef num_of_strings(patterns, word)\n    \nend",
    "scala": "object Solution {\n    def numOfStrings(patterns: Array[String], word: String): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn num_of_strings(patterns: Vec<String>, word: String) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (num-of-strings patterns word)\n  (-> (listof string?) string? exact-integer?)\n  )",
    "erlang": "-spec num_of_strings(Patterns :: [unicode:unicode_binary()], Word :: unicode:unicode_binary()) -> integer().\nnum_of_strings(Patterns, Word) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec num_of_strings(patterns :: [String.t], word :: String.t) :: integer\n  def num_of_strings(patterns, word) do\n    \n  end\nend"
  }
}
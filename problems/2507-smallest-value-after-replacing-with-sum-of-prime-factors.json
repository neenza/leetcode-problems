{
  "title": "Smallest Value After Replacing With Sum of Prime Factors",
  "problem_id": "2595",
  "frontend_id": "2507",
  "difficulty": "Medium",
  "problem_slug": "smallest-value-after-replacing-with-sum-of-prime-factors",
  "topics": [
    "Math",
    "Simulation",
    "Number Theory"
  ],
  "description": "You are given a positive integer n.\nContinuously replace n with the sum of its prime factors.\nReturn the smallest value n will take on.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 15\nOutput: 5\nExplanation: Initially, n = 15.\n15 = 3 * 5, so replace n with 3 + 5 = 8.\n8 = 2 * 2 * 2, so replace n with 2 + 2 + 2 = 6.\n6 = 2 * 3, so replace n with 2 + 3 = 5.\n5 is the smallest value n will take on.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 3\nOutput: 3\nExplanation: Initially, n = 3.\n3 is the smallest value n will take on.",
      "images": []
    }
  ],
  "constraints": [
    "2 <= n <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "Every time you replace n, it will become smaller until it is a prime number, where it will keep the same value each time you replace it.",
    "n decreases logarithmically, allowing you to simulate the process.",
    "To find the prime factors, iterate through all numbers less than n from least to greatest and find the maximum number of times each number divides n."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int smallestValue(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int smallestValue(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def smallestValue(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def smallestValue(self, n: int) -> int:\n        ",
    "c": "int smallestValue(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int SmallestValue(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar smallestValue = function(n) {\n    \n};",
    "typescript": "function smallestValue(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function smallestValue($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func smallestValue(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun smallestValue(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int smallestValue(int n) {\n    \n  }\n}",
    "golang": "func smallestValue(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef smallest_value(n)\n    \nend",
    "scala": "object Solution {\n    def smallestValue(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn smallest_value(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (smallest-value n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec smallest_value(N :: integer()) -> integer().\nsmallest_value(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec smallest_value(n :: integer) :: integer\n  def smallest_value(n) do\n    \n  end\nend"
  }
}
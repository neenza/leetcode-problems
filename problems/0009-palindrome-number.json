{
  "title": "Palindrome Number",
  "problem_id": "9",
  "frontend_id": "9",
  "difficulty": "Easy",
  "problem_slug": "palindrome-number",
  "topics": [
    "Math"
  ],
  "description": "Given an integer x, return true if x is a palindrome, and false otherwise.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: x = 121\nOutput: true\nExplanation: 121 reads as 121 from left to right and from right to left.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: x = -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: x = 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.",
      "images": []
    }
  ],
  "constraints": [
    "-231 <= x <= 231 - 1"
  ],
  "follow_ups": [],
  "hints": [
    "Beware of overflow when you reverse the integer."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool isPalindrome(int x) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean isPalindrome(int x) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        ",
    "c": "bool isPalindrome(int x) {\n    \n}",
    "csharp": "public class Solution {\n    public bool IsPalindrome(int x) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} x\n * @return {boolean}\n */\nvar isPalindrome = function(x) {\n    \n};",
    "typescript": "function isPalindrome(x: number): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Boolean\n     */\n    function isPalindrome($x) {\n        \n    }\n}",
    "swift": "class Solution {\n    func isPalindrome(_ x: Int) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun isPalindrome(x: Int): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool isPalindrome(int x) {\n    \n  }\n}",
    "golang": "func isPalindrome(x int) bool {\n    \n}",
    "ruby": "# @param {Integer} x\n# @return {Boolean}\ndef is_palindrome(x)\n    \nend",
    "scala": "object Solution {\n    def isPalindrome(x: Int): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn is_palindrome(x: i32) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (is-palindrome x)\n  (-> exact-integer? boolean?)\n  )",
    "erlang": "-spec is_palindrome(X :: integer()) -> boolean().\nis_palindrome(X) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec is_palindrome(x :: integer) :: boolean\n  def is_palindrome(x) do\n    \n  end\nend"
  }
}
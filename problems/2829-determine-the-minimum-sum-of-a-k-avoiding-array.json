{
  "title": "Determine the Minimum Sum of a k-avoiding Array",
  "problem_id": "2811",
  "frontend_id": "2829",
  "difficulty": "Medium",
  "problem_slug": "determine-the-minimum-sum-of-a-k-avoiding-array",
  "topics": [
    "Math",
    "Greedy"
  ],
  "description": "You are given two integers,Â n and k.\nAn array of distinct positive integers is called a k-avoiding array if there does not exist any pair of distinct elements that sum to k.\nReturn the minimum possible sum of a k-avoiding array of length n.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 5, k = 4\nOutput: 18\nExplanation: Consider the k-avoiding array [1,2,4,5,6], which has a sum of 18.\nIt can be proven that there is no k-avoiding array with a sum less than 18.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 2, k = 6\nOutput: 3\nExplanation: We can construct the array [1,2], which has a sum of 3.\nIt can be proven that there is no k-avoiding array with a sum less than 3.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n, k <= 50"
  ],
  "follow_ups": [],
  "hints": [
    "<div class=\"_1l1MA\">Try to start with the smallest possible integers.</div>",
    "<div class=\"_1l1MA\">Check if the current number can be added to the array.</div>",
    "<div class=\"_1l1MA\">To check if the current number can be added, keep track of already added numbers in a set.</div>",
    "<div class=\"_1l1MA\">If the number <code>i</code> is added to the array, then <code>i + k</code> can not be added.</div>"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimumSum(int n, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimumSum(int n, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumSum(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumSum(self, n: int, k: int) -> int:\n        ",
    "c": "int minimumSum(int n, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimumSum(int n, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\nvar minimumSum = function(n, k) {\n    \n};",
    "typescript": "function minimumSum(n: number, k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumSum($n, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumSum(_ n: Int, _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumSum(n: Int, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumSum(int n, int k) {\n    \n  }\n}",
    "golang": "func minimumSum(n int, k int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef minimum_sum(n, k)\n    \nend",
    "scala": "object Solution {\n    def minimumSum(n: Int, k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_sum(n: i32, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-sum n k)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec minimum_sum(N :: integer(), K :: integer()) -> integer().\nminimum_sum(N, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_sum(n :: integer, k :: integer) :: integer\n  def minimum_sum(n, k) do\n    \n  end\nend"
  }
}
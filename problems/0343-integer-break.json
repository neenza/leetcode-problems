{
  "title": "Integer Break",
  "problem_id": "343",
  "frontend_id": "343",
  "difficulty": "Medium",
  "problem_slug": "integer-break",
  "topics": [
    "Math",
    "Dynamic Programming"
  ],
  "description": "Given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers.\nReturn the maximum product you can get.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 2\nOutput: 1\nExplanation: 2 = 1 + 1, 1 × 1 = 1.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 10\nOutput: 36\nExplanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.",
      "images": []
    }
  ],
  "constraints": [
    "2 <= n <= 58"
  ],
  "follow_ups": [],
  "hints": [
    "There is a simple O(n) solution to this problem.",
    "You may check the breaking results of <i>n</i> ranging from 7 to 10 to discover the regularities."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int integerBreak(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int integerBreak(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def integerBreak(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def integerBreak(self, n: int) -> int:\n        ",
    "c": "int integerBreak(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int IntegerBreak(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar integerBreak = function(n) {\n    \n};",
    "typescript": "function integerBreak(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function integerBreak($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func integerBreak(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun integerBreak(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int integerBreak(int n) {\n    \n  }\n}",
    "golang": "func integerBreak(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef integer_break(n)\n    \nend",
    "scala": "object Solution {\n    def integerBreak(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn integer_break(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (integer-break n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec integer_break(N :: integer()) -> integer().\ninteger_break(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec integer_break(n :: integer) :: integer\n  def integer_break(n) do\n    \n  end\nend"
  }
}
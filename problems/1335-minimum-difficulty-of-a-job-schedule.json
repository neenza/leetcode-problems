{
  "title": "Minimum Difficulty of a Job Schedule",
  "problem_id": "1457",
  "frontend_id": "1335",
  "difficulty": "Hard",
  "problem_slug": "minimum-difficulty-of-a-job-schedule",
  "topics": [
    "Array",
    "Dynamic Programming"
  ],
  "description": "You want to schedule a list of jobs in d days. Jobs are dependent (i.e To work on the ith job, you have to finish all the jobs j where 0 <= j < i).\nYou have to finish at least one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the d days. The difficulty of a day is the maximum difficulty of a job done on that day.\nYou are given an integer array jobDifficulty and an integer d. The difficulty of the ith job is jobDifficulty[i].\nReturn the minimum difficulty of a job schedule. If you cannot find a schedule for the jobs return -1.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: jobDifficulty = [6,5,4,3,2,1], d = 2\nOutput: 7\nExplanation: First day you can finish the first 5 jobs, total difficulty = 6.\nSecond day you can finish the last job, total difficulty = 1.\nThe difficulty of the schedule = 6 + 1 = 7",
      "images": [
        "https://assets.leetcode.com/uploads/2020/01/16/untitled.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: jobDifficulty = [9,9,9], d = 4\nOutput: -1\nExplanation: If you finish a job per day you will still have a free day. you cannot find a schedule for the given jobs.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/01/16/untitled.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: jobDifficulty = [1,1,1], d = 3\nOutput: 3\nExplanation: The schedule is one job per day. total difficulty will be 3.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/01/16/untitled.png"
      ]
    }
  ],
  "constraints": [
    "1 <= jobDifficulty.length <= 300",
    "0 <= jobDifficulty[i] <= 1000",
    "1 <= d <= 10"
  ],
  "follow_ups": [],
  "hints": [
    "Use DP. Try to cut the array into d non-empty sub-arrays. Try all possible cuts for the array.",
    "Use dp[i][j] where DP states are i the index of the last cut and j the number of remaining cuts. Complexity is O(n * n * d)."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minDifficulty(vector<int>& jobDifficulty, int d) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minDifficulty(int[] jobDifficulty, int d) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minDifficulty(self, jobDifficulty, d):\n        \"\"\"\n        :type jobDifficulty: List[int]\n        :type d: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minDifficulty(self, jobDifficulty: List[int], d: int) -> int:\n        ",
    "c": "int minDifficulty(int* jobDifficulty, int jobDifficultySize, int d) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinDifficulty(int[] jobDifficulty, int d) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} jobDifficulty\n * @param {number} d\n * @return {number}\n */\nvar minDifficulty = function(jobDifficulty, d) {\n    \n};",
    "typescript": "function minDifficulty(jobDifficulty: number[], d: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $jobDifficulty\n     * @param Integer $d\n     * @return Integer\n     */\n    function minDifficulty($jobDifficulty, $d) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minDifficulty(_ jobDifficulty: [Int], _ d: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minDifficulty(jobDifficulty: IntArray, d: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minDifficulty(List<int> jobDifficulty, int d) {\n    \n  }\n}",
    "golang": "func minDifficulty(jobDifficulty []int, d int) int {\n    \n}",
    "ruby": "# @param {Integer[]} job_difficulty\n# @param {Integer} d\n# @return {Integer}\ndef min_difficulty(job_difficulty, d)\n    \nend",
    "scala": "object Solution {\n    def minDifficulty(jobDifficulty: Array[Int], d: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_difficulty(job_difficulty: Vec<i32>, d: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-difficulty jobDifficulty d)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec min_difficulty(JobDifficulty :: [integer()], D :: integer()) -> integer().\nmin_difficulty(JobDifficulty, D) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_difficulty(job_difficulty :: [integer], d :: integer) :: integer\n  def min_difficulty(job_difficulty, d) do\n    \n  end\nend"
  }
}
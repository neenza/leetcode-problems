{
  "title": "24 Game",
  "problem_id": "679",
  "frontend_id": "679",
  "difficulty": "Hard",
  "problem_slug": "24-game",
  "topics": [
    "Array",
    "Math",
    "Backtracking"
  ],
  "description": "You are given an integer array cards of length 4. You have four cards, each containing a number in the range [1, 9]. You should arrange the numbers on these cards in a mathematical expression using the operators ['+', '-', '*', '/'] and the parentheses '(' and ')' to get the value 24.\nYou are restricted with the following rules:\nReturn true if you can get such expression that evaluates to 24, and false otherwise.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: cards = [4,1,8,7]\nOutput: true\nExplanation: (8-4) * (7-1) = 24",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: cards = [1,2,1,2]\nOutput: false",
      "images": []
    }
  ],
  "constraints": [
    "cards.length == 4",
    "1 <= cards[i] <= 9"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool judgePoint24(vector<int>& cards) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean judgePoint24(int[] cards) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def judgePoint24(self, cards: List[int]) -> bool:\n        ",
    "c": "bool judgePoint24(int* cards, int cardsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public bool JudgePoint24(int[] cards) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} cards\n * @return {boolean}\n */\nvar judgePoint24 = function(cards) {\n    \n};",
    "typescript": "function judgePoint24(cards: number[]): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $cards\n     * @return Boolean\n     */\n    function judgePoint24($cards) {\n        \n    }\n}",
    "swift": "class Solution {\n    func judgePoint24(_ cards: [Int]) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun judgePoint24(cards: IntArray): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool judgePoint24(List<int> cards) {\n    \n  }\n}",
    "golang": "func judgePoint24(cards []int) bool {\n    \n}",
    "ruby": "# @param {Integer[]} cards\n# @return {Boolean}\ndef judge_point24(cards)\n    \nend",
    "scala": "object Solution {\n    def judgePoint24(cards: Array[Int]): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn judge_point24(cards: Vec<i32>) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (judge-point24 cards)\n  (-> (listof exact-integer?) boolean?)\n  )",
    "erlang": "-spec judge_point24(Cards :: [integer()]) -> boolean().\njudge_point24(Cards) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec judge_point24(cards :: [integer]) :: boolean\n  def judge_point24(cards) do\n    \n  end\nend"
  }
}
{
  "title": "Maximum Population Year",
  "problem_id": "1983",
  "frontend_id": "1854",
  "difficulty": "Easy",
  "problem_slug": "maximum-population-year",
  "topics": [
    "Array",
    "Counting",
    "Prefix Sum"
  ],
  "description": "You are given a 2D integer array logs where each logs[i] = [birthi, deathi] indicates the birth and death years of the ith person.\nThe population of some year x is the number of people alive during that year. The ith person is counted in year x's population if x is in the inclusive range [birthi, deathi - 1]. Note that the person is not counted in the year that they die.\nReturn the earliest year with the maximum population.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: logs = [[1993,1999],[2000,2010]]\nOutput: 1993\nExplanation: The maximum population is 1, and 1993 is the earliest year with this population.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: logs = [[1950,1961],[1960,1971],[1970,1981]]\nOutput: 1960\nExplanation: \nThe maximum population is 2, and it had happened in years 1960 and 1970.\nThe earlier year between them is 1960.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= logs.length <= 100",
    "1950 <= birthi < deathi <= 2050"
  ],
  "follow_ups": [],
  "hints": [
    "For each year find the number of people whose birth_i â‰¤ year and death_i > year.",
    "Find the maximum value between all years."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maximumPopulation(vector<vector<int>>& logs) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maximumPopulation(int[][] logs) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maximumPopulation(self, logs):\n        \"\"\"\n        :type logs: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maximumPopulation(self, logs: List[List[int]]) -> int:\n        ",
    "c": "int maximumPopulation(int** logs, int logsSize, int* logsColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaximumPopulation(int[][] logs) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} logs\n * @return {number}\n */\nvar maximumPopulation = function(logs) {\n    \n};",
    "typescript": "function maximumPopulation(logs: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $logs\n     * @return Integer\n     */\n    function maximumPopulation($logs) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maximumPopulation(_ logs: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maximumPopulation(logs: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maximumPopulation(List<List<int>> logs) {\n    \n  }\n}",
    "golang": "func maximumPopulation(logs [][]int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} logs\n# @return {Integer}\ndef maximum_population(logs)\n    \nend",
    "scala": "object Solution {\n    def maximumPopulation(logs: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn maximum_population(logs: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (maximum-population logs)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec maximum_population(Logs :: [[integer()]]) -> integer().\nmaximum_population(Logs) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec maximum_population(logs :: [[integer]]) :: integer\n  def maximum_population(logs) do\n    \n  end\nend"
  }
}
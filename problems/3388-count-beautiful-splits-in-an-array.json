{
  "title": "Count Beautiful Splits in an Array",
  "problem_id": "3686",
  "frontend_id": "3388",
  "difficulty": "Medium",
  "problem_slug": "count-beautiful-splits-in-an-array",
  "topics": [
    "Array",
    "Dynamic Programming"
  ],
  "description": "You are given an array nums.\nA split of an array nums is beautiful if:\nReturn the number of ways you can make this split.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,1,2,1]\nOutput: 2\nExplanation:\nThe beautiful splits are:",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,2,3,4]\nOutput: 0\nExplanation:\nThere are 0 beautiful splits.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 5000",
    "0 <= nums[i] <= 50"
  ],
  "follow_ups": [],
  "hints": [
    "Use 2D dynamic programming to find the maximum matching prefix."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int beautifulSplits(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public int beautifulSplits(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def beautifulSplits(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def beautifulSplits(self, nums: List[int]) -> int:\n        ",
    "c": "int beautifulSplits(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int BeautifulSplits(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar beautifulSplits = function(nums) {\n    \n};",
    "typescript": "function beautifulSplits(nums: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function beautifulSplits($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func beautifulSplits(_ nums: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun beautifulSplits(nums: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int beautifulSplits(List<int> nums) {\n    \n  }\n}",
    "golang": "func beautifulSplits(nums []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Integer}\ndef beautiful_splits(nums)\n    \nend",
    "scala": "object Solution {\n    def beautifulSplits(nums: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn beautiful_splits(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (beautiful-splits nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec beautiful_splits(Nums :: [integer()]) -> integer().\nbeautiful_splits(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec beautiful_splits(nums :: [integer]) :: integer\n  def beautiful_splits(nums) do\n    \n  end\nend"
  }
}
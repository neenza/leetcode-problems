{
  "title": "Properties Graph",
  "problem_id": "3809",
  "frontend_id": "3493",
  "difficulty": "Medium",
  "problem_slug": "properties-graph",
  "topics": [
    "Array",
    "Hash Table",
    "Depth-First Search",
    "Breadth-First Search",
    "Union Find",
    "Graph"
  ],
  "description": "You are given a 2D integer array properties having dimensions n x m and an integer k.\nDefine a function intersect(a, b) that returns the number of distinct integers common to both arrays a and b.\nConstruct an undirected graph where each index i corresponds to properties[i]. There is an edge between node i and node j if and only if intersect(properties[i], properties[j]) >= k, where i and j are in the range [0, n - 1] and i != j.\nReturn the number of connected components in the resulting graph.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: properties = [[1,2],[1,1],[3,4],[4,5],[5,6],[7,7]], k = 1\nOutput: 3\nExplanation:\nThe graph formed has 3 connected components:\n",
      "images": [
        "https://assets.leetcode.com/uploads/2025/02/27/image.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: properties = [[1,2,3],[2,3,4],[4,3,5]], k = 2\nOutput: 1\nExplanation:\nThe graph formed has 1 connected component:\n",
      "images": [
        "https://assets.leetcode.com/uploads/2025/02/27/screenshot-from-2025-02-27-23-58-34.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: properties = [[1,1],[1,1]], k = 2\nOutput: 2\nExplanation:\nintersect(properties[0], properties[1]) = 1 , which is less than k . This means there is no edge between properties[0] and properties[1] in the graph.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n == properties.length <= 100",
    "1 <= m == properties[i].length <= 100",
    "1 <= properties[i][j] <= 100",
    "1 <= k <= m"
  ],
  "follow_ups": [],
  "hints": [
    "How can we optimally find the intersection of two arrays? One way is to use <code>len(set(a) & set(b))</code>.",
    "For connected components, think about using DFS, BFS, or DSU."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int numberOfComponents(vector<vector<int>>& properties, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int numberOfComponents(int[][] properties, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numberOfComponents(self, properties, k):\n        \"\"\"\n        :type properties: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numberOfComponents(self, properties: List[List[int]], k: int) -> int:\n        ",
    "c": "int numberOfComponents(int** properties, int propertiesSize, int* propertiesColSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int NumberOfComponents(int[][] properties, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} properties\n * @param {number} k\n * @return {number}\n */\nvar numberOfComponents = function(properties, k) {\n    \n};",
    "typescript": "function numberOfComponents(properties: number[][], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $properties\n     * @param Integer $k\n     * @return Integer\n     */\n    function numberOfComponents($properties, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numberOfComponents(_ properties: [[Int]], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numberOfComponents(properties: Array<IntArray>, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int numberOfComponents(List<List<int>> properties, int k) {\n    \n  }\n}",
    "golang": "func numberOfComponents(properties [][]int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} properties\n# @param {Integer} k\n# @return {Integer}\ndef number_of_components(properties, k)\n    \nend",
    "scala": "object Solution {\n    def numberOfComponents(properties: Array[Array[Int]], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn number_of_components(properties: Vec<Vec<i32>>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (number-of-components properties k)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec number_of_components(Properties :: [[integer()]], K :: integer()) -> integer().\nnumber_of_components(Properties, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec number_of_components(properties :: [[integer]], k :: integer) :: integer\n  def number_of_components(properties, k) do\n    \n  end\nend"
  }
}
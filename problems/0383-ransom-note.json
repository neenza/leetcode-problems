{
  "title": "Ransom Note",
  "problem_id": "383",
  "frontend_id": "383",
  "difficulty": "Easy",
  "problem_slug": "ransom-note",
  "topics": [
    "Hash Table",
    "String",
    "Counting"
  ],
  "description": "Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise.\nEach letter in magazine can only be used once in ransomNote.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: ransomNote = \"a\", magazine = \"b\"\nOutput: false",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: ransomNote = \"aa\", magazine = \"ab\"\nOutput: false",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: ransomNote = \"aa\", magazine = \"aab\"\nOutput: true",
      "images": []
    }
  ],
  "constraints": [
    "1 <= ransomNote.length, magazine.length <= 105",
    "ransomNote and magazine consist of lowercase English letters."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool canConstruct(string ransomNote, string magazine) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean canConstruct(String ransomNote, String magazine) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def canConstruct(self, ransomNote, magazine):\n        \"\"\"\n        :type ransomNote: str\n        :type magazine: str\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\n        ",
    "c": "bool canConstruct(char* ransomNote, char* magazine) {\n    \n}",
    "csharp": "public class Solution {\n    public bool CanConstruct(string ransomNote, string magazine) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} ransomNote\n * @param {string} magazine\n * @return {boolean}\n */\nvar canConstruct = function(ransomNote, magazine) {\n    \n};",
    "typescript": "function canConstruct(ransomNote: string, magazine: string): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $ransomNote\n     * @param String $magazine\n     * @return Boolean\n     */\n    function canConstruct($ransomNote, $magazine) {\n        \n    }\n}",
    "swift": "class Solution {\n    func canConstruct(_ ransomNote: String, _ magazine: String) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun canConstruct(ransomNote: String, magazine: String): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool canConstruct(String ransomNote, String magazine) {\n    \n  }\n}",
    "golang": "func canConstruct(ransomNote string, magazine string) bool {\n    \n}",
    "ruby": "# @param {String} ransom_note\n# @param {String} magazine\n# @return {Boolean}\ndef can_construct(ransom_note, magazine)\n    \nend",
    "scala": "object Solution {\n    def canConstruct(ransomNote: String, magazine: String): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn can_construct(ransom_note: String, magazine: String) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (can-construct ransomNote magazine)\n  (-> string? string? boolean?)\n  )",
    "erlang": "-spec can_construct(RansomNote :: unicode:unicode_binary(), Magazine :: unicode:unicode_binary()) -> boolean().\ncan_construct(RansomNote, Magazine) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec can_construct(ransom_note :: String.t, magazine :: String.t) :: boolean\n  def can_construct(ransom_note, magazine) do\n    \n  end\nend"
  }
}
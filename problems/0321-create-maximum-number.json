{
  "title": "Create Maximum Number",
  "problem_id": "321",
  "frontend_id": "321",
  "difficulty": "Hard",
  "problem_slug": "create-maximum-number",
  "topics": [
    "Array",
    "Two Pointers",
    "Stack",
    "Greedy",
    "Monotonic Stack"
  ],
  "description": "You are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. You are also given an integer k.\nCreate the maximum number of length k <= m + n from digits of the two numbers. The relative order of the digits from the same array must be preserved.\nReturn an array of the k digits representing the answer.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5\nOutput: [9,8,6,5,3]",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums1 = [6,7], nums2 = [6,0,4], k = 5\nOutput: [6,7,6,0,4]",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums1 = [3,9], nums2 = [8,9], k = 3\nOutput: [9,8,9]",
      "images": []
    }
  ],
  "constraints": [
    "m == nums1.length",
    "n == nums2.length",
    "1 <= m, n <= 500",
    "0 <= nums1[i], nums2[i] <= 9",
    "1 <= k <= m + n",
    "nums1 and nums2 do not have leading zeros."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> maxNumber(vector<int>& nums1, vector<int>& nums2, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] maxNumber(int[] nums1, int[] nums2, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxNumber(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* maxNumber(int* nums1, int nums1Size, int* nums2, int nums2Size, int k, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] MaxNumber(int[] nums1, int[] nums2, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number} k\n * @return {number[]}\n */\nvar maxNumber = function(nums1, nums2, k) {\n    \n};",
    "typescript": "function maxNumber(nums1: number[], nums2: number[], k: number): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function maxNumber($nums1, $nums2, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxNumber(_ nums1: [Int], _ nums2: [Int], _ k: Int) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxNumber(nums1: IntArray, nums2: IntArray, k: Int): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> maxNumber(List<int> nums1, List<int> nums2, int k) {\n    \n  }\n}",
    "golang": "func maxNumber(nums1 []int, nums2 []int, k int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @param {Integer} k\n# @return {Integer[]}\ndef max_number(nums1, nums2, k)\n    \nend",
    "scala": "object Solution {\n    def maxNumber(nums1: Array[Int], nums2: Array[Int], k: Int): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_number(nums1: Vec<i32>, nums2: Vec<i32>, k: i32) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (max-number nums1 nums2 k)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )",
    "erlang": "-spec max_number(Nums1 :: [integer()], Nums2 :: [integer()], K :: integer()) -> [integer()].\nmax_number(Nums1, Nums2, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_number(nums1 :: [integer], nums2 :: [integer], k :: integer) :: [integer]\n  def max_number(nums1, nums2, k) do\n    \n  end\nend"
  }
}
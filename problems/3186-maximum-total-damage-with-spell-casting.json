{
  "title": "Maximum Total Damage With Spell Casting",
  "problem_id": "3437",
  "frontend_id": "3186",
  "difficulty": "Medium",
  "problem_slug": "maximum-total-damage-with-spell-casting",
  "topics": [
    "Array",
    "Hash Table",
    "Two Pointers",
    "Binary Search",
    "Dynamic Programming",
    "Sorting",
    "Counting"
  ],
  "description": "A magician has various spells.\nYou are given an array power, where each element represents the damage of a spell. Multiple spells can have the same damage value.\nIt is a known fact that if a magician decides to cast a spell with a damage of power[i], they cannot cast any spell with a damage of power[i] - 2, power[i] - 1, power[i] + 1, or power[i] + 2.\nEach spell can be cast only once.\nReturn the maximum possible total damage that a magician can cast.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: power = [1,1,3,4]\nOutput: 6\nExplanation:\nThe maximum possible damage of 6 is produced by casting spells 0, 1, 3 with damage 1, 1, 4.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: power = [7,1,6,6]\nOutput: 13\nExplanation:\nThe maximum possible damage of 13 is produced by casting spells 1, 2, 3 with damage 1, 6, 6.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= power.length <= 105",
    "1 <= power[i] <= 109"
  ],
  "follow_ups": [],
  "hints": [
    "If we ever decide to use some spell with power <code>x</code>, then we will use all spells with power <code>x</code>.",
    "Think of dynamic programming.",
    "<code>dp[i][j]</code> represents the maximum damage considering up to the <code>i</code>-th unique spell and <code>j</code> represents the number of spells skipped (up to 3 as per constraints)."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    long long maximumTotalDamage(vector<int>& power) {\n        \n    }\n};",
    "java": "class Solution {\n    public long maximumTotalDamage(int[] power) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maximumTotalDamage(self, power):\n        \"\"\"\n        :type power: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maximumTotalDamage(self, power: List[int]) -> int:\n        ",
    "c": "long long maximumTotalDamage(int* power, int powerSize) {\n    \n}",
    "csharp": "public class Solution {\n    public long MaximumTotalDamage(int[] power) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} power\n * @return {number}\n */\nvar maximumTotalDamage = function(power) {\n    \n};",
    "typescript": "function maximumTotalDamage(power: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $power\n     * @return Integer\n     */\n    function maximumTotalDamage($power) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maximumTotalDamage(_ power: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maximumTotalDamage(power: IntArray): Long {\n        \n    }\n}",
    "dart": "class Solution {\n  int maximumTotalDamage(List<int> power) {\n    \n  }\n}",
    "golang": "func maximumTotalDamage(power []int) int64 {\n    \n}",
    "ruby": "# @param {Integer[]} power\n# @return {Integer}\ndef maximum_total_damage(power)\n    \nend",
    "scala": "object Solution {\n    def maximumTotalDamage(power: Array[Int]): Long = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn maximum_total_damage(power: Vec<i32>) -> i64 {\n        \n    }\n}",
    "racket": "(define/contract (maximum-total-damage power)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec maximum_total_damage(Power :: [integer()]) -> integer().\nmaximum_total_damage(Power) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec maximum_total_damage(power :: [integer]) :: integer\n  def maximum_total_damage(power) do\n    \n  end\nend"
  }
}
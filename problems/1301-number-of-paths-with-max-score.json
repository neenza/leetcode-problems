{
  "title": "Number of Paths with Max Score",
  "problem_id": "1234",
  "frontend_id": "1301",
  "difficulty": "Hard",
  "problem_slug": "number-of-paths-with-max-score",
  "topics": [
    "Array",
    "Dynamic Programming",
    "Matrix"
  ],
  "description": "You are given a square board of characters. You can move on the board starting at the bottom right square marked with the character 'S'.\nYou need to reach the top left square marked with the character 'E'. The rest of the squares are labeled either with a numeric character 1, 2, ..., 9 or with an obstacle 'X'. In one move you can go up, left or up-left (diagonally) only if there is no obstacle there.\nReturn a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, taken modulo 10^9 + 7.\nIn case there is no path, return [0, 0].\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: board = [\"E23\",\"2X2\",\"12S\"]\r\nOutput: [7,1]",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: board = [\"E12\",\"1X1\",\"21S\"]\r\nOutput: [4,2]",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: board = [\"E11\",\"XXX\",\"11S\"]\r\nOutput: [0,0]",
      "images": []
    }
  ],
  "constraints": [
    "2 <= board.length == board[i].length <= 100"
  ],
  "follow_ups": [],
  "hints": [
    "Use dynamic programming to find the path with the max score.",
    "Use another dynamic programming array to count the number of paths with max score."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> pathsWithMaxScore(vector<string>& board) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] pathsWithMaxScore(List<String> board) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def pathsWithMaxScore(self, board):\n        \"\"\"\n        :type board: List[str]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def pathsWithMaxScore(self, board: List[str]) -> List[int]:\n        ",
    "c": "\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* pathsWithMaxScore(char ** board, int boardSize, int* returnSize){\n\n}",
    "csharp": "public class Solution {\n    public int[] PathsWithMaxScore(IList<string> board) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string[]} board\n * @return {number[]}\n */\nvar pathsWithMaxScore = function(board) {\n    \n};",
    "typescript": "function pathsWithMaxScore(board: string[]): number[] {\n\n};",
    "php": "class Solution {\n\n    /**\n     * @param String[] $board\n     * @return Integer[]\n     */\n    function pathsWithMaxScore($board) {\n        \n    }\n}",
    "swift": "class Solution {\n    func pathsWithMaxScore(_ board: [String]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun pathsWithMaxScore(board: List<String>): IntArray {\n        \n    }\n}",
    "golang": "func pathsWithMaxScore(board []string) []int {\n    \n}",
    "ruby": "# @param {String[]} board\n# @return {Integer[]}\ndef paths_with_max_score(board)\n    \nend",
    "scala": "object Solution {\n    def pathsWithMaxScore(board: List[String]): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn paths_with_max_score(board: Vec<String>) -> Vec<i32> {\n        \n    }\n}"
  }
}
{
  "title": "K-Concatenation Maximum Sum",
  "problem_id": "1299",
  "frontend_id": "1191",
  "difficulty": "Medium",
  "problem_slug": "k-concatenation-maximum-sum",
  "topics": [
    "Array",
    "Dynamic Programming"
  ],
  "description": "Given an integer array arr and an integer k, modify the array by repeating it k times.\nFor example, if arr = [1, 2] and k = 3 then the modified array will be [1, 2, 1, 2, 1, 2].\nReturn the maximum sub-array sum in the modified array. Note that the length of the sub-array can be 0 and its sum in that case is 0.\nAs the answer can be very large, return the answer modulo 109 + 7.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: arr = [1,2], k = 3\nOutput: 9",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: arr = [1,-2,1], k = 5\nOutput: 2",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: arr = [-1,-2], k = 7\nOutput: 0",
      "images": []
    }
  ],
  "constraints": [
    "1 <= arr.length <= 105",
    "1 <= k <= 105",
    "-104 <= arr[i] <= 104"
  ],
  "follow_ups": [],
  "hints": [
    "How to solve the problem for k=1 ?",
    "Use Kadane's algorithm for k=1.",
    "What are the possible cases for the answer ?",
    "The answer is the maximum between, the answer for k=1, the sum of the whole array multiplied by k, or the maximum suffix sum plus the maximum prefix sum plus (k-2) multiplied by the whole array sum for k > 1."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int kConcatenationMaxSum(vector<int>& arr, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int kConcatenationMaxSum(int[] arr, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def kConcatenationMaxSum(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def kConcatenationMaxSum(self, arr: List[int], k: int) -> int:\n        ",
    "c": "int kConcatenationMaxSum(int* arr, int arrSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int KConcatenationMaxSum(int[] arr, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} arr\n * @param {number} k\n * @return {number}\n */\nvar kConcatenationMaxSum = function(arr, k) {\n    \n};",
    "typescript": "function kConcatenationMaxSum(arr: number[], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @param Integer $k\n     * @return Integer\n     */\n    function kConcatenationMaxSum($arr, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func kConcatenationMaxSum(_ arr: [Int], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun kConcatenationMaxSum(arr: IntArray, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int kConcatenationMaxSum(List<int> arr, int k) {\n    \n  }\n}",
    "golang": "func kConcatenationMaxSum(arr []int, k int) int {\n    \n}",
    "ruby": "# @param {Integer[]} arr\n# @param {Integer} k\n# @return {Integer}\ndef k_concatenation_max_sum(arr, k)\n    \nend",
    "scala": "object Solution {\n    def kConcatenationMaxSum(arr: Array[Int], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn k_concatenation_max_sum(arr: Vec<i32>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (k-concatenation-max-sum arr k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec k_concatenation_max_sum(Arr :: [integer()], K :: integer()) -> integer().\nk_concatenation_max_sum(Arr, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec k_concatenation_max_sum(arr :: [integer], k :: integer) :: integer\n  def k_concatenation_max_sum(arr, k) do\n    \n  end\nend"
  }
}
{
  "title": "Apply Discount to Prices",
  "problem_id": "2373",
  "frontend_id": "2288",
  "difficulty": "Medium",
  "problem_slug": "apply-discount-to-prices",
  "topics": [
    "String"
  ],
  "description": "A sentence is a string of single-space separated words where each word can contain digits, lowercase letters, and the dollar sign '$'. A word represents a price if it is a sequence of digits preceded by a dollar sign.\nYou are given a string sentence representing a sentence and an integer discount. For each word representing a price, apply a discount of discount% on the price and update the word in the sentence. All updated prices should be represented with exactly two decimal places.\nReturn a string representing the modified sentence.\nNote that all prices will contain at most 10 digits.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: sentence = \"there are $1 $2 and 5$ candies in the shop\", discount = 50\nOutput: \"there are $0.50 $1.00 and 5$ candies in the shop\"\nExplanation: \nThe words which represent prices are \"$1\" and \"$2\". \n- A 50% discount on \"$1\" yields \"$0.50\", so \"$1\" is replaced by \"$0.50\".\n- A 50% discount on \"$2\" yields \"$1\". Since we need to have exactly 2 decimal places after a price, we replace \"$2\" with \"$1.00\".",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: sentence = \"1 2 $3 4 $5 $6 7 8$ $9 $10$\", discount = 100\nOutput: \"1 2 $0.00 4 $0.00 $0.00 7 8$ $0.00 $10$\"\nExplanation: \nApplying a 100% discount on any price will result in 0.\nThe words representing prices are \"$3\", \"$5\", \"$6\", and \"$9\".\nEach of them is replaced by \"$0.00\".",
      "images": []
    }
  ],
  "constraints": [
    "1 <= sentence.length <= 105",
    "sentence consists of lowercase English letters, digits, ' ', and '$'.",
    "sentence does not have leading or trailing spaces.",
    "All words in sentence are separated by a single space.",
    "All prices will be positive numbers without leading zeros.",
    "All prices will have at most 10 digits.",
    "0 <= discount <= 100"
  ],
  "follow_ups": [],
  "hints": [
    "Extract each word from the sentence and check if it represents a price.",
    "For each price, apply the given discount to it and update it."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string discountPrices(string sentence, int discount) {\n        \n    }\n};",
    "java": "class Solution {\n    public String discountPrices(String sentence, int discount) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def discountPrices(self, sentence, discount):\n        \"\"\"\n        :type sentence: str\n        :type discount: int\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def discountPrices(self, sentence: str, discount: int) -> str:\n        ",
    "c": "char* discountPrices(char* sentence, int discount) {\n    \n}",
    "csharp": "public class Solution {\n    public string DiscountPrices(string sentence, int discount) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} sentence\n * @param {number} discount\n * @return {string}\n */\nvar discountPrices = function(sentence, discount) {\n    \n};",
    "typescript": "function discountPrices(sentence: string, discount: number): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $sentence\n     * @param Integer $discount\n     * @return String\n     */\n    function discountPrices($sentence, $discount) {\n        \n    }\n}",
    "swift": "class Solution {\n    func discountPrices(_ sentence: String, _ discount: Int) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun discountPrices(sentence: String, discount: Int): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String discountPrices(String sentence, int discount) {\n    \n  }\n}",
    "golang": "func discountPrices(sentence string, discount int) string {\n    \n}",
    "ruby": "# @param {String} sentence\n# @param {Integer} discount\n# @return {String}\ndef discount_prices(sentence, discount)\n    \nend",
    "scala": "object Solution {\n    def discountPrices(sentence: String, discount: Int): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn discount_prices(sentence: String, discount: i32) -> String {\n        \n    }\n}",
    "racket": "(define/contract (discount-prices sentence discount)\n  (-> string? exact-integer? string?)\n  )",
    "erlang": "-spec discount_prices(Sentence :: unicode:unicode_binary(), Discount :: integer()) -> unicode:unicode_binary().\ndiscount_prices(Sentence, Discount) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec discount_prices(sentence :: String.t, discount :: integer) :: String.t\n  def discount_prices(sentence, discount) do\n    \n  end\nend"
  }
}
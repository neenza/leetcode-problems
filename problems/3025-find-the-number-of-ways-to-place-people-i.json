{
  "title": "Find the Number of Ways to Place People I",
  "problem_id": "3278",
  "frontend_id": "3025",
  "difficulty": "Medium",
  "problem_slug": "find-the-number-of-ways-to-place-people-i",
  "topics": [
    "Array",
    "Math",
    "Geometry",
    "Sorting",
    "Enumeration"
  ],
  "description": "You are given a 2D array points of size n x 2 representing integer coordinates of some points on a 2D plane, where points[i] = [xi, yi].\nCount the number of pairs of points (A, B), where\nReturn the count.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: points = [[1,1],[2,2],[3,3]]\nOutput: 0\nExplanation:\n\nThere is no way to choose A and B so A is on the upper left side of B .",
      "images": [
        "https://assets.leetcode.com/uploads/2024/01/04/example1alicebob.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: points = [[6,2],[4,4],[2,6]]\nOutput: 2\nExplanation:\n",
      "images": [
        "https://assets.leetcode.com/uploads/2024/06/25/t2.jpg"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: points = [[3,1],[1,3],[1,1]]\nOutput: 2\nExplanation:\n",
      "images": [
        "https://assets.leetcode.com/uploads/2024/06/25/t3.jpg"
      ]
    }
  ],
  "constraints": [
    "2 <= n <= 50",
    "points[i].length == 2",
    "0 <= points[i][0], points[i][1] <= 50",
    "All points[i] are distinct."
  ],
  "follow_ups": [],
  "hints": [
    "We can enumerate all the upper-left and lower-right corners.",
    "If the upper-left corner is <code>(x1, y1)</code> and lower-right corner is <code>(x2, y2)</code>, check that there is no point <code>(x, y)</code> such that <code>x1 <= x <= x2</code> and <code>y2 <= y <= y1</code>."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int numberOfPairs(vector<vector<int>>& points) {\n        \n    }\n};",
    "java": "class Solution {\n    public int numberOfPairs(int[][] points) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def numberOfPairs(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def numberOfPairs(self, points: List[List[int]]) -> int:\n        ",
    "c": "int numberOfPairs(int** points, int pointsSize, int* pointsColSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int NumberOfPairs(int[][] points) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[][]} points\n * @return {number}\n */\nvar numberOfPairs = function(points) {\n    \n};",
    "typescript": "function numberOfPairs(points: number[][]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function numberOfPairs($points) {\n        \n    }\n}",
    "swift": "class Solution {\n    func numberOfPairs(_ points: [[Int]]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun numberOfPairs(points: Array<IntArray>): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int numberOfPairs(List<List<int>> points) {\n    \n  }\n}",
    "golang": "func numberOfPairs(points [][]int) int {\n    \n}",
    "ruby": "# @param {Integer[][]} points\n# @return {Integer}\ndef number_of_pairs(points)\n    \nend",
    "scala": "object Solution {\n    def numberOfPairs(points: Array[Array[Int]]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn number_of_pairs(points: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (number-of-pairs points)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )",
    "erlang": "-spec number_of_pairs(Points :: [[integer()]]) -> integer().\nnumber_of_pairs(Points) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec number_of_pairs(points :: [[integer]]) :: integer\n  def number_of_pairs(points) do\n    \n  end\nend"
  }
}
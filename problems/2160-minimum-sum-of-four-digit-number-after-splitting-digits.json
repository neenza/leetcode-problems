{
  "title": "Minimum Sum of Four Digit Number After Splitting Digits",
  "problem_id": "2264",
  "frontend_id": "2160",
  "difficulty": "Easy",
  "problem_slug": "minimum-sum-of-four-digit-number-after-splitting-digits",
  "topics": [
    "Math",
    "Greedy",
    "Sorting"
  ],
  "description": "You are given a positive integer num consisting of exactly four digits. Split num into two new integers new1 and new2 by using the digits found in num. Leading zeros are allowed in new1 and new2, and all the digits found in num must be used.\nReturn the minimum possible sum of new1 and new2.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: num = 2932\nOutput: 52\nExplanation: Some possible pairs [new1, new2] are [29, 23], [223, 9], etc.\nThe minimum sum can be obtained by the pair [29, 23]: 29 + 23 = 52.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: num = 4009\nOutput: 13\nExplanation: Some possible pairs [new1, new2] are [0, 49], [490, 0], etc. \nThe minimum sum can be obtained by the pair [4, 9]: 4 + 9 = 13.",
      "images": []
    }
  ],
  "constraints": [
    "1000 <= num <= 9999"
  ],
  "follow_ups": [],
  "hints": [
    "Notice that the most optimal way to obtain the minimum possible sum using 4 digits is by summing up two 2-digit numbers.",
    "We can use the two smallest digits out of the four as the digits found in the tens place respectively.",
    "Similarly, we use the final 2 larger digits as the digits found in the ones place."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minimumSum(int num) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minimumSum(int num) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minimumSum(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minimumSum(self, num: int) -> int:\n        ",
    "c": "int minimumSum(int num) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinimumSum(int num) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} num\n * @return {number}\n */\nvar minimumSum = function(num) {\n    \n};",
    "typescript": "function minimumSum(num: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $num\n     * @return Integer\n     */\n    function minimumSum($num) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minimumSum(_ num: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minimumSum(num: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minimumSum(int num) {\n    \n  }\n}",
    "golang": "func minimumSum(num int) int {\n    \n}",
    "ruby": "# @param {Integer} num\n# @return {Integer}\ndef minimum_sum(num)\n    \nend",
    "scala": "object Solution {\n    def minimumSum(num: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn minimum_sum(num: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (minimum-sum num)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec minimum_sum(Num :: integer()) -> integer().\nminimum_sum(Num) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec minimum_sum(num :: integer) :: integer\n  def minimum_sum(num) do\n    \n  end\nend"
  }
}
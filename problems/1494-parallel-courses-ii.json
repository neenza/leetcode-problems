{
  "title": "Parallel Courses II",
  "problem_id": "1587",
  "frontend_id": "1494",
  "difficulty": "Hard",
  "problem_slug": "parallel-courses-ii",
  "topics": [
    "Dynamic Programming",
    "Bit Manipulation",
    "Graph",
    "Bitmask"
  ],
  "description": "You are given an integer n, which indicates that there are n courses labeled from 1 to n. You are also given an array relations where relations[i] = [prevCoursei, nextCoursei], representing a prerequisite relationship between course prevCoursei and course nextCoursei: course prevCoursei has to be taken before course nextCoursei. Also, you are given the integer k.\nIn one semester, you can take at most k courses as long as you have taken all the prerequisites in the previous semesters for the courses you are taking.\nReturn the minimum number of semesters needed to take all courses. The testcases will be generated such that it is possible to take every course.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 4, relations = [[2,1],[3,1],[1,4]], k = 2\nOutput: 3\nExplanation: The figure above represents the given graph.\nIn the first semester, you can take courses 2 and 3.\nIn the second semester, you can take course 1.\nIn the third semester, you can take course 4.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/05/22/leetcode_parallel_courses_1.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 5, relations = [[2,1],[3,1],[4,1],[1,5]], k = 2\nOutput: 4\nExplanation: The figure above represents the given graph.\nIn the first semester, you can only take courses 2 and 3 since you cannot take more than two per semester.\nIn the second semester, you can take course 4.\nIn the third semester, you can take course 1.\nIn the fourth semester, you can take course 5.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/05/22/leetcode_parallel_courses_2.png"
      ]
    }
  ],
  "constraints": [
    "1 <= n <= 15",
    "1 <= k <= n",
    "0 <= relations.length <= n * (n-1) / 2",
    "relations[i].length == 2",
    "1 <= prevCoursei, nextCoursei <= n",
    "prevCoursei != nextCoursei",
    "All the pairs [prevCoursei, nextCoursei] are unique.",
    "The given graph is a directed acyclic graph."
  ],
  "follow_ups": [],
  "hints": [
    "Use backtracking with states (bitmask, degrees) where bitmask represents the set of courses, if the ith bit is 1 then the ith course was taken, otherwise, you can take the ith course. Degrees represent the degree for each course (nodes in the graph).",
    "Note that you can only take nodes (courses) with degree = 0 and it is optimal at every step in the backtracking take the maximum number of courses limited by k."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minNumberOfSemesters(int n, vector<vector<int>>& relations, int k) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minNumberOfSemesters(int n, int[][] relations, int k) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minNumberOfSemesters(self, n, relations, k):\n        \"\"\"\n        :type n: int\n        :type relations: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minNumberOfSemesters(self, n: int, relations: List[List[int]], k: int) -> int:\n        ",
    "c": "int minNumberOfSemesters(int n, int** relations, int relationsSize, int* relationsColSize, int k) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinNumberOfSemesters(int n, int[][] relations, int k) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @param {number[][]} relations\n * @param {number} k\n * @return {number}\n */\nvar minNumberOfSemesters = function(n, relations, k) {\n    \n};",
    "typescript": "function minNumberOfSemesters(n: number, relations: number[][], k: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $relations\n     * @param Integer $k\n     * @return Integer\n     */\n    function minNumberOfSemesters($n, $relations, $k) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minNumberOfSemesters(_ n: Int, _ relations: [[Int]], _ k: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minNumberOfSemesters(n: Int, relations: Array<IntArray>, k: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minNumberOfSemesters(int n, List<List<int>> relations, int k) {\n    \n  }\n}",
    "golang": "func minNumberOfSemesters(n int, relations [][]int, k int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @param {Integer[][]} relations\n# @param {Integer} k\n# @return {Integer}\ndef min_number_of_semesters(n, relations, k)\n    \nend",
    "scala": "object Solution {\n    def minNumberOfSemesters(n: Int, relations: Array[Array[Int]], k: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_number_of_semesters(n: i32, relations: Vec<Vec<i32>>, k: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-number-of-semesters n relations k)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )",
    "erlang": "-spec min_number_of_semesters(N :: integer(), Relations :: [[integer()]], K :: integer()) -> integer().\nmin_number_of_semesters(N, Relations, K) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_number_of_semesters(n :: integer, relations :: [[integer]], k :: integer) :: integer\n  def min_number_of_semesters(n, relations, k) do\n    \n  end\nend"
  }
}
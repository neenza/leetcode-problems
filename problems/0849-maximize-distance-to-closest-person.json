{
  "title": "Maximize Distance to Closest Person",
  "problem_id": "879",
  "frontend_id": "849",
  "difficulty": "Medium",
  "problem_slug": "maximize-distance-to-closest-person",
  "topics": [
    "Array"
  ],
  "description": "You are given an array representing a row of seats where seats[i] = 1 represents a person sitting in the ith seat, and seats[i] = 0 represents that the ith seat is empty (0-indexed).\nThere is at least one empty seat, and at least one person sitting.\nAlex wants to sit in the seat such that the distance between him and the closest person to him is maximized.\nReturn that maximum distance to the closest person.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: seats = [1,0,0,0,1,0,1]\nOutput: 2\nExplanation: \nIf Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2.\nIf Alex sits in any other open seat, the closest person has distance 1.\nThus, the maximum distance to the closest person is 2.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/09/10/distance.jpg"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: seats = [1,0,0,0]\nOutput: 3\nExplanation: \nIf Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away.\nThis is the maximum distance possible, so the answer is 3.",
      "images": [
        "https://assets.leetcode.com/uploads/2020/09/10/distance.jpg"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: seats = [0,1]\nOutput: 1",
      "images": [
        "https://assets.leetcode.com/uploads/2020/09/10/distance.jpg"
      ]
    }
  ],
  "constraints": [
    "2 <= seats.length <= 2 * 104",
    "seats[i] is 0 or 1.",
    "At least one seat is empty.",
    "At least one seat is occupied."
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int maxDistToClosest(vector<int>& seats) {\n        \n    }\n};",
    "java": "class Solution {\n    public int maxDistToClosest(int[] seats) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def maxDistToClosest(self, seats):\n        \"\"\"\n        :type seats: List[int]\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def maxDistToClosest(self, seats: List[int]) -> int:\n        ",
    "c": "int maxDistToClosest(int* seats, int seatsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int MaxDistToClosest(int[] seats) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} seats\n * @return {number}\n */\nvar maxDistToClosest = function(seats) {\n    \n};",
    "typescript": "function maxDistToClosest(seats: number[]): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $seats\n     * @return Integer\n     */\n    function maxDistToClosest($seats) {\n        \n    }\n}",
    "swift": "class Solution {\n    func maxDistToClosest(_ seats: [Int]) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun maxDistToClosest(seats: IntArray): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int maxDistToClosest(List<int> seats) {\n    \n  }\n}",
    "golang": "func maxDistToClosest(seats []int) int {\n    \n}",
    "ruby": "# @param {Integer[]} seats\n# @return {Integer}\ndef max_dist_to_closest(seats)\n    \nend",
    "scala": "object Solution {\n    def maxDistToClosest(seats: Array[Int]): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn max_dist_to_closest(seats: Vec<i32>) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (max-dist-to-closest seats)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
    "erlang": "-spec max_dist_to_closest(Seats :: [integer()]) -> integer().\nmax_dist_to_closest(Seats) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec max_dist_to_closest(seats :: [integer]) :: integer\n  def max_dist_to_closest(seats) do\n    \n  end\nend"
  },
  "solution": "[TOC]\n\n---\n### Approach #1: Next Array [Accepted]\n\n**Intuition**\n\nLet `left[i]` be the distance from seat `i` to the closest person sitting to the left of `i`.  Similarly, let `right[i]` be the distance to the closest person sitting to the right of `i`.  This is motivated by the idea that the closest person in seat `i` sits a distance `min(left[i], right[i])` away.\n\n**Algorithm**\n\nTo construct `left[i]`, notice it is either `left[i-1] + 1` if the seat is empty, or `0` if it is full.  `right[i]` is constructed in a similar way.**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$, where $$N$$ is the length of `seats`.\n\n* Space Complexity:  $$O(N)$$, the space used by `left` and `right`.\n\n\n---\n### Approach #2: Two Pointer [Accepted]\n\n**Intuition**\n\nAs we iterate through seats, we'll update the closest person sitting to our left, and closest person sitting to our right.\n\n**Algorithm**\n\nKeep track of `prev`, the filled seat at or to the left of `i`, and `future`, the filled seat at or to the right of `i`.\n\nThen at seat `i`, the closest person is `min(i - prev, future - i)`, with one exception.  `i - prev` should be considered infinite if there is no person to the left of seat `i`, and similarly `future - i` is infinite if there is no one to the right of seat `i`.**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$, where $$N$$ is the length of `seats`.\n\n* Space Complexity:  $$O(1)$$.\n\n\n\n---\n### Approach #3: Group by Zero [Accepted]\n\n**Intuition**\n\nIn a group of `K` adjacent empty seats between two people, the answer is `(K+1) / 2`.\n\n**Algorithm**\n\nFor each group of `K` empty seats between two people, we can take into account the candidate answer `(K+1) / 2`.\n\nFor groups of empty seats between the edge of the row and one other person, the answer is `K`, and we should take into account those answers too.**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$, where $$N$$ is the length of `seats`.\n\n* Space Complexity:  $$O(1)$$."
}
{
  "title": "Partition Equal Subset Sum",
  "problem_id": "416",
  "frontend_id": "416",
  "difficulty": "Medium",
  "problem_slug": "partition-equal-subset-sum",
  "topics": [
    "Array",
    "Dynamic Programming"
  ],
  "description": "Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [1,5,11,5]\nOutput: true\nExplanation: The array can be partitioned as [1, 5, 5] and [11].",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,2,3,5]\nOutput: false\nExplanation: The array cannot be partitioned into equal sum subsets.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length <= 200",
    "1 <= nums[i] <= 100"
  ],
  "follow_ups": [],
  "hints": [],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    bool canPartition(vector<int>& nums) {\n        \n    }\n};",
    "java": "class Solution {\n    public boolean canPartition(int[] nums) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def canPartition(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        ",
    "c": "bool canPartition(int* nums, int numsSize) {\n    \n}",
    "csharp": "public class Solution {\n    public bool CanPartition(int[] nums) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canPartition = function(nums) {\n    \n};",
    "typescript": "function canPartition(nums: number[]): boolean {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canPartition($nums) {\n        \n    }\n}",
    "swift": "class Solution {\n    func canPartition(_ nums: [Int]) -> Bool {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun canPartition(nums: IntArray): Boolean {\n        \n    }\n}",
    "dart": "class Solution {\n  bool canPartition(List<int> nums) {\n    \n  }\n}",
    "golang": "func canPartition(nums []int) bool {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @return {Boolean}\ndef can_partition(nums)\n    \nend",
    "scala": "object Solution {\n    def canPartition(nums: Array[Int]): Boolean = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn can_partition(nums: Vec<i32>) -> bool {\n        \n    }\n}",
    "racket": "(define/contract (can-partition nums)\n  (-> (listof exact-integer?) boolean?)\n  )",
    "erlang": "-spec can_partition(Nums :: [integer()]) -> boolean().\ncan_partition(Nums) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec can_partition(nums :: [integer]) :: boolean\n  def can_partition(nums) do\n    \n  end\nend"
  }
}
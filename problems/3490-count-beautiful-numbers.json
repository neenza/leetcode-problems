{
  "title": "Count Beautiful Numbers",
  "problem_id": "3801",
  "frontend_id": "3490",
  "difficulty": "Hard",
  "problem_slug": "count-beautiful-numbers",
  "topics": [
    "Dynamic Programming"
  ],
  "description": "You are given two positive integers, l and r. A positive integer is called beautiful if the product of its digits is divisible by the sum of its digits.\nReturn the count of beautiful numbers between l and r, inclusive.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: l = 10, r = 20\nOutput: 2\nExplanation:\nThe beautiful numbers in the range are 10 and 20.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: l = 1, r = 15\nOutput: 10\nExplanation:\nThe beautiful numbers in the range are 1, 2, 3, 4, 5, 6, 7, 8, 9, and 10.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= l <= r < 109"
  ],
  "follow_ups": [],
  "hints": [
    "Use digit dynamic programming."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int beautifulNumbers(int l, int r) {\n        \n    }\n};",
    "java": "class Solution {\n    public int beautifulNumbers(int l, int r) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def beautifulNumbers(self, l, r):\n        \"\"\"\n        :type l: int\n        :type r: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def beautifulNumbers(self, l: int, r: int) -> int:\n        ",
    "c": "int beautifulNumbers(int l, int r) {\n    \n}",
    "csharp": "public class Solution {\n    public int BeautifulNumbers(int l, int r) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} l\n * @param {number} r\n * @return {number}\n */\nvar beautifulNumbers = function(l, r) {\n    \n};",
    "typescript": "function beautifulNumbers(l: number, r: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $l\n     * @param Integer $r\n     * @return Integer\n     */\n    function beautifulNumbers($l, $r) {\n        \n    }\n}",
    "swift": "class Solution {\n    func beautifulNumbers(_ l: Int, _ r: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun beautifulNumbers(l: Int, r: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int beautifulNumbers(int l, int r) {\n    \n  }\n}",
    "golang": "func beautifulNumbers(l int, r int) int {\n    \n}",
    "ruby": "# @param {Integer} l\n# @param {Integer} r\n# @return {Integer}\ndef beautiful_numbers(l, r)\n    \nend",
    "scala": "object Solution {\n    def beautifulNumbers(l: Int, r: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn beautiful_numbers(l: i32, r: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (beautiful-numbers l r)\n  (-> exact-integer? exact-integer? exact-integer?)\n  )",
    "erlang": "-spec beautiful_numbers(L :: integer(), R :: integer()) -> integer().\nbeautiful_numbers(L, R) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec beautiful_numbers(l :: integer, r :: integer) :: integer\n  def beautiful_numbers(l, r) do\n    \n  end\nend"
  }
}
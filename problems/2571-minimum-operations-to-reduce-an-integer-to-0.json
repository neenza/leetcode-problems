{
  "title": "Minimum Operations to Reduce an Integer to 0",
  "problem_id": "2710",
  "frontend_id": "2571",
  "difficulty": "Medium",
  "problem_slug": "minimum-operations-to-reduce-an-integer-to-0",
  "topics": [
    "Dynamic Programming",
    "Greedy",
    "Bit Manipulation"
  ],
  "description": "You are given a positive integer n, you can do the following operation any number of times:\nReturn the minimum number of operations to make n equal to 0.\nA number x is power of 2 if x == 2i where i >= 0.\nExample 1:\nExample 2:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: n = 39\nOutput: 3\nExplanation: We can do the following operations:\n- Add 20 = 1 to n, so now n = 40.\n- Subtract 23 = 8 from n, so now n = 32.\n- Subtract 25 = 32 from n, so now n = 0.\nIt can be shown that 3 is the minimum number of operations we need to make n equal to 0.",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: n = 54\nOutput: 3\nExplanation: We can do the following operations:\n- Add 21 = 2 to n, so now n = 56.\n- Add 23 = 8 to n, so now n = 64.\n- Subtract 26 = 64 from n, so now n = 0.\nSo the minimum number of operations is 3.",
      "images": []
    }
  ],
  "constraints": [
    "1 <= n <= 105"
  ],
  "follow_ups": [],
  "hints": [
    "Can we set/unset the bits in binary representation?",
    "If there are multiple adjacent ones, how can we optimally add and subtract in 2 operations such that all ones get unset?",
    "Bonus: Try to solve the problem with higher constraints: n ≤ 10^18."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    int minOperations(int n) {\n        \n    }\n};",
    "java": "class Solution {\n    public int minOperations(int n) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def minOperations(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def minOperations(self, n: int) -> int:\n        ",
    "c": "int minOperations(int n) {\n    \n}",
    "csharp": "public class Solution {\n    public int MinOperations(int n) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number} n\n * @return {number}\n */\nvar minOperations = function(n) {\n    \n};",
    "typescript": "function minOperations(n: number): number {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function minOperations($n) {\n        \n    }\n}",
    "swift": "class Solution {\n    func minOperations(_ n: Int) -> Int {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun minOperations(n: Int): Int {\n        \n    }\n}",
    "dart": "class Solution {\n  int minOperations(int n) {\n    \n  }\n}",
    "golang": "func minOperations(n int) int {\n    \n}",
    "ruby": "# @param {Integer} n\n# @return {Integer}\ndef min_operations(n)\n    \nend",
    "scala": "object Solution {\n    def minOperations(n: Int): Int = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn min_operations(n: i32) -> i32 {\n        \n    }\n}",
    "racket": "(define/contract (min-operations n)\n  (-> exact-integer? exact-integer?)\n  )",
    "erlang": "-spec min_operations(N :: integer()) -> integer().\nmin_operations(N) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec min_operations(n :: integer) :: integer\n  def min_operations(n) do\n    \n  end\nend"
  }
}
{
  "title": "Decode the Slanted Ciphertext",
  "problem_id": "2197",
  "frontend_id": "2075",
  "difficulty": "Medium",
  "problem_slug": "decode-the-slanted-ciphertext",
  "topics": [
    "String",
    "Simulation"
  ],
  "description": "A string originalText is encoded using a slanted transposition cipher to a string encodedText with the help of a matrix having a fixed number of rows rows.\noriginalText is placed first in a top-left to bottom-right manner.\nThe blue cells are filled first, followed by the red cells, then the yellow cells, and so on, until we reach the end of originalText. The arrow indicates the order in which the cells are filled. All empty cells are filled with ' '. The number of columns is chosen such that the rightmost column will not be empty after filling in originalText.\nencodedText is then formed by appending all characters of the matrix in a row-wise fashion.\nThe characters in the blue cells are appended first to encodedText, then the red cells, and so on, and finally the yellow cells. The arrow indicates the order in which the cells are accessed.\nFor example, if originalText = \"cipher\" and rows = 3, then we encode it in the following manner:\nThe blue arrows depict how originalText is placed in the matrix, and the red arrows denote the order in which encodedText is formed. In the above example, encodedText = \"ch ie pr\".\nGiven the encoded string encodedText and number of rows rows, return the original string originalText.\nNote: originalText does not have any trailing spaces ' '. The test cases are generated such that there is only one possible originalText.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: encodedText = \"ch   ie   pr\", rows = 3\nOutput: \"cipher\"\nExplanation: This is the same example described in the problem description.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/10/25/desc2.png"
      ]
    },
    {
      "example_num": 2,
      "example_text": "Input: encodedText = \"iveo    eed   l te   olc\", rows = 4\nOutput: \"i love leetcode\"\nExplanation: The figure above denotes the matrix that was used to encode originalText. \nThe blue arrows show how we can find originalText from encodedText.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/10/26/exam1.png"
      ]
    },
    {
      "example_num": 3,
      "example_text": "Input: encodedText = \"coding\", rows = 1\nOutput: \"coding\"\nExplanation: Since there is only 1 row, both originalText and encodedText are the same.",
      "images": [
        "https://assets.leetcode.com/uploads/2021/10/26/eg2.png"
      ]
    }
  ],
  "constraints": [
    "0 <= encodedText.length <= 106",
    "encodedText consists of lowercase English letters and ' ' only.",
    "encodedText is a valid encoding of some originalText that does not have trailing spaces.",
    "1 <= rows <= 1000",
    "The testcases are generated such that there is only one possible originalText."
  ],
  "follow_ups": [],
  "hints": [
    "How can you use rows and encodedText to find the number of columns of the matrix?",
    "Once you have the number of rows and columns, you can create the matrix and place encodedText in it. How should you place it in the matrix?",
    "How should you traverse the matrix to \"decode\" originalText?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string decodeCiphertext(string encodedText, int rows) {\n        \n    }\n};",
    "java": "class Solution {\n    public String decodeCiphertext(String encodedText, int rows) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def decodeCiphertext(self, encodedText, rows):\n        \"\"\"\n        :type encodedText: str\n        :type rows: int\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def decodeCiphertext(self, encodedText: str, rows: int) -> str:\n        ",
    "c": "char* decodeCiphertext(char* encodedText, int rows) {\n    \n}",
    "csharp": "public class Solution {\n    public string DecodeCiphertext(string encodedText, int rows) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} encodedText\n * @param {number} rows\n * @return {string}\n */\nvar decodeCiphertext = function(encodedText, rows) {\n    \n};",
    "typescript": "function decodeCiphertext(encodedText: string, rows: number): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $encodedText\n     * @param Integer $rows\n     * @return String\n     */\n    function decodeCiphertext($encodedText, $rows) {\n        \n    }\n}",
    "swift": "class Solution {\n    func decodeCiphertext(_ encodedText: String, _ rows: Int) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun decodeCiphertext(encodedText: String, rows: Int): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String decodeCiphertext(String encodedText, int rows) {\n    \n  }\n}",
    "golang": "func decodeCiphertext(encodedText string, rows int) string {\n    \n}",
    "ruby": "# @param {String} encoded_text\n# @param {Integer} rows\n# @return {String}\ndef decode_ciphertext(encoded_text, rows)\n    \nend",
    "scala": "object Solution {\n    def decodeCiphertext(encodedText: String, rows: Int): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn decode_ciphertext(encoded_text: String, rows: i32) -> String {\n        \n    }\n}",
    "racket": "(define/contract (decode-ciphertext encodedText rows)\n  (-> string? exact-integer? string?)\n  )",
    "erlang": "-spec decode_ciphertext(EncodedText :: unicode:unicode_binary(), Rows :: integer()) -> unicode:unicode_binary().\ndecode_ciphertext(EncodedText, Rows) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec decode_ciphertext(encoded_text :: String.t, rows :: integer) :: String.t\n  def decode_ciphertext(encoded_text, rows) do\n    \n  end\nend"
  }
}
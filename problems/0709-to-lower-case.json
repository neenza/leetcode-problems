{
  "title": "To Lower Case",
  "problem_id": "742",
  "frontend_id": "709",
  "difficulty": "Easy",
  "problem_slug": "to-lower-case",
  "topics": [
    "String"
  ],
  "description": "Given a string s, return the string after replacing every uppercase letter with the same lowercase letter.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: s = \"Hello\"\nOutput: \"hello\"",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: s = \"here\"\nOutput: \"here\"",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: s = \"LOVELY\"\nOutput: \"lovely\"",
      "images": []
    }
  ],
  "constraints": [
    "1 <= s.length <= 100",
    "s consists of printable ASCII characters."
  ],
  "follow_ups": [],
  "hints": [
    "Most languages support lowercase conversion for a string data type. However, that is certainly not the purpose of the problem. Think about how the implementation of the lowercase function call can be done easily.",
    "<b>Think ASCII!</b>",
    "Think about the different capital letters and their ASCII codes and how that relates to their lowercase counterparts. Does there seem to be any pattern there? Any mathematical relationship that we can use?"
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    string toLowerCase(string s) {\n        \n    }\n};",
    "java": "class Solution {\n    public String toLowerCase(String s) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def toLowerCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def toLowerCase(self, s: str) -> str:\n        ",
    "c": "char* toLowerCase(char* s) {\n    \n}",
    "csharp": "public class Solution {\n    public string ToLowerCase(string s) {\n        \n    }\n}",
    "javascript": "/**\n * @param {string} s\n * @return {string}\n */\nvar toLowerCase = function(s) {\n    \n};",
    "typescript": "function toLowerCase(s: string): string {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function toLowerCase($s) {\n        \n    }\n}",
    "swift": "class Solution {\n    func toLowerCase(_ s: String) -> String {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun toLowerCase(s: String): String {\n        \n    }\n}",
    "dart": "class Solution {\n  String toLowerCase(String s) {\n    \n  }\n}",
    "golang": "func toLowerCase(s string) string {\n    \n}",
    "ruby": "# @param {String} s\n# @return {String}\ndef to_lower_case(s)\n    \nend",
    "scala": "object Solution {\n    def toLowerCase(s: String): String = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn to_lower_case(s: String) -> String {\n        \n    }\n}",
    "racket": "(define/contract (to-lower-case s)\n  (-> string? string?)\n  )",
    "erlang": "-spec to_lower_case(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nto_lower_case(S) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec to_lower_case(s :: String.t) :: String.t\n  def to_lower_case(s) do\n    \n  end\nend"
  }
}
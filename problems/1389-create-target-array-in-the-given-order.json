{
  "title": "Create Target Array in the Given Order",
  "problem_id": "1505",
  "frontend_id": "1389",
  "difficulty": "Easy",
  "problem_slug": "create-target-array-in-the-given-order",
  "topics": [
    "Array",
    "Simulation"
  ],
  "description": "Given two arrays of integersÂ nums and index. Your task is to create target array under the following rules:\nReturn the target array.\nIt is guaranteed that the insertion operations will be valid.\nExample 1:\nExample 2:\nExample 3:\nConstraints:",
  "examples": [
    {
      "example_num": 1,
      "example_text": "Input: nums = [0,1,2,3,4], index = [0,1,2,2,1]\nOutput: [0,4,1,3,2]\nExplanation:\nnums       index     target\n0            0        [0]\n1            1        [0,1]\n2            2        [0,1,2]\n3            2        [0,1,3,2]\n4            1        [0,4,1,3,2]",
      "images": []
    },
    {
      "example_num": 2,
      "example_text": "Input: nums = [1,2,3,4,0], index = [0,1,2,3,0]\nOutput: [0,1,2,3,4]\nExplanation:\nnums       index     target\n1            0        [1]\n2            1        [1,2]\n3            2        [1,2,3]\n4            3        [1,2,3,4]\n0            0        [0,1,2,3,4]",
      "images": []
    },
    {
      "example_num": 3,
      "example_text": "Input: nums = [1], index = [0]\nOutput: [1]",
      "images": []
    }
  ],
  "constraints": [
    "1 <= nums.length, index.length <= 100",
    "nums.length == index.length",
    "0 <= nums[i] <= 100",
    "0 <= index[i] <= i"
  ],
  "follow_ups": [],
  "hints": [
    "Simulate the process and fill corresponding numbers in the designated spots."
  ],
  "code_snippets": {
    "cpp": "class Solution {\npublic:\n    vector<int> createTargetArray(vector<int>& nums, vector<int>& index) {\n        \n    }\n};",
    "java": "class Solution {\n    public int[] createTargetArray(int[] nums, int[] index) {\n        \n    }\n}",
    "python": "class Solution(object):\n    def createTargetArray(self, nums, index):\n        \"\"\"\n        :type nums: List[int]\n        :type index: List[int]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "python3": "class Solution:\n    def createTargetArray(self, nums: List[int], index: List[int]) -> List[int]:\n        ",
    "c": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* createTargetArray(int* nums, int numsSize, int* index, int indexSize, int* returnSize) {\n    \n}",
    "csharp": "public class Solution {\n    public int[] CreateTargetArray(int[] nums, int[] index) {\n        \n    }\n}",
    "javascript": "/**\n * @param {number[]} nums\n * @param {number[]} index\n * @return {number[]}\n */\nvar createTargetArray = function(nums, index) {\n    \n};",
    "typescript": "function createTargetArray(nums: number[], index: number[]): number[] {\n    \n};",
    "php": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $index\n     * @return Integer[]\n     */\n    function createTargetArray($nums, $index) {\n        \n    }\n}",
    "swift": "class Solution {\n    func createTargetArray(_ nums: [Int], _ index: [Int]) -> [Int] {\n        \n    }\n}",
    "kotlin": "class Solution {\n    fun createTargetArray(nums: IntArray, index: IntArray): IntArray {\n        \n    }\n}",
    "dart": "class Solution {\n  List<int> createTargetArray(List<int> nums, List<int> index) {\n    \n  }\n}",
    "golang": "func createTargetArray(nums []int, index []int) []int {\n    \n}",
    "ruby": "# @param {Integer[]} nums\n# @param {Integer[]} index\n# @return {Integer[]}\ndef create_target_array(nums, index)\n    \nend",
    "scala": "object Solution {\n    def createTargetArray(nums: Array[Int], index: Array[Int]): Array[Int] = {\n        \n    }\n}",
    "rust": "impl Solution {\n    pub fn create_target_array(nums: Vec<i32>, index: Vec<i32>) -> Vec<i32> {\n        \n    }\n}",
    "racket": "(define/contract (create-target-array nums index)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  )",
    "erlang": "-spec create_target_array(Nums :: [integer()], Index :: [integer()]) -> [integer()].\ncreate_target_array(Nums, Index) ->\n  .",
    "elixir": "defmodule Solution do\n  @spec create_target_array(nums :: [integer], index :: [integer]) :: [integer]\n  def create_target_array(nums, index) do\n    \n  end\nend"
  }
}